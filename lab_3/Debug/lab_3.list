
lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b3c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08007d00  08007d00  00017d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008150  08008150  0002121c  2**0
                  CONTENTS
  4 .ARM          00000000  08008150  08008150  0002121c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008150  08008150  0002121c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008150  08008150  00018150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008154  08008154  00018154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000121c  20000000  08008158  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000121c  08009374  0002121c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012d4  08009374  000212d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002121c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b04f  00000000  00000000  0002124c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c7b  00000000  00000000  0002c29b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002df18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002e9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bfa4  00000000  00000000  0002f380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3d7  00000000  00000000  0005b324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f90f  00000000  00000000  000676fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017700a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dac  00000000  00000000  0017705c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000121c 	.word	0x2000121c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007ce4 	.word	0x08007ce4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20001220 	.word	0x20001220
 80001fc:	08007ce4 	.word	0x08007ce4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be2:	2003      	movs	r0, #3
 8000be4:	f001 f82a 	bl	8001c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000be8:	2000      	movs	r0, #0
 8000bea:	f000 f80d 	bl	8000c08 <HAL_InitTick>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d002      	beq.n	8000bfa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	71fb      	strb	r3, [r7, #7]
 8000bf8:	e001      	b.n	8000bfe <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bfa:	f003 fa59 	bl	80040b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_InitTick+0x6c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d023      	beq.n	8000c64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_InitTick+0x70>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_InitTick+0x6c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 f829 	bl	8001c8a <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10f      	bne.n	8000c5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d809      	bhi.n	8000c58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f001 f801 	bl	8001c52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_InitTick+0x74>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	e007      	b.n	8000c68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e004      	b.n	8000c68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	e001      	b.n	8000c68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000004 	.word	0x20000004
 8000c78:	20001048 	.word	0x20001048
 8000c7c:	20000000 	.word	0x20000000

08000c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000004 	.word	0x20000004
 8000ca4:	20001238 	.word	0x20001238

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20001238 	.word	0x20001238

08000cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc8:	f7ff ffee 	bl	8000ca8 <HAL_GetTick>
 8000ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd8:	d005      	beq.n	8000ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <HAL_Delay+0x44>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce6:	bf00      	nop
 8000ce8:	f7ff ffde 	bl	8000ca8 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d8f7      	bhi.n	8000ce8 <HAL_Delay+0x28>
  {
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000004 	.word	0x20000004

08000d08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	431a      	orrs	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	609a      	str	r2, [r3, #8]
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	431a      	orrs	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	609a      	str	r2, [r3, #8]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
 8000d7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3360      	adds	r3, #96	; 0x60
 8000d82:	461a      	mov	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <LL_ADC_SetOffset+0x44>)
 8000d92:	4013      	ands	r3, r2
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000da8:	bf00      	nop
 8000daa:	371c      	adds	r7, #28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	03fff000 	.word	0x03fff000

08000db8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3360      	adds	r3, #96	; 0x60
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	3360      	adds	r3, #96	; 0x60
 8000df4:	461a      	mov	r2, r3
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e0e:	bf00      	nop
 8000e10:	371c      	adds	r7, #28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	615a      	str	r2, [r3, #20]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b087      	sub	sp, #28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	3330      	adds	r3, #48	; 0x30
 8000e50:	461a      	mov	r2, r3
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	f003 030c 	and.w	r3, r3, #12
 8000e5c:	4413      	add	r3, r2
 8000e5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	f003 031f 	and.w	r3, r3, #31
 8000e6a:	211f      	movs	r1, #31
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	401a      	ands	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	0e9b      	lsrs	r3, r3, #26
 8000e78:	f003 011f 	and.w	r1, r3, #31
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	f003 031f 	and.w	r3, r3, #31
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	431a      	orrs	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e8c:	bf00      	nop
 8000e8e:	371c      	adds	r7, #28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b087      	sub	sp, #28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	3314      	adds	r3, #20
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	0e5b      	lsrs	r3, r3, #25
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	4413      	add	r3, r2
 8000eb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	0d1b      	lsrs	r3, r3, #20
 8000ec0:	f003 031f 	and.w	r3, r3, #31
 8000ec4:	2107      	movs	r1, #7
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	401a      	ands	r2, r3
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	0d1b      	lsrs	r3, r3, #20
 8000ed2:	f003 031f 	and.w	r3, r3, #31
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8000edc:	431a      	orrs	r2, r3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ee2:	bf00      	nop
 8000ee4:	371c      	adds	r7, #28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0318 	and.w	r3, r3, #24
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f14:	40d9      	lsrs	r1, r3
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	400b      	ands	r3, r1
 8000f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	0007ffff 	.word	0x0007ffff

08000f38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	6093      	str	r3, [r2, #8]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f70:	d101      	bne.n	8000f76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000fc0:	d101      	bne.n	8000fc6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d101      	bne.n	8000fec <LL_ADC_IsEnabled+0x18>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <LL_ADC_IsEnabled+0x1a>
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	2b04      	cmp	r3, #4
 800100c:	d101      	bne.n	8001012 <LL_ADC_REG_IsConversionOngoing+0x18>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	2b08      	cmp	r3, #8
 8001032:	d101      	bne.n	8001038 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e12f      	b.n	80012c2 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106c:	2b00      	cmp	r3, #0
 800106e:	d109      	bne.n	8001084 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f003 f841 	bl	80040f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff67 	bl	8000f5c <LL_ADC_IsDeepPowerDownEnabled>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d004      	beq.n	800109e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff4d 	bl	8000f38 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff82 	bl	8000fac <LL_ADC_IsInternalRegulatorEnabled>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d115      	bne.n	80010da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff66 	bl	8000f84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010b8:	4b84      	ldr	r3, [pc, #528]	; (80012cc <HAL_ADC_Init+0x284>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	099b      	lsrs	r3, r3, #6
 80010be:	4a84      	ldr	r2, [pc, #528]	; (80012d0 <HAL_ADC_Init+0x288>)
 80010c0:	fba2 2303 	umull	r2, r3, r2, r3
 80010c4:	099b      	lsrs	r3, r3, #6
 80010c6:	3301      	adds	r3, #1
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010cc:	e002      	b.n	80010d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f9      	bne.n	80010ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff64 	bl	8000fac <LL_ADC_IsInternalRegulatorEnabled>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10d      	bne.n	8001106 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	f043 0210 	orr.w	r2, r3, #16
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fa:	f043 0201 	orr.w	r2, r3, #1
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff75 	bl	8000ffa <LL_ADC_REG_IsConversionOngoing>
 8001110:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	2b00      	cmp	r3, #0
 800111c:	f040 80c8 	bne.w	80012b0 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f040 80c4 	bne.w	80012b0 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001130:	f043 0202 	orr.w	r2, r3, #2
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff49 	bl	8000fd4 <LL_ADC_IsEnabled>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10b      	bne.n	8001160 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001148:	4862      	ldr	r0, [pc, #392]	; (80012d4 <HAL_ADC_Init+0x28c>)
 800114a:	f7ff ff43 	bl	8000fd4 <LL_ADC_IsEnabled>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d105      	bne.n	8001160 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	4619      	mov	r1, r3
 800115a:	485f      	ldr	r0, [pc, #380]	; (80012d8 <HAL_ADC_Init+0x290>)
 800115c:	f7ff fdd4 	bl	8000d08 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7e5b      	ldrb	r3, [r3, #25]
 8001164:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800116a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001170:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001176:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800117e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f893 3020 	ldrb.w	r3, [r3, #32]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d106      	bne.n	800119c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	3b01      	subs	r3, #1
 8001194:	045b      	lsls	r3, r3, #17
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d009      	beq.n	80011b8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	4b47      	ldr	r3, [pc, #284]	; (80012dc <HAL_ADC_Init+0x294>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	69b9      	ldr	r1, [r7, #24]
 80011c8:	430b      	orrs	r3, r1
 80011ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff12 	bl	8000ffa <LL_ADC_REG_IsConversionOngoing>
 80011d6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff1f 	bl	8001020 <LL_ADC_INJ_IsConversionOngoing>
 80011e2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d140      	bne.n	800126c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d13d      	bne.n	800126c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7e1b      	ldrb	r3, [r3, #24]
 80011f8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011fa:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001202:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001212:	f023 0306 	bic.w	r3, r3, #6
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	69b9      	ldr	r1, [r7, #24]
 800121c:	430b      	orrs	r3, r1
 800121e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001226:	2b01      	cmp	r3, #1
 8001228:	d118      	bne.n	800125c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001234:	f023 0304 	bic.w	r3, r3, #4
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001240:	4311      	orrs	r1, r2
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001246:	4311      	orrs	r1, r2
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800124c:	430a      	orrs	r2, r1
 800124e:	431a      	orrs	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f042 0201 	orr.w	r2, r2, #1
 8001258:	611a      	str	r2, [r3, #16]
 800125a:	e007      	b.n	800126c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	691a      	ldr	r2, [r3, #16]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0201 	bic.w	r2, r2, #1
 800126a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d10c      	bne.n	800128e <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f023 010f 	bic.w	r1, r3, #15
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	1e5a      	subs	r2, r3, #1
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	631a      	str	r2, [r3, #48]	; 0x30
 800128c:	e007      	b.n	800129e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 020f 	bic.w	r2, r2, #15
 800129c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a2:	f023 0303 	bic.w	r3, r3, #3
 80012a6:	f043 0201 	orr.w	r2, r3, #1
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	659a      	str	r2, [r3, #88]	; 0x58
 80012ae:	e007      	b.n	80012c0 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b4:	f043 0210 	orr.w	r2, r3, #16
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80012c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3720      	adds	r7, #32
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20001048 	.word	0x20001048
 80012d0:	053e2d63 	.word	0x053e2d63
 80012d4:	50040000 	.word	0x50040000
 80012d8:	50040300 	.word	0x50040300
 80012dc:	fff0c007 	.word	0xfff0c007

080012e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0b6      	sub	sp, #216	; 0xd8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d101      	bne.n	8001302 <HAL_ADC_ConfigChannel+0x22>
 80012fe:	2302      	movs	r3, #2
 8001300:	e3d5      	b.n	8001aae <HAL_ADC_ConfigChannel+0x7ce>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fe73 	bl	8000ffa <LL_ADC_REG_IsConversionOngoing>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	f040 83ba 	bne.w	8001a90 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b05      	cmp	r3, #5
 8001322:	d824      	bhi.n	800136e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	3b02      	subs	r3, #2
 800132a:	2b03      	cmp	r3, #3
 800132c:	d81b      	bhi.n	8001366 <HAL_ADC_ConfigChannel+0x86>
 800132e:	a201      	add	r2, pc, #4	; (adr r2, 8001334 <HAL_ADC_ConfigChannel+0x54>)
 8001330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001334:	08001345 	.word	0x08001345
 8001338:	0800134d 	.word	0x0800134d
 800133c:	08001355 	.word	0x08001355
 8001340:	0800135d 	.word	0x0800135d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	220c      	movs	r2, #12
 8001348:	605a      	str	r2, [r3, #4]
          break;
 800134a:	e011      	b.n	8001370 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	2212      	movs	r2, #18
 8001350:	605a      	str	r2, [r3, #4]
          break;
 8001352:	e00d      	b.n	8001370 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	2218      	movs	r2, #24
 8001358:	605a      	str	r2, [r3, #4]
          break;
 800135a:	e009      	b.n	8001370 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001362:	605a      	str	r2, [r3, #4]
          break;
 8001364:	e004      	b.n	8001370 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	2206      	movs	r2, #6
 800136a:	605a      	str	r2, [r3, #4]
          break;
 800136c:	e000      	b.n	8001370 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800136e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	6859      	ldr	r1, [r3, #4]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	f7ff fd5f 	bl	8000e40 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fe37 	bl	8000ffa <LL_ADC_REG_IsConversionOngoing>
 800138c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fe43 	bl	8001020 <LL_ADC_INJ_IsConversionOngoing>
 800139a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800139e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f040 81c1 	bne.w	800172a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f040 81bc 	bne.w	800172a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80013ba:	d10f      	bne.n	80013dc <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2200      	movs	r2, #0
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fd66 	bl	8000e98 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fd20 	bl	8000e1a <LL_ADC_SetSamplingTimeCommonConfig>
 80013da:	e00e      	b.n	80013fa <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	6819      	ldr	r1, [r3, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	461a      	mov	r2, r3
 80013ea:	f7ff fd55 	bl	8000e98 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fd10 	bl	8000e1a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	695a      	ldr	r2, [r3, #20]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	08db      	lsrs	r3, r3, #3
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	2b04      	cmp	r3, #4
 800141a:	d00a      	beq.n	8001432 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	6919      	ldr	r1, [r3, #16]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800142c:	f7ff fca0 	bl	8000d70 <LL_ADC_SetOffset>
 8001430:	e17b      	b.n	800172a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fcbd 	bl	8000db8 <LL_ADC_GetOffsetChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10a      	bne.n	800145e <HAL_ADC_ConfigChannel+0x17e>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fcb2 	bl	8000db8 <LL_ADC_GetOffsetChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	0e9b      	lsrs	r3, r3, #26
 8001458:	f003 021f 	and.w	r2, r3, #31
 800145c:	e01e      	b.n	800149c <HAL_ADC_ConfigChannel+0x1bc>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fca7 	bl	8000db8 <LL_ADC_GetOffsetChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001470:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001474:	fa93 f3a3 	rbit	r3, r3
 8001478:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800147c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001480:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001484:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800148c:	2320      	movs	r3, #32
 800148e:	e004      	b.n	800149a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001490:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001494:	fab3 f383 	clz	r3, r3
 8001498:	b2db      	uxtb	r3, r3
 800149a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d105      	bne.n	80014b4 <HAL_ADC_ConfigChannel+0x1d4>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	0e9b      	lsrs	r3, r3, #26
 80014ae:	f003 031f 	and.w	r3, r3, #31
 80014b2:	e018      	b.n	80014e6 <HAL_ADC_ConfigChannel+0x206>
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80014c0:	fa93 f3a3 	rbit	r3, r3
 80014c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80014c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80014d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80014d8:	2320      	movs	r3, #32
 80014da:	e004      	b.n	80014e6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80014dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80014e0:	fab3 f383 	clz	r3, r3
 80014e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d106      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fc76 	bl	8000de4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2101      	movs	r1, #1
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fc5a 	bl	8000db8 <LL_ADC_GetOffsetChannel>
 8001504:	4603      	mov	r3, r0
 8001506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10a      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x244>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2101      	movs	r1, #1
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fc4f 	bl	8000db8 <LL_ADC_GetOffsetChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	0e9b      	lsrs	r3, r3, #26
 800151e:	f003 021f 	and.w	r2, r3, #31
 8001522:	e01e      	b.n	8001562 <HAL_ADC_ConfigChannel+0x282>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2101      	movs	r1, #1
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fc44 	bl	8000db8 <LL_ADC_GetOffsetChannel>
 8001530:	4603      	mov	r3, r0
 8001532:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800153a:	fa93 f3a3 	rbit	r3, r3
 800153e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001546:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800154a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001552:	2320      	movs	r3, #32
 8001554:	e004      	b.n	8001560 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001556:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800155a:	fab3 f383 	clz	r3, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800156a:	2b00      	cmp	r3, #0
 800156c:	d105      	bne.n	800157a <HAL_ADC_ConfigChannel+0x29a>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	0e9b      	lsrs	r3, r3, #26
 8001574:	f003 031f 	and.w	r3, r3, #31
 8001578:	e018      	b.n	80015ac <HAL_ADC_ConfigChannel+0x2cc>
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001586:	fa93 f3a3 	rbit	r3, r3
 800158a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800158e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001592:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001596:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800159e:	2320      	movs	r3, #32
 80015a0:	e004      	b.n	80015ac <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80015a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015a6:	fab3 f383 	clz	r3, r3
 80015aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d106      	bne.n	80015be <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2200      	movs	r2, #0
 80015b6:	2101      	movs	r1, #1
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fc13 	bl	8000de4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2102      	movs	r1, #2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fbf7 	bl	8000db8 <LL_ADC_GetOffsetChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10a      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x30a>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2102      	movs	r1, #2
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fbec 	bl	8000db8 <LL_ADC_GetOffsetChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	0e9b      	lsrs	r3, r3, #26
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	e01e      	b.n	8001628 <HAL_ADC_ConfigChannel+0x348>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2102      	movs	r1, #2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fbe1 	bl	8000db8 <LL_ADC_GetOffsetChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001600:	fa93 f3a3 	rbit	r3, r3
 8001604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001608:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800160c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001610:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001618:	2320      	movs	r3, #32
 800161a:	e004      	b.n	8001626 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800161c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001620:	fab3 f383 	clz	r3, r3
 8001624:	b2db      	uxtb	r3, r3
 8001626:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001630:	2b00      	cmp	r3, #0
 8001632:	d105      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x360>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	0e9b      	lsrs	r3, r3, #26
 800163a:	f003 031f 	and.w	r3, r3, #31
 800163e:	e016      	b.n	800166e <HAL_ADC_ConfigChannel+0x38e>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001648:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800164c:	fa93 f3a3 	rbit	r3, r3
 8001650:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001652:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001654:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001658:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001660:	2320      	movs	r3, #32
 8001662:	e004      	b.n	800166e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001664:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001668:	fab3 f383 	clz	r3, r3
 800166c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800166e:	429a      	cmp	r2, r3
 8001670:	d106      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2200      	movs	r2, #0
 8001678:	2102      	movs	r1, #2
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fbb2 	bl	8000de4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2103      	movs	r1, #3
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fb96 	bl	8000db8 <LL_ADC_GetOffsetChannel>
 800168c:	4603      	mov	r3, r0
 800168e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10a      	bne.n	80016ac <HAL_ADC_ConfigChannel+0x3cc>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2103      	movs	r1, #3
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fb8b 	bl	8000db8 <LL_ADC_GetOffsetChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	0e9b      	lsrs	r3, r3, #26
 80016a6:	f003 021f 	and.w	r2, r3, #31
 80016aa:	e017      	b.n	80016dc <HAL_ADC_ConfigChannel+0x3fc>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2103      	movs	r1, #3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fb80 	bl	8000db8 <LL_ADC_GetOffsetChannel>
 80016b8:	4603      	mov	r3, r0
 80016ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016be:	fa93 f3a3 	rbit	r3, r3
 80016c2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80016c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016c6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80016c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80016ce:	2320      	movs	r3, #32
 80016d0:	e003      	b.n	80016da <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80016d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016d4:	fab3 f383 	clz	r3, r3
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d105      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x414>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0e9b      	lsrs	r3, r3, #26
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	e011      	b.n	8001718 <HAL_ADC_ConfigChannel+0x438>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016fc:	fa93 f3a3 	rbit	r3, r3
 8001700:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001704:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800170c:	2320      	movs	r3, #32
 800170e:	e003      	b.n	8001718 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001712:	fab3 f383 	clz	r3, r3
 8001716:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001718:	429a      	cmp	r2, r3
 800171a:	d106      	bne.n	800172a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2200      	movs	r2, #0
 8001722:	2103      	movs	r1, #3
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fb5d 	bl	8000de4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fc50 	bl	8000fd4 <LL_ADC_IsEnabled>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 8140 	bne.w	80019bc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	6819      	ldr	r1, [r3, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	461a      	mov	r2, r3
 800174a:	f7ff fbd1 	bl	8000ef0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	4a8f      	ldr	r2, [pc, #572]	; (8001990 <HAL_ADC_ConfigChannel+0x6b0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	f040 8131 	bne.w	80019bc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10b      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x4a2>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	0e9b      	lsrs	r3, r3, #26
 8001770:	3301      	adds	r3, #1
 8001772:	f003 031f 	and.w	r3, r3, #31
 8001776:	2b09      	cmp	r3, #9
 8001778:	bf94      	ite	ls
 800177a:	2301      	movls	r3, #1
 800177c:	2300      	movhi	r3, #0
 800177e:	b2db      	uxtb	r3, r3
 8001780:	e019      	b.n	80017b6 <HAL_ADC_ConfigChannel+0x4d6>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800178a:	fa93 f3a3 	rbit	r3, r3
 800178e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001792:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001794:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800179a:	2320      	movs	r3, #32
 800179c:	e003      	b.n	80017a6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800179e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017a0:	fab3 f383 	clz	r3, r3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	3301      	adds	r3, #1
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	2b09      	cmp	r3, #9
 80017ae:	bf94      	ite	ls
 80017b0:	2301      	movls	r3, #1
 80017b2:	2300      	movhi	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d079      	beq.n	80018ae <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d107      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x4f6>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	0e9b      	lsrs	r3, r3, #26
 80017cc:	3301      	adds	r3, #1
 80017ce:	069b      	lsls	r3, r3, #26
 80017d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017d4:	e015      	b.n	8001802 <HAL_ADC_ConfigChannel+0x522>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017de:	fa93 f3a3 	rbit	r3, r3
 80017e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80017e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80017e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80017ee:	2320      	movs	r3, #32
 80017f0:	e003      	b.n	80017fa <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80017f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f4:	fab3 f383 	clz	r3, r3
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	3301      	adds	r3, #1
 80017fc:	069b      	lsls	r3, r3, #26
 80017fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x542>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	0e9b      	lsrs	r3, r3, #26
 8001814:	3301      	adds	r3, #1
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	2101      	movs	r1, #1
 800181c:	fa01 f303 	lsl.w	r3, r1, r3
 8001820:	e017      	b.n	8001852 <HAL_ADC_ConfigChannel+0x572>
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800182a:	fa93 f3a3 	rbit	r3, r3
 800182e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001832:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800183a:	2320      	movs	r3, #32
 800183c:	e003      	b.n	8001846 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800183e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001840:	fab3 f383 	clz	r3, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	3301      	adds	r3, #1
 8001848:	f003 031f 	and.w	r3, r3, #31
 800184c:	2101      	movs	r1, #1
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	ea42 0103 	orr.w	r1, r2, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10a      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x598>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	0e9b      	lsrs	r3, r3, #26
 8001868:	3301      	adds	r3, #1
 800186a:	f003 021f 	and.w	r2, r3, #31
 800186e:	4613      	mov	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	4413      	add	r3, r2
 8001874:	051b      	lsls	r3, r3, #20
 8001876:	e018      	b.n	80018aa <HAL_ADC_ConfigChannel+0x5ca>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001880:	fa93 f3a3 	rbit	r3, r3
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001888:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800188a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001890:	2320      	movs	r3, #32
 8001892:	e003      	b.n	800189c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001896:	fab3 f383 	clz	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	3301      	adds	r3, #1
 800189e:	f003 021f 	and.w	r2, r3, #31
 80018a2:	4613      	mov	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018aa:	430b      	orrs	r3, r1
 80018ac:	e081      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d107      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x5ea>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	0e9b      	lsrs	r3, r3, #26
 80018c0:	3301      	adds	r3, #1
 80018c2:	069b      	lsls	r3, r3, #26
 80018c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018c8:	e015      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x616>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d2:	fa93 f3a3 	rbit	r3, r3
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80018d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018da:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80018dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80018e2:	2320      	movs	r3, #32
 80018e4:	e003      	b.n	80018ee <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80018e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e8:	fab3 f383 	clz	r3, r3
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	3301      	adds	r3, #1
 80018f0:	069b      	lsls	r3, r3, #26
 80018f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x636>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	0e9b      	lsrs	r3, r3, #26
 8001908:	3301      	adds	r3, #1
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	2101      	movs	r1, #1
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	e017      	b.n	8001946 <HAL_ADC_ConfigChannel+0x666>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	61fb      	str	r3, [r7, #28]
  return result;
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800192e:	2320      	movs	r3, #32
 8001930:	e003      	b.n	800193a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	fab3 f383 	clz	r3, r3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	3301      	adds	r3, #1
 800193c:	f003 031f 	and.w	r3, r3, #31
 8001940:	2101      	movs	r1, #1
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	ea42 0103 	orr.w	r1, r2, r3
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10d      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x692>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	0e9b      	lsrs	r3, r3, #26
 800195c:	3301      	adds	r3, #1
 800195e:	f003 021f 	and.w	r2, r3, #31
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	3b1e      	subs	r3, #30
 800196a:	051b      	lsls	r3, r3, #20
 800196c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001970:	e01e      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x6d0>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	613b      	str	r3, [r7, #16]
  return result;
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d104      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800198a:	2320      	movs	r3, #32
 800198c:	e006      	b.n	800199c <HAL_ADC_ConfigChannel+0x6bc>
 800198e:	bf00      	nop
 8001990:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fab3 f383 	clz	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	3301      	adds	r3, #1
 800199e:	f003 021f 	and.w	r2, r3, #31
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	3b1e      	subs	r3, #30
 80019aa:	051b      	lsls	r3, r3, #20
 80019ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019b0:	430b      	orrs	r3, r1
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	6892      	ldr	r2, [r2, #8]
 80019b6:	4619      	mov	r1, r3
 80019b8:	f7ff fa6e 	bl	8000e98 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b3d      	ldr	r3, [pc, #244]	; (8001ab8 <HAL_ADC_ConfigChannel+0x7d8>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d06c      	beq.n	8001aa2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019c8:	483c      	ldr	r0, [pc, #240]	; (8001abc <HAL_ADC_ConfigChannel+0x7dc>)
 80019ca:	f7ff f9c3 	bl	8000d54 <LL_ADC_GetCommonPathInternalCh>
 80019ce:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a3a      	ldr	r2, [pc, #232]	; (8001ac0 <HAL_ADC_ConfigChannel+0x7e0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d127      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d121      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a35      	ldr	r2, [pc, #212]	; (8001ac4 <HAL_ADC_ConfigChannel+0x7e4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d157      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019fa:	4619      	mov	r1, r3
 80019fc:	482f      	ldr	r0, [pc, #188]	; (8001abc <HAL_ADC_ConfigChannel+0x7dc>)
 80019fe:	f7ff f996 	bl	8000d2e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a02:	4b31      	ldr	r3, [pc, #196]	; (8001ac8 <HAL_ADC_ConfigChannel+0x7e8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	099b      	lsrs	r3, r3, #6
 8001a08:	4a30      	ldr	r2, [pc, #192]	; (8001acc <HAL_ADC_ConfigChannel+0x7ec>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	099b      	lsrs	r3, r3, #6
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a1c:	e002      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f9      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a2a:	e03a      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a27      	ldr	r2, [pc, #156]	; (8001ad0 <HAL_ADC_ConfigChannel+0x7f0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d113      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x77e>
 8001a36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10d      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a1f      	ldr	r2, [pc, #124]	; (8001ac4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d12a      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a54:	4619      	mov	r1, r3
 8001a56:	4819      	ldr	r0, [pc, #100]	; (8001abc <HAL_ADC_ConfigChannel+0x7dc>)
 8001a58:	f7ff f969 	bl	8000d2e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a5c:	e021      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <HAL_ADC_ConfigChannel+0x7f4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d11c      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d116      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d111      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a86:	4619      	mov	r1, r3
 8001a88:	480c      	ldr	r0, [pc, #48]	; (8001abc <HAL_ADC_ConfigChannel+0x7dc>)
 8001a8a:	f7ff f950 	bl	8000d2e <LL_ADC_SetCommonPathInternalCh>
 8001a8e:	e008      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a94:	f043 0220 	orr.w	r2, r3, #32
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001aaa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	37d8      	adds	r7, #216	; 0xd8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	80080000 	.word	0x80080000
 8001abc:	50040300 	.word	0x50040300
 8001ac0:	c7520000 	.word	0xc7520000
 8001ac4:	50040000 	.word	0x50040000
 8001ac8:	20001048 	.word	0x20001048
 8001acc:	053e2d63 	.word	0x053e2d63
 8001ad0:	cb840000 	.word	0xcb840000
 8001ad4:	80000001 	.word	0x80000001

08001ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <__NVIC_GetPriorityGrouping+0x18>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 0307 	and.w	r3, r3, #7
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	db0a      	blt.n	8001b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	490c      	ldr	r1, [pc, #48]	; (8001b88 <__NVIC_SetPriority+0x4c>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b64:	e00a      	b.n	8001b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4908      	ldr	r1, [pc, #32]	; (8001b8c <__NVIC_SetPriority+0x50>)
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	3b04      	subs	r3, #4
 8001b74:	0112      	lsls	r2, r2, #4
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	440b      	add	r3, r1
 8001b7a:	761a      	strb	r2, [r3, #24]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000e100 	.word	0xe000e100
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f1c3 0307 	rsb	r3, r3, #7
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	bf28      	it	cs
 8001bae:	2304      	movcs	r3, #4
 8001bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d902      	bls.n	8001bc0 <NVIC_EncodePriority+0x30>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3b03      	subs	r3, #3
 8001bbe:	e000      	b.n	8001bc2 <NVIC_EncodePriority+0x32>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	43d9      	mvns	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	4313      	orrs	r3, r2
         );
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3724      	adds	r7, #36	; 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c08:	d301      	bcc.n	8001c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00f      	b.n	8001c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <SysTick_Config+0x40>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c16:	210f      	movs	r1, #15
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f7ff ff8e 	bl	8001b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <SysTick_Config+0x40>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c26:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <SysTick_Config+0x40>)
 8001c28:	2207      	movs	r2, #7
 8001c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	e000e010 	.word	0xe000e010

08001c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff47 	bl	8001ad8 <__NVIC_SetPriorityGrouping>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c64:	f7ff ff5c 	bl	8001b20 <__NVIC_GetPriorityGrouping>
 8001c68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f7ff ff8e 	bl	8001b90 <NVIC_EncodePriority>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff5d 	bl	8001b3c <__NVIC_SetPriority>
}
 8001c82:	bf00      	nop
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ffb0 	bl	8001bf8 <SysTick_Config>
 8001c98:	4603      	mov	r3, r0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e014      	b.n	8001cde <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	791b      	ldrb	r3, [r3, #4]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d105      	bne.n	8001cca <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f002 fa5b 	bl	8004180 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2202      	movs	r2, #2
 8001cce:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b087      	sub	sp, #28
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d105      	bne.n	8001d10 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	3308      	adds	r3, #8
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	e004      	b.n	8001d1a <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	3314      	adds	r3, #20
 8001d18:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	795b      	ldrb	r3, [r3, #5]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_DAC_ConfigChannel+0x1c>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e12a      	b.n	8001fa2 <HAL_DAC_ConfigChannel+0x272>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2202      	movs	r2, #2
 8001d56:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d174      	bne.n	8001e4a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001d60:	f7fe ffa2 	bl	8000ca8 <HAL_GetTick>
 8001d64:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d134      	bne.n	8001dd6 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001d6c:	e011      	b.n	8001d92 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001d6e:	f7fe ff9b 	bl	8000ca8 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d90a      	bls.n	8001d92 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	f043 0208 	orr.w	r2, r3, #8
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e107      	b.n	8001fa2 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1e6      	bne.n	8001d6e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001da0:	2001      	movs	r0, #1
 8001da2:	f7fe ff8d 	bl	8000cc0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	69d2      	ldr	r2, [r2, #28]
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40
 8001db0:	e01e      	b.n	8001df0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001db2:	f7fe ff79 	bl	8000ca8 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d90a      	bls.n	8001dd6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	f043 0208 	orr.w	r2, r3, #8
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2203      	movs	r2, #3
 8001dd0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e0e5      	b.n	8001fa2 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	dbe8      	blt.n	8001db2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001de0:	2001      	movs	r0, #1
 8001de2:	f7fe ff6d 	bl	8000cc0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	69d2      	ldr	r2, [r2, #28]
 8001dee:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001e00:	fa01 f303 	lsl.w	r3, r1, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	ea02 0103 	and.w	r1, r2, r3
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	6a1a      	ldr	r2, [r3, #32]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	409a      	lsls	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	21ff      	movs	r1, #255	; 0xff
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	ea02 0103 	and.w	r1, r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	409a      	lsls	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d11d      	bne.n	8001e8e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e58:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	221f      	movs	r2, #31
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69fa      	ldr	r2, [r7, #28]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e94:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69fa      	ldr	r2, [r7, #28]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69fa      	ldr	r2, [r7, #28]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6819      	ldr	r1, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43da      	mvns	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69fa      	ldr	r2, [r7, #28]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f32:	d104      	bne.n	8001f3e <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	e018      	b.n	8001f70 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d104      	bne.n	8001f50 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	e00f      	b.n	8001f70 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001f50:	f001 f87c 	bl	800304c <HAL_RCC_GetHCLKFreq>
 8001f54:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4a14      	ldr	r2, [pc, #80]	; (8001fac <HAL_DAC_ConfigChannel+0x27c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d904      	bls.n	8001f68 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	e003      	b.n	8001f70 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001f6e:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6819      	ldr	r1, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	22c0      	movs	r2, #192	; 0xc0
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	400a      	ands	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2201      	movs	r2, #1
 8001f98:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3720      	adds	r7, #32
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	04c4b400 	.word	0x04c4b400

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbe:	e166      	b.n	800228e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 8158 	beq.w	8002288 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d005      	beq.n	8001ff0 <HAL_GPIO_Init+0x40>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d130      	bne.n	8002052 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002026:	2201      	movs	r2, #1
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	f003 0201 	and.w	r2, r3, #1
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b03      	cmp	r3, #3
 800205c:	d017      	beq.n	800208e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d123      	bne.n	80020e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	08da      	lsrs	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3208      	adds	r2, #8
 80020a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	220f      	movs	r2, #15
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	08da      	lsrs	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3208      	adds	r2, #8
 80020dc:	6939      	ldr	r1, [r7, #16]
 80020de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0203 	and.w	r2, r3, #3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 80b2 	beq.w	8002288 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002124:	4b61      	ldr	r3, [pc, #388]	; (80022ac <HAL_GPIO_Init+0x2fc>)
 8002126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002128:	4a60      	ldr	r2, [pc, #384]	; (80022ac <HAL_GPIO_Init+0x2fc>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6613      	str	r3, [r2, #96]	; 0x60
 8002130:	4b5e      	ldr	r3, [pc, #376]	; (80022ac <HAL_GPIO_Init+0x2fc>)
 8002132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800213c:	4a5c      	ldr	r2, [pc, #368]	; (80022b0 <HAL_GPIO_Init+0x300>)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	3302      	adds	r3, #2
 8002144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002166:	d02b      	beq.n	80021c0 <HAL_GPIO_Init+0x210>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a52      	ldr	r2, [pc, #328]	; (80022b4 <HAL_GPIO_Init+0x304>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d025      	beq.n	80021bc <HAL_GPIO_Init+0x20c>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a51      	ldr	r2, [pc, #324]	; (80022b8 <HAL_GPIO_Init+0x308>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d01f      	beq.n	80021b8 <HAL_GPIO_Init+0x208>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a50      	ldr	r2, [pc, #320]	; (80022bc <HAL_GPIO_Init+0x30c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d019      	beq.n	80021b4 <HAL_GPIO_Init+0x204>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a4f      	ldr	r2, [pc, #316]	; (80022c0 <HAL_GPIO_Init+0x310>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d013      	beq.n	80021b0 <HAL_GPIO_Init+0x200>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a4e      	ldr	r2, [pc, #312]	; (80022c4 <HAL_GPIO_Init+0x314>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00d      	beq.n	80021ac <HAL_GPIO_Init+0x1fc>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a4d      	ldr	r2, [pc, #308]	; (80022c8 <HAL_GPIO_Init+0x318>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d007      	beq.n	80021a8 <HAL_GPIO_Init+0x1f8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a4c      	ldr	r2, [pc, #304]	; (80022cc <HAL_GPIO_Init+0x31c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d101      	bne.n	80021a4 <HAL_GPIO_Init+0x1f4>
 80021a0:	2307      	movs	r3, #7
 80021a2:	e00e      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021a4:	2308      	movs	r3, #8
 80021a6:	e00c      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021a8:	2306      	movs	r3, #6
 80021aa:	e00a      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021ac:	2305      	movs	r3, #5
 80021ae:	e008      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021b0:	2304      	movs	r3, #4
 80021b2:	e006      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021b4:	2303      	movs	r3, #3
 80021b6:	e004      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e002      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021c0:	2300      	movs	r3, #0
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	f002 0203 	and.w	r2, r2, #3
 80021c8:	0092      	lsls	r2, r2, #2
 80021ca:	4093      	lsls	r3, r2
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021d2:	4937      	ldr	r1, [pc, #220]	; (80022b0 <HAL_GPIO_Init+0x300>)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3302      	adds	r3, #2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021e0:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <HAL_GPIO_Init+0x320>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002204:	4a32      	ldr	r2, [pc, #200]	; (80022d0 <HAL_GPIO_Init+0x320>)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800220a:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <HAL_GPIO_Init+0x320>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800222e:	4a28      	ldr	r2, [pc, #160]	; (80022d0 <HAL_GPIO_Init+0x320>)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002234:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x320>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	43db      	mvns	r3, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002258:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_GPIO_Init+0x320>)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <HAL_GPIO_Init+0x320>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	43db      	mvns	r3, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002282:	4a13      	ldr	r2, [pc, #76]	; (80022d0 <HAL_GPIO_Init+0x320>)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3301      	adds	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	f47f ae91 	bne.w	8001fc0 <HAL_GPIO_Init+0x10>
  }
}
 800229e:	bf00      	nop
 80022a0:	bf00      	nop
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40010000 	.word	0x40010000
 80022b4:	48000400 	.word	0x48000400
 80022b8:	48000800 	.word	0x48000800
 80022bc:	48000c00 	.word	0x48000c00
 80022c0:	48001000 	.word	0x48001000
 80022c4:	48001400 	.word	0x48001400
 80022c8:	48001800 	.word	0x48001800
 80022cc:	48001c00 	.word	0x48001c00
 80022d0:	40010400 	.word	0x40010400

080022d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
 80022e0:	4613      	mov	r3, r2
 80022e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022e4:	787b      	ldrb	r3, [r7, #1]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022ea:	887a      	ldrh	r2, [r7, #2]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022f0:	e002      	b.n	80022f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002308:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <HAL_PWREx_GetVoltageRange+0x3c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002314:	d102      	bne.n	800231c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800231a:	e00b      	b.n	8002334 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <HAL_PWREx_GetVoltageRange+0x3c>)
 800231e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800232a:	d102      	bne.n	8002332 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800232c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002330:	e000      	b.n	8002334 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002332:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40007000 	.word	0x40007000

08002344 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d141      	bne.n	80023d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002352:	4b4b      	ldr	r3, [pc, #300]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800235a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235e:	d131      	bne.n	80023c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002360:	4b47      	ldr	r3, [pc, #284]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002366:	4a46      	ldr	r2, [pc, #280]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800236c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002370:	4b43      	ldr	r3, [pc, #268]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002378:	4a41      	ldr	r2, [pc, #260]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800237e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002380:	4b40      	ldr	r3, [pc, #256]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2232      	movs	r2, #50	; 0x32
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	4a3f      	ldr	r2, [pc, #252]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	0c9b      	lsrs	r3, r3, #18
 8002392:	3301      	adds	r3, #1
 8002394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002396:	e002      	b.n	800239e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3b01      	subs	r3, #1
 800239c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800239e:	4b38      	ldr	r3, [pc, #224]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023aa:	d102      	bne.n	80023b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f2      	bne.n	8002398 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023b2:	4b33      	ldr	r3, [pc, #204]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023be:	d158      	bne.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e057      	b.n	8002474 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023c4:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ca:	4a2d      	ldr	r2, [pc, #180]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023d4:	e04d      	b.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023dc:	d141      	bne.n	8002462 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023de:	4b28      	ldr	r3, [pc, #160]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ea:	d131      	bne.n	8002450 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023ec:	4b24      	ldr	r3, [pc, #144]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023f2:	4a23      	ldr	r2, [pc, #140]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023fc:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002404:	4a1e      	ldr	r2, [pc, #120]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800240a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800240c:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2232      	movs	r2, #50	; 0x32
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002418:	fba2 2303 	umull	r2, r3, r2, r3
 800241c:	0c9b      	lsrs	r3, r3, #18
 800241e:	3301      	adds	r3, #1
 8002420:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002422:	e002      	b.n	800242a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3b01      	subs	r3, #1
 8002428:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002436:	d102      	bne.n	800243e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f2      	bne.n	8002424 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244a:	d112      	bne.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e011      	b.n	8002474 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002456:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002460:	e007      	b.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800246a:	4a05      	ldr	r2, [pc, #20]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800246c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002470:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	40007000 	.word	0x40007000
 8002484:	20001048 	.word	0x20001048
 8002488:	431bde83 	.word	0x431bde83

0800248c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d102      	bne.n	80024a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	f000 bc08 	b.w	8002cb0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a0:	4b96      	ldr	r3, [pc, #600]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024aa:	4b94      	ldr	r3, [pc, #592]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80e4 	beq.w	800268a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <HAL_RCC_OscConfig+0x4c>
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2b0c      	cmp	r3, #12
 80024cc:	f040 808b 	bne.w	80025e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	f040 8087 	bne.w	80025e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024d8:	4b88      	ldr	r3, [pc, #544]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_OscConfig+0x64>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e3df      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1a      	ldr	r2, [r3, #32]
 80024f4:	4b81      	ldr	r3, [pc, #516]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <HAL_RCC_OscConfig+0x7e>
 8002500:	4b7e      	ldr	r3, [pc, #504]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002508:	e005      	b.n	8002516 <HAL_RCC_OscConfig+0x8a>
 800250a:	4b7c      	ldr	r3, [pc, #496]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 800250c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002516:	4293      	cmp	r3, r2
 8002518:	d223      	bcs.n	8002562 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fda0 	bl	8003064 <RCC_SetFlashLatencyFromMSIRange>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e3c0      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800252e:	4b73      	ldr	r3, [pc, #460]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a72      	ldr	r2, [pc, #456]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 8002534:	f043 0308 	orr.w	r3, r3, #8
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b70      	ldr	r3, [pc, #448]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	496d      	ldr	r1, [pc, #436]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800254c:	4b6b      	ldr	r3, [pc, #428]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	4968      	ldr	r1, [pc, #416]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
 8002560:	e025      	b.n	80025ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002562:	4b66      	ldr	r3, [pc, #408]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a65      	ldr	r2, [pc, #404]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 8002568:	f043 0308 	orr.w	r3, r3, #8
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b63      	ldr	r3, [pc, #396]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	4960      	ldr	r1, [pc, #384]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002580:	4b5e      	ldr	r3, [pc, #376]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	021b      	lsls	r3, r3, #8
 800258e:	495b      	ldr	r1, [pc, #364]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fd60 	bl	8003064 <RCC_SetFlashLatencyFromMSIRange>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e380      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025ae:	f000 fcc1 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 80025b2:	4602      	mov	r2, r0
 80025b4:	4b51      	ldr	r3, [pc, #324]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	4950      	ldr	r1, [pc, #320]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80025c0:	5ccb      	ldrb	r3, [r1, r3]
 80025c2:	f003 031f 	and.w	r3, r3, #31
 80025c6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ca:	4a4e      	ldr	r2, [pc, #312]	; (8002704 <HAL_RCC_OscConfig+0x278>)
 80025cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025ce:	4b4e      	ldr	r3, [pc, #312]	; (8002708 <HAL_RCC_OscConfig+0x27c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fb18 	bl	8000c08 <HAL_InitTick>
 80025d8:	4603      	mov	r3, r0
 80025da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d052      	beq.n	8002688 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	e364      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d032      	beq.n	8002654 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025ee:	4b43      	ldr	r3, [pc, #268]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a42      	ldr	r2, [pc, #264]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025fa:	f7fe fb55 	bl	8000ca8 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002602:	f7fe fb51 	bl	8000ca8 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e34d      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002614:	4b39      	ldr	r3, [pc, #228]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002620:	4b36      	ldr	r3, [pc, #216]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a35      	ldr	r2, [pc, #212]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 8002626:	f043 0308 	orr.w	r3, r3, #8
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	4b33      	ldr	r3, [pc, #204]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	4930      	ldr	r1, [pc, #192]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800263e:	4b2f      	ldr	r3, [pc, #188]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	021b      	lsls	r3, r3, #8
 800264c:	492b      	ldr	r1, [pc, #172]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 800264e:	4313      	orrs	r3, r2
 8002650:	604b      	str	r3, [r1, #4]
 8002652:	e01a      	b.n	800268a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002654:	4b29      	ldr	r3, [pc, #164]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a28      	ldr	r2, [pc, #160]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002660:	f7fe fb22 	bl	8000ca8 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002668:	f7fe fb1e 	bl	8000ca8 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e31a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800267a:	4b20      	ldr	r3, [pc, #128]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x1dc>
 8002686:	e000      	b.n	800268a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002688:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d073      	beq.n	800277e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	2b08      	cmp	r3, #8
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_OscConfig+0x21c>
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b0c      	cmp	r3, #12
 80026a0:	d10e      	bne.n	80026c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d10b      	bne.n	80026c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a8:	4b14      	ldr	r3, [pc, #80]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d063      	beq.n	800277c <HAL_RCC_OscConfig+0x2f0>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d15f      	bne.n	800277c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e2f7      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c8:	d106      	bne.n	80026d8 <HAL_RCC_OscConfig+0x24c>
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a0b      	ldr	r2, [pc, #44]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e025      	b.n	8002724 <HAL_RCC_OscConfig+0x298>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e0:	d114      	bne.n	800270c <HAL_RCC_OscConfig+0x280>
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a05      	ldr	r2, [pc, #20]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 80026e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	4b03      	ldr	r3, [pc, #12]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a02      	ldr	r2, [pc, #8]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e013      	b.n	8002724 <HAL_RCC_OscConfig+0x298>
 80026fc:	40021000 	.word	0x40021000
 8002700:	08007d00 	.word	0x08007d00
 8002704:	20001048 	.word	0x20001048
 8002708:	20000000 	.word	0x20000000
 800270c:	4ba0      	ldr	r3, [pc, #640]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a9f      	ldr	r2, [pc, #636]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 8002712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	4b9d      	ldr	r3, [pc, #628]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a9c      	ldr	r2, [pc, #624]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 800271e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d013      	beq.n	8002754 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe fabc 	bl	8000ca8 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002734:	f7fe fab8 	bl	8000ca8 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e2b4      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002746:	4b92      	ldr	r3, [pc, #584]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x2a8>
 8002752:	e014      	b.n	800277e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe faa8 	bl	8000ca8 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800275c:	f7fe faa4 	bl	8000ca8 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	; 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e2a0      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800276e:	4b88      	ldr	r3, [pc, #544]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x2d0>
 800277a:	e000      	b.n	800277e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d060      	beq.n	800284c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b04      	cmp	r3, #4
 800278e:	d005      	beq.n	800279c <HAL_RCC_OscConfig+0x310>
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b0c      	cmp	r3, #12
 8002794:	d119      	bne.n	80027ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d116      	bne.n	80027ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800279c:	4b7c      	ldr	r3, [pc, #496]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_OscConfig+0x328>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e27d      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b76      	ldr	r3, [pc, #472]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	061b      	lsls	r3, r3, #24
 80027c2:	4973      	ldr	r1, [pc, #460]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c8:	e040      	b.n	800284c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d023      	beq.n	800281a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d2:	4b6f      	ldr	r3, [pc, #444]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a6e      	ldr	r2, [pc, #440]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 80027d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027de:	f7fe fa63 	bl	8000ca8 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e6:	f7fe fa5f 	bl	8000ca8 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e25b      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f8:	4b65      	ldr	r3, [pc, #404]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002804:	4b62      	ldr	r3, [pc, #392]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	495f      	ldr	r1, [pc, #380]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
 8002818:	e018      	b.n	800284c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281a:	4b5d      	ldr	r3, [pc, #372]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a5c      	ldr	r2, [pc, #368]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 8002820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fe fa3f 	bl	8000ca8 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282e:	f7fe fa3b 	bl	8000ca8 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e237      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002840:	4b53      	ldr	r3, [pc, #332]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f0      	bne.n	800282e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d03c      	beq.n	80028d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01c      	beq.n	800289a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002860:	4b4b      	ldr	r3, [pc, #300]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 8002862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002866:	4a4a      	ldr	r2, [pc, #296]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002870:	f7fe fa1a 	bl	8000ca8 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002878:	f7fe fa16 	bl	8000ca8 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e212      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800288a:	4b41      	ldr	r3, [pc, #260]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 800288c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ef      	beq.n	8002878 <HAL_RCC_OscConfig+0x3ec>
 8002898:	e01b      	b.n	80028d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800289a:	4b3d      	ldr	r3, [pc, #244]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 800289c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a0:	4a3b      	ldr	r2, [pc, #236]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f7fe f9fd 	bl	8000ca8 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b2:	f7fe f9f9 	bl	8000ca8 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e1f5      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028c4:	4b32      	ldr	r3, [pc, #200]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 80028c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1ef      	bne.n	80028b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80a6 	beq.w	8002a2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e0:	2300      	movs	r3, #0
 80028e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028e4:	4b2a      	ldr	r3, [pc, #168]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 80028e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10d      	bne.n	800290c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f0:	4b27      	ldr	r3, [pc, #156]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f4:	4a26      	ldr	r2, [pc, #152]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 80028f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fa:	6593      	str	r3, [r2, #88]	; 0x58
 80028fc:	4b24      	ldr	r3, [pc, #144]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 80028fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002908:	2301      	movs	r3, #1
 800290a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800290c:	4b21      	ldr	r3, [pc, #132]	; (8002994 <HAL_RCC_OscConfig+0x508>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d118      	bne.n	800294a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002918:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <HAL_RCC_OscConfig+0x508>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1d      	ldr	r2, [pc, #116]	; (8002994 <HAL_RCC_OscConfig+0x508>)
 800291e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002922:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002924:	f7fe f9c0 	bl	8000ca8 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292c:	f7fe f9bc 	bl	8000ca8 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e1b8      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800293e:	4b15      	ldr	r3, [pc, #84]	; (8002994 <HAL_RCC_OscConfig+0x508>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d108      	bne.n	8002964 <HAL_RCC_OscConfig+0x4d8>
 8002952:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002958:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002962:	e029      	b.n	80029b8 <HAL_RCC_OscConfig+0x52c>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b05      	cmp	r3, #5
 800296a:	d115      	bne.n	8002998 <HAL_RCC_OscConfig+0x50c>
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002972:	4a07      	ldr	r2, [pc, #28]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 8002974:	f043 0304 	orr.w	r3, r3, #4
 8002978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800297c:	4b04      	ldr	r3, [pc, #16]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002982:	4a03      	ldr	r2, [pc, #12]	; (8002990 <HAL_RCC_OscConfig+0x504>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800298c:	e014      	b.n	80029b8 <HAL_RCC_OscConfig+0x52c>
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000
 8002994:	40007000 	.word	0x40007000
 8002998:	4b9d      	ldr	r3, [pc, #628]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299e:	4a9c      	ldr	r2, [pc, #624]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029a8:	4b99      	ldr	r3, [pc, #612]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	4a98      	ldr	r2, [pc, #608]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 80029b0:	f023 0304 	bic.w	r3, r3, #4
 80029b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d016      	beq.n	80029ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c0:	f7fe f972 	bl	8000ca8 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c6:	e00a      	b.n	80029de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c8:	f7fe f96e 	bl	8000ca8 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e168      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029de:	4b8c      	ldr	r3, [pc, #560]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 80029e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0ed      	beq.n	80029c8 <HAL_RCC_OscConfig+0x53c>
 80029ec:	e015      	b.n	8002a1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ee:	f7fe f95b 	bl	8000ca8 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7fe f957 	bl	8000ca8 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e151      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a0c:	4b80      	ldr	r3, [pc, #512]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1ed      	bne.n	80029f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a1a:	7ffb      	ldrb	r3, [r7, #31]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a20:	4b7b      	ldr	r3, [pc, #492]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a24:	4a7a      	ldr	r2, [pc, #488]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d03c      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01c      	beq.n	8002a7a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a40:	4b73      	ldr	r3, [pc, #460]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002a42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a46:	4a72      	ldr	r2, [pc, #456]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a50:	f7fe f92a 	bl	8000ca8 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a58:	f7fe f926 	bl	8000ca8 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e122      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a6a:	4b69      	ldr	r3, [pc, #420]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002a6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ef      	beq.n	8002a58 <HAL_RCC_OscConfig+0x5cc>
 8002a78:	e01b      	b.n	8002ab2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a7a:	4b65      	ldr	r3, [pc, #404]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a80:	4a63      	ldr	r2, [pc, #396]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8a:	f7fe f90d 	bl	8000ca8 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a92:	f7fe f909 	bl	8000ca8 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e105      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002aa4:	4b5a      	ldr	r3, [pc, #360]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002aa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1ef      	bne.n	8002a92 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80f9 	beq.w	8002cae <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	f040 80cf 	bne.w	8002c64 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ac6:	4b52      	ldr	r3, [pc, #328]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f003 0203 	and.w	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d12c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d123      	bne.n	8002b34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d11b      	bne.n	8002b34 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b06:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d113      	bne.n	8002b34 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	085b      	lsrs	r3, r3, #1
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d109      	bne.n	8002b34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	085b      	lsrs	r3, r3, #1
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d071      	beq.n	8002c18 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	2b0c      	cmp	r3, #12
 8002b38:	d068      	beq.n	8002c0c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b3a:	4b35      	ldr	r3, [pc, #212]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d105      	bne.n	8002b52 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b46:	4b32      	ldr	r3, [pc, #200]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0ac      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b56:	4b2e      	ldr	r3, [pc, #184]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a2d      	ldr	r2, [pc, #180]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002b5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b60:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b62:	f7fe f8a1 	bl	8000ca8 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fe f89d 	bl	8000ca8 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e099      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b7c:	4b24      	ldr	r3, [pc, #144]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f0      	bne.n	8002b6a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b88:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	4b21      	ldr	r3, [pc, #132]	; (8002c14 <HAL_RCC_OscConfig+0x788>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b98:	3a01      	subs	r2, #1
 8002b9a:	0112      	lsls	r2, r2, #4
 8002b9c:	4311      	orrs	r1, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ba2:	0212      	lsls	r2, r2, #8
 8002ba4:	4311      	orrs	r1, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002baa:	0852      	lsrs	r2, r2, #1
 8002bac:	3a01      	subs	r2, #1
 8002bae:	0552      	lsls	r2, r2, #21
 8002bb0:	4311      	orrs	r1, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bb6:	0852      	lsrs	r2, r2, #1
 8002bb8:	3a01      	subs	r2, #1
 8002bba:	0652      	lsls	r2, r2, #25
 8002bbc:	4311      	orrs	r1, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bc2:	06d2      	lsls	r2, r2, #27
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	4912      	ldr	r1, [pc, #72]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bcc:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0f      	ldr	r2, [pc, #60]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bd8:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4a0c      	ldr	r2, [pc, #48]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002be2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002be4:	f7fe f860 	bl	8000ca8 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bec:	f7fe f85c 	bl	8000ca8 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e058      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfe:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <HAL_RCC_OscConfig+0x784>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c0a:	e050      	b.n	8002cae <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e04f      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
 8002c10:	40021000 	.word	0x40021000
 8002c14:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c18:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <HAL_RCC_OscConfig+0x82c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d144      	bne.n	8002cae <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c24:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <HAL_RCC_OscConfig+0x82c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a23      	ldr	r2, [pc, #140]	; (8002cb8 <HAL_RCC_OscConfig+0x82c>)
 8002c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c30:	4b21      	ldr	r3, [pc, #132]	; (8002cb8 <HAL_RCC_OscConfig+0x82c>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	4a20      	ldr	r2, [pc, #128]	; (8002cb8 <HAL_RCC_OscConfig+0x82c>)
 8002c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c3c:	f7fe f834 	bl	8000ca8 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c44:	f7fe f830 	bl	8000ca8 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e02c      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c56:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <HAL_RCC_OscConfig+0x82c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x7b8>
 8002c62:	e024      	b.n	8002cae <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2b0c      	cmp	r3, #12
 8002c68:	d01f      	beq.n	8002caa <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6a:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <HAL_RCC_OscConfig+0x82c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a12      	ldr	r2, [pc, #72]	; (8002cb8 <HAL_RCC_OscConfig+0x82c>)
 8002c70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c76:	f7fe f817 	bl	8000ca8 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7fe f813 	bl	8000ca8 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e00f      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_RCC_OscConfig+0x82c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1f0      	bne.n	8002c7e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_RCC_OscConfig+0x82c>)
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	4905      	ldr	r1, [pc, #20]	; (8002cb8 <HAL_RCC_OscConfig+0x82c>)
 8002ca2:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_RCC_OscConfig+0x830>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	60cb      	str	r3, [r1, #12]
 8002ca8:	e001      	b.n	8002cae <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	feeefffc 	.word	0xfeeefffc

08002cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e11d      	b.n	8002f14 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b90      	ldr	r3, [pc, #576]	; (8002f1c <HAL_RCC_ClockConfig+0x25c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d910      	bls.n	8002d08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b8d      	ldr	r3, [pc, #564]	; (8002f1c <HAL_RCC_ClockConfig+0x25c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 020f 	bic.w	r2, r3, #15
 8002cee:	498b      	ldr	r1, [pc, #556]	; (8002f1c <HAL_RCC_ClockConfig+0x25c>)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b89      	ldr	r3, [pc, #548]	; (8002f1c <HAL_RCC_ClockConfig+0x25c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e105      	b.n	8002f14 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d010      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	4b81      	ldr	r3, [pc, #516]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d908      	bls.n	8002d36 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d24:	4b7e      	ldr	r3, [pc, #504]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	497b      	ldr	r1, [pc, #492]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d079      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d11e      	bne.n	8002d88 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d4a:	4b75      	ldr	r3, [pc, #468]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e0dc      	b.n	8002f14 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002d5a:	f000 f9dd 	bl	8003118 <RCC_GetSysClockFreqFromPLLSource>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4a70      	ldr	r2, [pc, #448]	; (8002f24 <HAL_RCC_ClockConfig+0x264>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d946      	bls.n	8002df4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d66:	4b6e      	ldr	r3, [pc, #440]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d140      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d72:	4b6b      	ldr	r3, [pc, #428]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d7a:	4a69      	ldr	r2, [pc, #420]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d80:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	e035      	b.n	8002df4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d107      	bne.n	8002da0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d90:	4b63      	ldr	r3, [pc, #396]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d115      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0b9      	b.n	8002f14 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d107      	bne.n	8002db8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002da8:	4b5d      	ldr	r3, [pc, #372]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d109      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0ad      	b.n	8002f14 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002db8:	4b59      	ldr	r3, [pc, #356]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0a5      	b.n	8002f14 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002dc8:	f000 f8b4 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4a55      	ldr	r2, [pc, #340]	; (8002f24 <HAL_RCC_ClockConfig+0x264>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d90f      	bls.n	8002df4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002dd4:	4b52      	ldr	r3, [pc, #328]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d109      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002de0:	4b4f      	ldr	r3, [pc, #316]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002de8:	4a4d      	ldr	r2, [pc, #308]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dee:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002df4:	4b4a      	ldr	r3, [pc, #296]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f023 0203 	bic.w	r2, r3, #3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4947      	ldr	r1, [pc, #284]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e06:	f7fd ff4f 	bl	8000ca8 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0c:	e00a      	b.n	8002e24 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e0e:	f7fd ff4b 	bl	8000ca8 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e077      	b.n	8002f14 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e24:	4b3e      	ldr	r3, [pc, #248]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 020c 	and.w	r2, r3, #12
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d1eb      	bne.n	8002e0e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b80      	cmp	r3, #128	; 0x80
 8002e3a:	d105      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e3c:	4b38      	ldr	r3, [pc, #224]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4a37      	ldr	r2, [pc, #220]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002e42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e46:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d010      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d208      	bcs.n	8002e76 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e64:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	492b      	ldr	r1, [pc, #172]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e76:	4b29      	ldr	r3, [pc, #164]	; (8002f1c <HAL_RCC_ClockConfig+0x25c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d210      	bcs.n	8002ea6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e84:	4b25      	ldr	r3, [pc, #148]	; (8002f1c <HAL_RCC_ClockConfig+0x25c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f023 020f 	bic.w	r2, r3, #15
 8002e8c:	4923      	ldr	r1, [pc, #140]	; (8002f1c <HAL_RCC_ClockConfig+0x25c>)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e94:	4b21      	ldr	r3, [pc, #132]	; (8002f1c <HAL_RCC_ClockConfig+0x25c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d001      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e036      	b.n	8002f14 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb2:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4918      	ldr	r1, [pc, #96]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d009      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed0:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4910      	ldr	r1, [pc, #64]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ee4:	f000 f826 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <HAL_RCC_ClockConfig+0x260>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	490c      	ldr	r1, [pc, #48]	; (8002f28 <HAL_RCC_ClockConfig+0x268>)
 8002ef6:	5ccb      	ldrb	r3, [r1, r3]
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
 8002f00:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <HAL_RCC_ClockConfig+0x26c>)
 8002f02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f04:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_RCC_ClockConfig+0x270>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fd fe7d 	bl	8000c08 <HAL_InitTick>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	73fb      	strb	r3, [r7, #15]

  return status;
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40022000 	.word	0x40022000
 8002f20:	40021000 	.word	0x40021000
 8002f24:	04c4b400 	.word	0x04c4b400
 8002f28:	08007d00 	.word	0x08007d00
 8002f2c:	20001048 	.word	0x20001048
 8002f30:	20000000 	.word	0x20000000

08002f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b089      	sub	sp, #36	; 0x24
 8002f38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61fb      	str	r3, [r7, #28]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f42:	4b3e      	ldr	r3, [pc, #248]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f4c:	4b3b      	ldr	r3, [pc, #236]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0x34>
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b0c      	cmp	r3, #12
 8002f60:	d121      	bne.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d11e      	bne.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f68:	4b34      	ldr	r3, [pc, #208]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d107      	bne.n	8002f84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f74:	4b31      	ldr	r3, [pc, #196]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	e005      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f84:	4b2d      	ldr	r3, [pc, #180]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f90:	4a2b      	ldr	r2, [pc, #172]	; (8003040 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10d      	bne.n	8002fbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fa4:	e00a      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d102      	bne.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fac:	4b25      	ldr	r3, [pc, #148]	; (8003044 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fae:	61bb      	str	r3, [r7, #24]
 8002fb0:	e004      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d101      	bne.n	8002fbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fb8:	4b23      	ldr	r3, [pc, #140]	; (8003048 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b0c      	cmp	r3, #12
 8002fc0:	d134      	bne.n	800302c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fc2:	4b1e      	ldr	r3, [pc, #120]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d003      	beq.n	8002fda <HAL_RCC_GetSysClockFreq+0xa6>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d003      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0xac>
 8002fd8:	e005      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fda:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fdc:	617b      	str	r3, [r7, #20]
      break;
 8002fde:	e005      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fe0:	4b19      	ldr	r3, [pc, #100]	; (8003048 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fe2:	617b      	str	r3, [r7, #20]
      break;
 8002fe4:	e002      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	617b      	str	r3, [r7, #20]
      break;
 8002fea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fec:	4b13      	ldr	r3, [pc, #76]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ffa:	4b10      	ldr	r3, [pc, #64]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	fb03 f202 	mul.w	r2, r3, r2
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003010:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	0e5b      	lsrs	r3, r3, #25
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	3301      	adds	r3, #1
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	fbb2 f3f3 	udiv	r3, r2, r3
 800302a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800302c:	69bb      	ldr	r3, [r7, #24]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3724      	adds	r7, #36	; 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000
 8003040:	08007d10 	.word	0x08007d10
 8003044:	00f42400 	.word	0x00f42400
 8003048:	007a1200 	.word	0x007a1200

0800304c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_RCC_GetHCLKFreq+0x14>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20001048 	.word	0x20001048

08003064 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800306c:	2300      	movs	r3, #0
 800306e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003070:	4b27      	ldr	r3, [pc, #156]	; (8003110 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800307c:	f7ff f942 	bl	8002304 <HAL_PWREx_GetVoltageRange>
 8003080:	6178      	str	r0, [r7, #20]
 8003082:	e014      	b.n	80030ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003084:	4b22      	ldr	r3, [pc, #136]	; (8003110 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003088:	4a21      	ldr	r2, [pc, #132]	; (8003110 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800308a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308e:	6593      	str	r3, [r2, #88]	; 0x58
 8003090:	4b1f      	ldr	r3, [pc, #124]	; (8003110 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800309c:	f7ff f932 	bl	8002304 <HAL_PWREx_GetVoltageRange>
 80030a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030a2:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a6:	4a1a      	ldr	r2, [pc, #104]	; (8003110 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b4:	d10b      	bne.n	80030ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b80      	cmp	r3, #128	; 0x80
 80030ba:	d913      	bls.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2ba0      	cmp	r3, #160	; 0xa0
 80030c0:	d902      	bls.n	80030c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030c2:	2302      	movs	r3, #2
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	e00d      	b.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030c8:	2301      	movs	r3, #1
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	e00a      	b.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b7f      	cmp	r3, #127	; 0x7f
 80030d2:	d902      	bls.n	80030da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80030d4:	2302      	movs	r3, #2
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	e004      	b.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b70      	cmp	r3, #112	; 0x70
 80030de:	d101      	bne.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030e0:	2301      	movs	r3, #1
 80030e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f023 020f 	bic.w	r2, r3, #15
 80030ec:	4909      	ldr	r1, [pc, #36]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030f4:	4b07      	ldr	r3, [pc, #28]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d001      	beq.n	8003106 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40021000 	.word	0x40021000
 8003114:	40022000 	.word	0x40022000

08003118 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800311e:	4b2d      	ldr	r3, [pc, #180]	; (80031d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b03      	cmp	r3, #3
 800312c:	d00b      	beq.n	8003146 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2b03      	cmp	r3, #3
 8003132:	d825      	bhi.n	8003180 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d008      	beq.n	800314c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d11f      	bne.n	8003180 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003140:	4b25      	ldr	r3, [pc, #148]	; (80031d8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003142:	613b      	str	r3, [r7, #16]
    break;
 8003144:	e01f      	b.n	8003186 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003146:	4b25      	ldr	r3, [pc, #148]	; (80031dc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003148:	613b      	str	r3, [r7, #16]
    break;
 800314a:	e01c      	b.n	8003186 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800314c:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d107      	bne.n	8003168 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003158:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800315a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800315e:	0a1b      	lsrs	r3, r3, #8
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	e005      	b.n	8003174 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003168:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003174:	4a1a      	ldr	r2, [pc, #104]	; (80031e0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317c:	613b      	str	r3, [r7, #16]
    break;
 800317e:	e002      	b.n	8003186 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	613b      	str	r3, [r7, #16]
    break;
 8003184:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003186:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	091b      	lsrs	r3, r3, #4
 800318c:	f003 030f 	and.w	r3, r3, #15
 8003190:	3301      	adds	r3, #1
 8003192:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003194:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	0a1b      	lsrs	r3, r3, #8
 800319a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	fb03 f202 	mul.w	r2, r3, r2
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031aa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031ac:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	0e5b      	lsrs	r3, r3, #25
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	3301      	adds	r3, #1
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80031c6:	683b      	ldr	r3, [r7, #0]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	371c      	adds	r7, #28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	40021000 	.word	0x40021000
 80031d8:	00f42400 	.word	0x00f42400
 80031dc:	007a1200 	.word	0x007a1200
 80031e0:	08007d10 	.word	0x08007d10

080031e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031ec:	2300      	movs	r3, #0
 80031ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031f0:	2300      	movs	r3, #0
 80031f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d040      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003204:	2b80      	cmp	r3, #128	; 0x80
 8003206:	d02a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003208:	2b80      	cmp	r3, #128	; 0x80
 800320a:	d825      	bhi.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800320c:	2b60      	cmp	r3, #96	; 0x60
 800320e:	d026      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003210:	2b60      	cmp	r3, #96	; 0x60
 8003212:	d821      	bhi.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003214:	2b40      	cmp	r3, #64	; 0x40
 8003216:	d006      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003218:	2b40      	cmp	r3, #64	; 0x40
 800321a:	d81d      	bhi.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d009      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003220:	2b20      	cmp	r3, #32
 8003222:	d010      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003224:	e018      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003226:	4b89      	ldr	r3, [pc, #548]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	4a88      	ldr	r2, [pc, #544]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003230:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003232:	e015      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3304      	adds	r3, #4
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f000 fb02 	bl	8003844 <RCCEx_PLLSAI1_Config>
 8003240:	4603      	mov	r3, r0
 8003242:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003244:	e00c      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3320      	adds	r3, #32
 800324a:	2100      	movs	r1, #0
 800324c:	4618      	mov	r0, r3
 800324e:	f000 fbed 	bl	8003a2c <RCCEx_PLLSAI2_Config>
 8003252:	4603      	mov	r3, r0
 8003254:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003256:	e003      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	74fb      	strb	r3, [r7, #19]
      break;
 800325c:	e000      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800325e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003260:	7cfb      	ldrb	r3, [r7, #19]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10b      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003266:	4b79      	ldr	r3, [pc, #484]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003268:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800326c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003274:	4975      	ldr	r1, [pc, #468]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800327c:	e001      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327e:	7cfb      	ldrb	r3, [r7, #19]
 8003280:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d047      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003296:	d030      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329c:	d82a      	bhi.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800329e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032a2:	d02a      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 80032a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032a8:	d824      	bhi.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ae:	d008      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80032b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b4:	d81e      	bhi.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80032ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032be:	d010      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80032c0:	e018      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032c2:	4b62      	ldr	r3, [pc, #392]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	4a61      	ldr	r2, [pc, #388]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032cc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ce:	e015      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	2100      	movs	r1, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fab4 	bl	8003844 <RCCEx_PLLSAI1_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032e0:	e00c      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3320      	adds	r3, #32
 80032e6:	2100      	movs	r1, #0
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fb9f 	bl	8003a2c <RCCEx_PLLSAI2_Config>
 80032ee:	4603      	mov	r3, r0
 80032f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032f2:	e003      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	74fb      	strb	r3, [r7, #19]
      break;
 80032f8:	e000      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80032fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10b      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003302:	4b52      	ldr	r3, [pc, #328]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003304:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003308:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	494e      	ldr	r1, [pc, #312]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003318:	e001      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331a:	7cfb      	ldrb	r3, [r7, #19]
 800331c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 809f 	beq.w	800346a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332c:	2300      	movs	r3, #0
 800332e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003330:	4b46      	ldr	r3, [pc, #280]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003340:	2300      	movs	r3, #0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00d      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003346:	4b41      	ldr	r3, [pc, #260]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334a:	4a40      	ldr	r2, [pc, #256]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800334c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003350:	6593      	str	r3, [r2, #88]	; 0x58
 8003352:	4b3e      	ldr	r3, [pc, #248]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335a:	60bb      	str	r3, [r7, #8]
 800335c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800335e:	2301      	movs	r3, #1
 8003360:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003362:	4b3b      	ldr	r3, [pc, #236]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a3a      	ldr	r2, [pc, #232]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800336e:	f7fd fc9b 	bl	8000ca8 <HAL_GetTick>
 8003372:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003374:	e009      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003376:	f7fd fc97 	bl	8000ca8 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d902      	bls.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	74fb      	strb	r3, [r7, #19]
        break;
 8003388:	e005      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800338a:	4b31      	ldr	r3, [pc, #196]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0ef      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003396:	7cfb      	ldrb	r3, [r7, #19]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d15b      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800339c:	4b2b      	ldr	r3, [pc, #172]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d01f      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d019      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033ba:	4b24      	ldr	r3, [pc, #144]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033c6:	4b21      	ldr	r3, [pc, #132]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033cc:	4a1f      	ldr	r2, [pc, #124]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033d6:	4b1d      	ldr	r3, [pc, #116]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033dc:	4a1b      	ldr	r2, [pc, #108]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033e6:	4a19      	ldr	r2, [pc, #100]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d016      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fd fc56 	bl	8000ca8 <HAL_GetTick>
 80033fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033fe:	e00b      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003400:	f7fd fc52 	bl	8000ca8 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f241 3288 	movw	r2, #5000	; 0x1388
 800340e:	4293      	cmp	r3, r2
 8003410:	d902      	bls.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	74fb      	strb	r3, [r7, #19]
            break;
 8003416:	e006      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003418:	4b0c      	ldr	r3, [pc, #48]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0ec      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003426:	7cfb      	ldrb	r3, [r7, #19]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10c      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800342c:	4b07      	ldr	r3, [pc, #28]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343c:	4903      	ldr	r1, [pc, #12]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003444:	e008      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003446:	7cfb      	ldrb	r3, [r7, #19]
 8003448:	74bb      	strb	r3, [r7, #18]
 800344a:	e005      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800344c:	40021000 	.word	0x40021000
 8003450:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003454:	7cfb      	ldrb	r3, [r7, #19]
 8003456:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003458:	7c7b      	ldrb	r3, [r7, #17]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d105      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345e:	4ba0      	ldr	r3, [pc, #640]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003462:	4a9f      	ldr	r2, [pc, #636]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003468:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003476:	4b9a      	ldr	r3, [pc, #616]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347c:	f023 0203 	bic.w	r2, r3, #3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003484:	4996      	ldr	r1, [pc, #600]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003498:	4b91      	ldr	r3, [pc, #580]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349e:	f023 020c 	bic.w	r2, r3, #12
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	498e      	ldr	r1, [pc, #568]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034ba:	4b89      	ldr	r3, [pc, #548]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c8:	4985      	ldr	r1, [pc, #532]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034dc:	4b80      	ldr	r3, [pc, #512]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ea:	497d      	ldr	r1, [pc, #500]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034fe:	4b78      	ldr	r3, [pc, #480]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350c:	4974      	ldr	r1, [pc, #464]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003520:	4b6f      	ldr	r3, [pc, #444]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352e:	496c      	ldr	r1, [pc, #432]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003542:	4b67      	ldr	r3, [pc, #412]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003548:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003550:	4963      	ldr	r1, [pc, #396]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003564:	4b5e      	ldr	r3, [pc, #376]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003572:	495b      	ldr	r1, [pc, #364]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003586:	4b56      	ldr	r3, [pc, #344]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003594:	4952      	ldr	r1, [pc, #328]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035a8:	4b4d      	ldr	r3, [pc, #308]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b6:	494a      	ldr	r1, [pc, #296]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035ca:	4b45      	ldr	r3, [pc, #276]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d8:	4941      	ldr	r1, [pc, #260]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035ec:	4b3c      	ldr	r3, [pc, #240]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035f2:	f023 0203 	bic.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fa:	4939      	ldr	r1, [pc, #228]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d028      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800360e:	4b34      	ldr	r3, [pc, #208]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003614:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361c:	4930      	ldr	r1, [pc, #192]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800362c:	d106      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800362e:	4b2c      	ldr	r3, [pc, #176]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	4a2b      	ldr	r2, [pc, #172]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003638:	60d3      	str	r3, [r2, #12]
 800363a:	e011      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003640:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003644:	d10c      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3304      	adds	r3, #4
 800364a:	2101      	movs	r1, #1
 800364c:	4618      	mov	r0, r3
 800364e:	f000 f8f9 	bl	8003844 <RCCEx_PLLSAI1_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003656:	7cfb      	ldrb	r3, [r7, #19]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800365c:	7cfb      	ldrb	r3, [r7, #19]
 800365e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d04d      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003670:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003674:	d108      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003676:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003678:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800367c:	4a18      	ldr	r2, [pc, #96]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800367e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003682:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003686:	e012      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003688:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800368a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800368e:	4a14      	ldr	r2, [pc, #80]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003690:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003694:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036a6:	490e      	ldr	r1, [pc, #56]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036b6:	d106      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036b8:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4a08      	ldr	r2, [pc, #32]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036c2:	60d3      	str	r3, [r2, #12]
 80036c4:	e020      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ce:	d109      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036d0:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4a02      	ldr	r2, [pc, #8]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036da:	60d3      	str	r3, [r2, #12]
 80036dc:	e014      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ec:	d10c      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3304      	adds	r3, #4
 80036f2:	2101      	movs	r1, #1
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 f8a5 	bl	8003844 <RCCEx_PLLSAI1_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036fe:	7cfb      	ldrb	r3, [r7, #19]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003704:	7cfb      	ldrb	r3, [r7, #19]
 8003706:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d028      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003714:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003722:	4947      	ldr	r1, [pc, #284]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800372e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003732:	d106      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003734:	4b42      	ldr	r3, [pc, #264]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a41      	ldr	r2, [pc, #260]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800373a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800373e:	60d3      	str	r3, [r2, #12]
 8003740:	e011      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003746:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800374a:	d10c      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3304      	adds	r3, #4
 8003750:	2101      	movs	r1, #1
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f876 	bl	8003844 <RCCEx_PLLSAI1_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800375c:	7cfb      	ldrb	r3, [r7, #19]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003762:	7cfb      	ldrb	r3, [r7, #19]
 8003764:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d01e      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003772:	4b33      	ldr	r3, [pc, #204]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003778:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003782:	492f      	ldr	r1, [pc, #188]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003790:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003794:	d10c      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3304      	adds	r3, #4
 800379a:	2102      	movs	r1, #2
 800379c:	4618      	mov	r0, r3
 800379e:	f000 f851 	bl	8003844 <RCCEx_PLLSAI1_Config>
 80037a2:	4603      	mov	r3, r0
 80037a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037a6:	7cfb      	ldrb	r3, [r7, #19]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80037ac:	7cfb      	ldrb	r3, [r7, #19]
 80037ae:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00b      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037bc:	4b20      	ldr	r3, [pc, #128]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037c2:	f023 0204 	bic.w	r2, r3, #4
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037cc:	491c      	ldr	r1, [pc, #112]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00b      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80037e0:	4b17      	ldr	r3, [pc, #92]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037e6:	f023 0218 	bic.w	r2, r3, #24
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f0:	4913      	ldr	r1, [pc, #76]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d017      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003804:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003806:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800380a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003814:	490a      	ldr	r1, [pc, #40]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003822:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003826:	d105      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003828:	4b05      	ldr	r3, [pc, #20]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4a04      	ldr	r2, [pc, #16]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800382e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003832:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003834:	7cbb      	ldrb	r3, [r7, #18]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000

08003844 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003852:	4b72      	ldr	r3, [pc, #456]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00e      	beq.n	800387c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800385e:	4b6f      	ldr	r3, [pc, #444]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f003 0203 	and.w	r2, r3, #3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d103      	bne.n	8003876 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
       ||
 8003872:	2b00      	cmp	r3, #0
 8003874:	d142      	bne.n	80038fc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	e03f      	b.n	80038fc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d018      	beq.n	80038b6 <RCCEx_PLLSAI1_Config+0x72>
 8003884:	2b03      	cmp	r3, #3
 8003886:	d825      	bhi.n	80038d4 <RCCEx_PLLSAI1_Config+0x90>
 8003888:	2b01      	cmp	r3, #1
 800388a:	d002      	beq.n	8003892 <RCCEx_PLLSAI1_Config+0x4e>
 800388c:	2b02      	cmp	r3, #2
 800388e:	d009      	beq.n	80038a4 <RCCEx_PLLSAI1_Config+0x60>
 8003890:	e020      	b.n	80038d4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003892:	4b62      	ldr	r3, [pc, #392]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11d      	bne.n	80038da <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a2:	e01a      	b.n	80038da <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038a4:	4b5d      	ldr	r3, [pc, #372]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d116      	bne.n	80038de <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b4:	e013      	b.n	80038de <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038b6:	4b59      	ldr	r3, [pc, #356]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10f      	bne.n	80038e2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038c2:	4b56      	ldr	r3, [pc, #344]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038d2:	e006      	b.n	80038e2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
      break;
 80038d8:	e004      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038da:	bf00      	nop
 80038dc:	e002      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038de:	bf00      	nop
 80038e0:	e000      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d108      	bne.n	80038fc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80038ea:	4b4c      	ldr	r3, [pc, #304]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f023 0203 	bic.w	r2, r3, #3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4949      	ldr	r1, [pc, #292]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f040 8086 	bne.w	8003a10 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003904:	4b45      	ldr	r3, [pc, #276]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a44      	ldr	r2, [pc, #272]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 800390a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800390e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003910:	f7fd f9ca 	bl	8000ca8 <HAL_GetTick>
 8003914:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003916:	e009      	b.n	800392c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003918:	f7fd f9c6 	bl	8000ca8 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d902      	bls.n	800392c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	73fb      	strb	r3, [r7, #15]
        break;
 800392a:	e005      	b.n	8003938 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800392c:	4b3b      	ldr	r3, [pc, #236]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1ef      	bne.n	8003918 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d168      	bne.n	8003a10 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d113      	bne.n	800396c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003944:	4b35      	ldr	r3, [pc, #212]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	4b35      	ldr	r3, [pc, #212]	; (8003a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 800394a:	4013      	ands	r3, r2
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6892      	ldr	r2, [r2, #8]
 8003950:	0211      	lsls	r1, r2, #8
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68d2      	ldr	r2, [r2, #12]
 8003956:	06d2      	lsls	r2, r2, #27
 8003958:	4311      	orrs	r1, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6852      	ldr	r2, [r2, #4]
 800395e:	3a01      	subs	r2, #1
 8003960:	0112      	lsls	r2, r2, #4
 8003962:	430a      	orrs	r2, r1
 8003964:	492d      	ldr	r1, [pc, #180]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003966:	4313      	orrs	r3, r2
 8003968:	610b      	str	r3, [r1, #16]
 800396a:	e02d      	b.n	80039c8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d115      	bne.n	800399e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003972:	4b2a      	ldr	r3, [pc, #168]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	4b2b      	ldr	r3, [pc, #172]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003978:	4013      	ands	r3, r2
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6892      	ldr	r2, [r2, #8]
 800397e:	0211      	lsls	r1, r2, #8
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6912      	ldr	r2, [r2, #16]
 8003984:	0852      	lsrs	r2, r2, #1
 8003986:	3a01      	subs	r2, #1
 8003988:	0552      	lsls	r2, r2, #21
 800398a:	4311      	orrs	r1, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6852      	ldr	r2, [r2, #4]
 8003990:	3a01      	subs	r2, #1
 8003992:	0112      	lsls	r2, r2, #4
 8003994:	430a      	orrs	r2, r1
 8003996:	4921      	ldr	r1, [pc, #132]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003998:	4313      	orrs	r3, r2
 800399a:	610b      	str	r3, [r1, #16]
 800399c:	e014      	b.n	80039c8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800399e:	4b1f      	ldr	r3, [pc, #124]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 80039a0:	691a      	ldr	r2, [r3, #16]
 80039a2:	4b21      	ldr	r3, [pc, #132]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6892      	ldr	r2, [r2, #8]
 80039aa:	0211      	lsls	r1, r2, #8
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6952      	ldr	r2, [r2, #20]
 80039b0:	0852      	lsrs	r2, r2, #1
 80039b2:	3a01      	subs	r2, #1
 80039b4:	0652      	lsls	r2, r2, #25
 80039b6:	4311      	orrs	r1, r2
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6852      	ldr	r2, [r2, #4]
 80039bc:	3a01      	subs	r2, #1
 80039be:	0112      	lsls	r2, r2, #4
 80039c0:	430a      	orrs	r2, r1
 80039c2:	4916      	ldr	r1, [pc, #88]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039c8:	4b14      	ldr	r3, [pc, #80]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a13      	ldr	r2, [pc, #76]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 80039ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d4:	f7fd f968 	bl	8000ca8 <HAL_GetTick>
 80039d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039da:	e009      	b.n	80039f0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039dc:	f7fd f964 	bl	8000ca8 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d902      	bls.n	80039f0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	73fb      	strb	r3, [r7, #15]
          break;
 80039ee:	e005      	b.n	80039fc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039f0:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0ef      	beq.n	80039dc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d106      	bne.n	8003a10 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a02:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a04:	691a      	ldr	r2, [r3, #16]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	4904      	ldr	r1, [pc, #16]	; (8003a1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	07ff800f 	.word	0x07ff800f
 8003a24:	ff9f800f 	.word	0xff9f800f
 8003a28:	f9ff800f 	.word	0xf9ff800f

08003a2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a3a:	4b72      	ldr	r3, [pc, #456]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00e      	beq.n	8003a64 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a46:	4b6f      	ldr	r3, [pc, #444]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f003 0203 	and.w	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d103      	bne.n	8003a5e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
       ||
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d142      	bne.n	8003ae4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
 8003a62:	e03f      	b.n	8003ae4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d018      	beq.n	8003a9e <RCCEx_PLLSAI2_Config+0x72>
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d825      	bhi.n	8003abc <RCCEx_PLLSAI2_Config+0x90>
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d002      	beq.n	8003a7a <RCCEx_PLLSAI2_Config+0x4e>
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d009      	beq.n	8003a8c <RCCEx_PLLSAI2_Config+0x60>
 8003a78:	e020      	b.n	8003abc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a7a:	4b62      	ldr	r3, [pc, #392]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d11d      	bne.n	8003ac2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a8a:	e01a      	b.n	8003ac2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a8c:	4b5d      	ldr	r3, [pc, #372]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d116      	bne.n	8003ac6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9c:	e013      	b.n	8003ac6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a9e:	4b59      	ldr	r3, [pc, #356]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10f      	bne.n	8003aca <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aaa:	4b56      	ldr	r3, [pc, #344]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003aba:	e006      	b.n	8003aca <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac0:	e004      	b.n	8003acc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e002      	b.n	8003acc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e000      	b.n	8003acc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003aca:	bf00      	nop
    }

    if(status == HAL_OK)
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d108      	bne.n	8003ae4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003ad2:	4b4c      	ldr	r3, [pc, #304]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f023 0203 	bic.w	r2, r3, #3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4949      	ldr	r1, [pc, #292]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f040 8086 	bne.w	8003bf8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003aec:	4b45      	ldr	r3, [pc, #276]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a44      	ldr	r2, [pc, #272]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af8:	f7fd f8d6 	bl	8000ca8 <HAL_GetTick>
 8003afc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003afe:	e009      	b.n	8003b14 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b00:	f7fd f8d2 	bl	8000ca8 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d902      	bls.n	8003b14 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	73fb      	strb	r3, [r7, #15]
        break;
 8003b12:	e005      	b.n	8003b20 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b14:	4b3b      	ldr	r3, [pc, #236]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1ef      	bne.n	8003b00 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d168      	bne.n	8003bf8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d113      	bne.n	8003b54 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b2c:	4b35      	ldr	r3, [pc, #212]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b2e:	695a      	ldr	r2, [r3, #20]
 8003b30:	4b35      	ldr	r3, [pc, #212]	; (8003c08 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6892      	ldr	r2, [r2, #8]
 8003b38:	0211      	lsls	r1, r2, #8
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68d2      	ldr	r2, [r2, #12]
 8003b3e:	06d2      	lsls	r2, r2, #27
 8003b40:	4311      	orrs	r1, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6852      	ldr	r2, [r2, #4]
 8003b46:	3a01      	subs	r2, #1
 8003b48:	0112      	lsls	r2, r2, #4
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	492d      	ldr	r1, [pc, #180]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	614b      	str	r3, [r1, #20]
 8003b52:	e02d      	b.n	8003bb0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d115      	bne.n	8003b86 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b5a:	4b2a      	ldr	r3, [pc, #168]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	4b2b      	ldr	r3, [pc, #172]	; (8003c0c <RCCEx_PLLSAI2_Config+0x1e0>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6892      	ldr	r2, [r2, #8]
 8003b66:	0211      	lsls	r1, r2, #8
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6912      	ldr	r2, [r2, #16]
 8003b6c:	0852      	lsrs	r2, r2, #1
 8003b6e:	3a01      	subs	r2, #1
 8003b70:	0552      	lsls	r2, r2, #21
 8003b72:	4311      	orrs	r1, r2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6852      	ldr	r2, [r2, #4]
 8003b78:	3a01      	subs	r2, #1
 8003b7a:	0112      	lsls	r2, r2, #4
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	4921      	ldr	r1, [pc, #132]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	614b      	str	r3, [r1, #20]
 8003b84:	e014      	b.n	8003bb0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b86:	4b1f      	ldr	r3, [pc, #124]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	4b21      	ldr	r3, [pc, #132]	; (8003c10 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6892      	ldr	r2, [r2, #8]
 8003b92:	0211      	lsls	r1, r2, #8
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6952      	ldr	r2, [r2, #20]
 8003b98:	0852      	lsrs	r2, r2, #1
 8003b9a:	3a01      	subs	r2, #1
 8003b9c:	0652      	lsls	r2, r2, #25
 8003b9e:	4311      	orrs	r1, r2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6852      	ldr	r2, [r2, #4]
 8003ba4:	3a01      	subs	r2, #1
 8003ba6:	0112      	lsls	r2, r2, #4
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	4916      	ldr	r1, [pc, #88]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bb0:	4b14      	ldr	r3, [pc, #80]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a13      	ldr	r2, [pc, #76]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbc:	f7fd f874 	bl	8000ca8 <HAL_GetTick>
 8003bc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bc2:	e009      	b.n	8003bd8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bc4:	f7fd f870 	bl	8000ca8 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d902      	bls.n	8003bd8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	73fb      	strb	r3, [r7, #15]
          break;
 8003bd6:	e005      	b.n	8003be4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bd8:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0ef      	beq.n	8003bc4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	4904      	ldr	r1, [pc, #16]	; (8003c04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000
 8003c08:	07ff800f 	.word	0x07ff800f
 8003c0c:	ff9f800f 	.word	0xff9f800f
 8003c10:	f9ff800f 	.word	0xf9ff800f

08003c14 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003c1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c20:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d013      	beq.n	8003c54 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003c2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c30:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003c34:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00b      	beq.n	8003c54 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003c3c:	e000      	b.n	8003c40 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003c3e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003c40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f9      	beq.n	8003c3e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003c4a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003c54:	687b      	ldr	r3, [r7, #4]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	0000      	movs	r0, r0
 8003c64:	0000      	movs	r0, r0
	...

08003c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08a      	sub	sp, #40	; 0x28
 8003c6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c6e:	f7fc ffb3 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c72:	f000 f8a7 	bl	8003dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c76:	f000 f99d 	bl	8003fb4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003c7a:	f000 f8f5 	bl	8003e68 <MX_ADC1_Init>
  MX_DAC1_Init();
 8003c7e:	f000 f959 	bl	8003f34 <MX_DAC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int frequency = 65;
 8003c82:	2341      	movs	r3, #65	; 0x41
 8003c84:	623b      	str	r3, [r7, #32]
  int numSamples = 4*frequency;
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	61fb      	str	r3, [r7, #28]
  int timestep = (int) 1/frequency/numSamples*1000; // get the timestep in ms
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	fb92 f2f3 	sdiv	r2, r2, r3
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ca2:	61bb      	str	r3, [r7, #24]
  int nb = 8; // number of bits in data
 8003ca4:	2308      	movs	r3, #8
 8003ca6:	617b      	str	r3, [r7, #20]

  sawtooth_data = 0;
 8003ca8:	4b41      	ldr	r3, [pc, #260]	; (8003db0 <main+0x148>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
  triangle_data = 0;
 8003cae:	4b41      	ldr	r3, [pc, #260]	; (8003db4 <main+0x14c>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
  double sawtooth;
  double triangle;

  int i = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//HAL_DAC_setValue(sawtooth[i]);
	sawtooth = sawtoothArray[i];
 8003cb8:	4a3f      	ldr	r2, [pc, #252]	; (8003db8 <main+0x150>)
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	triangle = triangleArray[i];
 8003cc8:	4a3c      	ldr	r2, [pc, #240]	; (8003dbc <main+0x154>)
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd4:	e9c7 2300 	strd	r2, r3, [r7]
	sawtooth_data = sawtooth*pow(2,nb)/3.4;
 8003cd8:	6978      	ldr	r0, [r7, #20]
 8003cda:	f7fc fc3b 	bl	8000554 <__aeabi_i2d>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	ec43 2b11 	vmov	d1, r2, r3
 8003ce6:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 8003da0 <main+0x138>
 8003cea:	f003 f8e1 	bl	8006eb0 <pow>
 8003cee:	ec51 0b10 	vmov	r0, r1, d0
 8003cf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cf6:	f7fc fc97 	bl	8000628 <__aeabi_dmul>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4610      	mov	r0, r2
 8003d00:	4619      	mov	r1, r3
 8003d02:	a329      	add	r3, pc, #164	; (adr r3, 8003da8 <main+0x140>)
 8003d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d08:	f7fc fdb8 	bl	800087c <__aeabi_ddiv>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	f7fc ff38 	bl	8000b88 <__aeabi_d2iz>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4a25      	ldr	r2, [pc, #148]	; (8003db0 <main+0x148>)
 8003d1c:	6013      	str	r3, [r2, #0]
	triangle_data = triangle*pow(2,nb)/3.4;
 8003d1e:	6978      	ldr	r0, [r7, #20]
 8003d20:	f7fc fc18 	bl	8000554 <__aeabi_i2d>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	ec43 2b11 	vmov	d1, r2, r3
 8003d2c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8003da0 <main+0x138>
 8003d30:	f003 f8be 	bl	8006eb0 <pow>
 8003d34:	ec51 0b10 	vmov	r0, r1, d0
 8003d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d3c:	f7fc fc74 	bl	8000628 <__aeabi_dmul>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4610      	mov	r0, r2
 8003d46:	4619      	mov	r1, r3
 8003d48:	a317      	add	r3, pc, #92	; (adr r3, 8003da8 <main+0x140>)
 8003d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4e:	f7fc fd95 	bl	800087c <__aeabi_ddiv>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4610      	mov	r0, r2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f7fc ff15 	bl	8000b88 <__aeabi_d2iz>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4a14      	ldr	r2, [pc, #80]	; (8003db4 <main+0x14c>)
 8003d62:	6013      	str	r3, [r2, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, sawtooth_data);
 8003d64:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <main+0x148>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2208      	movs	r2, #8
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	4814      	ldr	r0, [pc, #80]	; (8003dc0 <main+0x158>)
 8003d6e:	f7fd ffba 	bl	8001ce6 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_8B_R, triangle_data);
 8003d72:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <main+0x14c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2208      	movs	r2, #8
 8003d78:	2110      	movs	r1, #16
 8003d7a:	4811      	ldr	r0, [pc, #68]	; (8003dc0 <main+0x158>)
 8003d7c:	f7fd ffb3 	bl	8001ce6 <HAL_DAC_SetValue>
    HAL_Delay(timestep); //Ts
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fc ff9c 	bl	8000cc0 <HAL_Delay>

    i++;
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
	if (i == numSamples) {
 8003d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d190      	bne.n	8003cb8 <main+0x50>
		i = 0;
 8003d96:	2300      	movs	r3, #0
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
	sawtooth = sawtoothArray[i];
 8003d9a:	e78d      	b.n	8003cb8 <main+0x50>
 8003d9c:	f3af 8000 	nop.w
 8003da0:	00000000 	.word	0x00000000
 8003da4:	40000000 	.word	0x40000000
 8003da8:	33333333 	.word	0x33333333
 8003dac:	400b3333 	.word	0x400b3333
 8003db0:	200012b8 	.word	0x200012b8
 8003db4:	200012bc 	.word	0x200012bc
 8003db8:	20000008 	.word	0x20000008
 8003dbc:	20000828 	.word	0x20000828
 8003dc0:	200012a4 	.word	0x200012a4

08003dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b096      	sub	sp, #88	; 0x58
 8003dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dca:	f107 0314 	add.w	r3, r7, #20
 8003dce:	2244      	movs	r2, #68	; 0x44
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fb4c 	bl	8004470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003dd8:	463b      	mov	r3, r7
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	605a      	str	r2, [r3, #4]
 8003de0:	609a      	str	r2, [r3, #8]
 8003de2:	60da      	str	r2, [r3, #12]
 8003de4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8003de6:	2000      	movs	r0, #0
 8003de8:	f7fe faac 	bl	8002344 <HAL_PWREx_ControlVoltageScaling>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8003df2:	f000 f957 	bl	80040a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003df6:	2310      	movs	r3, #16
 8003df8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003e02:	2360      	movs	r3, #96	; 0x60
 8003e04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e06:	2302      	movs	r3, #2
 8003e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8003e12:	233c      	movs	r3, #60	; 0x3c
 8003e14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e16:	2302      	movs	r3, #2
 8003e18:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e22:	f107 0314 	add.w	r3, r7, #20
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe fb30 	bl	800248c <HAL_RCC_OscConfig>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003e32:	f000 f937 	bl	80040a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e36:	230f      	movs	r3, #15
 8003e38:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e46:	2300      	movs	r3, #0
 8003e48:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003e4a:	463b      	mov	r3, r7
 8003e4c:	2105      	movs	r1, #5
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe ff36 	bl	8002cc0 <HAL_RCC_ClockConfig>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003e5a:	f000 f923 	bl	80040a4 <Error_Handler>
  }
}
 8003e5e:	bf00      	nop
 8003e60:	3758      	adds	r7, #88	; 0x58
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003e6e:	463b      	mov	r3, r7
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	609a      	str	r2, [r3, #8]
 8003e78:	60da      	str	r2, [r3, #12]
 8003e7a:	611a      	str	r2, [r3, #16]
 8003e7c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003e7e:	4b2a      	ldr	r3, [pc, #168]	; (8003f28 <MX_ADC1_Init+0xc0>)
 8003e80:	4a2a      	ldr	r2, [pc, #168]	; (8003f2c <MX_ADC1_Init+0xc4>)
 8003e82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003e84:	4b28      	ldr	r3, [pc, #160]	; (8003f28 <MX_ADC1_Init+0xc0>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003e8a:	4b27      	ldr	r3, [pc, #156]	; (8003f28 <MX_ADC1_Init+0xc0>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e90:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <MX_ADC1_Init+0xc0>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003e96:	4b24      	ldr	r3, [pc, #144]	; (8003f28 <MX_ADC1_Init+0xc0>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e9c:	4b22      	ldr	r3, [pc, #136]	; (8003f28 <MX_ADC1_Init+0xc0>)
 8003e9e:	2204      	movs	r2, #4
 8003ea0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003ea2:	4b21      	ldr	r3, [pc, #132]	; (8003f28 <MX_ADC1_Init+0xc0>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003ea8:	4b1f      	ldr	r3, [pc, #124]	; (8003f28 <MX_ADC1_Init+0xc0>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003eae:	4b1e      	ldr	r3, [pc, #120]	; (8003f28 <MX_ADC1_Init+0xc0>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003eb4:	4b1c      	ldr	r3, [pc, #112]	; (8003f28 <MX_ADC1_Init+0xc0>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ebc:	4b1a      	ldr	r3, [pc, #104]	; (8003f28 <MX_ADC1_Init+0xc0>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ec2:	4b19      	ldr	r3, [pc, #100]	; (8003f28 <MX_ADC1_Init+0xc0>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003ec8:	4b17      	ldr	r3, [pc, #92]	; (8003f28 <MX_ADC1_Init+0xc0>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003ed0:	4b15      	ldr	r3, [pc, #84]	; (8003f28 <MX_ADC1_Init+0xc0>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003ed6:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <MX_ADC1_Init+0xc0>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8003ede:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <MX_ADC1_Init+0xc0>)
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ee4:	4810      	ldr	r0, [pc, #64]	; (8003f28 <MX_ADC1_Init+0xc0>)
 8003ee6:	f7fd f8af 	bl	8001048 <HAL_ADC_Init>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8003ef0:	f000 f8d8 	bl	80040a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003ef4:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <MX_ADC1_Init+0xc8>)
 8003ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ef8:	2306      	movs	r3, #6
 8003efa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8003efc:	2307      	movs	r3, #7
 8003efe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003f00:	237f      	movs	r3, #127	; 0x7f
 8003f02:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003f04:	2304      	movs	r3, #4
 8003f06:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f0c:	463b      	mov	r3, r7
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4805      	ldr	r0, [pc, #20]	; (8003f28 <MX_ADC1_Init+0xc0>)
 8003f12:	f7fd f9e5 	bl	80012e0 <HAL_ADC_ConfigChannel>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8003f1c:	f000 f8c2 	bl	80040a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003f20:	bf00      	nop
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	2000123c 	.word	0x2000123c
 8003f2c:	50040000 	.word	0x50040000
 8003f30:	c7520000 	.word	0xc7520000

08003f34 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08a      	sub	sp, #40	; 0x28
 8003f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003f3a:	463b      	mov	r3, r7
 8003f3c:	2228      	movs	r2, #40	; 0x28
 8003f3e:	2100      	movs	r1, #0
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fa95 	bl	8004470 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003f46:	4b19      	ldr	r3, [pc, #100]	; (8003fac <MX_DAC1_Init+0x78>)
 8003f48:	4a19      	ldr	r2, [pc, #100]	; (8003fb0 <MX_DAC1_Init+0x7c>)
 8003f4a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003f4c:	4817      	ldr	r0, [pc, #92]	; (8003fac <MX_DAC1_Init+0x78>)
 8003f4e:	f7fd fea8 	bl	8001ca2 <HAL_DAC_Init>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8003f58:	f000 f8a4 	bl	80040a4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003f60:	2300      	movs	r3, #0
 8003f62:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003f64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f68:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003f76:	463b      	mov	r3, r7
 8003f78:	2200      	movs	r2, #0
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	480b      	ldr	r0, [pc, #44]	; (8003fac <MX_DAC1_Init+0x78>)
 8003f7e:	f7fd fed7 	bl	8001d30 <HAL_DAC_ConfigChannel>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8003f88:	f000 f88c 	bl	80040a4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003f8c:	463b      	mov	r3, r7
 8003f8e:	2210      	movs	r2, #16
 8003f90:	4619      	mov	r1, r3
 8003f92:	4806      	ldr	r0, [pc, #24]	; (8003fac <MX_DAC1_Init+0x78>)
 8003f94:	f7fd fecc 	bl	8001d30 <HAL_DAC_ConfigChannel>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <MX_DAC1_Init+0x6e>
  {
    Error_Handler();
 8003f9e:	f000 f881 	bl	80040a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003fa2:	bf00      	nop
 8003fa4:	3728      	adds	r7, #40	; 0x28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	200012a4 	.word	0x200012a4
 8003fb0:	40007400 	.word	0x40007400

08003fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fba:	f107 030c 	add.w	r3, r7, #12
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	605a      	str	r2, [r3, #4]
 8003fc4:	609a      	str	r2, [r3, #8]
 8003fc6:	60da      	str	r2, [r3, #12]
 8003fc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fca:	4b25      	ldr	r3, [pc, #148]	; (8004060 <MX_GPIO_Init+0xac>)
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fce:	4a24      	ldr	r2, [pc, #144]	; (8004060 <MX_GPIO_Init+0xac>)
 8003fd0:	f043 0304 	orr.w	r3, r3, #4
 8003fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fd6:	4b22      	ldr	r3, [pc, #136]	; (8004060 <MX_GPIO_Init+0xac>)
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	60bb      	str	r3, [r7, #8]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe2:	4b1f      	ldr	r3, [pc, #124]	; (8004060 <MX_GPIO_Init+0xac>)
 8003fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe6:	4a1e      	ldr	r2, [pc, #120]	; (8004060 <MX_GPIO_Init+0xac>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fee:	4b1c      	ldr	r3, [pc, #112]	; (8004060 <MX_GPIO_Init+0xac>)
 8003ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	607b      	str	r3, [r7, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ffa:	4b19      	ldr	r3, [pc, #100]	; (8004060 <MX_GPIO_Init+0xac>)
 8003ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ffe:	4a18      	ldr	r2, [pc, #96]	; (8004060 <MX_GPIO_Init+0xac>)
 8004000:	f043 0302 	orr.w	r3, r3, #2
 8004004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004006:	4b16      	ldr	r3, [pc, #88]	; (8004060 <MX_GPIO_Init+0xac>)
 8004008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_RESET);
 8004012:	2200      	movs	r2, #0
 8004014:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004018:	4812      	ldr	r0, [pc, #72]	; (8004064 <MX_GPIO_Init+0xb0>)
 800401a:	f7fe f95b 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : myButton_Pin */
  GPIO_InitStruct.Pin = myButton_Pin;
 800401e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004022:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004024:	2300      	movs	r3, #0
 8004026:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 800402c:	f107 030c 	add.w	r3, r7, #12
 8004030:	4619      	mov	r1, r3
 8004032:	480d      	ldr	r0, [pc, #52]	; (8004068 <MX_GPIO_Init+0xb4>)
 8004034:	f7fd ffbc 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : myLed_Pin */
  GPIO_InitStruct.Pin = myLed_Pin;
 8004038:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800403c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800403e:	2301      	movs	r3, #1
 8004040:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004046:	2300      	movs	r3, #0
 8004048:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(myLed_GPIO_Port, &GPIO_InitStruct);
 800404a:	f107 030c 	add.w	r3, r7, #12
 800404e:	4619      	mov	r1, r3
 8004050:	4804      	ldr	r0, [pc, #16]	; (8004064 <MX_GPIO_Init+0xb0>)
 8004052:	f7fd ffad 	bl	8001fb0 <HAL_GPIO_Init>

}
 8004056:	bf00      	nop
 8004058:	3720      	adds	r7, #32
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000
 8004064:	48000400 	.word	0x48000400
 8004068:	48000800 	.word	0x48000800

0800406c <_write>:

}

//function for printing to console (swb port 0)
int _write(int file, char *ptr, int len)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	e009      	b.n	8004092 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	60ba      	str	r2, [r7, #8]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff fdc4 	bl	8003c14 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	3301      	adds	r3, #1
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	429a      	cmp	r2, r3
 8004098:	dbf1      	blt.n	800407e <_write+0x12>
  }
  return len;
 800409a:	687b      	ldr	r3, [r7, #4]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040a8:	b672      	cpsid	i
}
 80040aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040ac:	e7fe      	b.n	80040ac <Error_Handler+0x8>
	...

080040b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040b6:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <HAL_MspInit+0x44>)
 80040b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ba:	4a0e      	ldr	r2, [pc, #56]	; (80040f4 <HAL_MspInit+0x44>)
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	6613      	str	r3, [r2, #96]	; 0x60
 80040c2:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <HAL_MspInit+0x44>)
 80040c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	607b      	str	r3, [r7, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040ce:	4b09      	ldr	r3, [pc, #36]	; (80040f4 <HAL_MspInit+0x44>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d2:	4a08      	ldr	r2, [pc, #32]	; (80040f4 <HAL_MspInit+0x44>)
 80040d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d8:	6593      	str	r3, [r2, #88]	; 0x58
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <HAL_MspInit+0x44>)
 80040dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e2:	603b      	str	r3, [r7, #0]
 80040e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	40021000 	.word	0x40021000

080040f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b0a8      	sub	sp, #160	; 0xa0
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004100:	f107 030c 	add.w	r3, r7, #12
 8004104:	2294      	movs	r2, #148	; 0x94
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f000 f9b1 	bl	8004470 <memset>
  if(hadc->Instance==ADC1)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a19      	ldr	r2, [pc, #100]	; (8004178 <HAL_ADC_MspInit+0x80>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d12b      	bne.n	8004170 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004118:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800411c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800411e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004122:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8004126:	2301      	movs	r3, #1
 8004128:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800412a:	2301      	movs	r3, #1
 800412c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800412e:	2318      	movs	r3, #24
 8004130:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8004132:	2302      	movs	r3, #2
 8004134:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004136:	2302      	movs	r3, #2
 8004138:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800413a:	2302      	movs	r3, #2
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800413e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004142:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004144:	f107 030c 	add.w	r3, r7, #12
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff f84b 	bl	80031e4 <HAL_RCCEx_PeriphCLKConfig>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8004154:	f7ff ffa6 	bl	80040a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004158:	4b08      	ldr	r3, [pc, #32]	; (800417c <HAL_ADC_MspInit+0x84>)
 800415a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415c:	4a07      	ldr	r2, [pc, #28]	; (800417c <HAL_ADC_MspInit+0x84>)
 800415e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004162:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004164:	4b05      	ldr	r3, [pc, #20]	; (800417c <HAL_ADC_MspInit+0x84>)
 8004166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004170:	bf00      	nop
 8004172:	37a0      	adds	r7, #160	; 0xa0
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	50040000 	.word	0x50040000
 800417c:	40021000 	.word	0x40021000

08004180 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08a      	sub	sp, #40	; 0x28
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004188:	f107 0314 	add.w	r3, r7, #20
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	605a      	str	r2, [r3, #4]
 8004192:	609a      	str	r2, [r3, #8]
 8004194:	60da      	str	r2, [r3, #12]
 8004196:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a15      	ldr	r2, [pc, #84]	; (80041f4 <HAL_DAC_MspInit+0x74>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d124      	bne.n	80041ec <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80041a2:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <HAL_DAC_MspInit+0x78>)
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	4a14      	ldr	r2, [pc, #80]	; (80041f8 <HAL_DAC_MspInit+0x78>)
 80041a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041ac:	6593      	str	r3, [r2, #88]	; 0x58
 80041ae:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <HAL_DAC_MspInit+0x78>)
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ba:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <HAL_DAC_MspInit+0x78>)
 80041bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041be:	4a0e      	ldr	r2, [pc, #56]	; (80041f8 <HAL_DAC_MspInit+0x78>)
 80041c0:	f043 0301 	orr.w	r3, r3, #1
 80041c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041c6:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <HAL_DAC_MspInit+0x78>)
 80041c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80041d2:	2330      	movs	r3, #48	; 0x30
 80041d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041d6:	2303      	movs	r3, #3
 80041d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041da:	2300      	movs	r3, #0
 80041dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041de:	f107 0314 	add.w	r3, r7, #20
 80041e2:	4619      	mov	r1, r3
 80041e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041e8:	f7fd fee2 	bl	8001fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80041ec:	bf00      	nop
 80041ee:	3728      	adds	r7, #40	; 0x28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40007400 	.word	0x40007400
 80041f8:	40021000 	.word	0x40021000

080041fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004200:	e7fe      	b.n	8004200 <NMI_Handler+0x4>

08004202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004202:	b480      	push	{r7}
 8004204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004206:	e7fe      	b.n	8004206 <HardFault_Handler+0x4>

08004208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800420c:	e7fe      	b.n	800420c <MemManage_Handler+0x4>

0800420e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800420e:	b480      	push	{r7}
 8004210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004212:	e7fe      	b.n	8004212 <BusFault_Handler+0x4>

08004214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004218:	e7fe      	b.n	8004218 <UsageFault_Handler+0x4>

0800421a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800421a:	b480      	push	{r7}
 800421c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800421e:	bf00      	nop
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800422c:	bf00      	nop
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004236:	b480      	push	{r7}
 8004238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800423a:	bf00      	nop
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004248:	f7fc fd1a 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800424c:	bf00      	nop
 800424e:	bd80      	pop	{r7, pc}

08004250 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  return 1;
 8004254:	2301      	movs	r3, #1
}
 8004256:	4618      	mov	r0, r3
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <_kill>:

int _kill(int pid, int sig)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800426a:	f000 f8d7 	bl	800441c <__errno>
 800426e:	4603      	mov	r3, r0
 8004270:	2216      	movs	r2, #22
 8004272:	601a      	str	r2, [r3, #0]
  return -1;
 8004274:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <_exit>:

void _exit (int status)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004288:	f04f 31ff 	mov.w	r1, #4294967295
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff ffe7 	bl	8004260 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004292:	e7fe      	b.n	8004292 <_exit+0x12>

08004294 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	e00a      	b.n	80042bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80042a6:	f3af 8000 	nop.w
 80042aa:	4601      	mov	r1, r0
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	60ba      	str	r2, [r7, #8]
 80042b2:	b2ca      	uxtb	r2, r1
 80042b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	3301      	adds	r3, #1
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	dbf0      	blt.n	80042a6 <_read+0x12>
  }

  return len;
 80042c4:	687b      	ldr	r3, [r7, #4]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <_close>:
  }
  return len;
}

int _close(int file)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042da:	4618      	mov	r0, r3
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042f6:	605a      	str	r2, [r3, #4]
  return 0;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <_isatty>:

int _isatty(int file)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800430e:	2301      	movs	r3, #1
}
 8004310:	4618      	mov	r0, r3
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004340:	4a14      	ldr	r2, [pc, #80]	; (8004394 <_sbrk+0x5c>)
 8004342:	4b15      	ldr	r3, [pc, #84]	; (8004398 <_sbrk+0x60>)
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800434c:	4b13      	ldr	r3, [pc, #76]	; (800439c <_sbrk+0x64>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d102      	bne.n	800435a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004354:	4b11      	ldr	r3, [pc, #68]	; (800439c <_sbrk+0x64>)
 8004356:	4a12      	ldr	r2, [pc, #72]	; (80043a0 <_sbrk+0x68>)
 8004358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800435a:	4b10      	ldr	r3, [pc, #64]	; (800439c <_sbrk+0x64>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4413      	add	r3, r2
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	429a      	cmp	r2, r3
 8004366:	d207      	bcs.n	8004378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004368:	f000 f858 	bl	800441c <__errno>
 800436c:	4603      	mov	r3, r0
 800436e:	220c      	movs	r2, #12
 8004370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004372:	f04f 33ff 	mov.w	r3, #4294967295
 8004376:	e009      	b.n	800438c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <_sbrk+0x64>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800437e:	4b07      	ldr	r3, [pc, #28]	; (800439c <_sbrk+0x64>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4413      	add	r3, r2
 8004386:	4a05      	ldr	r2, [pc, #20]	; (800439c <_sbrk+0x64>)
 8004388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800438a:	68fb      	ldr	r3, [r7, #12]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	200a0000 	.word	0x200a0000
 8004398:	00000400 	.word	0x00000400
 800439c:	200012c0 	.word	0x200012c0
 80043a0:	200012d8 	.word	0x200012d8

080043a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <SystemInit+0x20>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	4a05      	ldr	r2, [pc, #20]	; (80043c4 <SystemInit+0x20>)
 80043b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80043b8:	bf00      	nop
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	e000ed00 	.word	0xe000ed00

080043c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80043c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004400 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80043cc:	f7ff ffea 	bl	80043a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043d0:	480c      	ldr	r0, [pc, #48]	; (8004404 <LoopForever+0x6>)
  ldr r1, =_edata
 80043d2:	490d      	ldr	r1, [pc, #52]	; (8004408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043d4:	4a0d      	ldr	r2, [pc, #52]	; (800440c <LoopForever+0xe>)
  movs r3, #0
 80043d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043d8:	e002      	b.n	80043e0 <LoopCopyDataInit>

080043da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043de:	3304      	adds	r3, #4

080043e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043e4:	d3f9      	bcc.n	80043da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043e6:	4a0a      	ldr	r2, [pc, #40]	; (8004410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80043e8:	4c0a      	ldr	r4, [pc, #40]	; (8004414 <LoopForever+0x16>)
  movs r3, #0
 80043ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043ec:	e001      	b.n	80043f2 <LoopFillZerobss>

080043ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043f0:	3204      	adds	r2, #4

080043f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043f4:	d3fb      	bcc.n	80043ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043f6:	f000 f817 	bl	8004428 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80043fa:	f7ff fc35 	bl	8003c68 <main>

080043fe <LoopForever>:

LoopForever:
    b LoopForever
 80043fe:	e7fe      	b.n	80043fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004400:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8004404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004408:	2000121c 	.word	0x2000121c
  ldr r2, =_sidata
 800440c:	08008158 	.word	0x08008158
  ldr r2, =_sbss
 8004410:	2000121c 	.word	0x2000121c
  ldr r4, =_ebss
 8004414:	200012d4 	.word	0x200012d4

08004418 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004418:	e7fe      	b.n	8004418 <ADC1_IRQHandler>
	...

0800441c <__errno>:
 800441c:	4b01      	ldr	r3, [pc, #4]	; (8004424 <__errno+0x8>)
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	2000104c 	.word	0x2000104c

08004428 <__libc_init_array>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	4d0d      	ldr	r5, [pc, #52]	; (8004460 <__libc_init_array+0x38>)
 800442c:	4c0d      	ldr	r4, [pc, #52]	; (8004464 <__libc_init_array+0x3c>)
 800442e:	1b64      	subs	r4, r4, r5
 8004430:	10a4      	asrs	r4, r4, #2
 8004432:	2600      	movs	r6, #0
 8004434:	42a6      	cmp	r6, r4
 8004436:	d109      	bne.n	800444c <__libc_init_array+0x24>
 8004438:	4d0b      	ldr	r5, [pc, #44]	; (8004468 <__libc_init_array+0x40>)
 800443a:	4c0c      	ldr	r4, [pc, #48]	; (800446c <__libc_init_array+0x44>)
 800443c:	f003 fc52 	bl	8007ce4 <_init>
 8004440:	1b64      	subs	r4, r4, r5
 8004442:	10a4      	asrs	r4, r4, #2
 8004444:	2600      	movs	r6, #0
 8004446:	42a6      	cmp	r6, r4
 8004448:	d105      	bne.n	8004456 <__libc_init_array+0x2e>
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004450:	4798      	blx	r3
 8004452:	3601      	adds	r6, #1
 8004454:	e7ee      	b.n	8004434 <__libc_init_array+0xc>
 8004456:	f855 3b04 	ldr.w	r3, [r5], #4
 800445a:	4798      	blx	r3
 800445c:	3601      	adds	r6, #1
 800445e:	e7f2      	b.n	8004446 <__libc_init_array+0x1e>
 8004460:	08008150 	.word	0x08008150
 8004464:	08008150 	.word	0x08008150
 8004468:	08008150 	.word	0x08008150
 800446c:	08008154 	.word	0x08008154

08004470 <memset>:
 8004470:	4402      	add	r2, r0
 8004472:	4603      	mov	r3, r0
 8004474:	4293      	cmp	r3, r2
 8004476:	d100      	bne.n	800447a <memset+0xa>
 8004478:	4770      	bx	lr
 800447a:	f803 1b01 	strb.w	r1, [r3], #1
 800447e:	e7f9      	b.n	8004474 <memset+0x4>

08004480 <__cvt>:
 8004480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004484:	ec55 4b10 	vmov	r4, r5, d0
 8004488:	2d00      	cmp	r5, #0
 800448a:	460e      	mov	r6, r1
 800448c:	4619      	mov	r1, r3
 800448e:	462b      	mov	r3, r5
 8004490:	bfbb      	ittet	lt
 8004492:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004496:	461d      	movlt	r5, r3
 8004498:	2300      	movge	r3, #0
 800449a:	232d      	movlt	r3, #45	; 0x2d
 800449c:	700b      	strb	r3, [r1, #0]
 800449e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80044a4:	4691      	mov	r9, r2
 80044a6:	f023 0820 	bic.w	r8, r3, #32
 80044aa:	bfbc      	itt	lt
 80044ac:	4622      	movlt	r2, r4
 80044ae:	4614      	movlt	r4, r2
 80044b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044b4:	d005      	beq.n	80044c2 <__cvt+0x42>
 80044b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80044ba:	d100      	bne.n	80044be <__cvt+0x3e>
 80044bc:	3601      	adds	r6, #1
 80044be:	2102      	movs	r1, #2
 80044c0:	e000      	b.n	80044c4 <__cvt+0x44>
 80044c2:	2103      	movs	r1, #3
 80044c4:	ab03      	add	r3, sp, #12
 80044c6:	9301      	str	r3, [sp, #4]
 80044c8:	ab02      	add	r3, sp, #8
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	ec45 4b10 	vmov	d0, r4, r5
 80044d0:	4653      	mov	r3, sl
 80044d2:	4632      	mov	r2, r6
 80044d4:	f000 fccc 	bl	8004e70 <_dtoa_r>
 80044d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80044dc:	4607      	mov	r7, r0
 80044de:	d102      	bne.n	80044e6 <__cvt+0x66>
 80044e0:	f019 0f01 	tst.w	r9, #1
 80044e4:	d022      	beq.n	800452c <__cvt+0xac>
 80044e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044ea:	eb07 0906 	add.w	r9, r7, r6
 80044ee:	d110      	bne.n	8004512 <__cvt+0x92>
 80044f0:	783b      	ldrb	r3, [r7, #0]
 80044f2:	2b30      	cmp	r3, #48	; 0x30
 80044f4:	d10a      	bne.n	800450c <__cvt+0x8c>
 80044f6:	2200      	movs	r2, #0
 80044f8:	2300      	movs	r3, #0
 80044fa:	4620      	mov	r0, r4
 80044fc:	4629      	mov	r1, r5
 80044fe:	f7fc fafb 	bl	8000af8 <__aeabi_dcmpeq>
 8004502:	b918      	cbnz	r0, 800450c <__cvt+0x8c>
 8004504:	f1c6 0601 	rsb	r6, r6, #1
 8004508:	f8ca 6000 	str.w	r6, [sl]
 800450c:	f8da 3000 	ldr.w	r3, [sl]
 8004510:	4499      	add	r9, r3
 8004512:	2200      	movs	r2, #0
 8004514:	2300      	movs	r3, #0
 8004516:	4620      	mov	r0, r4
 8004518:	4629      	mov	r1, r5
 800451a:	f7fc faed 	bl	8000af8 <__aeabi_dcmpeq>
 800451e:	b108      	cbz	r0, 8004524 <__cvt+0xa4>
 8004520:	f8cd 900c 	str.w	r9, [sp, #12]
 8004524:	2230      	movs	r2, #48	; 0x30
 8004526:	9b03      	ldr	r3, [sp, #12]
 8004528:	454b      	cmp	r3, r9
 800452a:	d307      	bcc.n	800453c <__cvt+0xbc>
 800452c:	9b03      	ldr	r3, [sp, #12]
 800452e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004530:	1bdb      	subs	r3, r3, r7
 8004532:	4638      	mov	r0, r7
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	b004      	add	sp, #16
 8004538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800453c:	1c59      	adds	r1, r3, #1
 800453e:	9103      	str	r1, [sp, #12]
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	e7f0      	b.n	8004526 <__cvt+0xa6>

08004544 <__exponent>:
 8004544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004546:	4603      	mov	r3, r0
 8004548:	2900      	cmp	r1, #0
 800454a:	bfb8      	it	lt
 800454c:	4249      	neglt	r1, r1
 800454e:	f803 2b02 	strb.w	r2, [r3], #2
 8004552:	bfb4      	ite	lt
 8004554:	222d      	movlt	r2, #45	; 0x2d
 8004556:	222b      	movge	r2, #43	; 0x2b
 8004558:	2909      	cmp	r1, #9
 800455a:	7042      	strb	r2, [r0, #1]
 800455c:	dd2a      	ble.n	80045b4 <__exponent+0x70>
 800455e:	f10d 0407 	add.w	r4, sp, #7
 8004562:	46a4      	mov	ip, r4
 8004564:	270a      	movs	r7, #10
 8004566:	46a6      	mov	lr, r4
 8004568:	460a      	mov	r2, r1
 800456a:	fb91 f6f7 	sdiv	r6, r1, r7
 800456e:	fb07 1516 	mls	r5, r7, r6, r1
 8004572:	3530      	adds	r5, #48	; 0x30
 8004574:	2a63      	cmp	r2, #99	; 0x63
 8004576:	f104 34ff 	add.w	r4, r4, #4294967295
 800457a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800457e:	4631      	mov	r1, r6
 8004580:	dcf1      	bgt.n	8004566 <__exponent+0x22>
 8004582:	3130      	adds	r1, #48	; 0x30
 8004584:	f1ae 0502 	sub.w	r5, lr, #2
 8004588:	f804 1c01 	strb.w	r1, [r4, #-1]
 800458c:	1c44      	adds	r4, r0, #1
 800458e:	4629      	mov	r1, r5
 8004590:	4561      	cmp	r1, ip
 8004592:	d30a      	bcc.n	80045aa <__exponent+0x66>
 8004594:	f10d 0209 	add.w	r2, sp, #9
 8004598:	eba2 020e 	sub.w	r2, r2, lr
 800459c:	4565      	cmp	r5, ip
 800459e:	bf88      	it	hi
 80045a0:	2200      	movhi	r2, #0
 80045a2:	4413      	add	r3, r2
 80045a4:	1a18      	subs	r0, r3, r0
 80045a6:	b003      	add	sp, #12
 80045a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80045b2:	e7ed      	b.n	8004590 <__exponent+0x4c>
 80045b4:	2330      	movs	r3, #48	; 0x30
 80045b6:	3130      	adds	r1, #48	; 0x30
 80045b8:	7083      	strb	r3, [r0, #2]
 80045ba:	70c1      	strb	r1, [r0, #3]
 80045bc:	1d03      	adds	r3, r0, #4
 80045be:	e7f1      	b.n	80045a4 <__exponent+0x60>

080045c0 <_printf_float>:
 80045c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c4:	ed2d 8b02 	vpush	{d8}
 80045c8:	b08d      	sub	sp, #52	; 0x34
 80045ca:	460c      	mov	r4, r1
 80045cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80045d0:	4616      	mov	r6, r2
 80045d2:	461f      	mov	r7, r3
 80045d4:	4605      	mov	r5, r0
 80045d6:	f001 fa39 	bl	8005a4c <_localeconv_r>
 80045da:	f8d0 a000 	ldr.w	sl, [r0]
 80045de:	4650      	mov	r0, sl
 80045e0:	f7fb fe0e 	bl	8000200 <strlen>
 80045e4:	2300      	movs	r3, #0
 80045e6:	930a      	str	r3, [sp, #40]	; 0x28
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	9305      	str	r3, [sp, #20]
 80045ec:	f8d8 3000 	ldr.w	r3, [r8]
 80045f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80045f4:	3307      	adds	r3, #7
 80045f6:	f023 0307 	bic.w	r3, r3, #7
 80045fa:	f103 0208 	add.w	r2, r3, #8
 80045fe:	f8c8 2000 	str.w	r2, [r8]
 8004602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004606:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800460a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800460e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004612:	9307      	str	r3, [sp, #28]
 8004614:	f8cd 8018 	str.w	r8, [sp, #24]
 8004618:	ee08 0a10 	vmov	s16, r0
 800461c:	4b9f      	ldr	r3, [pc, #636]	; (800489c <_printf_float+0x2dc>)
 800461e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004622:	f04f 32ff 	mov.w	r2, #4294967295
 8004626:	f7fc fa99 	bl	8000b5c <__aeabi_dcmpun>
 800462a:	bb88      	cbnz	r0, 8004690 <_printf_float+0xd0>
 800462c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004630:	4b9a      	ldr	r3, [pc, #616]	; (800489c <_printf_float+0x2dc>)
 8004632:	f04f 32ff 	mov.w	r2, #4294967295
 8004636:	f7fc fa73 	bl	8000b20 <__aeabi_dcmple>
 800463a:	bb48      	cbnz	r0, 8004690 <_printf_float+0xd0>
 800463c:	2200      	movs	r2, #0
 800463e:	2300      	movs	r3, #0
 8004640:	4640      	mov	r0, r8
 8004642:	4649      	mov	r1, r9
 8004644:	f7fc fa62 	bl	8000b0c <__aeabi_dcmplt>
 8004648:	b110      	cbz	r0, 8004650 <_printf_float+0x90>
 800464a:	232d      	movs	r3, #45	; 0x2d
 800464c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004650:	4b93      	ldr	r3, [pc, #588]	; (80048a0 <_printf_float+0x2e0>)
 8004652:	4894      	ldr	r0, [pc, #592]	; (80048a4 <_printf_float+0x2e4>)
 8004654:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004658:	bf94      	ite	ls
 800465a:	4698      	movls	r8, r3
 800465c:	4680      	movhi	r8, r0
 800465e:	2303      	movs	r3, #3
 8004660:	6123      	str	r3, [r4, #16]
 8004662:	9b05      	ldr	r3, [sp, #20]
 8004664:	f023 0204 	bic.w	r2, r3, #4
 8004668:	6022      	str	r2, [r4, #0]
 800466a:	f04f 0900 	mov.w	r9, #0
 800466e:	9700      	str	r7, [sp, #0]
 8004670:	4633      	mov	r3, r6
 8004672:	aa0b      	add	r2, sp, #44	; 0x2c
 8004674:	4621      	mov	r1, r4
 8004676:	4628      	mov	r0, r5
 8004678:	f000 f9d8 	bl	8004a2c <_printf_common>
 800467c:	3001      	adds	r0, #1
 800467e:	f040 8090 	bne.w	80047a2 <_printf_float+0x1e2>
 8004682:	f04f 30ff 	mov.w	r0, #4294967295
 8004686:	b00d      	add	sp, #52	; 0x34
 8004688:	ecbd 8b02 	vpop	{d8}
 800468c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004690:	4642      	mov	r2, r8
 8004692:	464b      	mov	r3, r9
 8004694:	4640      	mov	r0, r8
 8004696:	4649      	mov	r1, r9
 8004698:	f7fc fa60 	bl	8000b5c <__aeabi_dcmpun>
 800469c:	b140      	cbz	r0, 80046b0 <_printf_float+0xf0>
 800469e:	464b      	mov	r3, r9
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bfbc      	itt	lt
 80046a4:	232d      	movlt	r3, #45	; 0x2d
 80046a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80046aa:	487f      	ldr	r0, [pc, #508]	; (80048a8 <_printf_float+0x2e8>)
 80046ac:	4b7f      	ldr	r3, [pc, #508]	; (80048ac <_printf_float+0x2ec>)
 80046ae:	e7d1      	b.n	8004654 <_printf_float+0x94>
 80046b0:	6863      	ldr	r3, [r4, #4]
 80046b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80046b6:	9206      	str	r2, [sp, #24]
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	d13f      	bne.n	800473c <_printf_float+0x17c>
 80046bc:	2306      	movs	r3, #6
 80046be:	6063      	str	r3, [r4, #4]
 80046c0:	9b05      	ldr	r3, [sp, #20]
 80046c2:	6861      	ldr	r1, [r4, #4]
 80046c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80046c8:	2300      	movs	r3, #0
 80046ca:	9303      	str	r3, [sp, #12]
 80046cc:	ab0a      	add	r3, sp, #40	; 0x28
 80046ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80046d2:	ab09      	add	r3, sp, #36	; 0x24
 80046d4:	ec49 8b10 	vmov	d0, r8, r9
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	6022      	str	r2, [r4, #0]
 80046dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80046e0:	4628      	mov	r0, r5
 80046e2:	f7ff fecd 	bl	8004480 <__cvt>
 80046e6:	9b06      	ldr	r3, [sp, #24]
 80046e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046ea:	2b47      	cmp	r3, #71	; 0x47
 80046ec:	4680      	mov	r8, r0
 80046ee:	d108      	bne.n	8004702 <_printf_float+0x142>
 80046f0:	1cc8      	adds	r0, r1, #3
 80046f2:	db02      	blt.n	80046fa <_printf_float+0x13a>
 80046f4:	6863      	ldr	r3, [r4, #4]
 80046f6:	4299      	cmp	r1, r3
 80046f8:	dd41      	ble.n	800477e <_printf_float+0x1be>
 80046fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80046fe:	fa5f fb8b 	uxtb.w	fp, fp
 8004702:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004706:	d820      	bhi.n	800474a <_printf_float+0x18a>
 8004708:	3901      	subs	r1, #1
 800470a:	465a      	mov	r2, fp
 800470c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004710:	9109      	str	r1, [sp, #36]	; 0x24
 8004712:	f7ff ff17 	bl	8004544 <__exponent>
 8004716:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004718:	1813      	adds	r3, r2, r0
 800471a:	2a01      	cmp	r2, #1
 800471c:	4681      	mov	r9, r0
 800471e:	6123      	str	r3, [r4, #16]
 8004720:	dc02      	bgt.n	8004728 <_printf_float+0x168>
 8004722:	6822      	ldr	r2, [r4, #0]
 8004724:	07d2      	lsls	r2, r2, #31
 8004726:	d501      	bpl.n	800472c <_printf_float+0x16c>
 8004728:	3301      	adds	r3, #1
 800472a:	6123      	str	r3, [r4, #16]
 800472c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004730:	2b00      	cmp	r3, #0
 8004732:	d09c      	beq.n	800466e <_printf_float+0xae>
 8004734:	232d      	movs	r3, #45	; 0x2d
 8004736:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800473a:	e798      	b.n	800466e <_printf_float+0xae>
 800473c:	9a06      	ldr	r2, [sp, #24]
 800473e:	2a47      	cmp	r2, #71	; 0x47
 8004740:	d1be      	bne.n	80046c0 <_printf_float+0x100>
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1bc      	bne.n	80046c0 <_printf_float+0x100>
 8004746:	2301      	movs	r3, #1
 8004748:	e7b9      	b.n	80046be <_printf_float+0xfe>
 800474a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800474e:	d118      	bne.n	8004782 <_printf_float+0x1c2>
 8004750:	2900      	cmp	r1, #0
 8004752:	6863      	ldr	r3, [r4, #4]
 8004754:	dd0b      	ble.n	800476e <_printf_float+0x1ae>
 8004756:	6121      	str	r1, [r4, #16]
 8004758:	b913      	cbnz	r3, 8004760 <_printf_float+0x1a0>
 800475a:	6822      	ldr	r2, [r4, #0]
 800475c:	07d0      	lsls	r0, r2, #31
 800475e:	d502      	bpl.n	8004766 <_printf_float+0x1a6>
 8004760:	3301      	adds	r3, #1
 8004762:	440b      	add	r3, r1
 8004764:	6123      	str	r3, [r4, #16]
 8004766:	65a1      	str	r1, [r4, #88]	; 0x58
 8004768:	f04f 0900 	mov.w	r9, #0
 800476c:	e7de      	b.n	800472c <_printf_float+0x16c>
 800476e:	b913      	cbnz	r3, 8004776 <_printf_float+0x1b6>
 8004770:	6822      	ldr	r2, [r4, #0]
 8004772:	07d2      	lsls	r2, r2, #31
 8004774:	d501      	bpl.n	800477a <_printf_float+0x1ba>
 8004776:	3302      	adds	r3, #2
 8004778:	e7f4      	b.n	8004764 <_printf_float+0x1a4>
 800477a:	2301      	movs	r3, #1
 800477c:	e7f2      	b.n	8004764 <_printf_float+0x1a4>
 800477e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004784:	4299      	cmp	r1, r3
 8004786:	db05      	blt.n	8004794 <_printf_float+0x1d4>
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	6121      	str	r1, [r4, #16]
 800478c:	07d8      	lsls	r0, r3, #31
 800478e:	d5ea      	bpl.n	8004766 <_printf_float+0x1a6>
 8004790:	1c4b      	adds	r3, r1, #1
 8004792:	e7e7      	b.n	8004764 <_printf_float+0x1a4>
 8004794:	2900      	cmp	r1, #0
 8004796:	bfd4      	ite	le
 8004798:	f1c1 0202 	rsble	r2, r1, #2
 800479c:	2201      	movgt	r2, #1
 800479e:	4413      	add	r3, r2
 80047a0:	e7e0      	b.n	8004764 <_printf_float+0x1a4>
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	055a      	lsls	r2, r3, #21
 80047a6:	d407      	bmi.n	80047b8 <_printf_float+0x1f8>
 80047a8:	6923      	ldr	r3, [r4, #16]
 80047aa:	4642      	mov	r2, r8
 80047ac:	4631      	mov	r1, r6
 80047ae:	4628      	mov	r0, r5
 80047b0:	47b8      	blx	r7
 80047b2:	3001      	adds	r0, #1
 80047b4:	d12c      	bne.n	8004810 <_printf_float+0x250>
 80047b6:	e764      	b.n	8004682 <_printf_float+0xc2>
 80047b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80047bc:	f240 80e0 	bls.w	8004980 <_printf_float+0x3c0>
 80047c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047c4:	2200      	movs	r2, #0
 80047c6:	2300      	movs	r3, #0
 80047c8:	f7fc f996 	bl	8000af8 <__aeabi_dcmpeq>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d034      	beq.n	800483a <_printf_float+0x27a>
 80047d0:	4a37      	ldr	r2, [pc, #220]	; (80048b0 <_printf_float+0x2f0>)
 80047d2:	2301      	movs	r3, #1
 80047d4:	4631      	mov	r1, r6
 80047d6:	4628      	mov	r0, r5
 80047d8:	47b8      	blx	r7
 80047da:	3001      	adds	r0, #1
 80047dc:	f43f af51 	beq.w	8004682 <_printf_float+0xc2>
 80047e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047e4:	429a      	cmp	r2, r3
 80047e6:	db02      	blt.n	80047ee <_printf_float+0x22e>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	07d8      	lsls	r0, r3, #31
 80047ec:	d510      	bpl.n	8004810 <_printf_float+0x250>
 80047ee:	ee18 3a10 	vmov	r3, s16
 80047f2:	4652      	mov	r2, sl
 80047f4:	4631      	mov	r1, r6
 80047f6:	4628      	mov	r0, r5
 80047f8:	47b8      	blx	r7
 80047fa:	3001      	adds	r0, #1
 80047fc:	f43f af41 	beq.w	8004682 <_printf_float+0xc2>
 8004800:	f04f 0800 	mov.w	r8, #0
 8004804:	f104 091a 	add.w	r9, r4, #26
 8004808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800480a:	3b01      	subs	r3, #1
 800480c:	4543      	cmp	r3, r8
 800480e:	dc09      	bgt.n	8004824 <_printf_float+0x264>
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	079b      	lsls	r3, r3, #30
 8004814:	f100 8105 	bmi.w	8004a22 <_printf_float+0x462>
 8004818:	68e0      	ldr	r0, [r4, #12]
 800481a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800481c:	4298      	cmp	r0, r3
 800481e:	bfb8      	it	lt
 8004820:	4618      	movlt	r0, r3
 8004822:	e730      	b.n	8004686 <_printf_float+0xc6>
 8004824:	2301      	movs	r3, #1
 8004826:	464a      	mov	r2, r9
 8004828:	4631      	mov	r1, r6
 800482a:	4628      	mov	r0, r5
 800482c:	47b8      	blx	r7
 800482e:	3001      	adds	r0, #1
 8004830:	f43f af27 	beq.w	8004682 <_printf_float+0xc2>
 8004834:	f108 0801 	add.w	r8, r8, #1
 8004838:	e7e6      	b.n	8004808 <_printf_float+0x248>
 800483a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800483c:	2b00      	cmp	r3, #0
 800483e:	dc39      	bgt.n	80048b4 <_printf_float+0x2f4>
 8004840:	4a1b      	ldr	r2, [pc, #108]	; (80048b0 <_printf_float+0x2f0>)
 8004842:	2301      	movs	r3, #1
 8004844:	4631      	mov	r1, r6
 8004846:	4628      	mov	r0, r5
 8004848:	47b8      	blx	r7
 800484a:	3001      	adds	r0, #1
 800484c:	f43f af19 	beq.w	8004682 <_printf_float+0xc2>
 8004850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004854:	4313      	orrs	r3, r2
 8004856:	d102      	bne.n	800485e <_printf_float+0x29e>
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	07d9      	lsls	r1, r3, #31
 800485c:	d5d8      	bpl.n	8004810 <_printf_float+0x250>
 800485e:	ee18 3a10 	vmov	r3, s16
 8004862:	4652      	mov	r2, sl
 8004864:	4631      	mov	r1, r6
 8004866:	4628      	mov	r0, r5
 8004868:	47b8      	blx	r7
 800486a:	3001      	adds	r0, #1
 800486c:	f43f af09 	beq.w	8004682 <_printf_float+0xc2>
 8004870:	f04f 0900 	mov.w	r9, #0
 8004874:	f104 0a1a 	add.w	sl, r4, #26
 8004878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800487a:	425b      	negs	r3, r3
 800487c:	454b      	cmp	r3, r9
 800487e:	dc01      	bgt.n	8004884 <_printf_float+0x2c4>
 8004880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004882:	e792      	b.n	80047aa <_printf_float+0x1ea>
 8004884:	2301      	movs	r3, #1
 8004886:	4652      	mov	r2, sl
 8004888:	4631      	mov	r1, r6
 800488a:	4628      	mov	r0, r5
 800488c:	47b8      	blx	r7
 800488e:	3001      	adds	r0, #1
 8004890:	f43f aef7 	beq.w	8004682 <_printf_float+0xc2>
 8004894:	f109 0901 	add.w	r9, r9, #1
 8004898:	e7ee      	b.n	8004878 <_printf_float+0x2b8>
 800489a:	bf00      	nop
 800489c:	7fefffff 	.word	0x7fefffff
 80048a0:	08007d44 	.word	0x08007d44
 80048a4:	08007d48 	.word	0x08007d48
 80048a8:	08007d50 	.word	0x08007d50
 80048ac:	08007d4c 	.word	0x08007d4c
 80048b0:	08007d54 	.word	0x08007d54
 80048b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048b8:	429a      	cmp	r2, r3
 80048ba:	bfa8      	it	ge
 80048bc:	461a      	movge	r2, r3
 80048be:	2a00      	cmp	r2, #0
 80048c0:	4691      	mov	r9, r2
 80048c2:	dc37      	bgt.n	8004934 <_printf_float+0x374>
 80048c4:	f04f 0b00 	mov.w	fp, #0
 80048c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048cc:	f104 021a 	add.w	r2, r4, #26
 80048d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048d2:	9305      	str	r3, [sp, #20]
 80048d4:	eba3 0309 	sub.w	r3, r3, r9
 80048d8:	455b      	cmp	r3, fp
 80048da:	dc33      	bgt.n	8004944 <_printf_float+0x384>
 80048dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048e0:	429a      	cmp	r2, r3
 80048e2:	db3b      	blt.n	800495c <_printf_float+0x39c>
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	07da      	lsls	r2, r3, #31
 80048e8:	d438      	bmi.n	800495c <_printf_float+0x39c>
 80048ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048ec:	9a05      	ldr	r2, [sp, #20]
 80048ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048f0:	1a9a      	subs	r2, r3, r2
 80048f2:	eba3 0901 	sub.w	r9, r3, r1
 80048f6:	4591      	cmp	r9, r2
 80048f8:	bfa8      	it	ge
 80048fa:	4691      	movge	r9, r2
 80048fc:	f1b9 0f00 	cmp.w	r9, #0
 8004900:	dc35      	bgt.n	800496e <_printf_float+0x3ae>
 8004902:	f04f 0800 	mov.w	r8, #0
 8004906:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800490a:	f104 0a1a 	add.w	sl, r4, #26
 800490e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	eba3 0309 	sub.w	r3, r3, r9
 8004918:	4543      	cmp	r3, r8
 800491a:	f77f af79 	ble.w	8004810 <_printf_float+0x250>
 800491e:	2301      	movs	r3, #1
 8004920:	4652      	mov	r2, sl
 8004922:	4631      	mov	r1, r6
 8004924:	4628      	mov	r0, r5
 8004926:	47b8      	blx	r7
 8004928:	3001      	adds	r0, #1
 800492a:	f43f aeaa 	beq.w	8004682 <_printf_float+0xc2>
 800492e:	f108 0801 	add.w	r8, r8, #1
 8004932:	e7ec      	b.n	800490e <_printf_float+0x34e>
 8004934:	4613      	mov	r3, r2
 8004936:	4631      	mov	r1, r6
 8004938:	4642      	mov	r2, r8
 800493a:	4628      	mov	r0, r5
 800493c:	47b8      	blx	r7
 800493e:	3001      	adds	r0, #1
 8004940:	d1c0      	bne.n	80048c4 <_printf_float+0x304>
 8004942:	e69e      	b.n	8004682 <_printf_float+0xc2>
 8004944:	2301      	movs	r3, #1
 8004946:	4631      	mov	r1, r6
 8004948:	4628      	mov	r0, r5
 800494a:	9205      	str	r2, [sp, #20]
 800494c:	47b8      	blx	r7
 800494e:	3001      	adds	r0, #1
 8004950:	f43f ae97 	beq.w	8004682 <_printf_float+0xc2>
 8004954:	9a05      	ldr	r2, [sp, #20]
 8004956:	f10b 0b01 	add.w	fp, fp, #1
 800495a:	e7b9      	b.n	80048d0 <_printf_float+0x310>
 800495c:	ee18 3a10 	vmov	r3, s16
 8004960:	4652      	mov	r2, sl
 8004962:	4631      	mov	r1, r6
 8004964:	4628      	mov	r0, r5
 8004966:	47b8      	blx	r7
 8004968:	3001      	adds	r0, #1
 800496a:	d1be      	bne.n	80048ea <_printf_float+0x32a>
 800496c:	e689      	b.n	8004682 <_printf_float+0xc2>
 800496e:	9a05      	ldr	r2, [sp, #20]
 8004970:	464b      	mov	r3, r9
 8004972:	4442      	add	r2, r8
 8004974:	4631      	mov	r1, r6
 8004976:	4628      	mov	r0, r5
 8004978:	47b8      	blx	r7
 800497a:	3001      	adds	r0, #1
 800497c:	d1c1      	bne.n	8004902 <_printf_float+0x342>
 800497e:	e680      	b.n	8004682 <_printf_float+0xc2>
 8004980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004982:	2a01      	cmp	r2, #1
 8004984:	dc01      	bgt.n	800498a <_printf_float+0x3ca>
 8004986:	07db      	lsls	r3, r3, #31
 8004988:	d538      	bpl.n	80049fc <_printf_float+0x43c>
 800498a:	2301      	movs	r3, #1
 800498c:	4642      	mov	r2, r8
 800498e:	4631      	mov	r1, r6
 8004990:	4628      	mov	r0, r5
 8004992:	47b8      	blx	r7
 8004994:	3001      	adds	r0, #1
 8004996:	f43f ae74 	beq.w	8004682 <_printf_float+0xc2>
 800499a:	ee18 3a10 	vmov	r3, s16
 800499e:	4652      	mov	r2, sl
 80049a0:	4631      	mov	r1, r6
 80049a2:	4628      	mov	r0, r5
 80049a4:	47b8      	blx	r7
 80049a6:	3001      	adds	r0, #1
 80049a8:	f43f ae6b 	beq.w	8004682 <_printf_float+0xc2>
 80049ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049b0:	2200      	movs	r2, #0
 80049b2:	2300      	movs	r3, #0
 80049b4:	f7fc f8a0 	bl	8000af8 <__aeabi_dcmpeq>
 80049b8:	b9d8      	cbnz	r0, 80049f2 <_printf_float+0x432>
 80049ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049bc:	f108 0201 	add.w	r2, r8, #1
 80049c0:	3b01      	subs	r3, #1
 80049c2:	4631      	mov	r1, r6
 80049c4:	4628      	mov	r0, r5
 80049c6:	47b8      	blx	r7
 80049c8:	3001      	adds	r0, #1
 80049ca:	d10e      	bne.n	80049ea <_printf_float+0x42a>
 80049cc:	e659      	b.n	8004682 <_printf_float+0xc2>
 80049ce:	2301      	movs	r3, #1
 80049d0:	4652      	mov	r2, sl
 80049d2:	4631      	mov	r1, r6
 80049d4:	4628      	mov	r0, r5
 80049d6:	47b8      	blx	r7
 80049d8:	3001      	adds	r0, #1
 80049da:	f43f ae52 	beq.w	8004682 <_printf_float+0xc2>
 80049de:	f108 0801 	add.w	r8, r8, #1
 80049e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049e4:	3b01      	subs	r3, #1
 80049e6:	4543      	cmp	r3, r8
 80049e8:	dcf1      	bgt.n	80049ce <_printf_float+0x40e>
 80049ea:	464b      	mov	r3, r9
 80049ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80049f0:	e6dc      	b.n	80047ac <_printf_float+0x1ec>
 80049f2:	f04f 0800 	mov.w	r8, #0
 80049f6:	f104 0a1a 	add.w	sl, r4, #26
 80049fa:	e7f2      	b.n	80049e2 <_printf_float+0x422>
 80049fc:	2301      	movs	r3, #1
 80049fe:	4642      	mov	r2, r8
 8004a00:	e7df      	b.n	80049c2 <_printf_float+0x402>
 8004a02:	2301      	movs	r3, #1
 8004a04:	464a      	mov	r2, r9
 8004a06:	4631      	mov	r1, r6
 8004a08:	4628      	mov	r0, r5
 8004a0a:	47b8      	blx	r7
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	f43f ae38 	beq.w	8004682 <_printf_float+0xc2>
 8004a12:	f108 0801 	add.w	r8, r8, #1
 8004a16:	68e3      	ldr	r3, [r4, #12]
 8004a18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a1a:	1a5b      	subs	r3, r3, r1
 8004a1c:	4543      	cmp	r3, r8
 8004a1e:	dcf0      	bgt.n	8004a02 <_printf_float+0x442>
 8004a20:	e6fa      	b.n	8004818 <_printf_float+0x258>
 8004a22:	f04f 0800 	mov.w	r8, #0
 8004a26:	f104 0919 	add.w	r9, r4, #25
 8004a2a:	e7f4      	b.n	8004a16 <_printf_float+0x456>

08004a2c <_printf_common>:
 8004a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a30:	4616      	mov	r6, r2
 8004a32:	4699      	mov	r9, r3
 8004a34:	688a      	ldr	r2, [r1, #8]
 8004a36:	690b      	ldr	r3, [r1, #16]
 8004a38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	bfb8      	it	lt
 8004a40:	4613      	movlt	r3, r2
 8004a42:	6033      	str	r3, [r6, #0]
 8004a44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a48:	4607      	mov	r7, r0
 8004a4a:	460c      	mov	r4, r1
 8004a4c:	b10a      	cbz	r2, 8004a52 <_printf_common+0x26>
 8004a4e:	3301      	adds	r3, #1
 8004a50:	6033      	str	r3, [r6, #0]
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	0699      	lsls	r1, r3, #26
 8004a56:	bf42      	ittt	mi
 8004a58:	6833      	ldrmi	r3, [r6, #0]
 8004a5a:	3302      	addmi	r3, #2
 8004a5c:	6033      	strmi	r3, [r6, #0]
 8004a5e:	6825      	ldr	r5, [r4, #0]
 8004a60:	f015 0506 	ands.w	r5, r5, #6
 8004a64:	d106      	bne.n	8004a74 <_printf_common+0x48>
 8004a66:	f104 0a19 	add.w	sl, r4, #25
 8004a6a:	68e3      	ldr	r3, [r4, #12]
 8004a6c:	6832      	ldr	r2, [r6, #0]
 8004a6e:	1a9b      	subs	r3, r3, r2
 8004a70:	42ab      	cmp	r3, r5
 8004a72:	dc26      	bgt.n	8004ac2 <_printf_common+0x96>
 8004a74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a78:	1e13      	subs	r3, r2, #0
 8004a7a:	6822      	ldr	r2, [r4, #0]
 8004a7c:	bf18      	it	ne
 8004a7e:	2301      	movne	r3, #1
 8004a80:	0692      	lsls	r2, r2, #26
 8004a82:	d42b      	bmi.n	8004adc <_printf_common+0xb0>
 8004a84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a88:	4649      	mov	r1, r9
 8004a8a:	4638      	mov	r0, r7
 8004a8c:	47c0      	blx	r8
 8004a8e:	3001      	adds	r0, #1
 8004a90:	d01e      	beq.n	8004ad0 <_printf_common+0xa4>
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	68e5      	ldr	r5, [r4, #12]
 8004a96:	6832      	ldr	r2, [r6, #0]
 8004a98:	f003 0306 	and.w	r3, r3, #6
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	bf08      	it	eq
 8004aa0:	1aad      	subeq	r5, r5, r2
 8004aa2:	68a3      	ldr	r3, [r4, #8]
 8004aa4:	6922      	ldr	r2, [r4, #16]
 8004aa6:	bf0c      	ite	eq
 8004aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004aac:	2500      	movne	r5, #0
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	bfc4      	itt	gt
 8004ab2:	1a9b      	subgt	r3, r3, r2
 8004ab4:	18ed      	addgt	r5, r5, r3
 8004ab6:	2600      	movs	r6, #0
 8004ab8:	341a      	adds	r4, #26
 8004aba:	42b5      	cmp	r5, r6
 8004abc:	d11a      	bne.n	8004af4 <_printf_common+0xc8>
 8004abe:	2000      	movs	r0, #0
 8004ac0:	e008      	b.n	8004ad4 <_printf_common+0xa8>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	4652      	mov	r2, sl
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	4638      	mov	r0, r7
 8004aca:	47c0      	blx	r8
 8004acc:	3001      	adds	r0, #1
 8004ace:	d103      	bne.n	8004ad8 <_printf_common+0xac>
 8004ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad8:	3501      	adds	r5, #1
 8004ada:	e7c6      	b.n	8004a6a <_printf_common+0x3e>
 8004adc:	18e1      	adds	r1, r4, r3
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	2030      	movs	r0, #48	; 0x30
 8004ae2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ae6:	4422      	add	r2, r4
 8004ae8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004aec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004af0:	3302      	adds	r3, #2
 8004af2:	e7c7      	b.n	8004a84 <_printf_common+0x58>
 8004af4:	2301      	movs	r3, #1
 8004af6:	4622      	mov	r2, r4
 8004af8:	4649      	mov	r1, r9
 8004afa:	4638      	mov	r0, r7
 8004afc:	47c0      	blx	r8
 8004afe:	3001      	adds	r0, #1
 8004b00:	d0e6      	beq.n	8004ad0 <_printf_common+0xa4>
 8004b02:	3601      	adds	r6, #1
 8004b04:	e7d9      	b.n	8004aba <_printf_common+0x8e>
	...

08004b08 <_printf_i>:
 8004b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b0c:	7e0f      	ldrb	r7, [r1, #24]
 8004b0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b10:	2f78      	cmp	r7, #120	; 0x78
 8004b12:	4691      	mov	r9, r2
 8004b14:	4680      	mov	r8, r0
 8004b16:	460c      	mov	r4, r1
 8004b18:	469a      	mov	sl, r3
 8004b1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b1e:	d807      	bhi.n	8004b30 <_printf_i+0x28>
 8004b20:	2f62      	cmp	r7, #98	; 0x62
 8004b22:	d80a      	bhi.n	8004b3a <_printf_i+0x32>
 8004b24:	2f00      	cmp	r7, #0
 8004b26:	f000 80d8 	beq.w	8004cda <_printf_i+0x1d2>
 8004b2a:	2f58      	cmp	r7, #88	; 0x58
 8004b2c:	f000 80a3 	beq.w	8004c76 <_printf_i+0x16e>
 8004b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b38:	e03a      	b.n	8004bb0 <_printf_i+0xa8>
 8004b3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b3e:	2b15      	cmp	r3, #21
 8004b40:	d8f6      	bhi.n	8004b30 <_printf_i+0x28>
 8004b42:	a101      	add	r1, pc, #4	; (adr r1, 8004b48 <_printf_i+0x40>)
 8004b44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b48:	08004ba1 	.word	0x08004ba1
 8004b4c:	08004bb5 	.word	0x08004bb5
 8004b50:	08004b31 	.word	0x08004b31
 8004b54:	08004b31 	.word	0x08004b31
 8004b58:	08004b31 	.word	0x08004b31
 8004b5c:	08004b31 	.word	0x08004b31
 8004b60:	08004bb5 	.word	0x08004bb5
 8004b64:	08004b31 	.word	0x08004b31
 8004b68:	08004b31 	.word	0x08004b31
 8004b6c:	08004b31 	.word	0x08004b31
 8004b70:	08004b31 	.word	0x08004b31
 8004b74:	08004cc1 	.word	0x08004cc1
 8004b78:	08004be5 	.word	0x08004be5
 8004b7c:	08004ca3 	.word	0x08004ca3
 8004b80:	08004b31 	.word	0x08004b31
 8004b84:	08004b31 	.word	0x08004b31
 8004b88:	08004ce3 	.word	0x08004ce3
 8004b8c:	08004b31 	.word	0x08004b31
 8004b90:	08004be5 	.word	0x08004be5
 8004b94:	08004b31 	.word	0x08004b31
 8004b98:	08004b31 	.word	0x08004b31
 8004b9c:	08004cab 	.word	0x08004cab
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	1d1a      	adds	r2, r3, #4
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	602a      	str	r2, [r5, #0]
 8004ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0a3      	b.n	8004cfc <_printf_i+0x1f4>
 8004bb4:	6820      	ldr	r0, [r4, #0]
 8004bb6:	6829      	ldr	r1, [r5, #0]
 8004bb8:	0606      	lsls	r6, r0, #24
 8004bba:	f101 0304 	add.w	r3, r1, #4
 8004bbe:	d50a      	bpl.n	8004bd6 <_printf_i+0xce>
 8004bc0:	680e      	ldr	r6, [r1, #0]
 8004bc2:	602b      	str	r3, [r5, #0]
 8004bc4:	2e00      	cmp	r6, #0
 8004bc6:	da03      	bge.n	8004bd0 <_printf_i+0xc8>
 8004bc8:	232d      	movs	r3, #45	; 0x2d
 8004bca:	4276      	negs	r6, r6
 8004bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bd0:	485e      	ldr	r0, [pc, #376]	; (8004d4c <_printf_i+0x244>)
 8004bd2:	230a      	movs	r3, #10
 8004bd4:	e019      	b.n	8004c0a <_printf_i+0x102>
 8004bd6:	680e      	ldr	r6, [r1, #0]
 8004bd8:	602b      	str	r3, [r5, #0]
 8004bda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bde:	bf18      	it	ne
 8004be0:	b236      	sxthne	r6, r6
 8004be2:	e7ef      	b.n	8004bc4 <_printf_i+0xbc>
 8004be4:	682b      	ldr	r3, [r5, #0]
 8004be6:	6820      	ldr	r0, [r4, #0]
 8004be8:	1d19      	adds	r1, r3, #4
 8004bea:	6029      	str	r1, [r5, #0]
 8004bec:	0601      	lsls	r1, r0, #24
 8004bee:	d501      	bpl.n	8004bf4 <_printf_i+0xec>
 8004bf0:	681e      	ldr	r6, [r3, #0]
 8004bf2:	e002      	b.n	8004bfa <_printf_i+0xf2>
 8004bf4:	0646      	lsls	r6, r0, #25
 8004bf6:	d5fb      	bpl.n	8004bf0 <_printf_i+0xe8>
 8004bf8:	881e      	ldrh	r6, [r3, #0]
 8004bfa:	4854      	ldr	r0, [pc, #336]	; (8004d4c <_printf_i+0x244>)
 8004bfc:	2f6f      	cmp	r7, #111	; 0x6f
 8004bfe:	bf0c      	ite	eq
 8004c00:	2308      	moveq	r3, #8
 8004c02:	230a      	movne	r3, #10
 8004c04:	2100      	movs	r1, #0
 8004c06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c0a:	6865      	ldr	r5, [r4, #4]
 8004c0c:	60a5      	str	r5, [r4, #8]
 8004c0e:	2d00      	cmp	r5, #0
 8004c10:	bfa2      	ittt	ge
 8004c12:	6821      	ldrge	r1, [r4, #0]
 8004c14:	f021 0104 	bicge.w	r1, r1, #4
 8004c18:	6021      	strge	r1, [r4, #0]
 8004c1a:	b90e      	cbnz	r6, 8004c20 <_printf_i+0x118>
 8004c1c:	2d00      	cmp	r5, #0
 8004c1e:	d04d      	beq.n	8004cbc <_printf_i+0x1b4>
 8004c20:	4615      	mov	r5, r2
 8004c22:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c26:	fb03 6711 	mls	r7, r3, r1, r6
 8004c2a:	5dc7      	ldrb	r7, [r0, r7]
 8004c2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c30:	4637      	mov	r7, r6
 8004c32:	42bb      	cmp	r3, r7
 8004c34:	460e      	mov	r6, r1
 8004c36:	d9f4      	bls.n	8004c22 <_printf_i+0x11a>
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d10b      	bne.n	8004c54 <_printf_i+0x14c>
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	07de      	lsls	r6, r3, #31
 8004c40:	d508      	bpl.n	8004c54 <_printf_i+0x14c>
 8004c42:	6923      	ldr	r3, [r4, #16]
 8004c44:	6861      	ldr	r1, [r4, #4]
 8004c46:	4299      	cmp	r1, r3
 8004c48:	bfde      	ittt	le
 8004c4a:	2330      	movle	r3, #48	; 0x30
 8004c4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c54:	1b52      	subs	r2, r2, r5
 8004c56:	6122      	str	r2, [r4, #16]
 8004c58:	f8cd a000 	str.w	sl, [sp]
 8004c5c:	464b      	mov	r3, r9
 8004c5e:	aa03      	add	r2, sp, #12
 8004c60:	4621      	mov	r1, r4
 8004c62:	4640      	mov	r0, r8
 8004c64:	f7ff fee2 	bl	8004a2c <_printf_common>
 8004c68:	3001      	adds	r0, #1
 8004c6a:	d14c      	bne.n	8004d06 <_printf_i+0x1fe>
 8004c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c70:	b004      	add	sp, #16
 8004c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c76:	4835      	ldr	r0, [pc, #212]	; (8004d4c <_printf_i+0x244>)
 8004c78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c7c:	6829      	ldr	r1, [r5, #0]
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c84:	6029      	str	r1, [r5, #0]
 8004c86:	061d      	lsls	r5, r3, #24
 8004c88:	d514      	bpl.n	8004cb4 <_printf_i+0x1ac>
 8004c8a:	07df      	lsls	r7, r3, #31
 8004c8c:	bf44      	itt	mi
 8004c8e:	f043 0320 	orrmi.w	r3, r3, #32
 8004c92:	6023      	strmi	r3, [r4, #0]
 8004c94:	b91e      	cbnz	r6, 8004c9e <_printf_i+0x196>
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	f023 0320 	bic.w	r3, r3, #32
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	2310      	movs	r3, #16
 8004ca0:	e7b0      	b.n	8004c04 <_printf_i+0xfc>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	f043 0320 	orr.w	r3, r3, #32
 8004ca8:	6023      	str	r3, [r4, #0]
 8004caa:	2378      	movs	r3, #120	; 0x78
 8004cac:	4828      	ldr	r0, [pc, #160]	; (8004d50 <_printf_i+0x248>)
 8004cae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cb2:	e7e3      	b.n	8004c7c <_printf_i+0x174>
 8004cb4:	0659      	lsls	r1, r3, #25
 8004cb6:	bf48      	it	mi
 8004cb8:	b2b6      	uxthmi	r6, r6
 8004cba:	e7e6      	b.n	8004c8a <_printf_i+0x182>
 8004cbc:	4615      	mov	r5, r2
 8004cbe:	e7bb      	b.n	8004c38 <_printf_i+0x130>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	6826      	ldr	r6, [r4, #0]
 8004cc4:	6961      	ldr	r1, [r4, #20]
 8004cc6:	1d18      	adds	r0, r3, #4
 8004cc8:	6028      	str	r0, [r5, #0]
 8004cca:	0635      	lsls	r5, r6, #24
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	d501      	bpl.n	8004cd4 <_printf_i+0x1cc>
 8004cd0:	6019      	str	r1, [r3, #0]
 8004cd2:	e002      	b.n	8004cda <_printf_i+0x1d2>
 8004cd4:	0670      	lsls	r0, r6, #25
 8004cd6:	d5fb      	bpl.n	8004cd0 <_printf_i+0x1c8>
 8004cd8:	8019      	strh	r1, [r3, #0]
 8004cda:	2300      	movs	r3, #0
 8004cdc:	6123      	str	r3, [r4, #16]
 8004cde:	4615      	mov	r5, r2
 8004ce0:	e7ba      	b.n	8004c58 <_printf_i+0x150>
 8004ce2:	682b      	ldr	r3, [r5, #0]
 8004ce4:	1d1a      	adds	r2, r3, #4
 8004ce6:	602a      	str	r2, [r5, #0]
 8004ce8:	681d      	ldr	r5, [r3, #0]
 8004cea:	6862      	ldr	r2, [r4, #4]
 8004cec:	2100      	movs	r1, #0
 8004cee:	4628      	mov	r0, r5
 8004cf0:	f7fb fa8e 	bl	8000210 <memchr>
 8004cf4:	b108      	cbz	r0, 8004cfa <_printf_i+0x1f2>
 8004cf6:	1b40      	subs	r0, r0, r5
 8004cf8:	6060      	str	r0, [r4, #4]
 8004cfa:	6863      	ldr	r3, [r4, #4]
 8004cfc:	6123      	str	r3, [r4, #16]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d04:	e7a8      	b.n	8004c58 <_printf_i+0x150>
 8004d06:	6923      	ldr	r3, [r4, #16]
 8004d08:	462a      	mov	r2, r5
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	4640      	mov	r0, r8
 8004d0e:	47d0      	blx	sl
 8004d10:	3001      	adds	r0, #1
 8004d12:	d0ab      	beq.n	8004c6c <_printf_i+0x164>
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	079b      	lsls	r3, r3, #30
 8004d18:	d413      	bmi.n	8004d42 <_printf_i+0x23a>
 8004d1a:	68e0      	ldr	r0, [r4, #12]
 8004d1c:	9b03      	ldr	r3, [sp, #12]
 8004d1e:	4298      	cmp	r0, r3
 8004d20:	bfb8      	it	lt
 8004d22:	4618      	movlt	r0, r3
 8004d24:	e7a4      	b.n	8004c70 <_printf_i+0x168>
 8004d26:	2301      	movs	r3, #1
 8004d28:	4632      	mov	r2, r6
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	4640      	mov	r0, r8
 8004d2e:	47d0      	blx	sl
 8004d30:	3001      	adds	r0, #1
 8004d32:	d09b      	beq.n	8004c6c <_printf_i+0x164>
 8004d34:	3501      	adds	r5, #1
 8004d36:	68e3      	ldr	r3, [r4, #12]
 8004d38:	9903      	ldr	r1, [sp, #12]
 8004d3a:	1a5b      	subs	r3, r3, r1
 8004d3c:	42ab      	cmp	r3, r5
 8004d3e:	dcf2      	bgt.n	8004d26 <_printf_i+0x21e>
 8004d40:	e7eb      	b.n	8004d1a <_printf_i+0x212>
 8004d42:	2500      	movs	r5, #0
 8004d44:	f104 0619 	add.w	r6, r4, #25
 8004d48:	e7f5      	b.n	8004d36 <_printf_i+0x22e>
 8004d4a:	bf00      	nop
 8004d4c:	08007d56 	.word	0x08007d56
 8004d50:	08007d67 	.word	0x08007d67

08004d54 <quorem>:
 8004d54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d58:	6903      	ldr	r3, [r0, #16]
 8004d5a:	690c      	ldr	r4, [r1, #16]
 8004d5c:	42a3      	cmp	r3, r4
 8004d5e:	4607      	mov	r7, r0
 8004d60:	f2c0 8081 	blt.w	8004e66 <quorem+0x112>
 8004d64:	3c01      	subs	r4, #1
 8004d66:	f101 0814 	add.w	r8, r1, #20
 8004d6a:	f100 0514 	add.w	r5, r0, #20
 8004d6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d72:	9301      	str	r3, [sp, #4]
 8004d74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d88:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d8c:	d331      	bcc.n	8004df2 <quorem+0x9e>
 8004d8e:	f04f 0e00 	mov.w	lr, #0
 8004d92:	4640      	mov	r0, r8
 8004d94:	46ac      	mov	ip, r5
 8004d96:	46f2      	mov	sl, lr
 8004d98:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d9c:	b293      	uxth	r3, r2
 8004d9e:	fb06 e303 	mla	r3, r6, r3, lr
 8004da2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	ebaa 0303 	sub.w	r3, sl, r3
 8004dac:	f8dc a000 	ldr.w	sl, [ip]
 8004db0:	0c12      	lsrs	r2, r2, #16
 8004db2:	fa13 f38a 	uxtah	r3, r3, sl
 8004db6:	fb06 e202 	mla	r2, r6, r2, lr
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	9b00      	ldr	r3, [sp, #0]
 8004dbe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004dc2:	b292      	uxth	r2, r2
 8004dc4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004dc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004dcc:	f8bd 3000 	ldrh.w	r3, [sp]
 8004dd0:	4581      	cmp	r9, r0
 8004dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dd6:	f84c 3b04 	str.w	r3, [ip], #4
 8004dda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004dde:	d2db      	bcs.n	8004d98 <quorem+0x44>
 8004de0:	f855 300b 	ldr.w	r3, [r5, fp]
 8004de4:	b92b      	cbnz	r3, 8004df2 <quorem+0x9e>
 8004de6:	9b01      	ldr	r3, [sp, #4]
 8004de8:	3b04      	subs	r3, #4
 8004dea:	429d      	cmp	r5, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	d32e      	bcc.n	8004e4e <quorem+0xfa>
 8004df0:	613c      	str	r4, [r7, #16]
 8004df2:	4638      	mov	r0, r7
 8004df4:	f001 f8c6 	bl	8005f84 <__mcmp>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	db24      	blt.n	8004e46 <quorem+0xf2>
 8004dfc:	3601      	adds	r6, #1
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f04f 0c00 	mov.w	ip, #0
 8004e04:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e08:	f8d0 e000 	ldr.w	lr, [r0]
 8004e0c:	b293      	uxth	r3, r2
 8004e0e:	ebac 0303 	sub.w	r3, ip, r3
 8004e12:	0c12      	lsrs	r2, r2, #16
 8004e14:	fa13 f38e 	uxtah	r3, r3, lr
 8004e18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004e1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e26:	45c1      	cmp	r9, r8
 8004e28:	f840 3b04 	str.w	r3, [r0], #4
 8004e2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004e30:	d2e8      	bcs.n	8004e04 <quorem+0xb0>
 8004e32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e3a:	b922      	cbnz	r2, 8004e46 <quorem+0xf2>
 8004e3c:	3b04      	subs	r3, #4
 8004e3e:	429d      	cmp	r5, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	d30a      	bcc.n	8004e5a <quorem+0x106>
 8004e44:	613c      	str	r4, [r7, #16]
 8004e46:	4630      	mov	r0, r6
 8004e48:	b003      	add	sp, #12
 8004e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	3b04      	subs	r3, #4
 8004e52:	2a00      	cmp	r2, #0
 8004e54:	d1cc      	bne.n	8004df0 <quorem+0x9c>
 8004e56:	3c01      	subs	r4, #1
 8004e58:	e7c7      	b.n	8004dea <quorem+0x96>
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	3b04      	subs	r3, #4
 8004e5e:	2a00      	cmp	r2, #0
 8004e60:	d1f0      	bne.n	8004e44 <quorem+0xf0>
 8004e62:	3c01      	subs	r4, #1
 8004e64:	e7eb      	b.n	8004e3e <quorem+0xea>
 8004e66:	2000      	movs	r0, #0
 8004e68:	e7ee      	b.n	8004e48 <quorem+0xf4>
 8004e6a:	0000      	movs	r0, r0
 8004e6c:	0000      	movs	r0, r0
	...

08004e70 <_dtoa_r>:
 8004e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e74:	ed2d 8b04 	vpush	{d8-d9}
 8004e78:	ec57 6b10 	vmov	r6, r7, d0
 8004e7c:	b093      	sub	sp, #76	; 0x4c
 8004e7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004e80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004e84:	9106      	str	r1, [sp, #24]
 8004e86:	ee10 aa10 	vmov	sl, s0
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e8e:	930c      	str	r3, [sp, #48]	; 0x30
 8004e90:	46bb      	mov	fp, r7
 8004e92:	b975      	cbnz	r5, 8004eb2 <_dtoa_r+0x42>
 8004e94:	2010      	movs	r0, #16
 8004e96:	f000 fddd 	bl	8005a54 <malloc>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	6260      	str	r0, [r4, #36]	; 0x24
 8004e9e:	b920      	cbnz	r0, 8004eaa <_dtoa_r+0x3a>
 8004ea0:	4ba7      	ldr	r3, [pc, #668]	; (8005140 <_dtoa_r+0x2d0>)
 8004ea2:	21ea      	movs	r1, #234	; 0xea
 8004ea4:	48a7      	ldr	r0, [pc, #668]	; (8005144 <_dtoa_r+0x2d4>)
 8004ea6:	f001 fa75 	bl	8006394 <__assert_func>
 8004eaa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004eae:	6005      	str	r5, [r0, #0]
 8004eb0:	60c5      	str	r5, [r0, #12]
 8004eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eb4:	6819      	ldr	r1, [r3, #0]
 8004eb6:	b151      	cbz	r1, 8004ece <_dtoa_r+0x5e>
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	604a      	str	r2, [r1, #4]
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	4093      	lsls	r3, r2
 8004ec0:	608b      	str	r3, [r1, #8]
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	f000 fe1c 	bl	8005b00 <_Bfree>
 8004ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	1e3b      	subs	r3, r7, #0
 8004ed0:	bfaa      	itet	ge
 8004ed2:	2300      	movge	r3, #0
 8004ed4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004ed8:	f8c8 3000 	strge.w	r3, [r8]
 8004edc:	4b9a      	ldr	r3, [pc, #616]	; (8005148 <_dtoa_r+0x2d8>)
 8004ede:	bfbc      	itt	lt
 8004ee0:	2201      	movlt	r2, #1
 8004ee2:	f8c8 2000 	strlt.w	r2, [r8]
 8004ee6:	ea33 030b 	bics.w	r3, r3, fp
 8004eea:	d11b      	bne.n	8004f24 <_dtoa_r+0xb4>
 8004eec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004eee:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ef8:	4333      	orrs	r3, r6
 8004efa:	f000 8592 	beq.w	8005a22 <_dtoa_r+0xbb2>
 8004efe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f00:	b963      	cbnz	r3, 8004f1c <_dtoa_r+0xac>
 8004f02:	4b92      	ldr	r3, [pc, #584]	; (800514c <_dtoa_r+0x2dc>)
 8004f04:	e022      	b.n	8004f4c <_dtoa_r+0xdc>
 8004f06:	4b92      	ldr	r3, [pc, #584]	; (8005150 <_dtoa_r+0x2e0>)
 8004f08:	9301      	str	r3, [sp, #4]
 8004f0a:	3308      	adds	r3, #8
 8004f0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	9801      	ldr	r0, [sp, #4]
 8004f12:	b013      	add	sp, #76	; 0x4c
 8004f14:	ecbd 8b04 	vpop	{d8-d9}
 8004f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1c:	4b8b      	ldr	r3, [pc, #556]	; (800514c <_dtoa_r+0x2dc>)
 8004f1e:	9301      	str	r3, [sp, #4]
 8004f20:	3303      	adds	r3, #3
 8004f22:	e7f3      	b.n	8004f0c <_dtoa_r+0x9c>
 8004f24:	2200      	movs	r2, #0
 8004f26:	2300      	movs	r3, #0
 8004f28:	4650      	mov	r0, sl
 8004f2a:	4659      	mov	r1, fp
 8004f2c:	f7fb fde4 	bl	8000af8 <__aeabi_dcmpeq>
 8004f30:	ec4b ab19 	vmov	d9, sl, fp
 8004f34:	4680      	mov	r8, r0
 8004f36:	b158      	cbz	r0, 8004f50 <_dtoa_r+0xe0>
 8004f38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 856b 	beq.w	8005a1c <_dtoa_r+0xbac>
 8004f46:	4883      	ldr	r0, [pc, #524]	; (8005154 <_dtoa_r+0x2e4>)
 8004f48:	6018      	str	r0, [r3, #0]
 8004f4a:	1e43      	subs	r3, r0, #1
 8004f4c:	9301      	str	r3, [sp, #4]
 8004f4e:	e7df      	b.n	8004f10 <_dtoa_r+0xa0>
 8004f50:	ec4b ab10 	vmov	d0, sl, fp
 8004f54:	aa10      	add	r2, sp, #64	; 0x40
 8004f56:	a911      	add	r1, sp, #68	; 0x44
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f001 f8b9 	bl	80060d0 <__d2b>
 8004f5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004f62:	ee08 0a10 	vmov	s16, r0
 8004f66:	2d00      	cmp	r5, #0
 8004f68:	f000 8084 	beq.w	8005074 <_dtoa_r+0x204>
 8004f6c:	ee19 3a90 	vmov	r3, s19
 8004f70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004f78:	4656      	mov	r6, sl
 8004f7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004f7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004f82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004f86:	4b74      	ldr	r3, [pc, #464]	; (8005158 <_dtoa_r+0x2e8>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	4630      	mov	r0, r6
 8004f8c:	4639      	mov	r1, r7
 8004f8e:	f7fb f993 	bl	80002b8 <__aeabi_dsub>
 8004f92:	a365      	add	r3, pc, #404	; (adr r3, 8005128 <_dtoa_r+0x2b8>)
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	f7fb fb46 	bl	8000628 <__aeabi_dmul>
 8004f9c:	a364      	add	r3, pc, #400	; (adr r3, 8005130 <_dtoa_r+0x2c0>)
 8004f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa2:	f7fb f98b 	bl	80002bc <__adddf3>
 8004fa6:	4606      	mov	r6, r0
 8004fa8:	4628      	mov	r0, r5
 8004faa:	460f      	mov	r7, r1
 8004fac:	f7fb fad2 	bl	8000554 <__aeabi_i2d>
 8004fb0:	a361      	add	r3, pc, #388	; (adr r3, 8005138 <_dtoa_r+0x2c8>)
 8004fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb6:	f7fb fb37 	bl	8000628 <__aeabi_dmul>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4630      	mov	r0, r6
 8004fc0:	4639      	mov	r1, r7
 8004fc2:	f7fb f97b 	bl	80002bc <__adddf3>
 8004fc6:	4606      	mov	r6, r0
 8004fc8:	460f      	mov	r7, r1
 8004fca:	f7fb fddd 	bl	8000b88 <__aeabi_d2iz>
 8004fce:	2200      	movs	r2, #0
 8004fd0:	9000      	str	r0, [sp, #0]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	4639      	mov	r1, r7
 8004fd8:	f7fb fd98 	bl	8000b0c <__aeabi_dcmplt>
 8004fdc:	b150      	cbz	r0, 8004ff4 <_dtoa_r+0x184>
 8004fde:	9800      	ldr	r0, [sp, #0]
 8004fe0:	f7fb fab8 	bl	8000554 <__aeabi_i2d>
 8004fe4:	4632      	mov	r2, r6
 8004fe6:	463b      	mov	r3, r7
 8004fe8:	f7fb fd86 	bl	8000af8 <__aeabi_dcmpeq>
 8004fec:	b910      	cbnz	r0, 8004ff4 <_dtoa_r+0x184>
 8004fee:	9b00      	ldr	r3, [sp, #0]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	9b00      	ldr	r3, [sp, #0]
 8004ff6:	2b16      	cmp	r3, #22
 8004ff8:	d85a      	bhi.n	80050b0 <_dtoa_r+0x240>
 8004ffa:	9a00      	ldr	r2, [sp, #0]
 8004ffc:	4b57      	ldr	r3, [pc, #348]	; (800515c <_dtoa_r+0x2ec>)
 8004ffe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005006:	ec51 0b19 	vmov	r0, r1, d9
 800500a:	f7fb fd7f 	bl	8000b0c <__aeabi_dcmplt>
 800500e:	2800      	cmp	r0, #0
 8005010:	d050      	beq.n	80050b4 <_dtoa_r+0x244>
 8005012:	9b00      	ldr	r3, [sp, #0]
 8005014:	3b01      	subs	r3, #1
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	2300      	movs	r3, #0
 800501a:	930b      	str	r3, [sp, #44]	; 0x2c
 800501c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800501e:	1b5d      	subs	r5, r3, r5
 8005020:	1e6b      	subs	r3, r5, #1
 8005022:	9305      	str	r3, [sp, #20]
 8005024:	bf45      	ittet	mi
 8005026:	f1c5 0301 	rsbmi	r3, r5, #1
 800502a:	9304      	strmi	r3, [sp, #16]
 800502c:	2300      	movpl	r3, #0
 800502e:	2300      	movmi	r3, #0
 8005030:	bf4c      	ite	mi
 8005032:	9305      	strmi	r3, [sp, #20]
 8005034:	9304      	strpl	r3, [sp, #16]
 8005036:	9b00      	ldr	r3, [sp, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	db3d      	blt.n	80050b8 <_dtoa_r+0x248>
 800503c:	9b05      	ldr	r3, [sp, #20]
 800503e:	9a00      	ldr	r2, [sp, #0]
 8005040:	920a      	str	r2, [sp, #40]	; 0x28
 8005042:	4413      	add	r3, r2
 8005044:	9305      	str	r3, [sp, #20]
 8005046:	2300      	movs	r3, #0
 8005048:	9307      	str	r3, [sp, #28]
 800504a:	9b06      	ldr	r3, [sp, #24]
 800504c:	2b09      	cmp	r3, #9
 800504e:	f200 8089 	bhi.w	8005164 <_dtoa_r+0x2f4>
 8005052:	2b05      	cmp	r3, #5
 8005054:	bfc4      	itt	gt
 8005056:	3b04      	subgt	r3, #4
 8005058:	9306      	strgt	r3, [sp, #24]
 800505a:	9b06      	ldr	r3, [sp, #24]
 800505c:	f1a3 0302 	sub.w	r3, r3, #2
 8005060:	bfcc      	ite	gt
 8005062:	2500      	movgt	r5, #0
 8005064:	2501      	movle	r5, #1
 8005066:	2b03      	cmp	r3, #3
 8005068:	f200 8087 	bhi.w	800517a <_dtoa_r+0x30a>
 800506c:	e8df f003 	tbb	[pc, r3]
 8005070:	59383a2d 	.word	0x59383a2d
 8005074:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005078:	441d      	add	r5, r3
 800507a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800507e:	2b20      	cmp	r3, #32
 8005080:	bfc1      	itttt	gt
 8005082:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005086:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800508a:	fa0b f303 	lslgt.w	r3, fp, r3
 800508e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005092:	bfda      	itte	le
 8005094:	f1c3 0320 	rsble	r3, r3, #32
 8005098:	fa06 f003 	lslle.w	r0, r6, r3
 800509c:	4318      	orrgt	r0, r3
 800509e:	f7fb fa49 	bl	8000534 <__aeabi_ui2d>
 80050a2:	2301      	movs	r3, #1
 80050a4:	4606      	mov	r6, r0
 80050a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80050aa:	3d01      	subs	r5, #1
 80050ac:	930e      	str	r3, [sp, #56]	; 0x38
 80050ae:	e76a      	b.n	8004f86 <_dtoa_r+0x116>
 80050b0:	2301      	movs	r3, #1
 80050b2:	e7b2      	b.n	800501a <_dtoa_r+0x1aa>
 80050b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80050b6:	e7b1      	b.n	800501c <_dtoa_r+0x1ac>
 80050b8:	9b04      	ldr	r3, [sp, #16]
 80050ba:	9a00      	ldr	r2, [sp, #0]
 80050bc:	1a9b      	subs	r3, r3, r2
 80050be:	9304      	str	r3, [sp, #16]
 80050c0:	4253      	negs	r3, r2
 80050c2:	9307      	str	r3, [sp, #28]
 80050c4:	2300      	movs	r3, #0
 80050c6:	930a      	str	r3, [sp, #40]	; 0x28
 80050c8:	e7bf      	b.n	800504a <_dtoa_r+0x1da>
 80050ca:	2300      	movs	r3, #0
 80050cc:	9308      	str	r3, [sp, #32]
 80050ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	dc55      	bgt.n	8005180 <_dtoa_r+0x310>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80050da:	461a      	mov	r2, r3
 80050dc:	9209      	str	r2, [sp, #36]	; 0x24
 80050de:	e00c      	b.n	80050fa <_dtoa_r+0x28a>
 80050e0:	2301      	movs	r3, #1
 80050e2:	e7f3      	b.n	80050cc <_dtoa_r+0x25c>
 80050e4:	2300      	movs	r3, #0
 80050e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050e8:	9308      	str	r3, [sp, #32]
 80050ea:	9b00      	ldr	r3, [sp, #0]
 80050ec:	4413      	add	r3, r2
 80050ee:	9302      	str	r3, [sp, #8]
 80050f0:	3301      	adds	r3, #1
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	9303      	str	r3, [sp, #12]
 80050f6:	bfb8      	it	lt
 80050f8:	2301      	movlt	r3, #1
 80050fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80050fc:	2200      	movs	r2, #0
 80050fe:	6042      	str	r2, [r0, #4]
 8005100:	2204      	movs	r2, #4
 8005102:	f102 0614 	add.w	r6, r2, #20
 8005106:	429e      	cmp	r6, r3
 8005108:	6841      	ldr	r1, [r0, #4]
 800510a:	d93d      	bls.n	8005188 <_dtoa_r+0x318>
 800510c:	4620      	mov	r0, r4
 800510e:	f000 fcb7 	bl	8005a80 <_Balloc>
 8005112:	9001      	str	r0, [sp, #4]
 8005114:	2800      	cmp	r0, #0
 8005116:	d13b      	bne.n	8005190 <_dtoa_r+0x320>
 8005118:	4b11      	ldr	r3, [pc, #68]	; (8005160 <_dtoa_r+0x2f0>)
 800511a:	4602      	mov	r2, r0
 800511c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005120:	e6c0      	b.n	8004ea4 <_dtoa_r+0x34>
 8005122:	2301      	movs	r3, #1
 8005124:	e7df      	b.n	80050e6 <_dtoa_r+0x276>
 8005126:	bf00      	nop
 8005128:	636f4361 	.word	0x636f4361
 800512c:	3fd287a7 	.word	0x3fd287a7
 8005130:	8b60c8b3 	.word	0x8b60c8b3
 8005134:	3fc68a28 	.word	0x3fc68a28
 8005138:	509f79fb 	.word	0x509f79fb
 800513c:	3fd34413 	.word	0x3fd34413
 8005140:	08007d85 	.word	0x08007d85
 8005144:	08007d9c 	.word	0x08007d9c
 8005148:	7ff00000 	.word	0x7ff00000
 800514c:	08007d81 	.word	0x08007d81
 8005150:	08007d78 	.word	0x08007d78
 8005154:	08007d55 	.word	0x08007d55
 8005158:	3ff80000 	.word	0x3ff80000
 800515c:	08007e90 	.word	0x08007e90
 8005160:	08007df7 	.word	0x08007df7
 8005164:	2501      	movs	r5, #1
 8005166:	2300      	movs	r3, #0
 8005168:	9306      	str	r3, [sp, #24]
 800516a:	9508      	str	r5, [sp, #32]
 800516c:	f04f 33ff 	mov.w	r3, #4294967295
 8005170:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005174:	2200      	movs	r2, #0
 8005176:	2312      	movs	r3, #18
 8005178:	e7b0      	b.n	80050dc <_dtoa_r+0x26c>
 800517a:	2301      	movs	r3, #1
 800517c:	9308      	str	r3, [sp, #32]
 800517e:	e7f5      	b.n	800516c <_dtoa_r+0x2fc>
 8005180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005182:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005186:	e7b8      	b.n	80050fa <_dtoa_r+0x28a>
 8005188:	3101      	adds	r1, #1
 800518a:	6041      	str	r1, [r0, #4]
 800518c:	0052      	lsls	r2, r2, #1
 800518e:	e7b8      	b.n	8005102 <_dtoa_r+0x292>
 8005190:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005192:	9a01      	ldr	r2, [sp, #4]
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	9b03      	ldr	r3, [sp, #12]
 8005198:	2b0e      	cmp	r3, #14
 800519a:	f200 809d 	bhi.w	80052d8 <_dtoa_r+0x468>
 800519e:	2d00      	cmp	r5, #0
 80051a0:	f000 809a 	beq.w	80052d8 <_dtoa_r+0x468>
 80051a4:	9b00      	ldr	r3, [sp, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	dd32      	ble.n	8005210 <_dtoa_r+0x3a0>
 80051aa:	4ab7      	ldr	r2, [pc, #732]	; (8005488 <_dtoa_r+0x618>)
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80051b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80051b8:	9b00      	ldr	r3, [sp, #0]
 80051ba:	05d8      	lsls	r0, r3, #23
 80051bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80051c0:	d516      	bpl.n	80051f0 <_dtoa_r+0x380>
 80051c2:	4bb2      	ldr	r3, [pc, #712]	; (800548c <_dtoa_r+0x61c>)
 80051c4:	ec51 0b19 	vmov	r0, r1, d9
 80051c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051cc:	f7fb fb56 	bl	800087c <__aeabi_ddiv>
 80051d0:	f007 070f 	and.w	r7, r7, #15
 80051d4:	4682      	mov	sl, r0
 80051d6:	468b      	mov	fp, r1
 80051d8:	2503      	movs	r5, #3
 80051da:	4eac      	ldr	r6, [pc, #688]	; (800548c <_dtoa_r+0x61c>)
 80051dc:	b957      	cbnz	r7, 80051f4 <_dtoa_r+0x384>
 80051de:	4642      	mov	r2, r8
 80051e0:	464b      	mov	r3, r9
 80051e2:	4650      	mov	r0, sl
 80051e4:	4659      	mov	r1, fp
 80051e6:	f7fb fb49 	bl	800087c <__aeabi_ddiv>
 80051ea:	4682      	mov	sl, r0
 80051ec:	468b      	mov	fp, r1
 80051ee:	e028      	b.n	8005242 <_dtoa_r+0x3d2>
 80051f0:	2502      	movs	r5, #2
 80051f2:	e7f2      	b.n	80051da <_dtoa_r+0x36a>
 80051f4:	07f9      	lsls	r1, r7, #31
 80051f6:	d508      	bpl.n	800520a <_dtoa_r+0x39a>
 80051f8:	4640      	mov	r0, r8
 80051fa:	4649      	mov	r1, r9
 80051fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005200:	f7fb fa12 	bl	8000628 <__aeabi_dmul>
 8005204:	3501      	adds	r5, #1
 8005206:	4680      	mov	r8, r0
 8005208:	4689      	mov	r9, r1
 800520a:	107f      	asrs	r7, r7, #1
 800520c:	3608      	adds	r6, #8
 800520e:	e7e5      	b.n	80051dc <_dtoa_r+0x36c>
 8005210:	f000 809b 	beq.w	800534a <_dtoa_r+0x4da>
 8005214:	9b00      	ldr	r3, [sp, #0]
 8005216:	4f9d      	ldr	r7, [pc, #628]	; (800548c <_dtoa_r+0x61c>)
 8005218:	425e      	negs	r6, r3
 800521a:	4b9b      	ldr	r3, [pc, #620]	; (8005488 <_dtoa_r+0x618>)
 800521c:	f006 020f 	and.w	r2, r6, #15
 8005220:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	ec51 0b19 	vmov	r0, r1, d9
 800522c:	f7fb f9fc 	bl	8000628 <__aeabi_dmul>
 8005230:	1136      	asrs	r6, r6, #4
 8005232:	4682      	mov	sl, r0
 8005234:	468b      	mov	fp, r1
 8005236:	2300      	movs	r3, #0
 8005238:	2502      	movs	r5, #2
 800523a:	2e00      	cmp	r6, #0
 800523c:	d17a      	bne.n	8005334 <_dtoa_r+0x4c4>
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1d3      	bne.n	80051ea <_dtoa_r+0x37a>
 8005242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 8082 	beq.w	800534e <_dtoa_r+0x4de>
 800524a:	4b91      	ldr	r3, [pc, #580]	; (8005490 <_dtoa_r+0x620>)
 800524c:	2200      	movs	r2, #0
 800524e:	4650      	mov	r0, sl
 8005250:	4659      	mov	r1, fp
 8005252:	f7fb fc5b 	bl	8000b0c <__aeabi_dcmplt>
 8005256:	2800      	cmp	r0, #0
 8005258:	d079      	beq.n	800534e <_dtoa_r+0x4de>
 800525a:	9b03      	ldr	r3, [sp, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d076      	beq.n	800534e <_dtoa_r+0x4de>
 8005260:	9b02      	ldr	r3, [sp, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	dd36      	ble.n	80052d4 <_dtoa_r+0x464>
 8005266:	9b00      	ldr	r3, [sp, #0]
 8005268:	4650      	mov	r0, sl
 800526a:	4659      	mov	r1, fp
 800526c:	1e5f      	subs	r7, r3, #1
 800526e:	2200      	movs	r2, #0
 8005270:	4b88      	ldr	r3, [pc, #544]	; (8005494 <_dtoa_r+0x624>)
 8005272:	f7fb f9d9 	bl	8000628 <__aeabi_dmul>
 8005276:	9e02      	ldr	r6, [sp, #8]
 8005278:	4682      	mov	sl, r0
 800527a:	468b      	mov	fp, r1
 800527c:	3501      	adds	r5, #1
 800527e:	4628      	mov	r0, r5
 8005280:	f7fb f968 	bl	8000554 <__aeabi_i2d>
 8005284:	4652      	mov	r2, sl
 8005286:	465b      	mov	r3, fp
 8005288:	f7fb f9ce 	bl	8000628 <__aeabi_dmul>
 800528c:	4b82      	ldr	r3, [pc, #520]	; (8005498 <_dtoa_r+0x628>)
 800528e:	2200      	movs	r2, #0
 8005290:	f7fb f814 	bl	80002bc <__adddf3>
 8005294:	46d0      	mov	r8, sl
 8005296:	46d9      	mov	r9, fp
 8005298:	4682      	mov	sl, r0
 800529a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800529e:	2e00      	cmp	r6, #0
 80052a0:	d158      	bne.n	8005354 <_dtoa_r+0x4e4>
 80052a2:	4b7e      	ldr	r3, [pc, #504]	; (800549c <_dtoa_r+0x62c>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	4640      	mov	r0, r8
 80052a8:	4649      	mov	r1, r9
 80052aa:	f7fb f805 	bl	80002b8 <__aeabi_dsub>
 80052ae:	4652      	mov	r2, sl
 80052b0:	465b      	mov	r3, fp
 80052b2:	4680      	mov	r8, r0
 80052b4:	4689      	mov	r9, r1
 80052b6:	f7fb fc47 	bl	8000b48 <__aeabi_dcmpgt>
 80052ba:	2800      	cmp	r0, #0
 80052bc:	f040 8295 	bne.w	80057ea <_dtoa_r+0x97a>
 80052c0:	4652      	mov	r2, sl
 80052c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80052c6:	4640      	mov	r0, r8
 80052c8:	4649      	mov	r1, r9
 80052ca:	f7fb fc1f 	bl	8000b0c <__aeabi_dcmplt>
 80052ce:	2800      	cmp	r0, #0
 80052d0:	f040 8289 	bne.w	80057e6 <_dtoa_r+0x976>
 80052d4:	ec5b ab19 	vmov	sl, fp, d9
 80052d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f2c0 8148 	blt.w	8005570 <_dtoa_r+0x700>
 80052e0:	9a00      	ldr	r2, [sp, #0]
 80052e2:	2a0e      	cmp	r2, #14
 80052e4:	f300 8144 	bgt.w	8005570 <_dtoa_r+0x700>
 80052e8:	4b67      	ldr	r3, [pc, #412]	; (8005488 <_dtoa_r+0x618>)
 80052ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80052f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f280 80d5 	bge.w	80054a4 <_dtoa_r+0x634>
 80052fa:	9b03      	ldr	r3, [sp, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f300 80d1 	bgt.w	80054a4 <_dtoa_r+0x634>
 8005302:	f040 826f 	bne.w	80057e4 <_dtoa_r+0x974>
 8005306:	4b65      	ldr	r3, [pc, #404]	; (800549c <_dtoa_r+0x62c>)
 8005308:	2200      	movs	r2, #0
 800530a:	4640      	mov	r0, r8
 800530c:	4649      	mov	r1, r9
 800530e:	f7fb f98b 	bl	8000628 <__aeabi_dmul>
 8005312:	4652      	mov	r2, sl
 8005314:	465b      	mov	r3, fp
 8005316:	f7fb fc0d 	bl	8000b34 <__aeabi_dcmpge>
 800531a:	9e03      	ldr	r6, [sp, #12]
 800531c:	4637      	mov	r7, r6
 800531e:	2800      	cmp	r0, #0
 8005320:	f040 8245 	bne.w	80057ae <_dtoa_r+0x93e>
 8005324:	9d01      	ldr	r5, [sp, #4]
 8005326:	2331      	movs	r3, #49	; 0x31
 8005328:	f805 3b01 	strb.w	r3, [r5], #1
 800532c:	9b00      	ldr	r3, [sp, #0]
 800532e:	3301      	adds	r3, #1
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	e240      	b.n	80057b6 <_dtoa_r+0x946>
 8005334:	07f2      	lsls	r2, r6, #31
 8005336:	d505      	bpl.n	8005344 <_dtoa_r+0x4d4>
 8005338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800533c:	f7fb f974 	bl	8000628 <__aeabi_dmul>
 8005340:	3501      	adds	r5, #1
 8005342:	2301      	movs	r3, #1
 8005344:	1076      	asrs	r6, r6, #1
 8005346:	3708      	adds	r7, #8
 8005348:	e777      	b.n	800523a <_dtoa_r+0x3ca>
 800534a:	2502      	movs	r5, #2
 800534c:	e779      	b.n	8005242 <_dtoa_r+0x3d2>
 800534e:	9f00      	ldr	r7, [sp, #0]
 8005350:	9e03      	ldr	r6, [sp, #12]
 8005352:	e794      	b.n	800527e <_dtoa_r+0x40e>
 8005354:	9901      	ldr	r1, [sp, #4]
 8005356:	4b4c      	ldr	r3, [pc, #304]	; (8005488 <_dtoa_r+0x618>)
 8005358:	4431      	add	r1, r6
 800535a:	910d      	str	r1, [sp, #52]	; 0x34
 800535c:	9908      	ldr	r1, [sp, #32]
 800535e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005362:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005366:	2900      	cmp	r1, #0
 8005368:	d043      	beq.n	80053f2 <_dtoa_r+0x582>
 800536a:	494d      	ldr	r1, [pc, #308]	; (80054a0 <_dtoa_r+0x630>)
 800536c:	2000      	movs	r0, #0
 800536e:	f7fb fa85 	bl	800087c <__aeabi_ddiv>
 8005372:	4652      	mov	r2, sl
 8005374:	465b      	mov	r3, fp
 8005376:	f7fa ff9f 	bl	80002b8 <__aeabi_dsub>
 800537a:	9d01      	ldr	r5, [sp, #4]
 800537c:	4682      	mov	sl, r0
 800537e:	468b      	mov	fp, r1
 8005380:	4649      	mov	r1, r9
 8005382:	4640      	mov	r0, r8
 8005384:	f7fb fc00 	bl	8000b88 <__aeabi_d2iz>
 8005388:	4606      	mov	r6, r0
 800538a:	f7fb f8e3 	bl	8000554 <__aeabi_i2d>
 800538e:	4602      	mov	r2, r0
 8005390:	460b      	mov	r3, r1
 8005392:	4640      	mov	r0, r8
 8005394:	4649      	mov	r1, r9
 8005396:	f7fa ff8f 	bl	80002b8 <__aeabi_dsub>
 800539a:	3630      	adds	r6, #48	; 0x30
 800539c:	f805 6b01 	strb.w	r6, [r5], #1
 80053a0:	4652      	mov	r2, sl
 80053a2:	465b      	mov	r3, fp
 80053a4:	4680      	mov	r8, r0
 80053a6:	4689      	mov	r9, r1
 80053a8:	f7fb fbb0 	bl	8000b0c <__aeabi_dcmplt>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	d163      	bne.n	8005478 <_dtoa_r+0x608>
 80053b0:	4642      	mov	r2, r8
 80053b2:	464b      	mov	r3, r9
 80053b4:	4936      	ldr	r1, [pc, #216]	; (8005490 <_dtoa_r+0x620>)
 80053b6:	2000      	movs	r0, #0
 80053b8:	f7fa ff7e 	bl	80002b8 <__aeabi_dsub>
 80053bc:	4652      	mov	r2, sl
 80053be:	465b      	mov	r3, fp
 80053c0:	f7fb fba4 	bl	8000b0c <__aeabi_dcmplt>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	f040 80b5 	bne.w	8005534 <_dtoa_r+0x6c4>
 80053ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053cc:	429d      	cmp	r5, r3
 80053ce:	d081      	beq.n	80052d4 <_dtoa_r+0x464>
 80053d0:	4b30      	ldr	r3, [pc, #192]	; (8005494 <_dtoa_r+0x624>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	4650      	mov	r0, sl
 80053d6:	4659      	mov	r1, fp
 80053d8:	f7fb f926 	bl	8000628 <__aeabi_dmul>
 80053dc:	4b2d      	ldr	r3, [pc, #180]	; (8005494 <_dtoa_r+0x624>)
 80053de:	4682      	mov	sl, r0
 80053e0:	468b      	mov	fp, r1
 80053e2:	4640      	mov	r0, r8
 80053e4:	4649      	mov	r1, r9
 80053e6:	2200      	movs	r2, #0
 80053e8:	f7fb f91e 	bl	8000628 <__aeabi_dmul>
 80053ec:	4680      	mov	r8, r0
 80053ee:	4689      	mov	r9, r1
 80053f0:	e7c6      	b.n	8005380 <_dtoa_r+0x510>
 80053f2:	4650      	mov	r0, sl
 80053f4:	4659      	mov	r1, fp
 80053f6:	f7fb f917 	bl	8000628 <__aeabi_dmul>
 80053fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053fc:	9d01      	ldr	r5, [sp, #4]
 80053fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005400:	4682      	mov	sl, r0
 8005402:	468b      	mov	fp, r1
 8005404:	4649      	mov	r1, r9
 8005406:	4640      	mov	r0, r8
 8005408:	f7fb fbbe 	bl	8000b88 <__aeabi_d2iz>
 800540c:	4606      	mov	r6, r0
 800540e:	f7fb f8a1 	bl	8000554 <__aeabi_i2d>
 8005412:	3630      	adds	r6, #48	; 0x30
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4640      	mov	r0, r8
 800541a:	4649      	mov	r1, r9
 800541c:	f7fa ff4c 	bl	80002b8 <__aeabi_dsub>
 8005420:	f805 6b01 	strb.w	r6, [r5], #1
 8005424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005426:	429d      	cmp	r5, r3
 8005428:	4680      	mov	r8, r0
 800542a:	4689      	mov	r9, r1
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	d124      	bne.n	800547c <_dtoa_r+0x60c>
 8005432:	4b1b      	ldr	r3, [pc, #108]	; (80054a0 <_dtoa_r+0x630>)
 8005434:	4650      	mov	r0, sl
 8005436:	4659      	mov	r1, fp
 8005438:	f7fa ff40 	bl	80002bc <__adddf3>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4640      	mov	r0, r8
 8005442:	4649      	mov	r1, r9
 8005444:	f7fb fb80 	bl	8000b48 <__aeabi_dcmpgt>
 8005448:	2800      	cmp	r0, #0
 800544a:	d173      	bne.n	8005534 <_dtoa_r+0x6c4>
 800544c:	4652      	mov	r2, sl
 800544e:	465b      	mov	r3, fp
 8005450:	4913      	ldr	r1, [pc, #76]	; (80054a0 <_dtoa_r+0x630>)
 8005452:	2000      	movs	r0, #0
 8005454:	f7fa ff30 	bl	80002b8 <__aeabi_dsub>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	4640      	mov	r0, r8
 800545e:	4649      	mov	r1, r9
 8005460:	f7fb fb54 	bl	8000b0c <__aeabi_dcmplt>
 8005464:	2800      	cmp	r0, #0
 8005466:	f43f af35 	beq.w	80052d4 <_dtoa_r+0x464>
 800546a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800546c:	1e6b      	subs	r3, r5, #1
 800546e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005470:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005474:	2b30      	cmp	r3, #48	; 0x30
 8005476:	d0f8      	beq.n	800546a <_dtoa_r+0x5fa>
 8005478:	9700      	str	r7, [sp, #0]
 800547a:	e049      	b.n	8005510 <_dtoa_r+0x6a0>
 800547c:	4b05      	ldr	r3, [pc, #20]	; (8005494 <_dtoa_r+0x624>)
 800547e:	f7fb f8d3 	bl	8000628 <__aeabi_dmul>
 8005482:	4680      	mov	r8, r0
 8005484:	4689      	mov	r9, r1
 8005486:	e7bd      	b.n	8005404 <_dtoa_r+0x594>
 8005488:	08007e90 	.word	0x08007e90
 800548c:	08007e68 	.word	0x08007e68
 8005490:	3ff00000 	.word	0x3ff00000
 8005494:	40240000 	.word	0x40240000
 8005498:	401c0000 	.word	0x401c0000
 800549c:	40140000 	.word	0x40140000
 80054a0:	3fe00000 	.word	0x3fe00000
 80054a4:	9d01      	ldr	r5, [sp, #4]
 80054a6:	4656      	mov	r6, sl
 80054a8:	465f      	mov	r7, fp
 80054aa:	4642      	mov	r2, r8
 80054ac:	464b      	mov	r3, r9
 80054ae:	4630      	mov	r0, r6
 80054b0:	4639      	mov	r1, r7
 80054b2:	f7fb f9e3 	bl	800087c <__aeabi_ddiv>
 80054b6:	f7fb fb67 	bl	8000b88 <__aeabi_d2iz>
 80054ba:	4682      	mov	sl, r0
 80054bc:	f7fb f84a 	bl	8000554 <__aeabi_i2d>
 80054c0:	4642      	mov	r2, r8
 80054c2:	464b      	mov	r3, r9
 80054c4:	f7fb f8b0 	bl	8000628 <__aeabi_dmul>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4630      	mov	r0, r6
 80054ce:	4639      	mov	r1, r7
 80054d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80054d4:	f7fa fef0 	bl	80002b8 <__aeabi_dsub>
 80054d8:	f805 6b01 	strb.w	r6, [r5], #1
 80054dc:	9e01      	ldr	r6, [sp, #4]
 80054de:	9f03      	ldr	r7, [sp, #12]
 80054e0:	1bae      	subs	r6, r5, r6
 80054e2:	42b7      	cmp	r7, r6
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	d135      	bne.n	8005556 <_dtoa_r+0x6e6>
 80054ea:	f7fa fee7 	bl	80002bc <__adddf3>
 80054ee:	4642      	mov	r2, r8
 80054f0:	464b      	mov	r3, r9
 80054f2:	4606      	mov	r6, r0
 80054f4:	460f      	mov	r7, r1
 80054f6:	f7fb fb27 	bl	8000b48 <__aeabi_dcmpgt>
 80054fa:	b9d0      	cbnz	r0, 8005532 <_dtoa_r+0x6c2>
 80054fc:	4642      	mov	r2, r8
 80054fe:	464b      	mov	r3, r9
 8005500:	4630      	mov	r0, r6
 8005502:	4639      	mov	r1, r7
 8005504:	f7fb faf8 	bl	8000af8 <__aeabi_dcmpeq>
 8005508:	b110      	cbz	r0, 8005510 <_dtoa_r+0x6a0>
 800550a:	f01a 0f01 	tst.w	sl, #1
 800550e:	d110      	bne.n	8005532 <_dtoa_r+0x6c2>
 8005510:	4620      	mov	r0, r4
 8005512:	ee18 1a10 	vmov	r1, s16
 8005516:	f000 faf3 	bl	8005b00 <_Bfree>
 800551a:	2300      	movs	r3, #0
 800551c:	9800      	ldr	r0, [sp, #0]
 800551e:	702b      	strb	r3, [r5, #0]
 8005520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005522:	3001      	adds	r0, #1
 8005524:	6018      	str	r0, [r3, #0]
 8005526:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005528:	2b00      	cmp	r3, #0
 800552a:	f43f acf1 	beq.w	8004f10 <_dtoa_r+0xa0>
 800552e:	601d      	str	r5, [r3, #0]
 8005530:	e4ee      	b.n	8004f10 <_dtoa_r+0xa0>
 8005532:	9f00      	ldr	r7, [sp, #0]
 8005534:	462b      	mov	r3, r5
 8005536:	461d      	mov	r5, r3
 8005538:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800553c:	2a39      	cmp	r2, #57	; 0x39
 800553e:	d106      	bne.n	800554e <_dtoa_r+0x6de>
 8005540:	9a01      	ldr	r2, [sp, #4]
 8005542:	429a      	cmp	r2, r3
 8005544:	d1f7      	bne.n	8005536 <_dtoa_r+0x6c6>
 8005546:	9901      	ldr	r1, [sp, #4]
 8005548:	2230      	movs	r2, #48	; 0x30
 800554a:	3701      	adds	r7, #1
 800554c:	700a      	strb	r2, [r1, #0]
 800554e:	781a      	ldrb	r2, [r3, #0]
 8005550:	3201      	adds	r2, #1
 8005552:	701a      	strb	r2, [r3, #0]
 8005554:	e790      	b.n	8005478 <_dtoa_r+0x608>
 8005556:	4ba6      	ldr	r3, [pc, #664]	; (80057f0 <_dtoa_r+0x980>)
 8005558:	2200      	movs	r2, #0
 800555a:	f7fb f865 	bl	8000628 <__aeabi_dmul>
 800555e:	2200      	movs	r2, #0
 8005560:	2300      	movs	r3, #0
 8005562:	4606      	mov	r6, r0
 8005564:	460f      	mov	r7, r1
 8005566:	f7fb fac7 	bl	8000af8 <__aeabi_dcmpeq>
 800556a:	2800      	cmp	r0, #0
 800556c:	d09d      	beq.n	80054aa <_dtoa_r+0x63a>
 800556e:	e7cf      	b.n	8005510 <_dtoa_r+0x6a0>
 8005570:	9a08      	ldr	r2, [sp, #32]
 8005572:	2a00      	cmp	r2, #0
 8005574:	f000 80d7 	beq.w	8005726 <_dtoa_r+0x8b6>
 8005578:	9a06      	ldr	r2, [sp, #24]
 800557a:	2a01      	cmp	r2, #1
 800557c:	f300 80ba 	bgt.w	80056f4 <_dtoa_r+0x884>
 8005580:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005582:	2a00      	cmp	r2, #0
 8005584:	f000 80b2 	beq.w	80056ec <_dtoa_r+0x87c>
 8005588:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800558c:	9e07      	ldr	r6, [sp, #28]
 800558e:	9d04      	ldr	r5, [sp, #16]
 8005590:	9a04      	ldr	r2, [sp, #16]
 8005592:	441a      	add	r2, r3
 8005594:	9204      	str	r2, [sp, #16]
 8005596:	9a05      	ldr	r2, [sp, #20]
 8005598:	2101      	movs	r1, #1
 800559a:	441a      	add	r2, r3
 800559c:	4620      	mov	r0, r4
 800559e:	9205      	str	r2, [sp, #20]
 80055a0:	f000 fb66 	bl	8005c70 <__i2b>
 80055a4:	4607      	mov	r7, r0
 80055a6:	2d00      	cmp	r5, #0
 80055a8:	dd0c      	ble.n	80055c4 <_dtoa_r+0x754>
 80055aa:	9b05      	ldr	r3, [sp, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	dd09      	ble.n	80055c4 <_dtoa_r+0x754>
 80055b0:	42ab      	cmp	r3, r5
 80055b2:	9a04      	ldr	r2, [sp, #16]
 80055b4:	bfa8      	it	ge
 80055b6:	462b      	movge	r3, r5
 80055b8:	1ad2      	subs	r2, r2, r3
 80055ba:	9204      	str	r2, [sp, #16]
 80055bc:	9a05      	ldr	r2, [sp, #20]
 80055be:	1aed      	subs	r5, r5, r3
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	9305      	str	r3, [sp, #20]
 80055c4:	9b07      	ldr	r3, [sp, #28]
 80055c6:	b31b      	cbz	r3, 8005610 <_dtoa_r+0x7a0>
 80055c8:	9b08      	ldr	r3, [sp, #32]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 80af 	beq.w	800572e <_dtoa_r+0x8be>
 80055d0:	2e00      	cmp	r6, #0
 80055d2:	dd13      	ble.n	80055fc <_dtoa_r+0x78c>
 80055d4:	4639      	mov	r1, r7
 80055d6:	4632      	mov	r2, r6
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 fc09 	bl	8005df0 <__pow5mult>
 80055de:	ee18 2a10 	vmov	r2, s16
 80055e2:	4601      	mov	r1, r0
 80055e4:	4607      	mov	r7, r0
 80055e6:	4620      	mov	r0, r4
 80055e8:	f000 fb58 	bl	8005c9c <__multiply>
 80055ec:	ee18 1a10 	vmov	r1, s16
 80055f0:	4680      	mov	r8, r0
 80055f2:	4620      	mov	r0, r4
 80055f4:	f000 fa84 	bl	8005b00 <_Bfree>
 80055f8:	ee08 8a10 	vmov	s16, r8
 80055fc:	9b07      	ldr	r3, [sp, #28]
 80055fe:	1b9a      	subs	r2, r3, r6
 8005600:	d006      	beq.n	8005610 <_dtoa_r+0x7a0>
 8005602:	ee18 1a10 	vmov	r1, s16
 8005606:	4620      	mov	r0, r4
 8005608:	f000 fbf2 	bl	8005df0 <__pow5mult>
 800560c:	ee08 0a10 	vmov	s16, r0
 8005610:	2101      	movs	r1, #1
 8005612:	4620      	mov	r0, r4
 8005614:	f000 fb2c 	bl	8005c70 <__i2b>
 8005618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800561a:	2b00      	cmp	r3, #0
 800561c:	4606      	mov	r6, r0
 800561e:	f340 8088 	ble.w	8005732 <_dtoa_r+0x8c2>
 8005622:	461a      	mov	r2, r3
 8005624:	4601      	mov	r1, r0
 8005626:	4620      	mov	r0, r4
 8005628:	f000 fbe2 	bl	8005df0 <__pow5mult>
 800562c:	9b06      	ldr	r3, [sp, #24]
 800562e:	2b01      	cmp	r3, #1
 8005630:	4606      	mov	r6, r0
 8005632:	f340 8081 	ble.w	8005738 <_dtoa_r+0x8c8>
 8005636:	f04f 0800 	mov.w	r8, #0
 800563a:	6933      	ldr	r3, [r6, #16]
 800563c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005640:	6918      	ldr	r0, [r3, #16]
 8005642:	f000 fac5 	bl	8005bd0 <__hi0bits>
 8005646:	f1c0 0020 	rsb	r0, r0, #32
 800564a:	9b05      	ldr	r3, [sp, #20]
 800564c:	4418      	add	r0, r3
 800564e:	f010 001f 	ands.w	r0, r0, #31
 8005652:	f000 8092 	beq.w	800577a <_dtoa_r+0x90a>
 8005656:	f1c0 0320 	rsb	r3, r0, #32
 800565a:	2b04      	cmp	r3, #4
 800565c:	f340 808a 	ble.w	8005774 <_dtoa_r+0x904>
 8005660:	f1c0 001c 	rsb	r0, r0, #28
 8005664:	9b04      	ldr	r3, [sp, #16]
 8005666:	4403      	add	r3, r0
 8005668:	9304      	str	r3, [sp, #16]
 800566a:	9b05      	ldr	r3, [sp, #20]
 800566c:	4403      	add	r3, r0
 800566e:	4405      	add	r5, r0
 8005670:	9305      	str	r3, [sp, #20]
 8005672:	9b04      	ldr	r3, [sp, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	dd07      	ble.n	8005688 <_dtoa_r+0x818>
 8005678:	ee18 1a10 	vmov	r1, s16
 800567c:	461a      	mov	r2, r3
 800567e:	4620      	mov	r0, r4
 8005680:	f000 fc10 	bl	8005ea4 <__lshift>
 8005684:	ee08 0a10 	vmov	s16, r0
 8005688:	9b05      	ldr	r3, [sp, #20]
 800568a:	2b00      	cmp	r3, #0
 800568c:	dd05      	ble.n	800569a <_dtoa_r+0x82a>
 800568e:	4631      	mov	r1, r6
 8005690:	461a      	mov	r2, r3
 8005692:	4620      	mov	r0, r4
 8005694:	f000 fc06 	bl	8005ea4 <__lshift>
 8005698:	4606      	mov	r6, r0
 800569a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800569c:	2b00      	cmp	r3, #0
 800569e:	d06e      	beq.n	800577e <_dtoa_r+0x90e>
 80056a0:	ee18 0a10 	vmov	r0, s16
 80056a4:	4631      	mov	r1, r6
 80056a6:	f000 fc6d 	bl	8005f84 <__mcmp>
 80056aa:	2800      	cmp	r0, #0
 80056ac:	da67      	bge.n	800577e <_dtoa_r+0x90e>
 80056ae:	9b00      	ldr	r3, [sp, #0]
 80056b0:	3b01      	subs	r3, #1
 80056b2:	ee18 1a10 	vmov	r1, s16
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	220a      	movs	r2, #10
 80056ba:	2300      	movs	r3, #0
 80056bc:	4620      	mov	r0, r4
 80056be:	f000 fa41 	bl	8005b44 <__multadd>
 80056c2:	9b08      	ldr	r3, [sp, #32]
 80056c4:	ee08 0a10 	vmov	s16, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 81b1 	beq.w	8005a30 <_dtoa_r+0xbc0>
 80056ce:	2300      	movs	r3, #0
 80056d0:	4639      	mov	r1, r7
 80056d2:	220a      	movs	r2, #10
 80056d4:	4620      	mov	r0, r4
 80056d6:	f000 fa35 	bl	8005b44 <__multadd>
 80056da:	9b02      	ldr	r3, [sp, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	4607      	mov	r7, r0
 80056e0:	f300 808e 	bgt.w	8005800 <_dtoa_r+0x990>
 80056e4:	9b06      	ldr	r3, [sp, #24]
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	dc51      	bgt.n	800578e <_dtoa_r+0x91e>
 80056ea:	e089      	b.n	8005800 <_dtoa_r+0x990>
 80056ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80056ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80056f2:	e74b      	b.n	800558c <_dtoa_r+0x71c>
 80056f4:	9b03      	ldr	r3, [sp, #12]
 80056f6:	1e5e      	subs	r6, r3, #1
 80056f8:	9b07      	ldr	r3, [sp, #28]
 80056fa:	42b3      	cmp	r3, r6
 80056fc:	bfbf      	itttt	lt
 80056fe:	9b07      	ldrlt	r3, [sp, #28]
 8005700:	9607      	strlt	r6, [sp, #28]
 8005702:	1af2      	sublt	r2, r6, r3
 8005704:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005706:	bfb6      	itet	lt
 8005708:	189b      	addlt	r3, r3, r2
 800570a:	1b9e      	subge	r6, r3, r6
 800570c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800570e:	9b03      	ldr	r3, [sp, #12]
 8005710:	bfb8      	it	lt
 8005712:	2600      	movlt	r6, #0
 8005714:	2b00      	cmp	r3, #0
 8005716:	bfb7      	itett	lt
 8005718:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800571c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005720:	1a9d      	sublt	r5, r3, r2
 8005722:	2300      	movlt	r3, #0
 8005724:	e734      	b.n	8005590 <_dtoa_r+0x720>
 8005726:	9e07      	ldr	r6, [sp, #28]
 8005728:	9d04      	ldr	r5, [sp, #16]
 800572a:	9f08      	ldr	r7, [sp, #32]
 800572c:	e73b      	b.n	80055a6 <_dtoa_r+0x736>
 800572e:	9a07      	ldr	r2, [sp, #28]
 8005730:	e767      	b.n	8005602 <_dtoa_r+0x792>
 8005732:	9b06      	ldr	r3, [sp, #24]
 8005734:	2b01      	cmp	r3, #1
 8005736:	dc18      	bgt.n	800576a <_dtoa_r+0x8fa>
 8005738:	f1ba 0f00 	cmp.w	sl, #0
 800573c:	d115      	bne.n	800576a <_dtoa_r+0x8fa>
 800573e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005742:	b993      	cbnz	r3, 800576a <_dtoa_r+0x8fa>
 8005744:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005748:	0d1b      	lsrs	r3, r3, #20
 800574a:	051b      	lsls	r3, r3, #20
 800574c:	b183      	cbz	r3, 8005770 <_dtoa_r+0x900>
 800574e:	9b04      	ldr	r3, [sp, #16]
 8005750:	3301      	adds	r3, #1
 8005752:	9304      	str	r3, [sp, #16]
 8005754:	9b05      	ldr	r3, [sp, #20]
 8005756:	3301      	adds	r3, #1
 8005758:	9305      	str	r3, [sp, #20]
 800575a:	f04f 0801 	mov.w	r8, #1
 800575e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005760:	2b00      	cmp	r3, #0
 8005762:	f47f af6a 	bne.w	800563a <_dtoa_r+0x7ca>
 8005766:	2001      	movs	r0, #1
 8005768:	e76f      	b.n	800564a <_dtoa_r+0x7da>
 800576a:	f04f 0800 	mov.w	r8, #0
 800576e:	e7f6      	b.n	800575e <_dtoa_r+0x8ee>
 8005770:	4698      	mov	r8, r3
 8005772:	e7f4      	b.n	800575e <_dtoa_r+0x8ee>
 8005774:	f43f af7d 	beq.w	8005672 <_dtoa_r+0x802>
 8005778:	4618      	mov	r0, r3
 800577a:	301c      	adds	r0, #28
 800577c:	e772      	b.n	8005664 <_dtoa_r+0x7f4>
 800577e:	9b03      	ldr	r3, [sp, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	dc37      	bgt.n	80057f4 <_dtoa_r+0x984>
 8005784:	9b06      	ldr	r3, [sp, #24]
 8005786:	2b02      	cmp	r3, #2
 8005788:	dd34      	ble.n	80057f4 <_dtoa_r+0x984>
 800578a:	9b03      	ldr	r3, [sp, #12]
 800578c:	9302      	str	r3, [sp, #8]
 800578e:	9b02      	ldr	r3, [sp, #8]
 8005790:	b96b      	cbnz	r3, 80057ae <_dtoa_r+0x93e>
 8005792:	4631      	mov	r1, r6
 8005794:	2205      	movs	r2, #5
 8005796:	4620      	mov	r0, r4
 8005798:	f000 f9d4 	bl	8005b44 <__multadd>
 800579c:	4601      	mov	r1, r0
 800579e:	4606      	mov	r6, r0
 80057a0:	ee18 0a10 	vmov	r0, s16
 80057a4:	f000 fbee 	bl	8005f84 <__mcmp>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	f73f adbb 	bgt.w	8005324 <_dtoa_r+0x4b4>
 80057ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b0:	9d01      	ldr	r5, [sp, #4]
 80057b2:	43db      	mvns	r3, r3
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	f04f 0800 	mov.w	r8, #0
 80057ba:	4631      	mov	r1, r6
 80057bc:	4620      	mov	r0, r4
 80057be:	f000 f99f 	bl	8005b00 <_Bfree>
 80057c2:	2f00      	cmp	r7, #0
 80057c4:	f43f aea4 	beq.w	8005510 <_dtoa_r+0x6a0>
 80057c8:	f1b8 0f00 	cmp.w	r8, #0
 80057cc:	d005      	beq.n	80057da <_dtoa_r+0x96a>
 80057ce:	45b8      	cmp	r8, r7
 80057d0:	d003      	beq.n	80057da <_dtoa_r+0x96a>
 80057d2:	4641      	mov	r1, r8
 80057d4:	4620      	mov	r0, r4
 80057d6:	f000 f993 	bl	8005b00 <_Bfree>
 80057da:	4639      	mov	r1, r7
 80057dc:	4620      	mov	r0, r4
 80057de:	f000 f98f 	bl	8005b00 <_Bfree>
 80057e2:	e695      	b.n	8005510 <_dtoa_r+0x6a0>
 80057e4:	2600      	movs	r6, #0
 80057e6:	4637      	mov	r7, r6
 80057e8:	e7e1      	b.n	80057ae <_dtoa_r+0x93e>
 80057ea:	9700      	str	r7, [sp, #0]
 80057ec:	4637      	mov	r7, r6
 80057ee:	e599      	b.n	8005324 <_dtoa_r+0x4b4>
 80057f0:	40240000 	.word	0x40240000
 80057f4:	9b08      	ldr	r3, [sp, #32]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 80ca 	beq.w	8005990 <_dtoa_r+0xb20>
 80057fc:	9b03      	ldr	r3, [sp, #12]
 80057fe:	9302      	str	r3, [sp, #8]
 8005800:	2d00      	cmp	r5, #0
 8005802:	dd05      	ble.n	8005810 <_dtoa_r+0x9a0>
 8005804:	4639      	mov	r1, r7
 8005806:	462a      	mov	r2, r5
 8005808:	4620      	mov	r0, r4
 800580a:	f000 fb4b 	bl	8005ea4 <__lshift>
 800580e:	4607      	mov	r7, r0
 8005810:	f1b8 0f00 	cmp.w	r8, #0
 8005814:	d05b      	beq.n	80058ce <_dtoa_r+0xa5e>
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	4620      	mov	r0, r4
 800581a:	f000 f931 	bl	8005a80 <_Balloc>
 800581e:	4605      	mov	r5, r0
 8005820:	b928      	cbnz	r0, 800582e <_dtoa_r+0x9be>
 8005822:	4b87      	ldr	r3, [pc, #540]	; (8005a40 <_dtoa_r+0xbd0>)
 8005824:	4602      	mov	r2, r0
 8005826:	f240 21ea 	movw	r1, #746	; 0x2ea
 800582a:	f7ff bb3b 	b.w	8004ea4 <_dtoa_r+0x34>
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	3202      	adds	r2, #2
 8005832:	0092      	lsls	r2, r2, #2
 8005834:	f107 010c 	add.w	r1, r7, #12
 8005838:	300c      	adds	r0, #12
 800583a:	f000 f913 	bl	8005a64 <memcpy>
 800583e:	2201      	movs	r2, #1
 8005840:	4629      	mov	r1, r5
 8005842:	4620      	mov	r0, r4
 8005844:	f000 fb2e 	bl	8005ea4 <__lshift>
 8005848:	9b01      	ldr	r3, [sp, #4]
 800584a:	f103 0901 	add.w	r9, r3, #1
 800584e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005852:	4413      	add	r3, r2
 8005854:	9305      	str	r3, [sp, #20]
 8005856:	f00a 0301 	and.w	r3, sl, #1
 800585a:	46b8      	mov	r8, r7
 800585c:	9304      	str	r3, [sp, #16]
 800585e:	4607      	mov	r7, r0
 8005860:	4631      	mov	r1, r6
 8005862:	ee18 0a10 	vmov	r0, s16
 8005866:	f7ff fa75 	bl	8004d54 <quorem>
 800586a:	4641      	mov	r1, r8
 800586c:	9002      	str	r0, [sp, #8]
 800586e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005872:	ee18 0a10 	vmov	r0, s16
 8005876:	f000 fb85 	bl	8005f84 <__mcmp>
 800587a:	463a      	mov	r2, r7
 800587c:	9003      	str	r0, [sp, #12]
 800587e:	4631      	mov	r1, r6
 8005880:	4620      	mov	r0, r4
 8005882:	f000 fb9b 	bl	8005fbc <__mdiff>
 8005886:	68c2      	ldr	r2, [r0, #12]
 8005888:	f109 3bff 	add.w	fp, r9, #4294967295
 800588c:	4605      	mov	r5, r0
 800588e:	bb02      	cbnz	r2, 80058d2 <_dtoa_r+0xa62>
 8005890:	4601      	mov	r1, r0
 8005892:	ee18 0a10 	vmov	r0, s16
 8005896:	f000 fb75 	bl	8005f84 <__mcmp>
 800589a:	4602      	mov	r2, r0
 800589c:	4629      	mov	r1, r5
 800589e:	4620      	mov	r0, r4
 80058a0:	9207      	str	r2, [sp, #28]
 80058a2:	f000 f92d 	bl	8005b00 <_Bfree>
 80058a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80058aa:	ea43 0102 	orr.w	r1, r3, r2
 80058ae:	9b04      	ldr	r3, [sp, #16]
 80058b0:	430b      	orrs	r3, r1
 80058b2:	464d      	mov	r5, r9
 80058b4:	d10f      	bne.n	80058d6 <_dtoa_r+0xa66>
 80058b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80058ba:	d02a      	beq.n	8005912 <_dtoa_r+0xaa2>
 80058bc:	9b03      	ldr	r3, [sp, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	dd02      	ble.n	80058c8 <_dtoa_r+0xa58>
 80058c2:	9b02      	ldr	r3, [sp, #8]
 80058c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80058c8:	f88b a000 	strb.w	sl, [fp]
 80058cc:	e775      	b.n	80057ba <_dtoa_r+0x94a>
 80058ce:	4638      	mov	r0, r7
 80058d0:	e7ba      	b.n	8005848 <_dtoa_r+0x9d8>
 80058d2:	2201      	movs	r2, #1
 80058d4:	e7e2      	b.n	800589c <_dtoa_r+0xa2c>
 80058d6:	9b03      	ldr	r3, [sp, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	db04      	blt.n	80058e6 <_dtoa_r+0xa76>
 80058dc:	9906      	ldr	r1, [sp, #24]
 80058de:	430b      	orrs	r3, r1
 80058e0:	9904      	ldr	r1, [sp, #16]
 80058e2:	430b      	orrs	r3, r1
 80058e4:	d122      	bne.n	800592c <_dtoa_r+0xabc>
 80058e6:	2a00      	cmp	r2, #0
 80058e8:	ddee      	ble.n	80058c8 <_dtoa_r+0xa58>
 80058ea:	ee18 1a10 	vmov	r1, s16
 80058ee:	2201      	movs	r2, #1
 80058f0:	4620      	mov	r0, r4
 80058f2:	f000 fad7 	bl	8005ea4 <__lshift>
 80058f6:	4631      	mov	r1, r6
 80058f8:	ee08 0a10 	vmov	s16, r0
 80058fc:	f000 fb42 	bl	8005f84 <__mcmp>
 8005900:	2800      	cmp	r0, #0
 8005902:	dc03      	bgt.n	800590c <_dtoa_r+0xa9c>
 8005904:	d1e0      	bne.n	80058c8 <_dtoa_r+0xa58>
 8005906:	f01a 0f01 	tst.w	sl, #1
 800590a:	d0dd      	beq.n	80058c8 <_dtoa_r+0xa58>
 800590c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005910:	d1d7      	bne.n	80058c2 <_dtoa_r+0xa52>
 8005912:	2339      	movs	r3, #57	; 0x39
 8005914:	f88b 3000 	strb.w	r3, [fp]
 8005918:	462b      	mov	r3, r5
 800591a:	461d      	mov	r5, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005922:	2a39      	cmp	r2, #57	; 0x39
 8005924:	d071      	beq.n	8005a0a <_dtoa_r+0xb9a>
 8005926:	3201      	adds	r2, #1
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	e746      	b.n	80057ba <_dtoa_r+0x94a>
 800592c:	2a00      	cmp	r2, #0
 800592e:	dd07      	ble.n	8005940 <_dtoa_r+0xad0>
 8005930:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005934:	d0ed      	beq.n	8005912 <_dtoa_r+0xaa2>
 8005936:	f10a 0301 	add.w	r3, sl, #1
 800593a:	f88b 3000 	strb.w	r3, [fp]
 800593e:	e73c      	b.n	80057ba <_dtoa_r+0x94a>
 8005940:	9b05      	ldr	r3, [sp, #20]
 8005942:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005946:	4599      	cmp	r9, r3
 8005948:	d047      	beq.n	80059da <_dtoa_r+0xb6a>
 800594a:	ee18 1a10 	vmov	r1, s16
 800594e:	2300      	movs	r3, #0
 8005950:	220a      	movs	r2, #10
 8005952:	4620      	mov	r0, r4
 8005954:	f000 f8f6 	bl	8005b44 <__multadd>
 8005958:	45b8      	cmp	r8, r7
 800595a:	ee08 0a10 	vmov	s16, r0
 800595e:	f04f 0300 	mov.w	r3, #0
 8005962:	f04f 020a 	mov.w	r2, #10
 8005966:	4641      	mov	r1, r8
 8005968:	4620      	mov	r0, r4
 800596a:	d106      	bne.n	800597a <_dtoa_r+0xb0a>
 800596c:	f000 f8ea 	bl	8005b44 <__multadd>
 8005970:	4680      	mov	r8, r0
 8005972:	4607      	mov	r7, r0
 8005974:	f109 0901 	add.w	r9, r9, #1
 8005978:	e772      	b.n	8005860 <_dtoa_r+0x9f0>
 800597a:	f000 f8e3 	bl	8005b44 <__multadd>
 800597e:	4639      	mov	r1, r7
 8005980:	4680      	mov	r8, r0
 8005982:	2300      	movs	r3, #0
 8005984:	220a      	movs	r2, #10
 8005986:	4620      	mov	r0, r4
 8005988:	f000 f8dc 	bl	8005b44 <__multadd>
 800598c:	4607      	mov	r7, r0
 800598e:	e7f1      	b.n	8005974 <_dtoa_r+0xb04>
 8005990:	9b03      	ldr	r3, [sp, #12]
 8005992:	9302      	str	r3, [sp, #8]
 8005994:	9d01      	ldr	r5, [sp, #4]
 8005996:	ee18 0a10 	vmov	r0, s16
 800599a:	4631      	mov	r1, r6
 800599c:	f7ff f9da 	bl	8004d54 <quorem>
 80059a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80059a4:	9b01      	ldr	r3, [sp, #4]
 80059a6:	f805 ab01 	strb.w	sl, [r5], #1
 80059aa:	1aea      	subs	r2, r5, r3
 80059ac:	9b02      	ldr	r3, [sp, #8]
 80059ae:	4293      	cmp	r3, r2
 80059b0:	dd09      	ble.n	80059c6 <_dtoa_r+0xb56>
 80059b2:	ee18 1a10 	vmov	r1, s16
 80059b6:	2300      	movs	r3, #0
 80059b8:	220a      	movs	r2, #10
 80059ba:	4620      	mov	r0, r4
 80059bc:	f000 f8c2 	bl	8005b44 <__multadd>
 80059c0:	ee08 0a10 	vmov	s16, r0
 80059c4:	e7e7      	b.n	8005996 <_dtoa_r+0xb26>
 80059c6:	9b02      	ldr	r3, [sp, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	bfc8      	it	gt
 80059cc:	461d      	movgt	r5, r3
 80059ce:	9b01      	ldr	r3, [sp, #4]
 80059d0:	bfd8      	it	le
 80059d2:	2501      	movle	r5, #1
 80059d4:	441d      	add	r5, r3
 80059d6:	f04f 0800 	mov.w	r8, #0
 80059da:	ee18 1a10 	vmov	r1, s16
 80059de:	2201      	movs	r2, #1
 80059e0:	4620      	mov	r0, r4
 80059e2:	f000 fa5f 	bl	8005ea4 <__lshift>
 80059e6:	4631      	mov	r1, r6
 80059e8:	ee08 0a10 	vmov	s16, r0
 80059ec:	f000 faca 	bl	8005f84 <__mcmp>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	dc91      	bgt.n	8005918 <_dtoa_r+0xaa8>
 80059f4:	d102      	bne.n	80059fc <_dtoa_r+0xb8c>
 80059f6:	f01a 0f01 	tst.w	sl, #1
 80059fa:	d18d      	bne.n	8005918 <_dtoa_r+0xaa8>
 80059fc:	462b      	mov	r3, r5
 80059fe:	461d      	mov	r5, r3
 8005a00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a04:	2a30      	cmp	r2, #48	; 0x30
 8005a06:	d0fa      	beq.n	80059fe <_dtoa_r+0xb8e>
 8005a08:	e6d7      	b.n	80057ba <_dtoa_r+0x94a>
 8005a0a:	9a01      	ldr	r2, [sp, #4]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d184      	bne.n	800591a <_dtoa_r+0xaaa>
 8005a10:	9b00      	ldr	r3, [sp, #0]
 8005a12:	3301      	adds	r3, #1
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	2331      	movs	r3, #49	; 0x31
 8005a18:	7013      	strb	r3, [r2, #0]
 8005a1a:	e6ce      	b.n	80057ba <_dtoa_r+0x94a>
 8005a1c:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <_dtoa_r+0xbd4>)
 8005a1e:	f7ff ba95 	b.w	8004f4c <_dtoa_r+0xdc>
 8005a22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f47f aa6e 	bne.w	8004f06 <_dtoa_r+0x96>
 8005a2a:	4b07      	ldr	r3, [pc, #28]	; (8005a48 <_dtoa_r+0xbd8>)
 8005a2c:	f7ff ba8e 	b.w	8004f4c <_dtoa_r+0xdc>
 8005a30:	9b02      	ldr	r3, [sp, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	dcae      	bgt.n	8005994 <_dtoa_r+0xb24>
 8005a36:	9b06      	ldr	r3, [sp, #24]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	f73f aea8 	bgt.w	800578e <_dtoa_r+0x91e>
 8005a3e:	e7a9      	b.n	8005994 <_dtoa_r+0xb24>
 8005a40:	08007df7 	.word	0x08007df7
 8005a44:	08007d54 	.word	0x08007d54
 8005a48:	08007d78 	.word	0x08007d78

08005a4c <_localeconv_r>:
 8005a4c:	4800      	ldr	r0, [pc, #0]	; (8005a50 <_localeconv_r+0x4>)
 8005a4e:	4770      	bx	lr
 8005a50:	200011a0 	.word	0x200011a0

08005a54 <malloc>:
 8005a54:	4b02      	ldr	r3, [pc, #8]	; (8005a60 <malloc+0xc>)
 8005a56:	4601      	mov	r1, r0
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	f000 bc17 	b.w	800628c <_malloc_r>
 8005a5e:	bf00      	nop
 8005a60:	2000104c 	.word	0x2000104c

08005a64 <memcpy>:
 8005a64:	440a      	add	r2, r1
 8005a66:	4291      	cmp	r1, r2
 8005a68:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a6c:	d100      	bne.n	8005a70 <memcpy+0xc>
 8005a6e:	4770      	bx	lr
 8005a70:	b510      	push	{r4, lr}
 8005a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a7a:	4291      	cmp	r1, r2
 8005a7c:	d1f9      	bne.n	8005a72 <memcpy+0xe>
 8005a7e:	bd10      	pop	{r4, pc}

08005a80 <_Balloc>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a84:	4604      	mov	r4, r0
 8005a86:	460d      	mov	r5, r1
 8005a88:	b976      	cbnz	r6, 8005aa8 <_Balloc+0x28>
 8005a8a:	2010      	movs	r0, #16
 8005a8c:	f7ff ffe2 	bl	8005a54 <malloc>
 8005a90:	4602      	mov	r2, r0
 8005a92:	6260      	str	r0, [r4, #36]	; 0x24
 8005a94:	b920      	cbnz	r0, 8005aa0 <_Balloc+0x20>
 8005a96:	4b18      	ldr	r3, [pc, #96]	; (8005af8 <_Balloc+0x78>)
 8005a98:	4818      	ldr	r0, [pc, #96]	; (8005afc <_Balloc+0x7c>)
 8005a9a:	2166      	movs	r1, #102	; 0x66
 8005a9c:	f000 fc7a 	bl	8006394 <__assert_func>
 8005aa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005aa4:	6006      	str	r6, [r0, #0]
 8005aa6:	60c6      	str	r6, [r0, #12]
 8005aa8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005aaa:	68f3      	ldr	r3, [r6, #12]
 8005aac:	b183      	cbz	r3, 8005ad0 <_Balloc+0x50>
 8005aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ab6:	b9b8      	cbnz	r0, 8005ae8 <_Balloc+0x68>
 8005ab8:	2101      	movs	r1, #1
 8005aba:	fa01 f605 	lsl.w	r6, r1, r5
 8005abe:	1d72      	adds	r2, r6, #5
 8005ac0:	0092      	lsls	r2, r2, #2
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f000 fb60 	bl	8006188 <_calloc_r>
 8005ac8:	b160      	cbz	r0, 8005ae4 <_Balloc+0x64>
 8005aca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ace:	e00e      	b.n	8005aee <_Balloc+0x6e>
 8005ad0:	2221      	movs	r2, #33	; 0x21
 8005ad2:	2104      	movs	r1, #4
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f000 fb57 	bl	8006188 <_calloc_r>
 8005ada:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005adc:	60f0      	str	r0, [r6, #12]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e4      	bne.n	8005aae <_Balloc+0x2e>
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}
 8005ae8:	6802      	ldr	r2, [r0, #0]
 8005aea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005aee:	2300      	movs	r3, #0
 8005af0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005af4:	e7f7      	b.n	8005ae6 <_Balloc+0x66>
 8005af6:	bf00      	nop
 8005af8:	08007d85 	.word	0x08007d85
 8005afc:	08007e08 	.word	0x08007e08

08005b00 <_Bfree>:
 8005b00:	b570      	push	{r4, r5, r6, lr}
 8005b02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b04:	4605      	mov	r5, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	b976      	cbnz	r6, 8005b28 <_Bfree+0x28>
 8005b0a:	2010      	movs	r0, #16
 8005b0c:	f7ff ffa2 	bl	8005a54 <malloc>
 8005b10:	4602      	mov	r2, r0
 8005b12:	6268      	str	r0, [r5, #36]	; 0x24
 8005b14:	b920      	cbnz	r0, 8005b20 <_Bfree+0x20>
 8005b16:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <_Bfree+0x3c>)
 8005b18:	4809      	ldr	r0, [pc, #36]	; (8005b40 <_Bfree+0x40>)
 8005b1a:	218a      	movs	r1, #138	; 0x8a
 8005b1c:	f000 fc3a 	bl	8006394 <__assert_func>
 8005b20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b24:	6006      	str	r6, [r0, #0]
 8005b26:	60c6      	str	r6, [r0, #12]
 8005b28:	b13c      	cbz	r4, 8005b3a <_Bfree+0x3a>
 8005b2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b2c:	6862      	ldr	r2, [r4, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b34:	6021      	str	r1, [r4, #0]
 8005b36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b3a:	bd70      	pop	{r4, r5, r6, pc}
 8005b3c:	08007d85 	.word	0x08007d85
 8005b40:	08007e08 	.word	0x08007e08

08005b44 <__multadd>:
 8005b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b48:	690d      	ldr	r5, [r1, #16]
 8005b4a:	4607      	mov	r7, r0
 8005b4c:	460c      	mov	r4, r1
 8005b4e:	461e      	mov	r6, r3
 8005b50:	f101 0c14 	add.w	ip, r1, #20
 8005b54:	2000      	movs	r0, #0
 8005b56:	f8dc 3000 	ldr.w	r3, [ip]
 8005b5a:	b299      	uxth	r1, r3
 8005b5c:	fb02 6101 	mla	r1, r2, r1, r6
 8005b60:	0c1e      	lsrs	r6, r3, #16
 8005b62:	0c0b      	lsrs	r3, r1, #16
 8005b64:	fb02 3306 	mla	r3, r2, r6, r3
 8005b68:	b289      	uxth	r1, r1
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b70:	4285      	cmp	r5, r0
 8005b72:	f84c 1b04 	str.w	r1, [ip], #4
 8005b76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b7a:	dcec      	bgt.n	8005b56 <__multadd+0x12>
 8005b7c:	b30e      	cbz	r6, 8005bc2 <__multadd+0x7e>
 8005b7e:	68a3      	ldr	r3, [r4, #8]
 8005b80:	42ab      	cmp	r3, r5
 8005b82:	dc19      	bgt.n	8005bb8 <__multadd+0x74>
 8005b84:	6861      	ldr	r1, [r4, #4]
 8005b86:	4638      	mov	r0, r7
 8005b88:	3101      	adds	r1, #1
 8005b8a:	f7ff ff79 	bl	8005a80 <_Balloc>
 8005b8e:	4680      	mov	r8, r0
 8005b90:	b928      	cbnz	r0, 8005b9e <__multadd+0x5a>
 8005b92:	4602      	mov	r2, r0
 8005b94:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <__multadd+0x84>)
 8005b96:	480d      	ldr	r0, [pc, #52]	; (8005bcc <__multadd+0x88>)
 8005b98:	21b5      	movs	r1, #181	; 0xb5
 8005b9a:	f000 fbfb 	bl	8006394 <__assert_func>
 8005b9e:	6922      	ldr	r2, [r4, #16]
 8005ba0:	3202      	adds	r2, #2
 8005ba2:	f104 010c 	add.w	r1, r4, #12
 8005ba6:	0092      	lsls	r2, r2, #2
 8005ba8:	300c      	adds	r0, #12
 8005baa:	f7ff ff5b 	bl	8005a64 <memcpy>
 8005bae:	4621      	mov	r1, r4
 8005bb0:	4638      	mov	r0, r7
 8005bb2:	f7ff ffa5 	bl	8005b00 <_Bfree>
 8005bb6:	4644      	mov	r4, r8
 8005bb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005bbc:	3501      	adds	r5, #1
 8005bbe:	615e      	str	r6, [r3, #20]
 8005bc0:	6125      	str	r5, [r4, #16]
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bc8:	08007df7 	.word	0x08007df7
 8005bcc:	08007e08 	.word	0x08007e08

08005bd0 <__hi0bits>:
 8005bd0:	0c03      	lsrs	r3, r0, #16
 8005bd2:	041b      	lsls	r3, r3, #16
 8005bd4:	b9d3      	cbnz	r3, 8005c0c <__hi0bits+0x3c>
 8005bd6:	0400      	lsls	r0, r0, #16
 8005bd8:	2310      	movs	r3, #16
 8005bda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005bde:	bf04      	itt	eq
 8005be0:	0200      	lsleq	r0, r0, #8
 8005be2:	3308      	addeq	r3, #8
 8005be4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005be8:	bf04      	itt	eq
 8005bea:	0100      	lsleq	r0, r0, #4
 8005bec:	3304      	addeq	r3, #4
 8005bee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005bf2:	bf04      	itt	eq
 8005bf4:	0080      	lsleq	r0, r0, #2
 8005bf6:	3302      	addeq	r3, #2
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	db05      	blt.n	8005c08 <__hi0bits+0x38>
 8005bfc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005c00:	f103 0301 	add.w	r3, r3, #1
 8005c04:	bf08      	it	eq
 8005c06:	2320      	moveq	r3, #32
 8005c08:	4618      	mov	r0, r3
 8005c0a:	4770      	bx	lr
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	e7e4      	b.n	8005bda <__hi0bits+0xa>

08005c10 <__lo0bits>:
 8005c10:	6803      	ldr	r3, [r0, #0]
 8005c12:	f013 0207 	ands.w	r2, r3, #7
 8005c16:	4601      	mov	r1, r0
 8005c18:	d00b      	beq.n	8005c32 <__lo0bits+0x22>
 8005c1a:	07da      	lsls	r2, r3, #31
 8005c1c:	d423      	bmi.n	8005c66 <__lo0bits+0x56>
 8005c1e:	0798      	lsls	r0, r3, #30
 8005c20:	bf49      	itett	mi
 8005c22:	085b      	lsrmi	r3, r3, #1
 8005c24:	089b      	lsrpl	r3, r3, #2
 8005c26:	2001      	movmi	r0, #1
 8005c28:	600b      	strmi	r3, [r1, #0]
 8005c2a:	bf5c      	itt	pl
 8005c2c:	600b      	strpl	r3, [r1, #0]
 8005c2e:	2002      	movpl	r0, #2
 8005c30:	4770      	bx	lr
 8005c32:	b298      	uxth	r0, r3
 8005c34:	b9a8      	cbnz	r0, 8005c62 <__lo0bits+0x52>
 8005c36:	0c1b      	lsrs	r3, r3, #16
 8005c38:	2010      	movs	r0, #16
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	b90a      	cbnz	r2, 8005c42 <__lo0bits+0x32>
 8005c3e:	3008      	adds	r0, #8
 8005c40:	0a1b      	lsrs	r3, r3, #8
 8005c42:	071a      	lsls	r2, r3, #28
 8005c44:	bf04      	itt	eq
 8005c46:	091b      	lsreq	r3, r3, #4
 8005c48:	3004      	addeq	r0, #4
 8005c4a:	079a      	lsls	r2, r3, #30
 8005c4c:	bf04      	itt	eq
 8005c4e:	089b      	lsreq	r3, r3, #2
 8005c50:	3002      	addeq	r0, #2
 8005c52:	07da      	lsls	r2, r3, #31
 8005c54:	d403      	bmi.n	8005c5e <__lo0bits+0x4e>
 8005c56:	085b      	lsrs	r3, r3, #1
 8005c58:	f100 0001 	add.w	r0, r0, #1
 8005c5c:	d005      	beq.n	8005c6a <__lo0bits+0x5a>
 8005c5e:	600b      	str	r3, [r1, #0]
 8005c60:	4770      	bx	lr
 8005c62:	4610      	mov	r0, r2
 8005c64:	e7e9      	b.n	8005c3a <__lo0bits+0x2a>
 8005c66:	2000      	movs	r0, #0
 8005c68:	4770      	bx	lr
 8005c6a:	2020      	movs	r0, #32
 8005c6c:	4770      	bx	lr
	...

08005c70 <__i2b>:
 8005c70:	b510      	push	{r4, lr}
 8005c72:	460c      	mov	r4, r1
 8005c74:	2101      	movs	r1, #1
 8005c76:	f7ff ff03 	bl	8005a80 <_Balloc>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	b928      	cbnz	r0, 8005c8a <__i2b+0x1a>
 8005c7e:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <__i2b+0x24>)
 8005c80:	4805      	ldr	r0, [pc, #20]	; (8005c98 <__i2b+0x28>)
 8005c82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c86:	f000 fb85 	bl	8006394 <__assert_func>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	6144      	str	r4, [r0, #20]
 8005c8e:	6103      	str	r3, [r0, #16]
 8005c90:	bd10      	pop	{r4, pc}
 8005c92:	bf00      	nop
 8005c94:	08007df7 	.word	0x08007df7
 8005c98:	08007e08 	.word	0x08007e08

08005c9c <__multiply>:
 8005c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca0:	4691      	mov	r9, r2
 8005ca2:	690a      	ldr	r2, [r1, #16]
 8005ca4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	bfb8      	it	lt
 8005cac:	460b      	movlt	r3, r1
 8005cae:	460c      	mov	r4, r1
 8005cb0:	bfbc      	itt	lt
 8005cb2:	464c      	movlt	r4, r9
 8005cb4:	4699      	movlt	r9, r3
 8005cb6:	6927      	ldr	r7, [r4, #16]
 8005cb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005cbc:	68a3      	ldr	r3, [r4, #8]
 8005cbe:	6861      	ldr	r1, [r4, #4]
 8005cc0:	eb07 060a 	add.w	r6, r7, sl
 8005cc4:	42b3      	cmp	r3, r6
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	bfb8      	it	lt
 8005cca:	3101      	addlt	r1, #1
 8005ccc:	f7ff fed8 	bl	8005a80 <_Balloc>
 8005cd0:	b930      	cbnz	r0, 8005ce0 <__multiply+0x44>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	4b44      	ldr	r3, [pc, #272]	; (8005de8 <__multiply+0x14c>)
 8005cd6:	4845      	ldr	r0, [pc, #276]	; (8005dec <__multiply+0x150>)
 8005cd8:	f240 115d 	movw	r1, #349	; 0x15d
 8005cdc:	f000 fb5a 	bl	8006394 <__assert_func>
 8005ce0:	f100 0514 	add.w	r5, r0, #20
 8005ce4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ce8:	462b      	mov	r3, r5
 8005cea:	2200      	movs	r2, #0
 8005cec:	4543      	cmp	r3, r8
 8005cee:	d321      	bcc.n	8005d34 <__multiply+0x98>
 8005cf0:	f104 0314 	add.w	r3, r4, #20
 8005cf4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005cf8:	f109 0314 	add.w	r3, r9, #20
 8005cfc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005d00:	9202      	str	r2, [sp, #8]
 8005d02:	1b3a      	subs	r2, r7, r4
 8005d04:	3a15      	subs	r2, #21
 8005d06:	f022 0203 	bic.w	r2, r2, #3
 8005d0a:	3204      	adds	r2, #4
 8005d0c:	f104 0115 	add.w	r1, r4, #21
 8005d10:	428f      	cmp	r7, r1
 8005d12:	bf38      	it	cc
 8005d14:	2204      	movcc	r2, #4
 8005d16:	9201      	str	r2, [sp, #4]
 8005d18:	9a02      	ldr	r2, [sp, #8]
 8005d1a:	9303      	str	r3, [sp, #12]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d80c      	bhi.n	8005d3a <__multiply+0x9e>
 8005d20:	2e00      	cmp	r6, #0
 8005d22:	dd03      	ble.n	8005d2c <__multiply+0x90>
 8005d24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d05a      	beq.n	8005de2 <__multiply+0x146>
 8005d2c:	6106      	str	r6, [r0, #16]
 8005d2e:	b005      	add	sp, #20
 8005d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d34:	f843 2b04 	str.w	r2, [r3], #4
 8005d38:	e7d8      	b.n	8005cec <__multiply+0x50>
 8005d3a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d3e:	f1ba 0f00 	cmp.w	sl, #0
 8005d42:	d024      	beq.n	8005d8e <__multiply+0xf2>
 8005d44:	f104 0e14 	add.w	lr, r4, #20
 8005d48:	46a9      	mov	r9, r5
 8005d4a:	f04f 0c00 	mov.w	ip, #0
 8005d4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005d52:	f8d9 1000 	ldr.w	r1, [r9]
 8005d56:	fa1f fb82 	uxth.w	fp, r2
 8005d5a:	b289      	uxth	r1, r1
 8005d5c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005d64:	f8d9 2000 	ldr.w	r2, [r9]
 8005d68:	4461      	add	r1, ip
 8005d6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d6e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005d72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d76:	b289      	uxth	r1, r1
 8005d78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d7c:	4577      	cmp	r7, lr
 8005d7e:	f849 1b04 	str.w	r1, [r9], #4
 8005d82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d86:	d8e2      	bhi.n	8005d4e <__multiply+0xb2>
 8005d88:	9a01      	ldr	r2, [sp, #4]
 8005d8a:	f845 c002 	str.w	ip, [r5, r2]
 8005d8e:	9a03      	ldr	r2, [sp, #12]
 8005d90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d94:	3304      	adds	r3, #4
 8005d96:	f1b9 0f00 	cmp.w	r9, #0
 8005d9a:	d020      	beq.n	8005dde <__multiply+0x142>
 8005d9c:	6829      	ldr	r1, [r5, #0]
 8005d9e:	f104 0c14 	add.w	ip, r4, #20
 8005da2:	46ae      	mov	lr, r5
 8005da4:	f04f 0a00 	mov.w	sl, #0
 8005da8:	f8bc b000 	ldrh.w	fp, [ip]
 8005dac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005db0:	fb09 220b 	mla	r2, r9, fp, r2
 8005db4:	4492      	add	sl, r2
 8005db6:	b289      	uxth	r1, r1
 8005db8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005dbc:	f84e 1b04 	str.w	r1, [lr], #4
 8005dc0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005dc4:	f8be 1000 	ldrh.w	r1, [lr]
 8005dc8:	0c12      	lsrs	r2, r2, #16
 8005dca:	fb09 1102 	mla	r1, r9, r2, r1
 8005dce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005dd2:	4567      	cmp	r7, ip
 8005dd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005dd8:	d8e6      	bhi.n	8005da8 <__multiply+0x10c>
 8005dda:	9a01      	ldr	r2, [sp, #4]
 8005ddc:	50a9      	str	r1, [r5, r2]
 8005dde:	3504      	adds	r5, #4
 8005de0:	e79a      	b.n	8005d18 <__multiply+0x7c>
 8005de2:	3e01      	subs	r6, #1
 8005de4:	e79c      	b.n	8005d20 <__multiply+0x84>
 8005de6:	bf00      	nop
 8005de8:	08007df7 	.word	0x08007df7
 8005dec:	08007e08 	.word	0x08007e08

08005df0 <__pow5mult>:
 8005df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005df4:	4615      	mov	r5, r2
 8005df6:	f012 0203 	ands.w	r2, r2, #3
 8005dfa:	4606      	mov	r6, r0
 8005dfc:	460f      	mov	r7, r1
 8005dfe:	d007      	beq.n	8005e10 <__pow5mult+0x20>
 8005e00:	4c25      	ldr	r4, [pc, #148]	; (8005e98 <__pow5mult+0xa8>)
 8005e02:	3a01      	subs	r2, #1
 8005e04:	2300      	movs	r3, #0
 8005e06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e0a:	f7ff fe9b 	bl	8005b44 <__multadd>
 8005e0e:	4607      	mov	r7, r0
 8005e10:	10ad      	asrs	r5, r5, #2
 8005e12:	d03d      	beq.n	8005e90 <__pow5mult+0xa0>
 8005e14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e16:	b97c      	cbnz	r4, 8005e38 <__pow5mult+0x48>
 8005e18:	2010      	movs	r0, #16
 8005e1a:	f7ff fe1b 	bl	8005a54 <malloc>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	6270      	str	r0, [r6, #36]	; 0x24
 8005e22:	b928      	cbnz	r0, 8005e30 <__pow5mult+0x40>
 8005e24:	4b1d      	ldr	r3, [pc, #116]	; (8005e9c <__pow5mult+0xac>)
 8005e26:	481e      	ldr	r0, [pc, #120]	; (8005ea0 <__pow5mult+0xb0>)
 8005e28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005e2c:	f000 fab2 	bl	8006394 <__assert_func>
 8005e30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e34:	6004      	str	r4, [r0, #0]
 8005e36:	60c4      	str	r4, [r0, #12]
 8005e38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e40:	b94c      	cbnz	r4, 8005e56 <__pow5mult+0x66>
 8005e42:	f240 2171 	movw	r1, #625	; 0x271
 8005e46:	4630      	mov	r0, r6
 8005e48:	f7ff ff12 	bl	8005c70 <__i2b>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e52:	4604      	mov	r4, r0
 8005e54:	6003      	str	r3, [r0, #0]
 8005e56:	f04f 0900 	mov.w	r9, #0
 8005e5a:	07eb      	lsls	r3, r5, #31
 8005e5c:	d50a      	bpl.n	8005e74 <__pow5mult+0x84>
 8005e5e:	4639      	mov	r1, r7
 8005e60:	4622      	mov	r2, r4
 8005e62:	4630      	mov	r0, r6
 8005e64:	f7ff ff1a 	bl	8005c9c <__multiply>
 8005e68:	4639      	mov	r1, r7
 8005e6a:	4680      	mov	r8, r0
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	f7ff fe47 	bl	8005b00 <_Bfree>
 8005e72:	4647      	mov	r7, r8
 8005e74:	106d      	asrs	r5, r5, #1
 8005e76:	d00b      	beq.n	8005e90 <__pow5mult+0xa0>
 8005e78:	6820      	ldr	r0, [r4, #0]
 8005e7a:	b938      	cbnz	r0, 8005e8c <__pow5mult+0x9c>
 8005e7c:	4622      	mov	r2, r4
 8005e7e:	4621      	mov	r1, r4
 8005e80:	4630      	mov	r0, r6
 8005e82:	f7ff ff0b 	bl	8005c9c <__multiply>
 8005e86:	6020      	str	r0, [r4, #0]
 8005e88:	f8c0 9000 	str.w	r9, [r0]
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	e7e4      	b.n	8005e5a <__pow5mult+0x6a>
 8005e90:	4638      	mov	r0, r7
 8005e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e96:	bf00      	nop
 8005e98:	08007f58 	.word	0x08007f58
 8005e9c:	08007d85 	.word	0x08007d85
 8005ea0:	08007e08 	.word	0x08007e08

08005ea4 <__lshift>:
 8005ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea8:	460c      	mov	r4, r1
 8005eaa:	6849      	ldr	r1, [r1, #4]
 8005eac:	6923      	ldr	r3, [r4, #16]
 8005eae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005eb2:	68a3      	ldr	r3, [r4, #8]
 8005eb4:	4607      	mov	r7, r0
 8005eb6:	4691      	mov	r9, r2
 8005eb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ebc:	f108 0601 	add.w	r6, r8, #1
 8005ec0:	42b3      	cmp	r3, r6
 8005ec2:	db0b      	blt.n	8005edc <__lshift+0x38>
 8005ec4:	4638      	mov	r0, r7
 8005ec6:	f7ff fddb 	bl	8005a80 <_Balloc>
 8005eca:	4605      	mov	r5, r0
 8005ecc:	b948      	cbnz	r0, 8005ee2 <__lshift+0x3e>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	4b2a      	ldr	r3, [pc, #168]	; (8005f7c <__lshift+0xd8>)
 8005ed2:	482b      	ldr	r0, [pc, #172]	; (8005f80 <__lshift+0xdc>)
 8005ed4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005ed8:	f000 fa5c 	bl	8006394 <__assert_func>
 8005edc:	3101      	adds	r1, #1
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	e7ee      	b.n	8005ec0 <__lshift+0x1c>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f100 0114 	add.w	r1, r0, #20
 8005ee8:	f100 0210 	add.w	r2, r0, #16
 8005eec:	4618      	mov	r0, r3
 8005eee:	4553      	cmp	r3, sl
 8005ef0:	db37      	blt.n	8005f62 <__lshift+0xbe>
 8005ef2:	6920      	ldr	r0, [r4, #16]
 8005ef4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ef8:	f104 0314 	add.w	r3, r4, #20
 8005efc:	f019 091f 	ands.w	r9, r9, #31
 8005f00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005f08:	d02f      	beq.n	8005f6a <__lshift+0xc6>
 8005f0a:	f1c9 0e20 	rsb	lr, r9, #32
 8005f0e:	468a      	mov	sl, r1
 8005f10:	f04f 0c00 	mov.w	ip, #0
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	fa02 f209 	lsl.w	r2, r2, r9
 8005f1a:	ea42 020c 	orr.w	r2, r2, ip
 8005f1e:	f84a 2b04 	str.w	r2, [sl], #4
 8005f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f26:	4298      	cmp	r0, r3
 8005f28:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005f2c:	d8f2      	bhi.n	8005f14 <__lshift+0x70>
 8005f2e:	1b03      	subs	r3, r0, r4
 8005f30:	3b15      	subs	r3, #21
 8005f32:	f023 0303 	bic.w	r3, r3, #3
 8005f36:	3304      	adds	r3, #4
 8005f38:	f104 0215 	add.w	r2, r4, #21
 8005f3c:	4290      	cmp	r0, r2
 8005f3e:	bf38      	it	cc
 8005f40:	2304      	movcc	r3, #4
 8005f42:	f841 c003 	str.w	ip, [r1, r3]
 8005f46:	f1bc 0f00 	cmp.w	ip, #0
 8005f4a:	d001      	beq.n	8005f50 <__lshift+0xac>
 8005f4c:	f108 0602 	add.w	r6, r8, #2
 8005f50:	3e01      	subs	r6, #1
 8005f52:	4638      	mov	r0, r7
 8005f54:	612e      	str	r6, [r5, #16]
 8005f56:	4621      	mov	r1, r4
 8005f58:	f7ff fdd2 	bl	8005b00 <_Bfree>
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f62:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f66:	3301      	adds	r3, #1
 8005f68:	e7c1      	b.n	8005eee <__lshift+0x4a>
 8005f6a:	3904      	subs	r1, #4
 8005f6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f70:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f74:	4298      	cmp	r0, r3
 8005f76:	d8f9      	bhi.n	8005f6c <__lshift+0xc8>
 8005f78:	e7ea      	b.n	8005f50 <__lshift+0xac>
 8005f7a:	bf00      	nop
 8005f7c:	08007df7 	.word	0x08007df7
 8005f80:	08007e08 	.word	0x08007e08

08005f84 <__mcmp>:
 8005f84:	b530      	push	{r4, r5, lr}
 8005f86:	6902      	ldr	r2, [r0, #16]
 8005f88:	690c      	ldr	r4, [r1, #16]
 8005f8a:	1b12      	subs	r2, r2, r4
 8005f8c:	d10e      	bne.n	8005fac <__mcmp+0x28>
 8005f8e:	f100 0314 	add.w	r3, r0, #20
 8005f92:	3114      	adds	r1, #20
 8005f94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005f98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005f9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005fa0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005fa4:	42a5      	cmp	r5, r4
 8005fa6:	d003      	beq.n	8005fb0 <__mcmp+0x2c>
 8005fa8:	d305      	bcc.n	8005fb6 <__mcmp+0x32>
 8005faa:	2201      	movs	r2, #1
 8005fac:	4610      	mov	r0, r2
 8005fae:	bd30      	pop	{r4, r5, pc}
 8005fb0:	4283      	cmp	r3, r0
 8005fb2:	d3f3      	bcc.n	8005f9c <__mcmp+0x18>
 8005fb4:	e7fa      	b.n	8005fac <__mcmp+0x28>
 8005fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fba:	e7f7      	b.n	8005fac <__mcmp+0x28>

08005fbc <__mdiff>:
 8005fbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	4606      	mov	r6, r0
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	4690      	mov	r8, r2
 8005fca:	f7ff ffdb 	bl	8005f84 <__mcmp>
 8005fce:	1e05      	subs	r5, r0, #0
 8005fd0:	d110      	bne.n	8005ff4 <__mdiff+0x38>
 8005fd2:	4629      	mov	r1, r5
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f7ff fd53 	bl	8005a80 <_Balloc>
 8005fda:	b930      	cbnz	r0, 8005fea <__mdiff+0x2e>
 8005fdc:	4b3a      	ldr	r3, [pc, #232]	; (80060c8 <__mdiff+0x10c>)
 8005fde:	4602      	mov	r2, r0
 8005fe0:	f240 2132 	movw	r1, #562	; 0x232
 8005fe4:	4839      	ldr	r0, [pc, #228]	; (80060cc <__mdiff+0x110>)
 8005fe6:	f000 f9d5 	bl	8006394 <__assert_func>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005ff0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff4:	bfa4      	itt	ge
 8005ff6:	4643      	movge	r3, r8
 8005ff8:	46a0      	movge	r8, r4
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006000:	bfa6      	itte	ge
 8006002:	461c      	movge	r4, r3
 8006004:	2500      	movge	r5, #0
 8006006:	2501      	movlt	r5, #1
 8006008:	f7ff fd3a 	bl	8005a80 <_Balloc>
 800600c:	b920      	cbnz	r0, 8006018 <__mdiff+0x5c>
 800600e:	4b2e      	ldr	r3, [pc, #184]	; (80060c8 <__mdiff+0x10c>)
 8006010:	4602      	mov	r2, r0
 8006012:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006016:	e7e5      	b.n	8005fe4 <__mdiff+0x28>
 8006018:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800601c:	6926      	ldr	r6, [r4, #16]
 800601e:	60c5      	str	r5, [r0, #12]
 8006020:	f104 0914 	add.w	r9, r4, #20
 8006024:	f108 0514 	add.w	r5, r8, #20
 8006028:	f100 0e14 	add.w	lr, r0, #20
 800602c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006030:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006034:	f108 0210 	add.w	r2, r8, #16
 8006038:	46f2      	mov	sl, lr
 800603a:	2100      	movs	r1, #0
 800603c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006040:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006044:	fa1f f883 	uxth.w	r8, r3
 8006048:	fa11 f18b 	uxtah	r1, r1, fp
 800604c:	0c1b      	lsrs	r3, r3, #16
 800604e:	eba1 0808 	sub.w	r8, r1, r8
 8006052:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006056:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800605a:	fa1f f888 	uxth.w	r8, r8
 800605e:	1419      	asrs	r1, r3, #16
 8006060:	454e      	cmp	r6, r9
 8006062:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006066:	f84a 3b04 	str.w	r3, [sl], #4
 800606a:	d8e7      	bhi.n	800603c <__mdiff+0x80>
 800606c:	1b33      	subs	r3, r6, r4
 800606e:	3b15      	subs	r3, #21
 8006070:	f023 0303 	bic.w	r3, r3, #3
 8006074:	3304      	adds	r3, #4
 8006076:	3415      	adds	r4, #21
 8006078:	42a6      	cmp	r6, r4
 800607a:	bf38      	it	cc
 800607c:	2304      	movcc	r3, #4
 800607e:	441d      	add	r5, r3
 8006080:	4473      	add	r3, lr
 8006082:	469e      	mov	lr, r3
 8006084:	462e      	mov	r6, r5
 8006086:	4566      	cmp	r6, ip
 8006088:	d30e      	bcc.n	80060a8 <__mdiff+0xec>
 800608a:	f10c 0203 	add.w	r2, ip, #3
 800608e:	1b52      	subs	r2, r2, r5
 8006090:	f022 0203 	bic.w	r2, r2, #3
 8006094:	3d03      	subs	r5, #3
 8006096:	45ac      	cmp	ip, r5
 8006098:	bf38      	it	cc
 800609a:	2200      	movcc	r2, #0
 800609c:	441a      	add	r2, r3
 800609e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80060a2:	b17b      	cbz	r3, 80060c4 <__mdiff+0x108>
 80060a4:	6107      	str	r7, [r0, #16]
 80060a6:	e7a3      	b.n	8005ff0 <__mdiff+0x34>
 80060a8:	f856 8b04 	ldr.w	r8, [r6], #4
 80060ac:	fa11 f288 	uxtah	r2, r1, r8
 80060b0:	1414      	asrs	r4, r2, #16
 80060b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80060b6:	b292      	uxth	r2, r2
 80060b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80060bc:	f84e 2b04 	str.w	r2, [lr], #4
 80060c0:	1421      	asrs	r1, r4, #16
 80060c2:	e7e0      	b.n	8006086 <__mdiff+0xca>
 80060c4:	3f01      	subs	r7, #1
 80060c6:	e7ea      	b.n	800609e <__mdiff+0xe2>
 80060c8:	08007df7 	.word	0x08007df7
 80060cc:	08007e08 	.word	0x08007e08

080060d0 <__d2b>:
 80060d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060d4:	4689      	mov	r9, r1
 80060d6:	2101      	movs	r1, #1
 80060d8:	ec57 6b10 	vmov	r6, r7, d0
 80060dc:	4690      	mov	r8, r2
 80060de:	f7ff fccf 	bl	8005a80 <_Balloc>
 80060e2:	4604      	mov	r4, r0
 80060e4:	b930      	cbnz	r0, 80060f4 <__d2b+0x24>
 80060e6:	4602      	mov	r2, r0
 80060e8:	4b25      	ldr	r3, [pc, #148]	; (8006180 <__d2b+0xb0>)
 80060ea:	4826      	ldr	r0, [pc, #152]	; (8006184 <__d2b+0xb4>)
 80060ec:	f240 310a 	movw	r1, #778	; 0x30a
 80060f0:	f000 f950 	bl	8006394 <__assert_func>
 80060f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80060f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80060fc:	bb35      	cbnz	r5, 800614c <__d2b+0x7c>
 80060fe:	2e00      	cmp	r6, #0
 8006100:	9301      	str	r3, [sp, #4]
 8006102:	d028      	beq.n	8006156 <__d2b+0x86>
 8006104:	4668      	mov	r0, sp
 8006106:	9600      	str	r6, [sp, #0]
 8006108:	f7ff fd82 	bl	8005c10 <__lo0bits>
 800610c:	9900      	ldr	r1, [sp, #0]
 800610e:	b300      	cbz	r0, 8006152 <__d2b+0x82>
 8006110:	9a01      	ldr	r2, [sp, #4]
 8006112:	f1c0 0320 	rsb	r3, r0, #32
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	430b      	orrs	r3, r1
 800611c:	40c2      	lsrs	r2, r0
 800611e:	6163      	str	r3, [r4, #20]
 8006120:	9201      	str	r2, [sp, #4]
 8006122:	9b01      	ldr	r3, [sp, #4]
 8006124:	61a3      	str	r3, [r4, #24]
 8006126:	2b00      	cmp	r3, #0
 8006128:	bf14      	ite	ne
 800612a:	2202      	movne	r2, #2
 800612c:	2201      	moveq	r2, #1
 800612e:	6122      	str	r2, [r4, #16]
 8006130:	b1d5      	cbz	r5, 8006168 <__d2b+0x98>
 8006132:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006136:	4405      	add	r5, r0
 8006138:	f8c9 5000 	str.w	r5, [r9]
 800613c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006140:	f8c8 0000 	str.w	r0, [r8]
 8006144:	4620      	mov	r0, r4
 8006146:	b003      	add	sp, #12
 8006148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800614c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006150:	e7d5      	b.n	80060fe <__d2b+0x2e>
 8006152:	6161      	str	r1, [r4, #20]
 8006154:	e7e5      	b.n	8006122 <__d2b+0x52>
 8006156:	a801      	add	r0, sp, #4
 8006158:	f7ff fd5a 	bl	8005c10 <__lo0bits>
 800615c:	9b01      	ldr	r3, [sp, #4]
 800615e:	6163      	str	r3, [r4, #20]
 8006160:	2201      	movs	r2, #1
 8006162:	6122      	str	r2, [r4, #16]
 8006164:	3020      	adds	r0, #32
 8006166:	e7e3      	b.n	8006130 <__d2b+0x60>
 8006168:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800616c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006170:	f8c9 0000 	str.w	r0, [r9]
 8006174:	6918      	ldr	r0, [r3, #16]
 8006176:	f7ff fd2b 	bl	8005bd0 <__hi0bits>
 800617a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800617e:	e7df      	b.n	8006140 <__d2b+0x70>
 8006180:	08007df7 	.word	0x08007df7
 8006184:	08007e08 	.word	0x08007e08

08006188 <_calloc_r>:
 8006188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800618a:	fba1 2402 	umull	r2, r4, r1, r2
 800618e:	b94c      	cbnz	r4, 80061a4 <_calloc_r+0x1c>
 8006190:	4611      	mov	r1, r2
 8006192:	9201      	str	r2, [sp, #4]
 8006194:	f000 f87a 	bl	800628c <_malloc_r>
 8006198:	9a01      	ldr	r2, [sp, #4]
 800619a:	4605      	mov	r5, r0
 800619c:	b930      	cbnz	r0, 80061ac <_calloc_r+0x24>
 800619e:	4628      	mov	r0, r5
 80061a0:	b003      	add	sp, #12
 80061a2:	bd30      	pop	{r4, r5, pc}
 80061a4:	220c      	movs	r2, #12
 80061a6:	6002      	str	r2, [r0, #0]
 80061a8:	2500      	movs	r5, #0
 80061aa:	e7f8      	b.n	800619e <_calloc_r+0x16>
 80061ac:	4621      	mov	r1, r4
 80061ae:	f7fe f95f 	bl	8004470 <memset>
 80061b2:	e7f4      	b.n	800619e <_calloc_r+0x16>

080061b4 <_free_r>:
 80061b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061b6:	2900      	cmp	r1, #0
 80061b8:	d044      	beq.n	8006244 <_free_r+0x90>
 80061ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061be:	9001      	str	r0, [sp, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f1a1 0404 	sub.w	r4, r1, #4
 80061c6:	bfb8      	it	lt
 80061c8:	18e4      	addlt	r4, r4, r3
 80061ca:	f000 f925 	bl	8006418 <__malloc_lock>
 80061ce:	4a1e      	ldr	r2, [pc, #120]	; (8006248 <_free_r+0x94>)
 80061d0:	9801      	ldr	r0, [sp, #4]
 80061d2:	6813      	ldr	r3, [r2, #0]
 80061d4:	b933      	cbnz	r3, 80061e4 <_free_r+0x30>
 80061d6:	6063      	str	r3, [r4, #4]
 80061d8:	6014      	str	r4, [r2, #0]
 80061da:	b003      	add	sp, #12
 80061dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061e0:	f000 b920 	b.w	8006424 <__malloc_unlock>
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	d908      	bls.n	80061fa <_free_r+0x46>
 80061e8:	6825      	ldr	r5, [r4, #0]
 80061ea:	1961      	adds	r1, r4, r5
 80061ec:	428b      	cmp	r3, r1
 80061ee:	bf01      	itttt	eq
 80061f0:	6819      	ldreq	r1, [r3, #0]
 80061f2:	685b      	ldreq	r3, [r3, #4]
 80061f4:	1949      	addeq	r1, r1, r5
 80061f6:	6021      	streq	r1, [r4, #0]
 80061f8:	e7ed      	b.n	80061d6 <_free_r+0x22>
 80061fa:	461a      	mov	r2, r3
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	b10b      	cbz	r3, 8006204 <_free_r+0x50>
 8006200:	42a3      	cmp	r3, r4
 8006202:	d9fa      	bls.n	80061fa <_free_r+0x46>
 8006204:	6811      	ldr	r1, [r2, #0]
 8006206:	1855      	adds	r5, r2, r1
 8006208:	42a5      	cmp	r5, r4
 800620a:	d10b      	bne.n	8006224 <_free_r+0x70>
 800620c:	6824      	ldr	r4, [r4, #0]
 800620e:	4421      	add	r1, r4
 8006210:	1854      	adds	r4, r2, r1
 8006212:	42a3      	cmp	r3, r4
 8006214:	6011      	str	r1, [r2, #0]
 8006216:	d1e0      	bne.n	80061da <_free_r+0x26>
 8006218:	681c      	ldr	r4, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	6053      	str	r3, [r2, #4]
 800621e:	4421      	add	r1, r4
 8006220:	6011      	str	r1, [r2, #0]
 8006222:	e7da      	b.n	80061da <_free_r+0x26>
 8006224:	d902      	bls.n	800622c <_free_r+0x78>
 8006226:	230c      	movs	r3, #12
 8006228:	6003      	str	r3, [r0, #0]
 800622a:	e7d6      	b.n	80061da <_free_r+0x26>
 800622c:	6825      	ldr	r5, [r4, #0]
 800622e:	1961      	adds	r1, r4, r5
 8006230:	428b      	cmp	r3, r1
 8006232:	bf04      	itt	eq
 8006234:	6819      	ldreq	r1, [r3, #0]
 8006236:	685b      	ldreq	r3, [r3, #4]
 8006238:	6063      	str	r3, [r4, #4]
 800623a:	bf04      	itt	eq
 800623c:	1949      	addeq	r1, r1, r5
 800623e:	6021      	streq	r1, [r4, #0]
 8006240:	6054      	str	r4, [r2, #4]
 8006242:	e7ca      	b.n	80061da <_free_r+0x26>
 8006244:	b003      	add	sp, #12
 8006246:	bd30      	pop	{r4, r5, pc}
 8006248:	200012c4 	.word	0x200012c4

0800624c <sbrk_aligned>:
 800624c:	b570      	push	{r4, r5, r6, lr}
 800624e:	4e0e      	ldr	r6, [pc, #56]	; (8006288 <sbrk_aligned+0x3c>)
 8006250:	460c      	mov	r4, r1
 8006252:	6831      	ldr	r1, [r6, #0]
 8006254:	4605      	mov	r5, r0
 8006256:	b911      	cbnz	r1, 800625e <sbrk_aligned+0x12>
 8006258:	f000 f88c 	bl	8006374 <_sbrk_r>
 800625c:	6030      	str	r0, [r6, #0]
 800625e:	4621      	mov	r1, r4
 8006260:	4628      	mov	r0, r5
 8006262:	f000 f887 	bl	8006374 <_sbrk_r>
 8006266:	1c43      	adds	r3, r0, #1
 8006268:	d00a      	beq.n	8006280 <sbrk_aligned+0x34>
 800626a:	1cc4      	adds	r4, r0, #3
 800626c:	f024 0403 	bic.w	r4, r4, #3
 8006270:	42a0      	cmp	r0, r4
 8006272:	d007      	beq.n	8006284 <sbrk_aligned+0x38>
 8006274:	1a21      	subs	r1, r4, r0
 8006276:	4628      	mov	r0, r5
 8006278:	f000 f87c 	bl	8006374 <_sbrk_r>
 800627c:	3001      	adds	r0, #1
 800627e:	d101      	bne.n	8006284 <sbrk_aligned+0x38>
 8006280:	f04f 34ff 	mov.w	r4, #4294967295
 8006284:	4620      	mov	r0, r4
 8006286:	bd70      	pop	{r4, r5, r6, pc}
 8006288:	200012c8 	.word	0x200012c8

0800628c <_malloc_r>:
 800628c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006290:	1ccd      	adds	r5, r1, #3
 8006292:	f025 0503 	bic.w	r5, r5, #3
 8006296:	3508      	adds	r5, #8
 8006298:	2d0c      	cmp	r5, #12
 800629a:	bf38      	it	cc
 800629c:	250c      	movcc	r5, #12
 800629e:	2d00      	cmp	r5, #0
 80062a0:	4607      	mov	r7, r0
 80062a2:	db01      	blt.n	80062a8 <_malloc_r+0x1c>
 80062a4:	42a9      	cmp	r1, r5
 80062a6:	d905      	bls.n	80062b4 <_malloc_r+0x28>
 80062a8:	230c      	movs	r3, #12
 80062aa:	603b      	str	r3, [r7, #0]
 80062ac:	2600      	movs	r6, #0
 80062ae:	4630      	mov	r0, r6
 80062b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b4:	4e2e      	ldr	r6, [pc, #184]	; (8006370 <_malloc_r+0xe4>)
 80062b6:	f000 f8af 	bl	8006418 <__malloc_lock>
 80062ba:	6833      	ldr	r3, [r6, #0]
 80062bc:	461c      	mov	r4, r3
 80062be:	bb34      	cbnz	r4, 800630e <_malloc_r+0x82>
 80062c0:	4629      	mov	r1, r5
 80062c2:	4638      	mov	r0, r7
 80062c4:	f7ff ffc2 	bl	800624c <sbrk_aligned>
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	4604      	mov	r4, r0
 80062cc:	d14d      	bne.n	800636a <_malloc_r+0xde>
 80062ce:	6834      	ldr	r4, [r6, #0]
 80062d0:	4626      	mov	r6, r4
 80062d2:	2e00      	cmp	r6, #0
 80062d4:	d140      	bne.n	8006358 <_malloc_r+0xcc>
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	4631      	mov	r1, r6
 80062da:	4638      	mov	r0, r7
 80062dc:	eb04 0803 	add.w	r8, r4, r3
 80062e0:	f000 f848 	bl	8006374 <_sbrk_r>
 80062e4:	4580      	cmp	r8, r0
 80062e6:	d13a      	bne.n	800635e <_malloc_r+0xd2>
 80062e8:	6821      	ldr	r1, [r4, #0]
 80062ea:	3503      	adds	r5, #3
 80062ec:	1a6d      	subs	r5, r5, r1
 80062ee:	f025 0503 	bic.w	r5, r5, #3
 80062f2:	3508      	adds	r5, #8
 80062f4:	2d0c      	cmp	r5, #12
 80062f6:	bf38      	it	cc
 80062f8:	250c      	movcc	r5, #12
 80062fa:	4629      	mov	r1, r5
 80062fc:	4638      	mov	r0, r7
 80062fe:	f7ff ffa5 	bl	800624c <sbrk_aligned>
 8006302:	3001      	adds	r0, #1
 8006304:	d02b      	beq.n	800635e <_malloc_r+0xd2>
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	442b      	add	r3, r5
 800630a:	6023      	str	r3, [r4, #0]
 800630c:	e00e      	b.n	800632c <_malloc_r+0xa0>
 800630e:	6822      	ldr	r2, [r4, #0]
 8006310:	1b52      	subs	r2, r2, r5
 8006312:	d41e      	bmi.n	8006352 <_malloc_r+0xc6>
 8006314:	2a0b      	cmp	r2, #11
 8006316:	d916      	bls.n	8006346 <_malloc_r+0xba>
 8006318:	1961      	adds	r1, r4, r5
 800631a:	42a3      	cmp	r3, r4
 800631c:	6025      	str	r5, [r4, #0]
 800631e:	bf18      	it	ne
 8006320:	6059      	strne	r1, [r3, #4]
 8006322:	6863      	ldr	r3, [r4, #4]
 8006324:	bf08      	it	eq
 8006326:	6031      	streq	r1, [r6, #0]
 8006328:	5162      	str	r2, [r4, r5]
 800632a:	604b      	str	r3, [r1, #4]
 800632c:	4638      	mov	r0, r7
 800632e:	f104 060b 	add.w	r6, r4, #11
 8006332:	f000 f877 	bl	8006424 <__malloc_unlock>
 8006336:	f026 0607 	bic.w	r6, r6, #7
 800633a:	1d23      	adds	r3, r4, #4
 800633c:	1af2      	subs	r2, r6, r3
 800633e:	d0b6      	beq.n	80062ae <_malloc_r+0x22>
 8006340:	1b9b      	subs	r3, r3, r6
 8006342:	50a3      	str	r3, [r4, r2]
 8006344:	e7b3      	b.n	80062ae <_malloc_r+0x22>
 8006346:	6862      	ldr	r2, [r4, #4]
 8006348:	42a3      	cmp	r3, r4
 800634a:	bf0c      	ite	eq
 800634c:	6032      	streq	r2, [r6, #0]
 800634e:	605a      	strne	r2, [r3, #4]
 8006350:	e7ec      	b.n	800632c <_malloc_r+0xa0>
 8006352:	4623      	mov	r3, r4
 8006354:	6864      	ldr	r4, [r4, #4]
 8006356:	e7b2      	b.n	80062be <_malloc_r+0x32>
 8006358:	4634      	mov	r4, r6
 800635a:	6876      	ldr	r6, [r6, #4]
 800635c:	e7b9      	b.n	80062d2 <_malloc_r+0x46>
 800635e:	230c      	movs	r3, #12
 8006360:	603b      	str	r3, [r7, #0]
 8006362:	4638      	mov	r0, r7
 8006364:	f000 f85e 	bl	8006424 <__malloc_unlock>
 8006368:	e7a1      	b.n	80062ae <_malloc_r+0x22>
 800636a:	6025      	str	r5, [r4, #0]
 800636c:	e7de      	b.n	800632c <_malloc_r+0xa0>
 800636e:	bf00      	nop
 8006370:	200012c4 	.word	0x200012c4

08006374 <_sbrk_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	4d06      	ldr	r5, [pc, #24]	; (8006390 <_sbrk_r+0x1c>)
 8006378:	2300      	movs	r3, #0
 800637a:	4604      	mov	r4, r0
 800637c:	4608      	mov	r0, r1
 800637e:	602b      	str	r3, [r5, #0]
 8006380:	f7fd ffda 	bl	8004338 <_sbrk>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	d102      	bne.n	800638e <_sbrk_r+0x1a>
 8006388:	682b      	ldr	r3, [r5, #0]
 800638a:	b103      	cbz	r3, 800638e <_sbrk_r+0x1a>
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	bd38      	pop	{r3, r4, r5, pc}
 8006390:	200012cc 	.word	0x200012cc

08006394 <__assert_func>:
 8006394:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006396:	4614      	mov	r4, r2
 8006398:	461a      	mov	r2, r3
 800639a:	4b09      	ldr	r3, [pc, #36]	; (80063c0 <__assert_func+0x2c>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4605      	mov	r5, r0
 80063a0:	68d8      	ldr	r0, [r3, #12]
 80063a2:	b14c      	cbz	r4, 80063b8 <__assert_func+0x24>
 80063a4:	4b07      	ldr	r3, [pc, #28]	; (80063c4 <__assert_func+0x30>)
 80063a6:	9100      	str	r1, [sp, #0]
 80063a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063ac:	4906      	ldr	r1, [pc, #24]	; (80063c8 <__assert_func+0x34>)
 80063ae:	462b      	mov	r3, r5
 80063b0:	f000 f80e 	bl	80063d0 <fiprintf>
 80063b4:	f000 fa64 	bl	8006880 <abort>
 80063b8:	4b04      	ldr	r3, [pc, #16]	; (80063cc <__assert_func+0x38>)
 80063ba:	461c      	mov	r4, r3
 80063bc:	e7f3      	b.n	80063a6 <__assert_func+0x12>
 80063be:	bf00      	nop
 80063c0:	2000104c 	.word	0x2000104c
 80063c4:	08007f64 	.word	0x08007f64
 80063c8:	08007f71 	.word	0x08007f71
 80063cc:	08007f9f 	.word	0x08007f9f

080063d0 <fiprintf>:
 80063d0:	b40e      	push	{r1, r2, r3}
 80063d2:	b503      	push	{r0, r1, lr}
 80063d4:	4601      	mov	r1, r0
 80063d6:	ab03      	add	r3, sp, #12
 80063d8:	4805      	ldr	r0, [pc, #20]	; (80063f0 <fiprintf+0x20>)
 80063da:	f853 2b04 	ldr.w	r2, [r3], #4
 80063de:	6800      	ldr	r0, [r0, #0]
 80063e0:	9301      	str	r3, [sp, #4]
 80063e2:	f000 f84f 	bl	8006484 <_vfiprintf_r>
 80063e6:	b002      	add	sp, #8
 80063e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80063ec:	b003      	add	sp, #12
 80063ee:	4770      	bx	lr
 80063f0:	2000104c 	.word	0x2000104c

080063f4 <__ascii_mbtowc>:
 80063f4:	b082      	sub	sp, #8
 80063f6:	b901      	cbnz	r1, 80063fa <__ascii_mbtowc+0x6>
 80063f8:	a901      	add	r1, sp, #4
 80063fa:	b142      	cbz	r2, 800640e <__ascii_mbtowc+0x1a>
 80063fc:	b14b      	cbz	r3, 8006412 <__ascii_mbtowc+0x1e>
 80063fe:	7813      	ldrb	r3, [r2, #0]
 8006400:	600b      	str	r3, [r1, #0]
 8006402:	7812      	ldrb	r2, [r2, #0]
 8006404:	1e10      	subs	r0, r2, #0
 8006406:	bf18      	it	ne
 8006408:	2001      	movne	r0, #1
 800640a:	b002      	add	sp, #8
 800640c:	4770      	bx	lr
 800640e:	4610      	mov	r0, r2
 8006410:	e7fb      	b.n	800640a <__ascii_mbtowc+0x16>
 8006412:	f06f 0001 	mvn.w	r0, #1
 8006416:	e7f8      	b.n	800640a <__ascii_mbtowc+0x16>

08006418 <__malloc_lock>:
 8006418:	4801      	ldr	r0, [pc, #4]	; (8006420 <__malloc_lock+0x8>)
 800641a:	f000 bbf1 	b.w	8006c00 <__retarget_lock_acquire_recursive>
 800641e:	bf00      	nop
 8006420:	200012d0 	.word	0x200012d0

08006424 <__malloc_unlock>:
 8006424:	4801      	ldr	r0, [pc, #4]	; (800642c <__malloc_unlock+0x8>)
 8006426:	f000 bbec 	b.w	8006c02 <__retarget_lock_release_recursive>
 800642a:	bf00      	nop
 800642c:	200012d0 	.word	0x200012d0

08006430 <__sfputc_r>:
 8006430:	6893      	ldr	r3, [r2, #8]
 8006432:	3b01      	subs	r3, #1
 8006434:	2b00      	cmp	r3, #0
 8006436:	b410      	push	{r4}
 8006438:	6093      	str	r3, [r2, #8]
 800643a:	da08      	bge.n	800644e <__sfputc_r+0x1e>
 800643c:	6994      	ldr	r4, [r2, #24]
 800643e:	42a3      	cmp	r3, r4
 8006440:	db01      	blt.n	8006446 <__sfputc_r+0x16>
 8006442:	290a      	cmp	r1, #10
 8006444:	d103      	bne.n	800644e <__sfputc_r+0x1e>
 8006446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800644a:	f000 b94b 	b.w	80066e4 <__swbuf_r>
 800644e:	6813      	ldr	r3, [r2, #0]
 8006450:	1c58      	adds	r0, r3, #1
 8006452:	6010      	str	r0, [r2, #0]
 8006454:	7019      	strb	r1, [r3, #0]
 8006456:	4608      	mov	r0, r1
 8006458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800645c:	4770      	bx	lr

0800645e <__sfputs_r>:
 800645e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006460:	4606      	mov	r6, r0
 8006462:	460f      	mov	r7, r1
 8006464:	4614      	mov	r4, r2
 8006466:	18d5      	adds	r5, r2, r3
 8006468:	42ac      	cmp	r4, r5
 800646a:	d101      	bne.n	8006470 <__sfputs_r+0x12>
 800646c:	2000      	movs	r0, #0
 800646e:	e007      	b.n	8006480 <__sfputs_r+0x22>
 8006470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006474:	463a      	mov	r2, r7
 8006476:	4630      	mov	r0, r6
 8006478:	f7ff ffda 	bl	8006430 <__sfputc_r>
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	d1f3      	bne.n	8006468 <__sfputs_r+0xa>
 8006480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006484 <_vfiprintf_r>:
 8006484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006488:	460d      	mov	r5, r1
 800648a:	b09d      	sub	sp, #116	; 0x74
 800648c:	4614      	mov	r4, r2
 800648e:	4698      	mov	r8, r3
 8006490:	4606      	mov	r6, r0
 8006492:	b118      	cbz	r0, 800649c <_vfiprintf_r+0x18>
 8006494:	6983      	ldr	r3, [r0, #24]
 8006496:	b90b      	cbnz	r3, 800649c <_vfiprintf_r+0x18>
 8006498:	f000 fb14 	bl	8006ac4 <__sinit>
 800649c:	4b89      	ldr	r3, [pc, #548]	; (80066c4 <_vfiprintf_r+0x240>)
 800649e:	429d      	cmp	r5, r3
 80064a0:	d11b      	bne.n	80064da <_vfiprintf_r+0x56>
 80064a2:	6875      	ldr	r5, [r6, #4]
 80064a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064a6:	07d9      	lsls	r1, r3, #31
 80064a8:	d405      	bmi.n	80064b6 <_vfiprintf_r+0x32>
 80064aa:	89ab      	ldrh	r3, [r5, #12]
 80064ac:	059a      	lsls	r2, r3, #22
 80064ae:	d402      	bmi.n	80064b6 <_vfiprintf_r+0x32>
 80064b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064b2:	f000 fba5 	bl	8006c00 <__retarget_lock_acquire_recursive>
 80064b6:	89ab      	ldrh	r3, [r5, #12]
 80064b8:	071b      	lsls	r3, r3, #28
 80064ba:	d501      	bpl.n	80064c0 <_vfiprintf_r+0x3c>
 80064bc:	692b      	ldr	r3, [r5, #16]
 80064be:	b9eb      	cbnz	r3, 80064fc <_vfiprintf_r+0x78>
 80064c0:	4629      	mov	r1, r5
 80064c2:	4630      	mov	r0, r6
 80064c4:	f000 f96e 	bl	80067a4 <__swsetup_r>
 80064c8:	b1c0      	cbz	r0, 80064fc <_vfiprintf_r+0x78>
 80064ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064cc:	07dc      	lsls	r4, r3, #31
 80064ce:	d50e      	bpl.n	80064ee <_vfiprintf_r+0x6a>
 80064d0:	f04f 30ff 	mov.w	r0, #4294967295
 80064d4:	b01d      	add	sp, #116	; 0x74
 80064d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064da:	4b7b      	ldr	r3, [pc, #492]	; (80066c8 <_vfiprintf_r+0x244>)
 80064dc:	429d      	cmp	r5, r3
 80064de:	d101      	bne.n	80064e4 <_vfiprintf_r+0x60>
 80064e0:	68b5      	ldr	r5, [r6, #8]
 80064e2:	e7df      	b.n	80064a4 <_vfiprintf_r+0x20>
 80064e4:	4b79      	ldr	r3, [pc, #484]	; (80066cc <_vfiprintf_r+0x248>)
 80064e6:	429d      	cmp	r5, r3
 80064e8:	bf08      	it	eq
 80064ea:	68f5      	ldreq	r5, [r6, #12]
 80064ec:	e7da      	b.n	80064a4 <_vfiprintf_r+0x20>
 80064ee:	89ab      	ldrh	r3, [r5, #12]
 80064f0:	0598      	lsls	r0, r3, #22
 80064f2:	d4ed      	bmi.n	80064d0 <_vfiprintf_r+0x4c>
 80064f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064f6:	f000 fb84 	bl	8006c02 <__retarget_lock_release_recursive>
 80064fa:	e7e9      	b.n	80064d0 <_vfiprintf_r+0x4c>
 80064fc:	2300      	movs	r3, #0
 80064fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006500:	2320      	movs	r3, #32
 8006502:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006506:	f8cd 800c 	str.w	r8, [sp, #12]
 800650a:	2330      	movs	r3, #48	; 0x30
 800650c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80066d0 <_vfiprintf_r+0x24c>
 8006510:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006514:	f04f 0901 	mov.w	r9, #1
 8006518:	4623      	mov	r3, r4
 800651a:	469a      	mov	sl, r3
 800651c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006520:	b10a      	cbz	r2, 8006526 <_vfiprintf_r+0xa2>
 8006522:	2a25      	cmp	r2, #37	; 0x25
 8006524:	d1f9      	bne.n	800651a <_vfiprintf_r+0x96>
 8006526:	ebba 0b04 	subs.w	fp, sl, r4
 800652a:	d00b      	beq.n	8006544 <_vfiprintf_r+0xc0>
 800652c:	465b      	mov	r3, fp
 800652e:	4622      	mov	r2, r4
 8006530:	4629      	mov	r1, r5
 8006532:	4630      	mov	r0, r6
 8006534:	f7ff ff93 	bl	800645e <__sfputs_r>
 8006538:	3001      	adds	r0, #1
 800653a:	f000 80aa 	beq.w	8006692 <_vfiprintf_r+0x20e>
 800653e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006540:	445a      	add	r2, fp
 8006542:	9209      	str	r2, [sp, #36]	; 0x24
 8006544:	f89a 3000 	ldrb.w	r3, [sl]
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 80a2 	beq.w	8006692 <_vfiprintf_r+0x20e>
 800654e:	2300      	movs	r3, #0
 8006550:	f04f 32ff 	mov.w	r2, #4294967295
 8006554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006558:	f10a 0a01 	add.w	sl, sl, #1
 800655c:	9304      	str	r3, [sp, #16]
 800655e:	9307      	str	r3, [sp, #28]
 8006560:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006564:	931a      	str	r3, [sp, #104]	; 0x68
 8006566:	4654      	mov	r4, sl
 8006568:	2205      	movs	r2, #5
 800656a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800656e:	4858      	ldr	r0, [pc, #352]	; (80066d0 <_vfiprintf_r+0x24c>)
 8006570:	f7f9 fe4e 	bl	8000210 <memchr>
 8006574:	9a04      	ldr	r2, [sp, #16]
 8006576:	b9d8      	cbnz	r0, 80065b0 <_vfiprintf_r+0x12c>
 8006578:	06d1      	lsls	r1, r2, #27
 800657a:	bf44      	itt	mi
 800657c:	2320      	movmi	r3, #32
 800657e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006582:	0713      	lsls	r3, r2, #28
 8006584:	bf44      	itt	mi
 8006586:	232b      	movmi	r3, #43	; 0x2b
 8006588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800658c:	f89a 3000 	ldrb.w	r3, [sl]
 8006590:	2b2a      	cmp	r3, #42	; 0x2a
 8006592:	d015      	beq.n	80065c0 <_vfiprintf_r+0x13c>
 8006594:	9a07      	ldr	r2, [sp, #28]
 8006596:	4654      	mov	r4, sl
 8006598:	2000      	movs	r0, #0
 800659a:	f04f 0c0a 	mov.w	ip, #10
 800659e:	4621      	mov	r1, r4
 80065a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065a4:	3b30      	subs	r3, #48	; 0x30
 80065a6:	2b09      	cmp	r3, #9
 80065a8:	d94e      	bls.n	8006648 <_vfiprintf_r+0x1c4>
 80065aa:	b1b0      	cbz	r0, 80065da <_vfiprintf_r+0x156>
 80065ac:	9207      	str	r2, [sp, #28]
 80065ae:	e014      	b.n	80065da <_vfiprintf_r+0x156>
 80065b0:	eba0 0308 	sub.w	r3, r0, r8
 80065b4:	fa09 f303 	lsl.w	r3, r9, r3
 80065b8:	4313      	orrs	r3, r2
 80065ba:	9304      	str	r3, [sp, #16]
 80065bc:	46a2      	mov	sl, r4
 80065be:	e7d2      	b.n	8006566 <_vfiprintf_r+0xe2>
 80065c0:	9b03      	ldr	r3, [sp, #12]
 80065c2:	1d19      	adds	r1, r3, #4
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	9103      	str	r1, [sp, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	bfbb      	ittet	lt
 80065cc:	425b      	neglt	r3, r3
 80065ce:	f042 0202 	orrlt.w	r2, r2, #2
 80065d2:	9307      	strge	r3, [sp, #28]
 80065d4:	9307      	strlt	r3, [sp, #28]
 80065d6:	bfb8      	it	lt
 80065d8:	9204      	strlt	r2, [sp, #16]
 80065da:	7823      	ldrb	r3, [r4, #0]
 80065dc:	2b2e      	cmp	r3, #46	; 0x2e
 80065de:	d10c      	bne.n	80065fa <_vfiprintf_r+0x176>
 80065e0:	7863      	ldrb	r3, [r4, #1]
 80065e2:	2b2a      	cmp	r3, #42	; 0x2a
 80065e4:	d135      	bne.n	8006652 <_vfiprintf_r+0x1ce>
 80065e6:	9b03      	ldr	r3, [sp, #12]
 80065e8:	1d1a      	adds	r2, r3, #4
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	9203      	str	r2, [sp, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	bfb8      	it	lt
 80065f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80065f6:	3402      	adds	r4, #2
 80065f8:	9305      	str	r3, [sp, #20]
 80065fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80066e0 <_vfiprintf_r+0x25c>
 80065fe:	7821      	ldrb	r1, [r4, #0]
 8006600:	2203      	movs	r2, #3
 8006602:	4650      	mov	r0, sl
 8006604:	f7f9 fe04 	bl	8000210 <memchr>
 8006608:	b140      	cbz	r0, 800661c <_vfiprintf_r+0x198>
 800660a:	2340      	movs	r3, #64	; 0x40
 800660c:	eba0 000a 	sub.w	r0, r0, sl
 8006610:	fa03 f000 	lsl.w	r0, r3, r0
 8006614:	9b04      	ldr	r3, [sp, #16]
 8006616:	4303      	orrs	r3, r0
 8006618:	3401      	adds	r4, #1
 800661a:	9304      	str	r3, [sp, #16]
 800661c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006620:	482c      	ldr	r0, [pc, #176]	; (80066d4 <_vfiprintf_r+0x250>)
 8006622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006626:	2206      	movs	r2, #6
 8006628:	f7f9 fdf2 	bl	8000210 <memchr>
 800662c:	2800      	cmp	r0, #0
 800662e:	d03f      	beq.n	80066b0 <_vfiprintf_r+0x22c>
 8006630:	4b29      	ldr	r3, [pc, #164]	; (80066d8 <_vfiprintf_r+0x254>)
 8006632:	bb1b      	cbnz	r3, 800667c <_vfiprintf_r+0x1f8>
 8006634:	9b03      	ldr	r3, [sp, #12]
 8006636:	3307      	adds	r3, #7
 8006638:	f023 0307 	bic.w	r3, r3, #7
 800663c:	3308      	adds	r3, #8
 800663e:	9303      	str	r3, [sp, #12]
 8006640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006642:	443b      	add	r3, r7
 8006644:	9309      	str	r3, [sp, #36]	; 0x24
 8006646:	e767      	b.n	8006518 <_vfiprintf_r+0x94>
 8006648:	fb0c 3202 	mla	r2, ip, r2, r3
 800664c:	460c      	mov	r4, r1
 800664e:	2001      	movs	r0, #1
 8006650:	e7a5      	b.n	800659e <_vfiprintf_r+0x11a>
 8006652:	2300      	movs	r3, #0
 8006654:	3401      	adds	r4, #1
 8006656:	9305      	str	r3, [sp, #20]
 8006658:	4619      	mov	r1, r3
 800665a:	f04f 0c0a 	mov.w	ip, #10
 800665e:	4620      	mov	r0, r4
 8006660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006664:	3a30      	subs	r2, #48	; 0x30
 8006666:	2a09      	cmp	r2, #9
 8006668:	d903      	bls.n	8006672 <_vfiprintf_r+0x1ee>
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0c5      	beq.n	80065fa <_vfiprintf_r+0x176>
 800666e:	9105      	str	r1, [sp, #20]
 8006670:	e7c3      	b.n	80065fa <_vfiprintf_r+0x176>
 8006672:	fb0c 2101 	mla	r1, ip, r1, r2
 8006676:	4604      	mov	r4, r0
 8006678:	2301      	movs	r3, #1
 800667a:	e7f0      	b.n	800665e <_vfiprintf_r+0x1da>
 800667c:	ab03      	add	r3, sp, #12
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	462a      	mov	r2, r5
 8006682:	4b16      	ldr	r3, [pc, #88]	; (80066dc <_vfiprintf_r+0x258>)
 8006684:	a904      	add	r1, sp, #16
 8006686:	4630      	mov	r0, r6
 8006688:	f7fd ff9a 	bl	80045c0 <_printf_float>
 800668c:	4607      	mov	r7, r0
 800668e:	1c78      	adds	r0, r7, #1
 8006690:	d1d6      	bne.n	8006640 <_vfiprintf_r+0x1bc>
 8006692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006694:	07d9      	lsls	r1, r3, #31
 8006696:	d405      	bmi.n	80066a4 <_vfiprintf_r+0x220>
 8006698:	89ab      	ldrh	r3, [r5, #12]
 800669a:	059a      	lsls	r2, r3, #22
 800669c:	d402      	bmi.n	80066a4 <_vfiprintf_r+0x220>
 800669e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066a0:	f000 faaf 	bl	8006c02 <__retarget_lock_release_recursive>
 80066a4:	89ab      	ldrh	r3, [r5, #12]
 80066a6:	065b      	lsls	r3, r3, #25
 80066a8:	f53f af12 	bmi.w	80064d0 <_vfiprintf_r+0x4c>
 80066ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066ae:	e711      	b.n	80064d4 <_vfiprintf_r+0x50>
 80066b0:	ab03      	add	r3, sp, #12
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	462a      	mov	r2, r5
 80066b6:	4b09      	ldr	r3, [pc, #36]	; (80066dc <_vfiprintf_r+0x258>)
 80066b8:	a904      	add	r1, sp, #16
 80066ba:	4630      	mov	r0, r6
 80066bc:	f7fe fa24 	bl	8004b08 <_printf_i>
 80066c0:	e7e4      	b.n	800668c <_vfiprintf_r+0x208>
 80066c2:	bf00      	nop
 80066c4:	080080dc 	.word	0x080080dc
 80066c8:	080080fc 	.word	0x080080fc
 80066cc:	080080bc 	.word	0x080080bc
 80066d0:	08007faa 	.word	0x08007faa
 80066d4:	08007fb4 	.word	0x08007fb4
 80066d8:	080045c1 	.word	0x080045c1
 80066dc:	0800645f 	.word	0x0800645f
 80066e0:	08007fb0 	.word	0x08007fb0

080066e4 <__swbuf_r>:
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e6:	460e      	mov	r6, r1
 80066e8:	4614      	mov	r4, r2
 80066ea:	4605      	mov	r5, r0
 80066ec:	b118      	cbz	r0, 80066f6 <__swbuf_r+0x12>
 80066ee:	6983      	ldr	r3, [r0, #24]
 80066f0:	b90b      	cbnz	r3, 80066f6 <__swbuf_r+0x12>
 80066f2:	f000 f9e7 	bl	8006ac4 <__sinit>
 80066f6:	4b21      	ldr	r3, [pc, #132]	; (800677c <__swbuf_r+0x98>)
 80066f8:	429c      	cmp	r4, r3
 80066fa:	d12b      	bne.n	8006754 <__swbuf_r+0x70>
 80066fc:	686c      	ldr	r4, [r5, #4]
 80066fe:	69a3      	ldr	r3, [r4, #24]
 8006700:	60a3      	str	r3, [r4, #8]
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	071a      	lsls	r2, r3, #28
 8006706:	d52f      	bpl.n	8006768 <__swbuf_r+0x84>
 8006708:	6923      	ldr	r3, [r4, #16]
 800670a:	b36b      	cbz	r3, 8006768 <__swbuf_r+0x84>
 800670c:	6923      	ldr	r3, [r4, #16]
 800670e:	6820      	ldr	r0, [r4, #0]
 8006710:	1ac0      	subs	r0, r0, r3
 8006712:	6963      	ldr	r3, [r4, #20]
 8006714:	b2f6      	uxtb	r6, r6
 8006716:	4283      	cmp	r3, r0
 8006718:	4637      	mov	r7, r6
 800671a:	dc04      	bgt.n	8006726 <__swbuf_r+0x42>
 800671c:	4621      	mov	r1, r4
 800671e:	4628      	mov	r0, r5
 8006720:	f000 f93c 	bl	800699c <_fflush_r>
 8006724:	bb30      	cbnz	r0, 8006774 <__swbuf_r+0x90>
 8006726:	68a3      	ldr	r3, [r4, #8]
 8006728:	3b01      	subs	r3, #1
 800672a:	60a3      	str	r3, [r4, #8]
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	1c5a      	adds	r2, r3, #1
 8006730:	6022      	str	r2, [r4, #0]
 8006732:	701e      	strb	r6, [r3, #0]
 8006734:	6963      	ldr	r3, [r4, #20]
 8006736:	3001      	adds	r0, #1
 8006738:	4283      	cmp	r3, r0
 800673a:	d004      	beq.n	8006746 <__swbuf_r+0x62>
 800673c:	89a3      	ldrh	r3, [r4, #12]
 800673e:	07db      	lsls	r3, r3, #31
 8006740:	d506      	bpl.n	8006750 <__swbuf_r+0x6c>
 8006742:	2e0a      	cmp	r6, #10
 8006744:	d104      	bne.n	8006750 <__swbuf_r+0x6c>
 8006746:	4621      	mov	r1, r4
 8006748:	4628      	mov	r0, r5
 800674a:	f000 f927 	bl	800699c <_fflush_r>
 800674e:	b988      	cbnz	r0, 8006774 <__swbuf_r+0x90>
 8006750:	4638      	mov	r0, r7
 8006752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006754:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <__swbuf_r+0x9c>)
 8006756:	429c      	cmp	r4, r3
 8006758:	d101      	bne.n	800675e <__swbuf_r+0x7a>
 800675a:	68ac      	ldr	r4, [r5, #8]
 800675c:	e7cf      	b.n	80066fe <__swbuf_r+0x1a>
 800675e:	4b09      	ldr	r3, [pc, #36]	; (8006784 <__swbuf_r+0xa0>)
 8006760:	429c      	cmp	r4, r3
 8006762:	bf08      	it	eq
 8006764:	68ec      	ldreq	r4, [r5, #12]
 8006766:	e7ca      	b.n	80066fe <__swbuf_r+0x1a>
 8006768:	4621      	mov	r1, r4
 800676a:	4628      	mov	r0, r5
 800676c:	f000 f81a 	bl	80067a4 <__swsetup_r>
 8006770:	2800      	cmp	r0, #0
 8006772:	d0cb      	beq.n	800670c <__swbuf_r+0x28>
 8006774:	f04f 37ff 	mov.w	r7, #4294967295
 8006778:	e7ea      	b.n	8006750 <__swbuf_r+0x6c>
 800677a:	bf00      	nop
 800677c:	080080dc 	.word	0x080080dc
 8006780:	080080fc 	.word	0x080080fc
 8006784:	080080bc 	.word	0x080080bc

08006788 <__ascii_wctomb>:
 8006788:	b149      	cbz	r1, 800679e <__ascii_wctomb+0x16>
 800678a:	2aff      	cmp	r2, #255	; 0xff
 800678c:	bf85      	ittet	hi
 800678e:	238a      	movhi	r3, #138	; 0x8a
 8006790:	6003      	strhi	r3, [r0, #0]
 8006792:	700a      	strbls	r2, [r1, #0]
 8006794:	f04f 30ff 	movhi.w	r0, #4294967295
 8006798:	bf98      	it	ls
 800679a:	2001      	movls	r0, #1
 800679c:	4770      	bx	lr
 800679e:	4608      	mov	r0, r1
 80067a0:	4770      	bx	lr
	...

080067a4 <__swsetup_r>:
 80067a4:	4b32      	ldr	r3, [pc, #200]	; (8006870 <__swsetup_r+0xcc>)
 80067a6:	b570      	push	{r4, r5, r6, lr}
 80067a8:	681d      	ldr	r5, [r3, #0]
 80067aa:	4606      	mov	r6, r0
 80067ac:	460c      	mov	r4, r1
 80067ae:	b125      	cbz	r5, 80067ba <__swsetup_r+0x16>
 80067b0:	69ab      	ldr	r3, [r5, #24]
 80067b2:	b913      	cbnz	r3, 80067ba <__swsetup_r+0x16>
 80067b4:	4628      	mov	r0, r5
 80067b6:	f000 f985 	bl	8006ac4 <__sinit>
 80067ba:	4b2e      	ldr	r3, [pc, #184]	; (8006874 <__swsetup_r+0xd0>)
 80067bc:	429c      	cmp	r4, r3
 80067be:	d10f      	bne.n	80067e0 <__swsetup_r+0x3c>
 80067c0:	686c      	ldr	r4, [r5, #4]
 80067c2:	89a3      	ldrh	r3, [r4, #12]
 80067c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067c8:	0719      	lsls	r1, r3, #28
 80067ca:	d42c      	bmi.n	8006826 <__swsetup_r+0x82>
 80067cc:	06dd      	lsls	r5, r3, #27
 80067ce:	d411      	bmi.n	80067f4 <__swsetup_r+0x50>
 80067d0:	2309      	movs	r3, #9
 80067d2:	6033      	str	r3, [r6, #0]
 80067d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067d8:	81a3      	strh	r3, [r4, #12]
 80067da:	f04f 30ff 	mov.w	r0, #4294967295
 80067de:	e03e      	b.n	800685e <__swsetup_r+0xba>
 80067e0:	4b25      	ldr	r3, [pc, #148]	; (8006878 <__swsetup_r+0xd4>)
 80067e2:	429c      	cmp	r4, r3
 80067e4:	d101      	bne.n	80067ea <__swsetup_r+0x46>
 80067e6:	68ac      	ldr	r4, [r5, #8]
 80067e8:	e7eb      	b.n	80067c2 <__swsetup_r+0x1e>
 80067ea:	4b24      	ldr	r3, [pc, #144]	; (800687c <__swsetup_r+0xd8>)
 80067ec:	429c      	cmp	r4, r3
 80067ee:	bf08      	it	eq
 80067f0:	68ec      	ldreq	r4, [r5, #12]
 80067f2:	e7e6      	b.n	80067c2 <__swsetup_r+0x1e>
 80067f4:	0758      	lsls	r0, r3, #29
 80067f6:	d512      	bpl.n	800681e <__swsetup_r+0x7a>
 80067f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067fa:	b141      	cbz	r1, 800680e <__swsetup_r+0x6a>
 80067fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006800:	4299      	cmp	r1, r3
 8006802:	d002      	beq.n	800680a <__swsetup_r+0x66>
 8006804:	4630      	mov	r0, r6
 8006806:	f7ff fcd5 	bl	80061b4 <_free_r>
 800680a:	2300      	movs	r3, #0
 800680c:	6363      	str	r3, [r4, #52]	; 0x34
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006814:	81a3      	strh	r3, [r4, #12]
 8006816:	2300      	movs	r3, #0
 8006818:	6063      	str	r3, [r4, #4]
 800681a:	6923      	ldr	r3, [r4, #16]
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	89a3      	ldrh	r3, [r4, #12]
 8006820:	f043 0308 	orr.w	r3, r3, #8
 8006824:	81a3      	strh	r3, [r4, #12]
 8006826:	6923      	ldr	r3, [r4, #16]
 8006828:	b94b      	cbnz	r3, 800683e <__swsetup_r+0x9a>
 800682a:	89a3      	ldrh	r3, [r4, #12]
 800682c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006834:	d003      	beq.n	800683e <__swsetup_r+0x9a>
 8006836:	4621      	mov	r1, r4
 8006838:	4630      	mov	r0, r6
 800683a:	f000 fa09 	bl	8006c50 <__smakebuf_r>
 800683e:	89a0      	ldrh	r0, [r4, #12]
 8006840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006844:	f010 0301 	ands.w	r3, r0, #1
 8006848:	d00a      	beq.n	8006860 <__swsetup_r+0xbc>
 800684a:	2300      	movs	r3, #0
 800684c:	60a3      	str	r3, [r4, #8]
 800684e:	6963      	ldr	r3, [r4, #20]
 8006850:	425b      	negs	r3, r3
 8006852:	61a3      	str	r3, [r4, #24]
 8006854:	6923      	ldr	r3, [r4, #16]
 8006856:	b943      	cbnz	r3, 800686a <__swsetup_r+0xc6>
 8006858:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800685c:	d1ba      	bne.n	80067d4 <__swsetup_r+0x30>
 800685e:	bd70      	pop	{r4, r5, r6, pc}
 8006860:	0781      	lsls	r1, r0, #30
 8006862:	bf58      	it	pl
 8006864:	6963      	ldrpl	r3, [r4, #20]
 8006866:	60a3      	str	r3, [r4, #8]
 8006868:	e7f4      	b.n	8006854 <__swsetup_r+0xb0>
 800686a:	2000      	movs	r0, #0
 800686c:	e7f7      	b.n	800685e <__swsetup_r+0xba>
 800686e:	bf00      	nop
 8006870:	2000104c 	.word	0x2000104c
 8006874:	080080dc 	.word	0x080080dc
 8006878:	080080fc 	.word	0x080080fc
 800687c:	080080bc 	.word	0x080080bc

08006880 <abort>:
 8006880:	b508      	push	{r3, lr}
 8006882:	2006      	movs	r0, #6
 8006884:	f000 fa4c 	bl	8006d20 <raise>
 8006888:	2001      	movs	r0, #1
 800688a:	f7fd fcf9 	bl	8004280 <_exit>
	...

08006890 <__sflush_r>:
 8006890:	898a      	ldrh	r2, [r1, #12]
 8006892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006896:	4605      	mov	r5, r0
 8006898:	0710      	lsls	r0, r2, #28
 800689a:	460c      	mov	r4, r1
 800689c:	d458      	bmi.n	8006950 <__sflush_r+0xc0>
 800689e:	684b      	ldr	r3, [r1, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	dc05      	bgt.n	80068b0 <__sflush_r+0x20>
 80068a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	dc02      	bgt.n	80068b0 <__sflush_r+0x20>
 80068aa:	2000      	movs	r0, #0
 80068ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068b2:	2e00      	cmp	r6, #0
 80068b4:	d0f9      	beq.n	80068aa <__sflush_r+0x1a>
 80068b6:	2300      	movs	r3, #0
 80068b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068bc:	682f      	ldr	r7, [r5, #0]
 80068be:	602b      	str	r3, [r5, #0]
 80068c0:	d032      	beq.n	8006928 <__sflush_r+0x98>
 80068c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068c4:	89a3      	ldrh	r3, [r4, #12]
 80068c6:	075a      	lsls	r2, r3, #29
 80068c8:	d505      	bpl.n	80068d6 <__sflush_r+0x46>
 80068ca:	6863      	ldr	r3, [r4, #4]
 80068cc:	1ac0      	subs	r0, r0, r3
 80068ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068d0:	b10b      	cbz	r3, 80068d6 <__sflush_r+0x46>
 80068d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068d4:	1ac0      	subs	r0, r0, r3
 80068d6:	2300      	movs	r3, #0
 80068d8:	4602      	mov	r2, r0
 80068da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068dc:	6a21      	ldr	r1, [r4, #32]
 80068de:	4628      	mov	r0, r5
 80068e0:	47b0      	blx	r6
 80068e2:	1c43      	adds	r3, r0, #1
 80068e4:	89a3      	ldrh	r3, [r4, #12]
 80068e6:	d106      	bne.n	80068f6 <__sflush_r+0x66>
 80068e8:	6829      	ldr	r1, [r5, #0]
 80068ea:	291d      	cmp	r1, #29
 80068ec:	d82c      	bhi.n	8006948 <__sflush_r+0xb8>
 80068ee:	4a2a      	ldr	r2, [pc, #168]	; (8006998 <__sflush_r+0x108>)
 80068f0:	40ca      	lsrs	r2, r1
 80068f2:	07d6      	lsls	r6, r2, #31
 80068f4:	d528      	bpl.n	8006948 <__sflush_r+0xb8>
 80068f6:	2200      	movs	r2, #0
 80068f8:	6062      	str	r2, [r4, #4]
 80068fa:	04d9      	lsls	r1, r3, #19
 80068fc:	6922      	ldr	r2, [r4, #16]
 80068fe:	6022      	str	r2, [r4, #0]
 8006900:	d504      	bpl.n	800690c <__sflush_r+0x7c>
 8006902:	1c42      	adds	r2, r0, #1
 8006904:	d101      	bne.n	800690a <__sflush_r+0x7a>
 8006906:	682b      	ldr	r3, [r5, #0]
 8006908:	b903      	cbnz	r3, 800690c <__sflush_r+0x7c>
 800690a:	6560      	str	r0, [r4, #84]	; 0x54
 800690c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800690e:	602f      	str	r7, [r5, #0]
 8006910:	2900      	cmp	r1, #0
 8006912:	d0ca      	beq.n	80068aa <__sflush_r+0x1a>
 8006914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006918:	4299      	cmp	r1, r3
 800691a:	d002      	beq.n	8006922 <__sflush_r+0x92>
 800691c:	4628      	mov	r0, r5
 800691e:	f7ff fc49 	bl	80061b4 <_free_r>
 8006922:	2000      	movs	r0, #0
 8006924:	6360      	str	r0, [r4, #52]	; 0x34
 8006926:	e7c1      	b.n	80068ac <__sflush_r+0x1c>
 8006928:	6a21      	ldr	r1, [r4, #32]
 800692a:	2301      	movs	r3, #1
 800692c:	4628      	mov	r0, r5
 800692e:	47b0      	blx	r6
 8006930:	1c41      	adds	r1, r0, #1
 8006932:	d1c7      	bne.n	80068c4 <__sflush_r+0x34>
 8006934:	682b      	ldr	r3, [r5, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d0c4      	beq.n	80068c4 <__sflush_r+0x34>
 800693a:	2b1d      	cmp	r3, #29
 800693c:	d001      	beq.n	8006942 <__sflush_r+0xb2>
 800693e:	2b16      	cmp	r3, #22
 8006940:	d101      	bne.n	8006946 <__sflush_r+0xb6>
 8006942:	602f      	str	r7, [r5, #0]
 8006944:	e7b1      	b.n	80068aa <__sflush_r+0x1a>
 8006946:	89a3      	ldrh	r3, [r4, #12]
 8006948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800694c:	81a3      	strh	r3, [r4, #12]
 800694e:	e7ad      	b.n	80068ac <__sflush_r+0x1c>
 8006950:	690f      	ldr	r7, [r1, #16]
 8006952:	2f00      	cmp	r7, #0
 8006954:	d0a9      	beq.n	80068aa <__sflush_r+0x1a>
 8006956:	0793      	lsls	r3, r2, #30
 8006958:	680e      	ldr	r6, [r1, #0]
 800695a:	bf08      	it	eq
 800695c:	694b      	ldreq	r3, [r1, #20]
 800695e:	600f      	str	r7, [r1, #0]
 8006960:	bf18      	it	ne
 8006962:	2300      	movne	r3, #0
 8006964:	eba6 0807 	sub.w	r8, r6, r7
 8006968:	608b      	str	r3, [r1, #8]
 800696a:	f1b8 0f00 	cmp.w	r8, #0
 800696e:	dd9c      	ble.n	80068aa <__sflush_r+0x1a>
 8006970:	6a21      	ldr	r1, [r4, #32]
 8006972:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006974:	4643      	mov	r3, r8
 8006976:	463a      	mov	r2, r7
 8006978:	4628      	mov	r0, r5
 800697a:	47b0      	blx	r6
 800697c:	2800      	cmp	r0, #0
 800697e:	dc06      	bgt.n	800698e <__sflush_r+0xfe>
 8006980:	89a3      	ldrh	r3, [r4, #12]
 8006982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006986:	81a3      	strh	r3, [r4, #12]
 8006988:	f04f 30ff 	mov.w	r0, #4294967295
 800698c:	e78e      	b.n	80068ac <__sflush_r+0x1c>
 800698e:	4407      	add	r7, r0
 8006990:	eba8 0800 	sub.w	r8, r8, r0
 8006994:	e7e9      	b.n	800696a <__sflush_r+0xda>
 8006996:	bf00      	nop
 8006998:	20400001 	.word	0x20400001

0800699c <_fflush_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	690b      	ldr	r3, [r1, #16]
 80069a0:	4605      	mov	r5, r0
 80069a2:	460c      	mov	r4, r1
 80069a4:	b913      	cbnz	r3, 80069ac <_fflush_r+0x10>
 80069a6:	2500      	movs	r5, #0
 80069a8:	4628      	mov	r0, r5
 80069aa:	bd38      	pop	{r3, r4, r5, pc}
 80069ac:	b118      	cbz	r0, 80069b6 <_fflush_r+0x1a>
 80069ae:	6983      	ldr	r3, [r0, #24]
 80069b0:	b90b      	cbnz	r3, 80069b6 <_fflush_r+0x1a>
 80069b2:	f000 f887 	bl	8006ac4 <__sinit>
 80069b6:	4b14      	ldr	r3, [pc, #80]	; (8006a08 <_fflush_r+0x6c>)
 80069b8:	429c      	cmp	r4, r3
 80069ba:	d11b      	bne.n	80069f4 <_fflush_r+0x58>
 80069bc:	686c      	ldr	r4, [r5, #4]
 80069be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0ef      	beq.n	80069a6 <_fflush_r+0xa>
 80069c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069c8:	07d0      	lsls	r0, r2, #31
 80069ca:	d404      	bmi.n	80069d6 <_fflush_r+0x3a>
 80069cc:	0599      	lsls	r1, r3, #22
 80069ce:	d402      	bmi.n	80069d6 <_fflush_r+0x3a>
 80069d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069d2:	f000 f915 	bl	8006c00 <__retarget_lock_acquire_recursive>
 80069d6:	4628      	mov	r0, r5
 80069d8:	4621      	mov	r1, r4
 80069da:	f7ff ff59 	bl	8006890 <__sflush_r>
 80069de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069e0:	07da      	lsls	r2, r3, #31
 80069e2:	4605      	mov	r5, r0
 80069e4:	d4e0      	bmi.n	80069a8 <_fflush_r+0xc>
 80069e6:	89a3      	ldrh	r3, [r4, #12]
 80069e8:	059b      	lsls	r3, r3, #22
 80069ea:	d4dd      	bmi.n	80069a8 <_fflush_r+0xc>
 80069ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069ee:	f000 f908 	bl	8006c02 <__retarget_lock_release_recursive>
 80069f2:	e7d9      	b.n	80069a8 <_fflush_r+0xc>
 80069f4:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <_fflush_r+0x70>)
 80069f6:	429c      	cmp	r4, r3
 80069f8:	d101      	bne.n	80069fe <_fflush_r+0x62>
 80069fa:	68ac      	ldr	r4, [r5, #8]
 80069fc:	e7df      	b.n	80069be <_fflush_r+0x22>
 80069fe:	4b04      	ldr	r3, [pc, #16]	; (8006a10 <_fflush_r+0x74>)
 8006a00:	429c      	cmp	r4, r3
 8006a02:	bf08      	it	eq
 8006a04:	68ec      	ldreq	r4, [r5, #12]
 8006a06:	e7da      	b.n	80069be <_fflush_r+0x22>
 8006a08:	080080dc 	.word	0x080080dc
 8006a0c:	080080fc 	.word	0x080080fc
 8006a10:	080080bc 	.word	0x080080bc

08006a14 <std>:
 8006a14:	2300      	movs	r3, #0
 8006a16:	b510      	push	{r4, lr}
 8006a18:	4604      	mov	r4, r0
 8006a1a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a22:	6083      	str	r3, [r0, #8]
 8006a24:	8181      	strh	r1, [r0, #12]
 8006a26:	6643      	str	r3, [r0, #100]	; 0x64
 8006a28:	81c2      	strh	r2, [r0, #14]
 8006a2a:	6183      	str	r3, [r0, #24]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	2208      	movs	r2, #8
 8006a30:	305c      	adds	r0, #92	; 0x5c
 8006a32:	f7fd fd1d 	bl	8004470 <memset>
 8006a36:	4b05      	ldr	r3, [pc, #20]	; (8006a4c <std+0x38>)
 8006a38:	6263      	str	r3, [r4, #36]	; 0x24
 8006a3a:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <std+0x3c>)
 8006a3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a3e:	4b05      	ldr	r3, [pc, #20]	; (8006a54 <std+0x40>)
 8006a40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a42:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <std+0x44>)
 8006a44:	6224      	str	r4, [r4, #32]
 8006a46:	6323      	str	r3, [r4, #48]	; 0x30
 8006a48:	bd10      	pop	{r4, pc}
 8006a4a:	bf00      	nop
 8006a4c:	08006d59 	.word	0x08006d59
 8006a50:	08006d7b 	.word	0x08006d7b
 8006a54:	08006db3 	.word	0x08006db3
 8006a58:	08006dd7 	.word	0x08006dd7

08006a5c <_cleanup_r>:
 8006a5c:	4901      	ldr	r1, [pc, #4]	; (8006a64 <_cleanup_r+0x8>)
 8006a5e:	f000 b8af 	b.w	8006bc0 <_fwalk_reent>
 8006a62:	bf00      	nop
 8006a64:	0800699d 	.word	0x0800699d

08006a68 <__sfmoreglue>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	2268      	movs	r2, #104	; 0x68
 8006a6c:	1e4d      	subs	r5, r1, #1
 8006a6e:	4355      	muls	r5, r2
 8006a70:	460e      	mov	r6, r1
 8006a72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a76:	f7ff fc09 	bl	800628c <_malloc_r>
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	b140      	cbz	r0, 8006a90 <__sfmoreglue+0x28>
 8006a7e:	2100      	movs	r1, #0
 8006a80:	e9c0 1600 	strd	r1, r6, [r0]
 8006a84:	300c      	adds	r0, #12
 8006a86:	60a0      	str	r0, [r4, #8]
 8006a88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a8c:	f7fd fcf0 	bl	8004470 <memset>
 8006a90:	4620      	mov	r0, r4
 8006a92:	bd70      	pop	{r4, r5, r6, pc}

08006a94 <__sfp_lock_acquire>:
 8006a94:	4801      	ldr	r0, [pc, #4]	; (8006a9c <__sfp_lock_acquire+0x8>)
 8006a96:	f000 b8b3 	b.w	8006c00 <__retarget_lock_acquire_recursive>
 8006a9a:	bf00      	nop
 8006a9c:	200012d1 	.word	0x200012d1

08006aa0 <__sfp_lock_release>:
 8006aa0:	4801      	ldr	r0, [pc, #4]	; (8006aa8 <__sfp_lock_release+0x8>)
 8006aa2:	f000 b8ae 	b.w	8006c02 <__retarget_lock_release_recursive>
 8006aa6:	bf00      	nop
 8006aa8:	200012d1 	.word	0x200012d1

08006aac <__sinit_lock_acquire>:
 8006aac:	4801      	ldr	r0, [pc, #4]	; (8006ab4 <__sinit_lock_acquire+0x8>)
 8006aae:	f000 b8a7 	b.w	8006c00 <__retarget_lock_acquire_recursive>
 8006ab2:	bf00      	nop
 8006ab4:	200012d2 	.word	0x200012d2

08006ab8 <__sinit_lock_release>:
 8006ab8:	4801      	ldr	r0, [pc, #4]	; (8006ac0 <__sinit_lock_release+0x8>)
 8006aba:	f000 b8a2 	b.w	8006c02 <__retarget_lock_release_recursive>
 8006abe:	bf00      	nop
 8006ac0:	200012d2 	.word	0x200012d2

08006ac4 <__sinit>:
 8006ac4:	b510      	push	{r4, lr}
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	f7ff fff0 	bl	8006aac <__sinit_lock_acquire>
 8006acc:	69a3      	ldr	r3, [r4, #24]
 8006ace:	b11b      	cbz	r3, 8006ad8 <__sinit+0x14>
 8006ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ad4:	f7ff bff0 	b.w	8006ab8 <__sinit_lock_release>
 8006ad8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006adc:	6523      	str	r3, [r4, #80]	; 0x50
 8006ade:	4b13      	ldr	r3, [pc, #76]	; (8006b2c <__sinit+0x68>)
 8006ae0:	4a13      	ldr	r2, [pc, #76]	; (8006b30 <__sinit+0x6c>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ae6:	42a3      	cmp	r3, r4
 8006ae8:	bf04      	itt	eq
 8006aea:	2301      	moveq	r3, #1
 8006aec:	61a3      	streq	r3, [r4, #24]
 8006aee:	4620      	mov	r0, r4
 8006af0:	f000 f820 	bl	8006b34 <__sfp>
 8006af4:	6060      	str	r0, [r4, #4]
 8006af6:	4620      	mov	r0, r4
 8006af8:	f000 f81c 	bl	8006b34 <__sfp>
 8006afc:	60a0      	str	r0, [r4, #8]
 8006afe:	4620      	mov	r0, r4
 8006b00:	f000 f818 	bl	8006b34 <__sfp>
 8006b04:	2200      	movs	r2, #0
 8006b06:	60e0      	str	r0, [r4, #12]
 8006b08:	2104      	movs	r1, #4
 8006b0a:	6860      	ldr	r0, [r4, #4]
 8006b0c:	f7ff ff82 	bl	8006a14 <std>
 8006b10:	68a0      	ldr	r0, [r4, #8]
 8006b12:	2201      	movs	r2, #1
 8006b14:	2109      	movs	r1, #9
 8006b16:	f7ff ff7d 	bl	8006a14 <std>
 8006b1a:	68e0      	ldr	r0, [r4, #12]
 8006b1c:	2202      	movs	r2, #2
 8006b1e:	2112      	movs	r1, #18
 8006b20:	f7ff ff78 	bl	8006a14 <std>
 8006b24:	2301      	movs	r3, #1
 8006b26:	61a3      	str	r3, [r4, #24]
 8006b28:	e7d2      	b.n	8006ad0 <__sinit+0xc>
 8006b2a:	bf00      	nop
 8006b2c:	08007d40 	.word	0x08007d40
 8006b30:	08006a5d 	.word	0x08006a5d

08006b34 <__sfp>:
 8006b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b36:	4607      	mov	r7, r0
 8006b38:	f7ff ffac 	bl	8006a94 <__sfp_lock_acquire>
 8006b3c:	4b1e      	ldr	r3, [pc, #120]	; (8006bb8 <__sfp+0x84>)
 8006b3e:	681e      	ldr	r6, [r3, #0]
 8006b40:	69b3      	ldr	r3, [r6, #24]
 8006b42:	b913      	cbnz	r3, 8006b4a <__sfp+0x16>
 8006b44:	4630      	mov	r0, r6
 8006b46:	f7ff ffbd 	bl	8006ac4 <__sinit>
 8006b4a:	3648      	adds	r6, #72	; 0x48
 8006b4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b50:	3b01      	subs	r3, #1
 8006b52:	d503      	bpl.n	8006b5c <__sfp+0x28>
 8006b54:	6833      	ldr	r3, [r6, #0]
 8006b56:	b30b      	cbz	r3, 8006b9c <__sfp+0x68>
 8006b58:	6836      	ldr	r6, [r6, #0]
 8006b5a:	e7f7      	b.n	8006b4c <__sfp+0x18>
 8006b5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b60:	b9d5      	cbnz	r5, 8006b98 <__sfp+0x64>
 8006b62:	4b16      	ldr	r3, [pc, #88]	; (8006bbc <__sfp+0x88>)
 8006b64:	60e3      	str	r3, [r4, #12]
 8006b66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b6a:	6665      	str	r5, [r4, #100]	; 0x64
 8006b6c:	f000 f847 	bl	8006bfe <__retarget_lock_init_recursive>
 8006b70:	f7ff ff96 	bl	8006aa0 <__sfp_lock_release>
 8006b74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b7c:	6025      	str	r5, [r4, #0]
 8006b7e:	61a5      	str	r5, [r4, #24]
 8006b80:	2208      	movs	r2, #8
 8006b82:	4629      	mov	r1, r5
 8006b84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b88:	f7fd fc72 	bl	8004470 <memset>
 8006b8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b94:	4620      	mov	r0, r4
 8006b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b98:	3468      	adds	r4, #104	; 0x68
 8006b9a:	e7d9      	b.n	8006b50 <__sfp+0x1c>
 8006b9c:	2104      	movs	r1, #4
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	f7ff ff62 	bl	8006a68 <__sfmoreglue>
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	6030      	str	r0, [r6, #0]
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d1d5      	bne.n	8006b58 <__sfp+0x24>
 8006bac:	f7ff ff78 	bl	8006aa0 <__sfp_lock_release>
 8006bb0:	230c      	movs	r3, #12
 8006bb2:	603b      	str	r3, [r7, #0]
 8006bb4:	e7ee      	b.n	8006b94 <__sfp+0x60>
 8006bb6:	bf00      	nop
 8006bb8:	08007d40 	.word	0x08007d40
 8006bbc:	ffff0001 	.word	0xffff0001

08006bc0 <_fwalk_reent>:
 8006bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bc4:	4606      	mov	r6, r0
 8006bc6:	4688      	mov	r8, r1
 8006bc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006bcc:	2700      	movs	r7, #0
 8006bce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bd2:	f1b9 0901 	subs.w	r9, r9, #1
 8006bd6:	d505      	bpl.n	8006be4 <_fwalk_reent+0x24>
 8006bd8:	6824      	ldr	r4, [r4, #0]
 8006bda:	2c00      	cmp	r4, #0
 8006bdc:	d1f7      	bne.n	8006bce <_fwalk_reent+0xe>
 8006bde:	4638      	mov	r0, r7
 8006be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006be4:	89ab      	ldrh	r3, [r5, #12]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d907      	bls.n	8006bfa <_fwalk_reent+0x3a>
 8006bea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	d003      	beq.n	8006bfa <_fwalk_reent+0x3a>
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	47c0      	blx	r8
 8006bf8:	4307      	orrs	r7, r0
 8006bfa:	3568      	adds	r5, #104	; 0x68
 8006bfc:	e7e9      	b.n	8006bd2 <_fwalk_reent+0x12>

08006bfe <__retarget_lock_init_recursive>:
 8006bfe:	4770      	bx	lr

08006c00 <__retarget_lock_acquire_recursive>:
 8006c00:	4770      	bx	lr

08006c02 <__retarget_lock_release_recursive>:
 8006c02:	4770      	bx	lr

08006c04 <__swhatbuf_r>:
 8006c04:	b570      	push	{r4, r5, r6, lr}
 8006c06:	460e      	mov	r6, r1
 8006c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c0c:	2900      	cmp	r1, #0
 8006c0e:	b096      	sub	sp, #88	; 0x58
 8006c10:	4614      	mov	r4, r2
 8006c12:	461d      	mov	r5, r3
 8006c14:	da08      	bge.n	8006c28 <__swhatbuf_r+0x24>
 8006c16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	602a      	str	r2, [r5, #0]
 8006c1e:	061a      	lsls	r2, r3, #24
 8006c20:	d410      	bmi.n	8006c44 <__swhatbuf_r+0x40>
 8006c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c26:	e00e      	b.n	8006c46 <__swhatbuf_r+0x42>
 8006c28:	466a      	mov	r2, sp
 8006c2a:	f000 f8fb 	bl	8006e24 <_fstat_r>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	dbf1      	blt.n	8006c16 <__swhatbuf_r+0x12>
 8006c32:	9a01      	ldr	r2, [sp, #4]
 8006c34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c3c:	425a      	negs	r2, r3
 8006c3e:	415a      	adcs	r2, r3
 8006c40:	602a      	str	r2, [r5, #0]
 8006c42:	e7ee      	b.n	8006c22 <__swhatbuf_r+0x1e>
 8006c44:	2340      	movs	r3, #64	; 0x40
 8006c46:	2000      	movs	r0, #0
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	b016      	add	sp, #88	; 0x58
 8006c4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c50 <__smakebuf_r>:
 8006c50:	898b      	ldrh	r3, [r1, #12]
 8006c52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c54:	079d      	lsls	r5, r3, #30
 8006c56:	4606      	mov	r6, r0
 8006c58:	460c      	mov	r4, r1
 8006c5a:	d507      	bpl.n	8006c6c <__smakebuf_r+0x1c>
 8006c5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c60:	6023      	str	r3, [r4, #0]
 8006c62:	6123      	str	r3, [r4, #16]
 8006c64:	2301      	movs	r3, #1
 8006c66:	6163      	str	r3, [r4, #20]
 8006c68:	b002      	add	sp, #8
 8006c6a:	bd70      	pop	{r4, r5, r6, pc}
 8006c6c:	ab01      	add	r3, sp, #4
 8006c6e:	466a      	mov	r2, sp
 8006c70:	f7ff ffc8 	bl	8006c04 <__swhatbuf_r>
 8006c74:	9900      	ldr	r1, [sp, #0]
 8006c76:	4605      	mov	r5, r0
 8006c78:	4630      	mov	r0, r6
 8006c7a:	f7ff fb07 	bl	800628c <_malloc_r>
 8006c7e:	b948      	cbnz	r0, 8006c94 <__smakebuf_r+0x44>
 8006c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c84:	059a      	lsls	r2, r3, #22
 8006c86:	d4ef      	bmi.n	8006c68 <__smakebuf_r+0x18>
 8006c88:	f023 0303 	bic.w	r3, r3, #3
 8006c8c:	f043 0302 	orr.w	r3, r3, #2
 8006c90:	81a3      	strh	r3, [r4, #12]
 8006c92:	e7e3      	b.n	8006c5c <__smakebuf_r+0xc>
 8006c94:	4b0d      	ldr	r3, [pc, #52]	; (8006ccc <__smakebuf_r+0x7c>)
 8006c96:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c98:	89a3      	ldrh	r3, [r4, #12]
 8006c9a:	6020      	str	r0, [r4, #0]
 8006c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca0:	81a3      	strh	r3, [r4, #12]
 8006ca2:	9b00      	ldr	r3, [sp, #0]
 8006ca4:	6163      	str	r3, [r4, #20]
 8006ca6:	9b01      	ldr	r3, [sp, #4]
 8006ca8:	6120      	str	r0, [r4, #16]
 8006caa:	b15b      	cbz	r3, 8006cc4 <__smakebuf_r+0x74>
 8006cac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f000 f8c9 	bl	8006e48 <_isatty_r>
 8006cb6:	b128      	cbz	r0, 8006cc4 <__smakebuf_r+0x74>
 8006cb8:	89a3      	ldrh	r3, [r4, #12]
 8006cba:	f023 0303 	bic.w	r3, r3, #3
 8006cbe:	f043 0301 	orr.w	r3, r3, #1
 8006cc2:	81a3      	strh	r3, [r4, #12]
 8006cc4:	89a0      	ldrh	r0, [r4, #12]
 8006cc6:	4305      	orrs	r5, r0
 8006cc8:	81a5      	strh	r5, [r4, #12]
 8006cca:	e7cd      	b.n	8006c68 <__smakebuf_r+0x18>
 8006ccc:	08006a5d 	.word	0x08006a5d

08006cd0 <_raise_r>:
 8006cd0:	291f      	cmp	r1, #31
 8006cd2:	b538      	push	{r3, r4, r5, lr}
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	460d      	mov	r5, r1
 8006cd8:	d904      	bls.n	8006ce4 <_raise_r+0x14>
 8006cda:	2316      	movs	r3, #22
 8006cdc:	6003      	str	r3, [r0, #0]
 8006cde:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce2:	bd38      	pop	{r3, r4, r5, pc}
 8006ce4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ce6:	b112      	cbz	r2, 8006cee <_raise_r+0x1e>
 8006ce8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006cec:	b94b      	cbnz	r3, 8006d02 <_raise_r+0x32>
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f000 f830 	bl	8006d54 <_getpid_r>
 8006cf4:	462a      	mov	r2, r5
 8006cf6:	4601      	mov	r1, r0
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cfe:	f000 b817 	b.w	8006d30 <_kill_r>
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d00a      	beq.n	8006d1c <_raise_r+0x4c>
 8006d06:	1c59      	adds	r1, r3, #1
 8006d08:	d103      	bne.n	8006d12 <_raise_r+0x42>
 8006d0a:	2316      	movs	r3, #22
 8006d0c:	6003      	str	r3, [r0, #0]
 8006d0e:	2001      	movs	r0, #1
 8006d10:	e7e7      	b.n	8006ce2 <_raise_r+0x12>
 8006d12:	2400      	movs	r4, #0
 8006d14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d18:	4628      	mov	r0, r5
 8006d1a:	4798      	blx	r3
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	e7e0      	b.n	8006ce2 <_raise_r+0x12>

08006d20 <raise>:
 8006d20:	4b02      	ldr	r3, [pc, #8]	; (8006d2c <raise+0xc>)
 8006d22:	4601      	mov	r1, r0
 8006d24:	6818      	ldr	r0, [r3, #0]
 8006d26:	f7ff bfd3 	b.w	8006cd0 <_raise_r>
 8006d2a:	bf00      	nop
 8006d2c:	2000104c 	.word	0x2000104c

08006d30 <_kill_r>:
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	4d07      	ldr	r5, [pc, #28]	; (8006d50 <_kill_r+0x20>)
 8006d34:	2300      	movs	r3, #0
 8006d36:	4604      	mov	r4, r0
 8006d38:	4608      	mov	r0, r1
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	602b      	str	r3, [r5, #0]
 8006d3e:	f7fd fa8f 	bl	8004260 <_kill>
 8006d42:	1c43      	adds	r3, r0, #1
 8006d44:	d102      	bne.n	8006d4c <_kill_r+0x1c>
 8006d46:	682b      	ldr	r3, [r5, #0]
 8006d48:	b103      	cbz	r3, 8006d4c <_kill_r+0x1c>
 8006d4a:	6023      	str	r3, [r4, #0]
 8006d4c:	bd38      	pop	{r3, r4, r5, pc}
 8006d4e:	bf00      	nop
 8006d50:	200012cc 	.word	0x200012cc

08006d54 <_getpid_r>:
 8006d54:	f7fd ba7c 	b.w	8004250 <_getpid>

08006d58 <__sread>:
 8006d58:	b510      	push	{r4, lr}
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d60:	f000 f894 	bl	8006e8c <_read_r>
 8006d64:	2800      	cmp	r0, #0
 8006d66:	bfab      	itete	ge
 8006d68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d6a:	89a3      	ldrhlt	r3, [r4, #12]
 8006d6c:	181b      	addge	r3, r3, r0
 8006d6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d72:	bfac      	ite	ge
 8006d74:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d76:	81a3      	strhlt	r3, [r4, #12]
 8006d78:	bd10      	pop	{r4, pc}

08006d7a <__swrite>:
 8006d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d7e:	461f      	mov	r7, r3
 8006d80:	898b      	ldrh	r3, [r1, #12]
 8006d82:	05db      	lsls	r3, r3, #23
 8006d84:	4605      	mov	r5, r0
 8006d86:	460c      	mov	r4, r1
 8006d88:	4616      	mov	r6, r2
 8006d8a:	d505      	bpl.n	8006d98 <__swrite+0x1e>
 8006d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d90:	2302      	movs	r3, #2
 8006d92:	2200      	movs	r2, #0
 8006d94:	f000 f868 	bl	8006e68 <_lseek_r>
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006da2:	81a3      	strh	r3, [r4, #12]
 8006da4:	4632      	mov	r2, r6
 8006da6:	463b      	mov	r3, r7
 8006da8:	4628      	mov	r0, r5
 8006daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dae:	f000 b817 	b.w	8006de0 <_write_r>

08006db2 <__sseek>:
 8006db2:	b510      	push	{r4, lr}
 8006db4:	460c      	mov	r4, r1
 8006db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dba:	f000 f855 	bl	8006e68 <_lseek_r>
 8006dbe:	1c43      	adds	r3, r0, #1
 8006dc0:	89a3      	ldrh	r3, [r4, #12]
 8006dc2:	bf15      	itete	ne
 8006dc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006dc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006dca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006dce:	81a3      	strheq	r3, [r4, #12]
 8006dd0:	bf18      	it	ne
 8006dd2:	81a3      	strhne	r3, [r4, #12]
 8006dd4:	bd10      	pop	{r4, pc}

08006dd6 <__sclose>:
 8006dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dda:	f000 b813 	b.w	8006e04 <_close_r>
	...

08006de0 <_write_r>:
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	4d07      	ldr	r5, [pc, #28]	; (8006e00 <_write_r+0x20>)
 8006de4:	4604      	mov	r4, r0
 8006de6:	4608      	mov	r0, r1
 8006de8:	4611      	mov	r1, r2
 8006dea:	2200      	movs	r2, #0
 8006dec:	602a      	str	r2, [r5, #0]
 8006dee:	461a      	mov	r2, r3
 8006df0:	f7fd f93c 	bl	800406c <_write>
 8006df4:	1c43      	adds	r3, r0, #1
 8006df6:	d102      	bne.n	8006dfe <_write_r+0x1e>
 8006df8:	682b      	ldr	r3, [r5, #0]
 8006dfa:	b103      	cbz	r3, 8006dfe <_write_r+0x1e>
 8006dfc:	6023      	str	r3, [r4, #0]
 8006dfe:	bd38      	pop	{r3, r4, r5, pc}
 8006e00:	200012cc 	.word	0x200012cc

08006e04 <_close_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4d06      	ldr	r5, [pc, #24]	; (8006e20 <_close_r+0x1c>)
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	602b      	str	r3, [r5, #0]
 8006e10:	f7fd fa5d 	bl	80042ce <_close>
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	d102      	bne.n	8006e1e <_close_r+0x1a>
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	b103      	cbz	r3, 8006e1e <_close_r+0x1a>
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}
 8006e20:	200012cc 	.word	0x200012cc

08006e24 <_fstat_r>:
 8006e24:	b538      	push	{r3, r4, r5, lr}
 8006e26:	4d07      	ldr	r5, [pc, #28]	; (8006e44 <_fstat_r+0x20>)
 8006e28:	2300      	movs	r3, #0
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	4608      	mov	r0, r1
 8006e2e:	4611      	mov	r1, r2
 8006e30:	602b      	str	r3, [r5, #0]
 8006e32:	f7fd fa58 	bl	80042e6 <_fstat>
 8006e36:	1c43      	adds	r3, r0, #1
 8006e38:	d102      	bne.n	8006e40 <_fstat_r+0x1c>
 8006e3a:	682b      	ldr	r3, [r5, #0]
 8006e3c:	b103      	cbz	r3, 8006e40 <_fstat_r+0x1c>
 8006e3e:	6023      	str	r3, [r4, #0]
 8006e40:	bd38      	pop	{r3, r4, r5, pc}
 8006e42:	bf00      	nop
 8006e44:	200012cc 	.word	0x200012cc

08006e48 <_isatty_r>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	4d06      	ldr	r5, [pc, #24]	; (8006e64 <_isatty_r+0x1c>)
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	4604      	mov	r4, r0
 8006e50:	4608      	mov	r0, r1
 8006e52:	602b      	str	r3, [r5, #0]
 8006e54:	f7fd fa57 	bl	8004306 <_isatty>
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	d102      	bne.n	8006e62 <_isatty_r+0x1a>
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	b103      	cbz	r3, 8006e62 <_isatty_r+0x1a>
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	bd38      	pop	{r3, r4, r5, pc}
 8006e64:	200012cc 	.word	0x200012cc

08006e68 <_lseek_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	4d07      	ldr	r5, [pc, #28]	; (8006e88 <_lseek_r+0x20>)
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	4608      	mov	r0, r1
 8006e70:	4611      	mov	r1, r2
 8006e72:	2200      	movs	r2, #0
 8006e74:	602a      	str	r2, [r5, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	f7fd fa50 	bl	800431c <_lseek>
 8006e7c:	1c43      	adds	r3, r0, #1
 8006e7e:	d102      	bne.n	8006e86 <_lseek_r+0x1e>
 8006e80:	682b      	ldr	r3, [r5, #0]
 8006e82:	b103      	cbz	r3, 8006e86 <_lseek_r+0x1e>
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	bd38      	pop	{r3, r4, r5, pc}
 8006e88:	200012cc 	.word	0x200012cc

08006e8c <_read_r>:
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	4d07      	ldr	r5, [pc, #28]	; (8006eac <_read_r+0x20>)
 8006e90:	4604      	mov	r4, r0
 8006e92:	4608      	mov	r0, r1
 8006e94:	4611      	mov	r1, r2
 8006e96:	2200      	movs	r2, #0
 8006e98:	602a      	str	r2, [r5, #0]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f7fd f9fa 	bl	8004294 <_read>
 8006ea0:	1c43      	adds	r3, r0, #1
 8006ea2:	d102      	bne.n	8006eaa <_read_r+0x1e>
 8006ea4:	682b      	ldr	r3, [r5, #0]
 8006ea6:	b103      	cbz	r3, 8006eaa <_read_r+0x1e>
 8006ea8:	6023      	str	r3, [r4, #0]
 8006eaa:	bd38      	pop	{r3, r4, r5, pc}
 8006eac:	200012cc 	.word	0x200012cc

08006eb0 <pow>:
 8006eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb2:	ed2d 8b02 	vpush	{d8}
 8006eb6:	eeb0 8a40 	vmov.f32	s16, s0
 8006eba:	eef0 8a60 	vmov.f32	s17, s1
 8006ebe:	ec55 4b11 	vmov	r4, r5, d1
 8006ec2:	f000 f865 	bl	8006f90 <__ieee754_pow>
 8006ec6:	4622      	mov	r2, r4
 8006ec8:	462b      	mov	r3, r5
 8006eca:	4620      	mov	r0, r4
 8006ecc:	4629      	mov	r1, r5
 8006ece:	ec57 6b10 	vmov	r6, r7, d0
 8006ed2:	f7f9 fe43 	bl	8000b5c <__aeabi_dcmpun>
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d13b      	bne.n	8006f52 <pow+0xa2>
 8006eda:	ec51 0b18 	vmov	r0, r1, d8
 8006ede:	2200      	movs	r2, #0
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f7f9 fe09 	bl	8000af8 <__aeabi_dcmpeq>
 8006ee6:	b1b8      	cbz	r0, 8006f18 <pow+0x68>
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2300      	movs	r3, #0
 8006eec:	4620      	mov	r0, r4
 8006eee:	4629      	mov	r1, r5
 8006ef0:	f7f9 fe02 	bl	8000af8 <__aeabi_dcmpeq>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d146      	bne.n	8006f86 <pow+0xd6>
 8006ef8:	ec45 4b10 	vmov	d0, r4, r5
 8006efc:	f000 fe61 	bl	8007bc2 <finite>
 8006f00:	b338      	cbz	r0, 8006f52 <pow+0xa2>
 8006f02:	2200      	movs	r2, #0
 8006f04:	2300      	movs	r3, #0
 8006f06:	4620      	mov	r0, r4
 8006f08:	4629      	mov	r1, r5
 8006f0a:	f7f9 fdff 	bl	8000b0c <__aeabi_dcmplt>
 8006f0e:	b300      	cbz	r0, 8006f52 <pow+0xa2>
 8006f10:	f7fd fa84 	bl	800441c <__errno>
 8006f14:	2322      	movs	r3, #34	; 0x22
 8006f16:	e01b      	b.n	8006f50 <pow+0xa0>
 8006f18:	ec47 6b10 	vmov	d0, r6, r7
 8006f1c:	f000 fe51 	bl	8007bc2 <finite>
 8006f20:	b9e0      	cbnz	r0, 8006f5c <pow+0xac>
 8006f22:	eeb0 0a48 	vmov.f32	s0, s16
 8006f26:	eef0 0a68 	vmov.f32	s1, s17
 8006f2a:	f000 fe4a 	bl	8007bc2 <finite>
 8006f2e:	b1a8      	cbz	r0, 8006f5c <pow+0xac>
 8006f30:	ec45 4b10 	vmov	d0, r4, r5
 8006f34:	f000 fe45 	bl	8007bc2 <finite>
 8006f38:	b180      	cbz	r0, 8006f5c <pow+0xac>
 8006f3a:	4632      	mov	r2, r6
 8006f3c:	463b      	mov	r3, r7
 8006f3e:	4630      	mov	r0, r6
 8006f40:	4639      	mov	r1, r7
 8006f42:	f7f9 fe0b 	bl	8000b5c <__aeabi_dcmpun>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	d0e2      	beq.n	8006f10 <pow+0x60>
 8006f4a:	f7fd fa67 	bl	800441c <__errno>
 8006f4e:	2321      	movs	r3, #33	; 0x21
 8006f50:	6003      	str	r3, [r0, #0]
 8006f52:	ecbd 8b02 	vpop	{d8}
 8006f56:	ec47 6b10 	vmov	d0, r6, r7
 8006f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2300      	movs	r3, #0
 8006f60:	4630      	mov	r0, r6
 8006f62:	4639      	mov	r1, r7
 8006f64:	f7f9 fdc8 	bl	8000af8 <__aeabi_dcmpeq>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d0f2      	beq.n	8006f52 <pow+0xa2>
 8006f6c:	eeb0 0a48 	vmov.f32	s0, s16
 8006f70:	eef0 0a68 	vmov.f32	s1, s17
 8006f74:	f000 fe25 	bl	8007bc2 <finite>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d0ea      	beq.n	8006f52 <pow+0xa2>
 8006f7c:	ec45 4b10 	vmov	d0, r4, r5
 8006f80:	f000 fe1f 	bl	8007bc2 <finite>
 8006f84:	e7c3      	b.n	8006f0e <pow+0x5e>
 8006f86:	4f01      	ldr	r7, [pc, #4]	; (8006f8c <pow+0xdc>)
 8006f88:	2600      	movs	r6, #0
 8006f8a:	e7e2      	b.n	8006f52 <pow+0xa2>
 8006f8c:	3ff00000 	.word	0x3ff00000

08006f90 <__ieee754_pow>:
 8006f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f94:	ed2d 8b06 	vpush	{d8-d10}
 8006f98:	b089      	sub	sp, #36	; 0x24
 8006f9a:	ed8d 1b00 	vstr	d1, [sp]
 8006f9e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006fa2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006fa6:	ea58 0102 	orrs.w	r1, r8, r2
 8006faa:	ec57 6b10 	vmov	r6, r7, d0
 8006fae:	d115      	bne.n	8006fdc <__ieee754_pow+0x4c>
 8006fb0:	19b3      	adds	r3, r6, r6
 8006fb2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8006fb6:	4152      	adcs	r2, r2
 8006fb8:	4299      	cmp	r1, r3
 8006fba:	4b89      	ldr	r3, [pc, #548]	; (80071e0 <__ieee754_pow+0x250>)
 8006fbc:	4193      	sbcs	r3, r2
 8006fbe:	f080 84d2 	bcs.w	8007966 <__ieee754_pow+0x9d6>
 8006fc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	4639      	mov	r1, r7
 8006fca:	f7f9 f977 	bl	80002bc <__adddf3>
 8006fce:	ec41 0b10 	vmov	d0, r0, r1
 8006fd2:	b009      	add	sp, #36	; 0x24
 8006fd4:	ecbd 8b06 	vpop	{d8-d10}
 8006fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fdc:	4b81      	ldr	r3, [pc, #516]	; (80071e4 <__ieee754_pow+0x254>)
 8006fde:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006fe2:	429c      	cmp	r4, r3
 8006fe4:	ee10 aa10 	vmov	sl, s0
 8006fe8:	463d      	mov	r5, r7
 8006fea:	dc06      	bgt.n	8006ffa <__ieee754_pow+0x6a>
 8006fec:	d101      	bne.n	8006ff2 <__ieee754_pow+0x62>
 8006fee:	2e00      	cmp	r6, #0
 8006ff0:	d1e7      	bne.n	8006fc2 <__ieee754_pow+0x32>
 8006ff2:	4598      	cmp	r8, r3
 8006ff4:	dc01      	bgt.n	8006ffa <__ieee754_pow+0x6a>
 8006ff6:	d10f      	bne.n	8007018 <__ieee754_pow+0x88>
 8006ff8:	b172      	cbz	r2, 8007018 <__ieee754_pow+0x88>
 8006ffa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006ffe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007002:	ea55 050a 	orrs.w	r5, r5, sl
 8007006:	d1dc      	bne.n	8006fc2 <__ieee754_pow+0x32>
 8007008:	e9dd 3200 	ldrd	r3, r2, [sp]
 800700c:	18db      	adds	r3, r3, r3
 800700e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007012:	4152      	adcs	r2, r2
 8007014:	429d      	cmp	r5, r3
 8007016:	e7d0      	b.n	8006fba <__ieee754_pow+0x2a>
 8007018:	2d00      	cmp	r5, #0
 800701a:	da3b      	bge.n	8007094 <__ieee754_pow+0x104>
 800701c:	4b72      	ldr	r3, [pc, #456]	; (80071e8 <__ieee754_pow+0x258>)
 800701e:	4598      	cmp	r8, r3
 8007020:	dc51      	bgt.n	80070c6 <__ieee754_pow+0x136>
 8007022:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007026:	4598      	cmp	r8, r3
 8007028:	f340 84ac 	ble.w	8007984 <__ieee754_pow+0x9f4>
 800702c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007030:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007034:	2b14      	cmp	r3, #20
 8007036:	dd0f      	ble.n	8007058 <__ieee754_pow+0xc8>
 8007038:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800703c:	fa22 f103 	lsr.w	r1, r2, r3
 8007040:	fa01 f303 	lsl.w	r3, r1, r3
 8007044:	4293      	cmp	r3, r2
 8007046:	f040 849d 	bne.w	8007984 <__ieee754_pow+0x9f4>
 800704a:	f001 0101 	and.w	r1, r1, #1
 800704e:	f1c1 0302 	rsb	r3, r1, #2
 8007052:	9304      	str	r3, [sp, #16]
 8007054:	b182      	cbz	r2, 8007078 <__ieee754_pow+0xe8>
 8007056:	e05f      	b.n	8007118 <__ieee754_pow+0x188>
 8007058:	2a00      	cmp	r2, #0
 800705a:	d15b      	bne.n	8007114 <__ieee754_pow+0x184>
 800705c:	f1c3 0314 	rsb	r3, r3, #20
 8007060:	fa48 f103 	asr.w	r1, r8, r3
 8007064:	fa01 f303 	lsl.w	r3, r1, r3
 8007068:	4543      	cmp	r3, r8
 800706a:	f040 8488 	bne.w	800797e <__ieee754_pow+0x9ee>
 800706e:	f001 0101 	and.w	r1, r1, #1
 8007072:	f1c1 0302 	rsb	r3, r1, #2
 8007076:	9304      	str	r3, [sp, #16]
 8007078:	4b5c      	ldr	r3, [pc, #368]	; (80071ec <__ieee754_pow+0x25c>)
 800707a:	4598      	cmp	r8, r3
 800707c:	d132      	bne.n	80070e4 <__ieee754_pow+0x154>
 800707e:	f1b9 0f00 	cmp.w	r9, #0
 8007082:	f280 8478 	bge.w	8007976 <__ieee754_pow+0x9e6>
 8007086:	4959      	ldr	r1, [pc, #356]	; (80071ec <__ieee754_pow+0x25c>)
 8007088:	4632      	mov	r2, r6
 800708a:	463b      	mov	r3, r7
 800708c:	2000      	movs	r0, #0
 800708e:	f7f9 fbf5 	bl	800087c <__aeabi_ddiv>
 8007092:	e79c      	b.n	8006fce <__ieee754_pow+0x3e>
 8007094:	2300      	movs	r3, #0
 8007096:	9304      	str	r3, [sp, #16]
 8007098:	2a00      	cmp	r2, #0
 800709a:	d13d      	bne.n	8007118 <__ieee754_pow+0x188>
 800709c:	4b51      	ldr	r3, [pc, #324]	; (80071e4 <__ieee754_pow+0x254>)
 800709e:	4598      	cmp	r8, r3
 80070a0:	d1ea      	bne.n	8007078 <__ieee754_pow+0xe8>
 80070a2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80070a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80070aa:	ea53 030a 	orrs.w	r3, r3, sl
 80070ae:	f000 845a 	beq.w	8007966 <__ieee754_pow+0x9d6>
 80070b2:	4b4f      	ldr	r3, [pc, #316]	; (80071f0 <__ieee754_pow+0x260>)
 80070b4:	429c      	cmp	r4, r3
 80070b6:	dd08      	ble.n	80070ca <__ieee754_pow+0x13a>
 80070b8:	f1b9 0f00 	cmp.w	r9, #0
 80070bc:	f2c0 8457 	blt.w	800796e <__ieee754_pow+0x9de>
 80070c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070c4:	e783      	b.n	8006fce <__ieee754_pow+0x3e>
 80070c6:	2302      	movs	r3, #2
 80070c8:	e7e5      	b.n	8007096 <__ieee754_pow+0x106>
 80070ca:	f1b9 0f00 	cmp.w	r9, #0
 80070ce:	f04f 0000 	mov.w	r0, #0
 80070d2:	f04f 0100 	mov.w	r1, #0
 80070d6:	f6bf af7a 	bge.w	8006fce <__ieee754_pow+0x3e>
 80070da:	e9dd 0300 	ldrd	r0, r3, [sp]
 80070de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80070e2:	e774      	b.n	8006fce <__ieee754_pow+0x3e>
 80070e4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80070e8:	d106      	bne.n	80070f8 <__ieee754_pow+0x168>
 80070ea:	4632      	mov	r2, r6
 80070ec:	463b      	mov	r3, r7
 80070ee:	4630      	mov	r0, r6
 80070f0:	4639      	mov	r1, r7
 80070f2:	f7f9 fa99 	bl	8000628 <__aeabi_dmul>
 80070f6:	e76a      	b.n	8006fce <__ieee754_pow+0x3e>
 80070f8:	4b3e      	ldr	r3, [pc, #248]	; (80071f4 <__ieee754_pow+0x264>)
 80070fa:	4599      	cmp	r9, r3
 80070fc:	d10c      	bne.n	8007118 <__ieee754_pow+0x188>
 80070fe:	2d00      	cmp	r5, #0
 8007100:	db0a      	blt.n	8007118 <__ieee754_pow+0x188>
 8007102:	ec47 6b10 	vmov	d0, r6, r7
 8007106:	b009      	add	sp, #36	; 0x24
 8007108:	ecbd 8b06 	vpop	{d8-d10}
 800710c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007110:	f000 bc6c 	b.w	80079ec <__ieee754_sqrt>
 8007114:	2300      	movs	r3, #0
 8007116:	9304      	str	r3, [sp, #16]
 8007118:	ec47 6b10 	vmov	d0, r6, r7
 800711c:	f000 fd48 	bl	8007bb0 <fabs>
 8007120:	ec51 0b10 	vmov	r0, r1, d0
 8007124:	f1ba 0f00 	cmp.w	sl, #0
 8007128:	d129      	bne.n	800717e <__ieee754_pow+0x1ee>
 800712a:	b124      	cbz	r4, 8007136 <__ieee754_pow+0x1a6>
 800712c:	4b2f      	ldr	r3, [pc, #188]	; (80071ec <__ieee754_pow+0x25c>)
 800712e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007132:	429a      	cmp	r2, r3
 8007134:	d123      	bne.n	800717e <__ieee754_pow+0x1ee>
 8007136:	f1b9 0f00 	cmp.w	r9, #0
 800713a:	da05      	bge.n	8007148 <__ieee754_pow+0x1b8>
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	2000      	movs	r0, #0
 8007142:	492a      	ldr	r1, [pc, #168]	; (80071ec <__ieee754_pow+0x25c>)
 8007144:	f7f9 fb9a 	bl	800087c <__aeabi_ddiv>
 8007148:	2d00      	cmp	r5, #0
 800714a:	f6bf af40 	bge.w	8006fce <__ieee754_pow+0x3e>
 800714e:	9b04      	ldr	r3, [sp, #16]
 8007150:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007154:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007158:	4323      	orrs	r3, r4
 800715a:	d108      	bne.n	800716e <__ieee754_pow+0x1de>
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	4610      	mov	r0, r2
 8007162:	4619      	mov	r1, r3
 8007164:	f7f9 f8a8 	bl	80002b8 <__aeabi_dsub>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	e78f      	b.n	800708e <__ieee754_pow+0xfe>
 800716e:	9b04      	ldr	r3, [sp, #16]
 8007170:	2b01      	cmp	r3, #1
 8007172:	f47f af2c 	bne.w	8006fce <__ieee754_pow+0x3e>
 8007176:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800717a:	4619      	mov	r1, r3
 800717c:	e727      	b.n	8006fce <__ieee754_pow+0x3e>
 800717e:	0feb      	lsrs	r3, r5, #31
 8007180:	3b01      	subs	r3, #1
 8007182:	9306      	str	r3, [sp, #24]
 8007184:	9a06      	ldr	r2, [sp, #24]
 8007186:	9b04      	ldr	r3, [sp, #16]
 8007188:	4313      	orrs	r3, r2
 800718a:	d102      	bne.n	8007192 <__ieee754_pow+0x202>
 800718c:	4632      	mov	r2, r6
 800718e:	463b      	mov	r3, r7
 8007190:	e7e6      	b.n	8007160 <__ieee754_pow+0x1d0>
 8007192:	4b19      	ldr	r3, [pc, #100]	; (80071f8 <__ieee754_pow+0x268>)
 8007194:	4598      	cmp	r8, r3
 8007196:	f340 80fb 	ble.w	8007390 <__ieee754_pow+0x400>
 800719a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800719e:	4598      	cmp	r8, r3
 80071a0:	4b13      	ldr	r3, [pc, #76]	; (80071f0 <__ieee754_pow+0x260>)
 80071a2:	dd0c      	ble.n	80071be <__ieee754_pow+0x22e>
 80071a4:	429c      	cmp	r4, r3
 80071a6:	dc0f      	bgt.n	80071c8 <__ieee754_pow+0x238>
 80071a8:	f1b9 0f00 	cmp.w	r9, #0
 80071ac:	da0f      	bge.n	80071ce <__ieee754_pow+0x23e>
 80071ae:	2000      	movs	r0, #0
 80071b0:	b009      	add	sp, #36	; 0x24
 80071b2:	ecbd 8b06 	vpop	{d8-d10}
 80071b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ba:	f000 bcf0 	b.w	8007b9e <__math_oflow>
 80071be:	429c      	cmp	r4, r3
 80071c0:	dbf2      	blt.n	80071a8 <__ieee754_pow+0x218>
 80071c2:	4b0a      	ldr	r3, [pc, #40]	; (80071ec <__ieee754_pow+0x25c>)
 80071c4:	429c      	cmp	r4, r3
 80071c6:	dd19      	ble.n	80071fc <__ieee754_pow+0x26c>
 80071c8:	f1b9 0f00 	cmp.w	r9, #0
 80071cc:	dcef      	bgt.n	80071ae <__ieee754_pow+0x21e>
 80071ce:	2000      	movs	r0, #0
 80071d0:	b009      	add	sp, #36	; 0x24
 80071d2:	ecbd 8b06 	vpop	{d8-d10}
 80071d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071da:	f000 bcd7 	b.w	8007b8c <__math_uflow>
 80071de:	bf00      	nop
 80071e0:	fff00000 	.word	0xfff00000
 80071e4:	7ff00000 	.word	0x7ff00000
 80071e8:	433fffff 	.word	0x433fffff
 80071ec:	3ff00000 	.word	0x3ff00000
 80071f0:	3fefffff 	.word	0x3fefffff
 80071f4:	3fe00000 	.word	0x3fe00000
 80071f8:	41e00000 	.word	0x41e00000
 80071fc:	4b60      	ldr	r3, [pc, #384]	; (8007380 <__ieee754_pow+0x3f0>)
 80071fe:	2200      	movs	r2, #0
 8007200:	f7f9 f85a 	bl	80002b8 <__aeabi_dsub>
 8007204:	a354      	add	r3, pc, #336	; (adr r3, 8007358 <__ieee754_pow+0x3c8>)
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	4604      	mov	r4, r0
 800720c:	460d      	mov	r5, r1
 800720e:	f7f9 fa0b 	bl	8000628 <__aeabi_dmul>
 8007212:	a353      	add	r3, pc, #332	; (adr r3, 8007360 <__ieee754_pow+0x3d0>)
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	4606      	mov	r6, r0
 800721a:	460f      	mov	r7, r1
 800721c:	4620      	mov	r0, r4
 800721e:	4629      	mov	r1, r5
 8007220:	f7f9 fa02 	bl	8000628 <__aeabi_dmul>
 8007224:	4b57      	ldr	r3, [pc, #348]	; (8007384 <__ieee754_pow+0x3f4>)
 8007226:	4682      	mov	sl, r0
 8007228:	468b      	mov	fp, r1
 800722a:	2200      	movs	r2, #0
 800722c:	4620      	mov	r0, r4
 800722e:	4629      	mov	r1, r5
 8007230:	f7f9 f9fa 	bl	8000628 <__aeabi_dmul>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	a14b      	add	r1, pc, #300	; (adr r1, 8007368 <__ieee754_pow+0x3d8>)
 800723a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800723e:	f7f9 f83b 	bl	80002b8 <__aeabi_dsub>
 8007242:	4622      	mov	r2, r4
 8007244:	462b      	mov	r3, r5
 8007246:	f7f9 f9ef 	bl	8000628 <__aeabi_dmul>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	2000      	movs	r0, #0
 8007250:	494d      	ldr	r1, [pc, #308]	; (8007388 <__ieee754_pow+0x3f8>)
 8007252:	f7f9 f831 	bl	80002b8 <__aeabi_dsub>
 8007256:	4622      	mov	r2, r4
 8007258:	4680      	mov	r8, r0
 800725a:	4689      	mov	r9, r1
 800725c:	462b      	mov	r3, r5
 800725e:	4620      	mov	r0, r4
 8007260:	4629      	mov	r1, r5
 8007262:	f7f9 f9e1 	bl	8000628 <__aeabi_dmul>
 8007266:	4602      	mov	r2, r0
 8007268:	460b      	mov	r3, r1
 800726a:	4640      	mov	r0, r8
 800726c:	4649      	mov	r1, r9
 800726e:	f7f9 f9db 	bl	8000628 <__aeabi_dmul>
 8007272:	a33f      	add	r3, pc, #252	; (adr r3, 8007370 <__ieee754_pow+0x3e0>)
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f7f9 f9d6 	bl	8000628 <__aeabi_dmul>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4650      	mov	r0, sl
 8007282:	4659      	mov	r1, fp
 8007284:	f7f9 f818 	bl	80002b8 <__aeabi_dsub>
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	4680      	mov	r8, r0
 800728e:	4689      	mov	r9, r1
 8007290:	4630      	mov	r0, r6
 8007292:	4639      	mov	r1, r7
 8007294:	f7f9 f812 	bl	80002bc <__adddf3>
 8007298:	2000      	movs	r0, #0
 800729a:	4632      	mov	r2, r6
 800729c:	463b      	mov	r3, r7
 800729e:	4604      	mov	r4, r0
 80072a0:	460d      	mov	r5, r1
 80072a2:	f7f9 f809 	bl	80002b8 <__aeabi_dsub>
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	4640      	mov	r0, r8
 80072ac:	4649      	mov	r1, r9
 80072ae:	f7f9 f803 	bl	80002b8 <__aeabi_dsub>
 80072b2:	9b04      	ldr	r3, [sp, #16]
 80072b4:	9a06      	ldr	r2, [sp, #24]
 80072b6:	3b01      	subs	r3, #1
 80072b8:	4313      	orrs	r3, r2
 80072ba:	4682      	mov	sl, r0
 80072bc:	468b      	mov	fp, r1
 80072be:	f040 81e7 	bne.w	8007690 <__ieee754_pow+0x700>
 80072c2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007378 <__ieee754_pow+0x3e8>
 80072c6:	eeb0 8a47 	vmov.f32	s16, s14
 80072ca:	eef0 8a67 	vmov.f32	s17, s15
 80072ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80072d2:	2600      	movs	r6, #0
 80072d4:	4632      	mov	r2, r6
 80072d6:	463b      	mov	r3, r7
 80072d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072dc:	f7f8 ffec 	bl	80002b8 <__aeabi_dsub>
 80072e0:	4622      	mov	r2, r4
 80072e2:	462b      	mov	r3, r5
 80072e4:	f7f9 f9a0 	bl	8000628 <__aeabi_dmul>
 80072e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072ec:	4680      	mov	r8, r0
 80072ee:	4689      	mov	r9, r1
 80072f0:	4650      	mov	r0, sl
 80072f2:	4659      	mov	r1, fp
 80072f4:	f7f9 f998 	bl	8000628 <__aeabi_dmul>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4640      	mov	r0, r8
 80072fe:	4649      	mov	r1, r9
 8007300:	f7f8 ffdc 	bl	80002bc <__adddf3>
 8007304:	4632      	mov	r2, r6
 8007306:	463b      	mov	r3, r7
 8007308:	4680      	mov	r8, r0
 800730a:	4689      	mov	r9, r1
 800730c:	4620      	mov	r0, r4
 800730e:	4629      	mov	r1, r5
 8007310:	f7f9 f98a 	bl	8000628 <__aeabi_dmul>
 8007314:	460b      	mov	r3, r1
 8007316:	4604      	mov	r4, r0
 8007318:	460d      	mov	r5, r1
 800731a:	4602      	mov	r2, r0
 800731c:	4649      	mov	r1, r9
 800731e:	4640      	mov	r0, r8
 8007320:	f7f8 ffcc 	bl	80002bc <__adddf3>
 8007324:	4b19      	ldr	r3, [pc, #100]	; (800738c <__ieee754_pow+0x3fc>)
 8007326:	4299      	cmp	r1, r3
 8007328:	ec45 4b19 	vmov	d9, r4, r5
 800732c:	4606      	mov	r6, r0
 800732e:	460f      	mov	r7, r1
 8007330:	468b      	mov	fp, r1
 8007332:	f340 82f1 	ble.w	8007918 <__ieee754_pow+0x988>
 8007336:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800733a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800733e:	4303      	orrs	r3, r0
 8007340:	f000 81e4 	beq.w	800770c <__ieee754_pow+0x77c>
 8007344:	ec51 0b18 	vmov	r0, r1, d8
 8007348:	2200      	movs	r2, #0
 800734a:	2300      	movs	r3, #0
 800734c:	f7f9 fbde 	bl	8000b0c <__aeabi_dcmplt>
 8007350:	3800      	subs	r0, #0
 8007352:	bf18      	it	ne
 8007354:	2001      	movne	r0, #1
 8007356:	e72b      	b.n	80071b0 <__ieee754_pow+0x220>
 8007358:	60000000 	.word	0x60000000
 800735c:	3ff71547 	.word	0x3ff71547
 8007360:	f85ddf44 	.word	0xf85ddf44
 8007364:	3e54ae0b 	.word	0x3e54ae0b
 8007368:	55555555 	.word	0x55555555
 800736c:	3fd55555 	.word	0x3fd55555
 8007370:	652b82fe 	.word	0x652b82fe
 8007374:	3ff71547 	.word	0x3ff71547
 8007378:	00000000 	.word	0x00000000
 800737c:	bff00000 	.word	0xbff00000
 8007380:	3ff00000 	.word	0x3ff00000
 8007384:	3fd00000 	.word	0x3fd00000
 8007388:	3fe00000 	.word	0x3fe00000
 800738c:	408fffff 	.word	0x408fffff
 8007390:	4bd5      	ldr	r3, [pc, #852]	; (80076e8 <__ieee754_pow+0x758>)
 8007392:	402b      	ands	r3, r5
 8007394:	2200      	movs	r2, #0
 8007396:	b92b      	cbnz	r3, 80073a4 <__ieee754_pow+0x414>
 8007398:	4bd4      	ldr	r3, [pc, #848]	; (80076ec <__ieee754_pow+0x75c>)
 800739a:	f7f9 f945 	bl	8000628 <__aeabi_dmul>
 800739e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80073a2:	460c      	mov	r4, r1
 80073a4:	1523      	asrs	r3, r4, #20
 80073a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80073aa:	4413      	add	r3, r2
 80073ac:	9305      	str	r3, [sp, #20]
 80073ae:	4bd0      	ldr	r3, [pc, #832]	; (80076f0 <__ieee754_pow+0x760>)
 80073b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80073b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80073b8:	429c      	cmp	r4, r3
 80073ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80073be:	dd08      	ble.n	80073d2 <__ieee754_pow+0x442>
 80073c0:	4bcc      	ldr	r3, [pc, #816]	; (80076f4 <__ieee754_pow+0x764>)
 80073c2:	429c      	cmp	r4, r3
 80073c4:	f340 8162 	ble.w	800768c <__ieee754_pow+0x6fc>
 80073c8:	9b05      	ldr	r3, [sp, #20]
 80073ca:	3301      	adds	r3, #1
 80073cc:	9305      	str	r3, [sp, #20]
 80073ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80073d2:	2400      	movs	r4, #0
 80073d4:	00e3      	lsls	r3, r4, #3
 80073d6:	9307      	str	r3, [sp, #28]
 80073d8:	4bc7      	ldr	r3, [pc, #796]	; (80076f8 <__ieee754_pow+0x768>)
 80073da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073de:	ed93 7b00 	vldr	d7, [r3]
 80073e2:	4629      	mov	r1, r5
 80073e4:	ec53 2b17 	vmov	r2, r3, d7
 80073e8:	eeb0 9a47 	vmov.f32	s18, s14
 80073ec:	eef0 9a67 	vmov.f32	s19, s15
 80073f0:	4682      	mov	sl, r0
 80073f2:	f7f8 ff61 	bl	80002b8 <__aeabi_dsub>
 80073f6:	4652      	mov	r2, sl
 80073f8:	4606      	mov	r6, r0
 80073fa:	460f      	mov	r7, r1
 80073fc:	462b      	mov	r3, r5
 80073fe:	ec51 0b19 	vmov	r0, r1, d9
 8007402:	f7f8 ff5b 	bl	80002bc <__adddf3>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	2000      	movs	r0, #0
 800740c:	49bb      	ldr	r1, [pc, #748]	; (80076fc <__ieee754_pow+0x76c>)
 800740e:	f7f9 fa35 	bl	800087c <__aeabi_ddiv>
 8007412:	ec41 0b1a 	vmov	d10, r0, r1
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	4630      	mov	r0, r6
 800741c:	4639      	mov	r1, r7
 800741e:	f7f9 f903 	bl	8000628 <__aeabi_dmul>
 8007422:	2300      	movs	r3, #0
 8007424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007428:	9302      	str	r3, [sp, #8]
 800742a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800742e:	46ab      	mov	fp, r5
 8007430:	106d      	asrs	r5, r5, #1
 8007432:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007436:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800743a:	ec41 0b18 	vmov	d8, r0, r1
 800743e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007442:	2200      	movs	r2, #0
 8007444:	4640      	mov	r0, r8
 8007446:	4649      	mov	r1, r9
 8007448:	4614      	mov	r4, r2
 800744a:	461d      	mov	r5, r3
 800744c:	f7f9 f8ec 	bl	8000628 <__aeabi_dmul>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	4630      	mov	r0, r6
 8007456:	4639      	mov	r1, r7
 8007458:	f7f8 ff2e 	bl	80002b8 <__aeabi_dsub>
 800745c:	ec53 2b19 	vmov	r2, r3, d9
 8007460:	4606      	mov	r6, r0
 8007462:	460f      	mov	r7, r1
 8007464:	4620      	mov	r0, r4
 8007466:	4629      	mov	r1, r5
 8007468:	f7f8 ff26 	bl	80002b8 <__aeabi_dsub>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	4650      	mov	r0, sl
 8007472:	4659      	mov	r1, fp
 8007474:	f7f8 ff20 	bl	80002b8 <__aeabi_dsub>
 8007478:	4642      	mov	r2, r8
 800747a:	464b      	mov	r3, r9
 800747c:	f7f9 f8d4 	bl	8000628 <__aeabi_dmul>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	4630      	mov	r0, r6
 8007486:	4639      	mov	r1, r7
 8007488:	f7f8 ff16 	bl	80002b8 <__aeabi_dsub>
 800748c:	ec53 2b1a 	vmov	r2, r3, d10
 8007490:	f7f9 f8ca 	bl	8000628 <__aeabi_dmul>
 8007494:	ec53 2b18 	vmov	r2, r3, d8
 8007498:	ec41 0b19 	vmov	d9, r0, r1
 800749c:	ec51 0b18 	vmov	r0, r1, d8
 80074a0:	f7f9 f8c2 	bl	8000628 <__aeabi_dmul>
 80074a4:	a37c      	add	r3, pc, #496	; (adr r3, 8007698 <__ieee754_pow+0x708>)
 80074a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074aa:	4604      	mov	r4, r0
 80074ac:	460d      	mov	r5, r1
 80074ae:	f7f9 f8bb 	bl	8000628 <__aeabi_dmul>
 80074b2:	a37b      	add	r3, pc, #492	; (adr r3, 80076a0 <__ieee754_pow+0x710>)
 80074b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b8:	f7f8 ff00 	bl	80002bc <__adddf3>
 80074bc:	4622      	mov	r2, r4
 80074be:	462b      	mov	r3, r5
 80074c0:	f7f9 f8b2 	bl	8000628 <__aeabi_dmul>
 80074c4:	a378      	add	r3, pc, #480	; (adr r3, 80076a8 <__ieee754_pow+0x718>)
 80074c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ca:	f7f8 fef7 	bl	80002bc <__adddf3>
 80074ce:	4622      	mov	r2, r4
 80074d0:	462b      	mov	r3, r5
 80074d2:	f7f9 f8a9 	bl	8000628 <__aeabi_dmul>
 80074d6:	a376      	add	r3, pc, #472	; (adr r3, 80076b0 <__ieee754_pow+0x720>)
 80074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074dc:	f7f8 feee 	bl	80002bc <__adddf3>
 80074e0:	4622      	mov	r2, r4
 80074e2:	462b      	mov	r3, r5
 80074e4:	f7f9 f8a0 	bl	8000628 <__aeabi_dmul>
 80074e8:	a373      	add	r3, pc, #460	; (adr r3, 80076b8 <__ieee754_pow+0x728>)
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	f7f8 fee5 	bl	80002bc <__adddf3>
 80074f2:	4622      	mov	r2, r4
 80074f4:	462b      	mov	r3, r5
 80074f6:	f7f9 f897 	bl	8000628 <__aeabi_dmul>
 80074fa:	a371      	add	r3, pc, #452	; (adr r3, 80076c0 <__ieee754_pow+0x730>)
 80074fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007500:	f7f8 fedc 	bl	80002bc <__adddf3>
 8007504:	4622      	mov	r2, r4
 8007506:	4606      	mov	r6, r0
 8007508:	460f      	mov	r7, r1
 800750a:	462b      	mov	r3, r5
 800750c:	4620      	mov	r0, r4
 800750e:	4629      	mov	r1, r5
 8007510:	f7f9 f88a 	bl	8000628 <__aeabi_dmul>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	4630      	mov	r0, r6
 800751a:	4639      	mov	r1, r7
 800751c:	f7f9 f884 	bl	8000628 <__aeabi_dmul>
 8007520:	4642      	mov	r2, r8
 8007522:	4604      	mov	r4, r0
 8007524:	460d      	mov	r5, r1
 8007526:	464b      	mov	r3, r9
 8007528:	ec51 0b18 	vmov	r0, r1, d8
 800752c:	f7f8 fec6 	bl	80002bc <__adddf3>
 8007530:	ec53 2b19 	vmov	r2, r3, d9
 8007534:	f7f9 f878 	bl	8000628 <__aeabi_dmul>
 8007538:	4622      	mov	r2, r4
 800753a:	462b      	mov	r3, r5
 800753c:	f7f8 febe 	bl	80002bc <__adddf3>
 8007540:	4642      	mov	r2, r8
 8007542:	4682      	mov	sl, r0
 8007544:	468b      	mov	fp, r1
 8007546:	464b      	mov	r3, r9
 8007548:	4640      	mov	r0, r8
 800754a:	4649      	mov	r1, r9
 800754c:	f7f9 f86c 	bl	8000628 <__aeabi_dmul>
 8007550:	4b6b      	ldr	r3, [pc, #428]	; (8007700 <__ieee754_pow+0x770>)
 8007552:	2200      	movs	r2, #0
 8007554:	4606      	mov	r6, r0
 8007556:	460f      	mov	r7, r1
 8007558:	f7f8 feb0 	bl	80002bc <__adddf3>
 800755c:	4652      	mov	r2, sl
 800755e:	465b      	mov	r3, fp
 8007560:	f7f8 feac 	bl	80002bc <__adddf3>
 8007564:	2000      	movs	r0, #0
 8007566:	4604      	mov	r4, r0
 8007568:	460d      	mov	r5, r1
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4640      	mov	r0, r8
 8007570:	4649      	mov	r1, r9
 8007572:	f7f9 f859 	bl	8000628 <__aeabi_dmul>
 8007576:	4b62      	ldr	r3, [pc, #392]	; (8007700 <__ieee754_pow+0x770>)
 8007578:	4680      	mov	r8, r0
 800757a:	4689      	mov	r9, r1
 800757c:	2200      	movs	r2, #0
 800757e:	4620      	mov	r0, r4
 8007580:	4629      	mov	r1, r5
 8007582:	f7f8 fe99 	bl	80002b8 <__aeabi_dsub>
 8007586:	4632      	mov	r2, r6
 8007588:	463b      	mov	r3, r7
 800758a:	f7f8 fe95 	bl	80002b8 <__aeabi_dsub>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	4650      	mov	r0, sl
 8007594:	4659      	mov	r1, fp
 8007596:	f7f8 fe8f 	bl	80002b8 <__aeabi_dsub>
 800759a:	ec53 2b18 	vmov	r2, r3, d8
 800759e:	f7f9 f843 	bl	8000628 <__aeabi_dmul>
 80075a2:	4622      	mov	r2, r4
 80075a4:	4606      	mov	r6, r0
 80075a6:	460f      	mov	r7, r1
 80075a8:	462b      	mov	r3, r5
 80075aa:	ec51 0b19 	vmov	r0, r1, d9
 80075ae:	f7f9 f83b 	bl	8000628 <__aeabi_dmul>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	4630      	mov	r0, r6
 80075b8:	4639      	mov	r1, r7
 80075ba:	f7f8 fe7f 	bl	80002bc <__adddf3>
 80075be:	4606      	mov	r6, r0
 80075c0:	460f      	mov	r7, r1
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	4640      	mov	r0, r8
 80075c8:	4649      	mov	r1, r9
 80075ca:	f7f8 fe77 	bl	80002bc <__adddf3>
 80075ce:	a33e      	add	r3, pc, #248	; (adr r3, 80076c8 <__ieee754_pow+0x738>)
 80075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d4:	2000      	movs	r0, #0
 80075d6:	4604      	mov	r4, r0
 80075d8:	460d      	mov	r5, r1
 80075da:	f7f9 f825 	bl	8000628 <__aeabi_dmul>
 80075de:	4642      	mov	r2, r8
 80075e0:	ec41 0b18 	vmov	d8, r0, r1
 80075e4:	464b      	mov	r3, r9
 80075e6:	4620      	mov	r0, r4
 80075e8:	4629      	mov	r1, r5
 80075ea:	f7f8 fe65 	bl	80002b8 <__aeabi_dsub>
 80075ee:	4602      	mov	r2, r0
 80075f0:	460b      	mov	r3, r1
 80075f2:	4630      	mov	r0, r6
 80075f4:	4639      	mov	r1, r7
 80075f6:	f7f8 fe5f 	bl	80002b8 <__aeabi_dsub>
 80075fa:	a335      	add	r3, pc, #212	; (adr r3, 80076d0 <__ieee754_pow+0x740>)
 80075fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007600:	f7f9 f812 	bl	8000628 <__aeabi_dmul>
 8007604:	a334      	add	r3, pc, #208	; (adr r3, 80076d8 <__ieee754_pow+0x748>)
 8007606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760a:	4606      	mov	r6, r0
 800760c:	460f      	mov	r7, r1
 800760e:	4620      	mov	r0, r4
 8007610:	4629      	mov	r1, r5
 8007612:	f7f9 f809 	bl	8000628 <__aeabi_dmul>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	4630      	mov	r0, r6
 800761c:	4639      	mov	r1, r7
 800761e:	f7f8 fe4d 	bl	80002bc <__adddf3>
 8007622:	9a07      	ldr	r2, [sp, #28]
 8007624:	4b37      	ldr	r3, [pc, #220]	; (8007704 <__ieee754_pow+0x774>)
 8007626:	4413      	add	r3, r2
 8007628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762c:	f7f8 fe46 	bl	80002bc <__adddf3>
 8007630:	4682      	mov	sl, r0
 8007632:	9805      	ldr	r0, [sp, #20]
 8007634:	468b      	mov	fp, r1
 8007636:	f7f8 ff8d 	bl	8000554 <__aeabi_i2d>
 800763a:	9a07      	ldr	r2, [sp, #28]
 800763c:	4b32      	ldr	r3, [pc, #200]	; (8007708 <__ieee754_pow+0x778>)
 800763e:	4413      	add	r3, r2
 8007640:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007644:	4606      	mov	r6, r0
 8007646:	460f      	mov	r7, r1
 8007648:	4652      	mov	r2, sl
 800764a:	465b      	mov	r3, fp
 800764c:	ec51 0b18 	vmov	r0, r1, d8
 8007650:	f7f8 fe34 	bl	80002bc <__adddf3>
 8007654:	4642      	mov	r2, r8
 8007656:	464b      	mov	r3, r9
 8007658:	f7f8 fe30 	bl	80002bc <__adddf3>
 800765c:	4632      	mov	r2, r6
 800765e:	463b      	mov	r3, r7
 8007660:	f7f8 fe2c 	bl	80002bc <__adddf3>
 8007664:	2000      	movs	r0, #0
 8007666:	4632      	mov	r2, r6
 8007668:	463b      	mov	r3, r7
 800766a:	4604      	mov	r4, r0
 800766c:	460d      	mov	r5, r1
 800766e:	f7f8 fe23 	bl	80002b8 <__aeabi_dsub>
 8007672:	4642      	mov	r2, r8
 8007674:	464b      	mov	r3, r9
 8007676:	f7f8 fe1f 	bl	80002b8 <__aeabi_dsub>
 800767a:	ec53 2b18 	vmov	r2, r3, d8
 800767e:	f7f8 fe1b 	bl	80002b8 <__aeabi_dsub>
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	4650      	mov	r0, sl
 8007688:	4659      	mov	r1, fp
 800768a:	e610      	b.n	80072ae <__ieee754_pow+0x31e>
 800768c:	2401      	movs	r4, #1
 800768e:	e6a1      	b.n	80073d4 <__ieee754_pow+0x444>
 8007690:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80076e0 <__ieee754_pow+0x750>
 8007694:	e617      	b.n	80072c6 <__ieee754_pow+0x336>
 8007696:	bf00      	nop
 8007698:	4a454eef 	.word	0x4a454eef
 800769c:	3fca7e28 	.word	0x3fca7e28
 80076a0:	93c9db65 	.word	0x93c9db65
 80076a4:	3fcd864a 	.word	0x3fcd864a
 80076a8:	a91d4101 	.word	0xa91d4101
 80076ac:	3fd17460 	.word	0x3fd17460
 80076b0:	518f264d 	.word	0x518f264d
 80076b4:	3fd55555 	.word	0x3fd55555
 80076b8:	db6fabff 	.word	0xdb6fabff
 80076bc:	3fdb6db6 	.word	0x3fdb6db6
 80076c0:	33333303 	.word	0x33333303
 80076c4:	3fe33333 	.word	0x3fe33333
 80076c8:	e0000000 	.word	0xe0000000
 80076cc:	3feec709 	.word	0x3feec709
 80076d0:	dc3a03fd 	.word	0xdc3a03fd
 80076d4:	3feec709 	.word	0x3feec709
 80076d8:	145b01f5 	.word	0x145b01f5
 80076dc:	be3e2fe0 	.word	0xbe3e2fe0
 80076e0:	00000000 	.word	0x00000000
 80076e4:	3ff00000 	.word	0x3ff00000
 80076e8:	7ff00000 	.word	0x7ff00000
 80076ec:	43400000 	.word	0x43400000
 80076f0:	0003988e 	.word	0x0003988e
 80076f4:	000bb679 	.word	0x000bb679
 80076f8:	08008120 	.word	0x08008120
 80076fc:	3ff00000 	.word	0x3ff00000
 8007700:	40080000 	.word	0x40080000
 8007704:	08008140 	.word	0x08008140
 8007708:	08008130 	.word	0x08008130
 800770c:	a3b5      	add	r3, pc, #724	; (adr r3, 80079e4 <__ieee754_pow+0xa54>)
 800770e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007712:	4640      	mov	r0, r8
 8007714:	4649      	mov	r1, r9
 8007716:	f7f8 fdd1 	bl	80002bc <__adddf3>
 800771a:	4622      	mov	r2, r4
 800771c:	ec41 0b1a 	vmov	d10, r0, r1
 8007720:	462b      	mov	r3, r5
 8007722:	4630      	mov	r0, r6
 8007724:	4639      	mov	r1, r7
 8007726:	f7f8 fdc7 	bl	80002b8 <__aeabi_dsub>
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	ec51 0b1a 	vmov	r0, r1, d10
 8007732:	f7f9 fa09 	bl	8000b48 <__aeabi_dcmpgt>
 8007736:	2800      	cmp	r0, #0
 8007738:	f47f ae04 	bne.w	8007344 <__ieee754_pow+0x3b4>
 800773c:	4aa4      	ldr	r2, [pc, #656]	; (80079d0 <__ieee754_pow+0xa40>)
 800773e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007742:	4293      	cmp	r3, r2
 8007744:	f340 8108 	ble.w	8007958 <__ieee754_pow+0x9c8>
 8007748:	151b      	asrs	r3, r3, #20
 800774a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800774e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007752:	fa4a f303 	asr.w	r3, sl, r3
 8007756:	445b      	add	r3, fp
 8007758:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800775c:	4e9d      	ldr	r6, [pc, #628]	; (80079d4 <__ieee754_pow+0xa44>)
 800775e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007762:	4116      	asrs	r6, r2
 8007764:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007768:	2000      	movs	r0, #0
 800776a:	ea23 0106 	bic.w	r1, r3, r6
 800776e:	f1c2 0214 	rsb	r2, r2, #20
 8007772:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007776:	fa4a fa02 	asr.w	sl, sl, r2
 800777a:	f1bb 0f00 	cmp.w	fp, #0
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
 8007782:	4620      	mov	r0, r4
 8007784:	4629      	mov	r1, r5
 8007786:	bfb8      	it	lt
 8007788:	f1ca 0a00 	rsblt	sl, sl, #0
 800778c:	f7f8 fd94 	bl	80002b8 <__aeabi_dsub>
 8007790:	ec41 0b19 	vmov	d9, r0, r1
 8007794:	4642      	mov	r2, r8
 8007796:	464b      	mov	r3, r9
 8007798:	ec51 0b19 	vmov	r0, r1, d9
 800779c:	f7f8 fd8e 	bl	80002bc <__adddf3>
 80077a0:	a37b      	add	r3, pc, #492	; (adr r3, 8007990 <__ieee754_pow+0xa00>)
 80077a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a6:	2000      	movs	r0, #0
 80077a8:	4604      	mov	r4, r0
 80077aa:	460d      	mov	r5, r1
 80077ac:	f7f8 ff3c 	bl	8000628 <__aeabi_dmul>
 80077b0:	ec53 2b19 	vmov	r2, r3, d9
 80077b4:	4606      	mov	r6, r0
 80077b6:	460f      	mov	r7, r1
 80077b8:	4620      	mov	r0, r4
 80077ba:	4629      	mov	r1, r5
 80077bc:	f7f8 fd7c 	bl	80002b8 <__aeabi_dsub>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	4640      	mov	r0, r8
 80077c6:	4649      	mov	r1, r9
 80077c8:	f7f8 fd76 	bl	80002b8 <__aeabi_dsub>
 80077cc:	a372      	add	r3, pc, #456	; (adr r3, 8007998 <__ieee754_pow+0xa08>)
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	f7f8 ff29 	bl	8000628 <__aeabi_dmul>
 80077d6:	a372      	add	r3, pc, #456	; (adr r3, 80079a0 <__ieee754_pow+0xa10>)
 80077d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077dc:	4680      	mov	r8, r0
 80077de:	4689      	mov	r9, r1
 80077e0:	4620      	mov	r0, r4
 80077e2:	4629      	mov	r1, r5
 80077e4:	f7f8 ff20 	bl	8000628 <__aeabi_dmul>
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	4640      	mov	r0, r8
 80077ee:	4649      	mov	r1, r9
 80077f0:	f7f8 fd64 	bl	80002bc <__adddf3>
 80077f4:	4604      	mov	r4, r0
 80077f6:	460d      	mov	r5, r1
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	4630      	mov	r0, r6
 80077fe:	4639      	mov	r1, r7
 8007800:	f7f8 fd5c 	bl	80002bc <__adddf3>
 8007804:	4632      	mov	r2, r6
 8007806:	463b      	mov	r3, r7
 8007808:	4680      	mov	r8, r0
 800780a:	4689      	mov	r9, r1
 800780c:	f7f8 fd54 	bl	80002b8 <__aeabi_dsub>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4620      	mov	r0, r4
 8007816:	4629      	mov	r1, r5
 8007818:	f7f8 fd4e 	bl	80002b8 <__aeabi_dsub>
 800781c:	4642      	mov	r2, r8
 800781e:	4606      	mov	r6, r0
 8007820:	460f      	mov	r7, r1
 8007822:	464b      	mov	r3, r9
 8007824:	4640      	mov	r0, r8
 8007826:	4649      	mov	r1, r9
 8007828:	f7f8 fefe 	bl	8000628 <__aeabi_dmul>
 800782c:	a35e      	add	r3, pc, #376	; (adr r3, 80079a8 <__ieee754_pow+0xa18>)
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	4604      	mov	r4, r0
 8007834:	460d      	mov	r5, r1
 8007836:	f7f8 fef7 	bl	8000628 <__aeabi_dmul>
 800783a:	a35d      	add	r3, pc, #372	; (adr r3, 80079b0 <__ieee754_pow+0xa20>)
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	f7f8 fd3a 	bl	80002b8 <__aeabi_dsub>
 8007844:	4622      	mov	r2, r4
 8007846:	462b      	mov	r3, r5
 8007848:	f7f8 feee 	bl	8000628 <__aeabi_dmul>
 800784c:	a35a      	add	r3, pc, #360	; (adr r3, 80079b8 <__ieee754_pow+0xa28>)
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	f7f8 fd33 	bl	80002bc <__adddf3>
 8007856:	4622      	mov	r2, r4
 8007858:	462b      	mov	r3, r5
 800785a:	f7f8 fee5 	bl	8000628 <__aeabi_dmul>
 800785e:	a358      	add	r3, pc, #352	; (adr r3, 80079c0 <__ieee754_pow+0xa30>)
 8007860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007864:	f7f8 fd28 	bl	80002b8 <__aeabi_dsub>
 8007868:	4622      	mov	r2, r4
 800786a:	462b      	mov	r3, r5
 800786c:	f7f8 fedc 	bl	8000628 <__aeabi_dmul>
 8007870:	a355      	add	r3, pc, #340	; (adr r3, 80079c8 <__ieee754_pow+0xa38>)
 8007872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007876:	f7f8 fd21 	bl	80002bc <__adddf3>
 800787a:	4622      	mov	r2, r4
 800787c:	462b      	mov	r3, r5
 800787e:	f7f8 fed3 	bl	8000628 <__aeabi_dmul>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	4640      	mov	r0, r8
 8007888:	4649      	mov	r1, r9
 800788a:	f7f8 fd15 	bl	80002b8 <__aeabi_dsub>
 800788e:	4604      	mov	r4, r0
 8007890:	460d      	mov	r5, r1
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	4640      	mov	r0, r8
 8007898:	4649      	mov	r1, r9
 800789a:	f7f8 fec5 	bl	8000628 <__aeabi_dmul>
 800789e:	2200      	movs	r2, #0
 80078a0:	ec41 0b19 	vmov	d9, r0, r1
 80078a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078a8:	4620      	mov	r0, r4
 80078aa:	4629      	mov	r1, r5
 80078ac:	f7f8 fd04 	bl	80002b8 <__aeabi_dsub>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	ec51 0b19 	vmov	r0, r1, d9
 80078b8:	f7f8 ffe0 	bl	800087c <__aeabi_ddiv>
 80078bc:	4632      	mov	r2, r6
 80078be:	4604      	mov	r4, r0
 80078c0:	460d      	mov	r5, r1
 80078c2:	463b      	mov	r3, r7
 80078c4:	4640      	mov	r0, r8
 80078c6:	4649      	mov	r1, r9
 80078c8:	f7f8 feae 	bl	8000628 <__aeabi_dmul>
 80078cc:	4632      	mov	r2, r6
 80078ce:	463b      	mov	r3, r7
 80078d0:	f7f8 fcf4 	bl	80002bc <__adddf3>
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	4620      	mov	r0, r4
 80078da:	4629      	mov	r1, r5
 80078dc:	f7f8 fcec 	bl	80002b8 <__aeabi_dsub>
 80078e0:	4642      	mov	r2, r8
 80078e2:	464b      	mov	r3, r9
 80078e4:	f7f8 fce8 	bl	80002b8 <__aeabi_dsub>
 80078e8:	460b      	mov	r3, r1
 80078ea:	4602      	mov	r2, r0
 80078ec:	493a      	ldr	r1, [pc, #232]	; (80079d8 <__ieee754_pow+0xa48>)
 80078ee:	2000      	movs	r0, #0
 80078f0:	f7f8 fce2 	bl	80002b8 <__aeabi_dsub>
 80078f4:	ec41 0b10 	vmov	d0, r0, r1
 80078f8:	ee10 3a90 	vmov	r3, s1
 80078fc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007904:	da2b      	bge.n	800795e <__ieee754_pow+0x9ce>
 8007906:	4650      	mov	r0, sl
 8007908:	f000 f966 	bl	8007bd8 <scalbn>
 800790c:	ec51 0b10 	vmov	r0, r1, d0
 8007910:	ec53 2b18 	vmov	r2, r3, d8
 8007914:	f7ff bbed 	b.w	80070f2 <__ieee754_pow+0x162>
 8007918:	4b30      	ldr	r3, [pc, #192]	; (80079dc <__ieee754_pow+0xa4c>)
 800791a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800791e:	429e      	cmp	r6, r3
 8007920:	f77f af0c 	ble.w	800773c <__ieee754_pow+0x7ac>
 8007924:	4b2e      	ldr	r3, [pc, #184]	; (80079e0 <__ieee754_pow+0xa50>)
 8007926:	440b      	add	r3, r1
 8007928:	4303      	orrs	r3, r0
 800792a:	d009      	beq.n	8007940 <__ieee754_pow+0x9b0>
 800792c:	ec51 0b18 	vmov	r0, r1, d8
 8007930:	2200      	movs	r2, #0
 8007932:	2300      	movs	r3, #0
 8007934:	f7f9 f8ea 	bl	8000b0c <__aeabi_dcmplt>
 8007938:	3800      	subs	r0, #0
 800793a:	bf18      	it	ne
 800793c:	2001      	movne	r0, #1
 800793e:	e447      	b.n	80071d0 <__ieee754_pow+0x240>
 8007940:	4622      	mov	r2, r4
 8007942:	462b      	mov	r3, r5
 8007944:	f7f8 fcb8 	bl	80002b8 <__aeabi_dsub>
 8007948:	4642      	mov	r2, r8
 800794a:	464b      	mov	r3, r9
 800794c:	f7f9 f8f2 	bl	8000b34 <__aeabi_dcmpge>
 8007950:	2800      	cmp	r0, #0
 8007952:	f43f aef3 	beq.w	800773c <__ieee754_pow+0x7ac>
 8007956:	e7e9      	b.n	800792c <__ieee754_pow+0x99c>
 8007958:	f04f 0a00 	mov.w	sl, #0
 800795c:	e71a      	b.n	8007794 <__ieee754_pow+0x804>
 800795e:	ec51 0b10 	vmov	r0, r1, d0
 8007962:	4619      	mov	r1, r3
 8007964:	e7d4      	b.n	8007910 <__ieee754_pow+0x980>
 8007966:	491c      	ldr	r1, [pc, #112]	; (80079d8 <__ieee754_pow+0xa48>)
 8007968:	2000      	movs	r0, #0
 800796a:	f7ff bb30 	b.w	8006fce <__ieee754_pow+0x3e>
 800796e:	2000      	movs	r0, #0
 8007970:	2100      	movs	r1, #0
 8007972:	f7ff bb2c 	b.w	8006fce <__ieee754_pow+0x3e>
 8007976:	4630      	mov	r0, r6
 8007978:	4639      	mov	r1, r7
 800797a:	f7ff bb28 	b.w	8006fce <__ieee754_pow+0x3e>
 800797e:	9204      	str	r2, [sp, #16]
 8007980:	f7ff bb7a 	b.w	8007078 <__ieee754_pow+0xe8>
 8007984:	2300      	movs	r3, #0
 8007986:	f7ff bb64 	b.w	8007052 <__ieee754_pow+0xc2>
 800798a:	bf00      	nop
 800798c:	f3af 8000 	nop.w
 8007990:	00000000 	.word	0x00000000
 8007994:	3fe62e43 	.word	0x3fe62e43
 8007998:	fefa39ef 	.word	0xfefa39ef
 800799c:	3fe62e42 	.word	0x3fe62e42
 80079a0:	0ca86c39 	.word	0x0ca86c39
 80079a4:	be205c61 	.word	0xbe205c61
 80079a8:	72bea4d0 	.word	0x72bea4d0
 80079ac:	3e663769 	.word	0x3e663769
 80079b0:	c5d26bf1 	.word	0xc5d26bf1
 80079b4:	3ebbbd41 	.word	0x3ebbbd41
 80079b8:	af25de2c 	.word	0xaf25de2c
 80079bc:	3f11566a 	.word	0x3f11566a
 80079c0:	16bebd93 	.word	0x16bebd93
 80079c4:	3f66c16c 	.word	0x3f66c16c
 80079c8:	5555553e 	.word	0x5555553e
 80079cc:	3fc55555 	.word	0x3fc55555
 80079d0:	3fe00000 	.word	0x3fe00000
 80079d4:	000fffff 	.word	0x000fffff
 80079d8:	3ff00000 	.word	0x3ff00000
 80079dc:	4090cbff 	.word	0x4090cbff
 80079e0:	3f6f3400 	.word	0x3f6f3400
 80079e4:	652b82fe 	.word	0x652b82fe
 80079e8:	3c971547 	.word	0x3c971547

080079ec <__ieee754_sqrt>:
 80079ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f0:	ec55 4b10 	vmov	r4, r5, d0
 80079f4:	4e55      	ldr	r6, [pc, #340]	; (8007b4c <__ieee754_sqrt+0x160>)
 80079f6:	43ae      	bics	r6, r5
 80079f8:	ee10 0a10 	vmov	r0, s0
 80079fc:	ee10 3a10 	vmov	r3, s0
 8007a00:	462a      	mov	r2, r5
 8007a02:	4629      	mov	r1, r5
 8007a04:	d110      	bne.n	8007a28 <__ieee754_sqrt+0x3c>
 8007a06:	ee10 2a10 	vmov	r2, s0
 8007a0a:	462b      	mov	r3, r5
 8007a0c:	f7f8 fe0c 	bl	8000628 <__aeabi_dmul>
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	4620      	mov	r0, r4
 8007a16:	4629      	mov	r1, r5
 8007a18:	f7f8 fc50 	bl	80002bc <__adddf3>
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	460d      	mov	r5, r1
 8007a20:	ec45 4b10 	vmov	d0, r4, r5
 8007a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a28:	2d00      	cmp	r5, #0
 8007a2a:	dc10      	bgt.n	8007a4e <__ieee754_sqrt+0x62>
 8007a2c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007a30:	4330      	orrs	r0, r6
 8007a32:	d0f5      	beq.n	8007a20 <__ieee754_sqrt+0x34>
 8007a34:	b15d      	cbz	r5, 8007a4e <__ieee754_sqrt+0x62>
 8007a36:	ee10 2a10 	vmov	r2, s0
 8007a3a:	462b      	mov	r3, r5
 8007a3c:	ee10 0a10 	vmov	r0, s0
 8007a40:	f7f8 fc3a 	bl	80002b8 <__aeabi_dsub>
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	f7f8 ff18 	bl	800087c <__aeabi_ddiv>
 8007a4c:	e7e6      	b.n	8007a1c <__ieee754_sqrt+0x30>
 8007a4e:	1512      	asrs	r2, r2, #20
 8007a50:	d074      	beq.n	8007b3c <__ieee754_sqrt+0x150>
 8007a52:	07d4      	lsls	r4, r2, #31
 8007a54:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007a58:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007a5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007a60:	bf5e      	ittt	pl
 8007a62:	0fda      	lsrpl	r2, r3, #31
 8007a64:	005b      	lslpl	r3, r3, #1
 8007a66:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007a6a:	2400      	movs	r4, #0
 8007a6c:	0fda      	lsrs	r2, r3, #31
 8007a6e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007a72:	107f      	asrs	r7, r7, #1
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	2516      	movs	r5, #22
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007a7e:	1886      	adds	r6, r0, r2
 8007a80:	428e      	cmp	r6, r1
 8007a82:	bfde      	ittt	le
 8007a84:	1b89      	suble	r1, r1, r6
 8007a86:	18b0      	addle	r0, r6, r2
 8007a88:	18a4      	addle	r4, r4, r2
 8007a8a:	0049      	lsls	r1, r1, #1
 8007a8c:	3d01      	subs	r5, #1
 8007a8e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007a92:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007a96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007a9a:	d1f0      	bne.n	8007a7e <__ieee754_sqrt+0x92>
 8007a9c:	462a      	mov	r2, r5
 8007a9e:	f04f 0e20 	mov.w	lr, #32
 8007aa2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007aa6:	4281      	cmp	r1, r0
 8007aa8:	eb06 0c05 	add.w	ip, r6, r5
 8007aac:	dc02      	bgt.n	8007ab4 <__ieee754_sqrt+0xc8>
 8007aae:	d113      	bne.n	8007ad8 <__ieee754_sqrt+0xec>
 8007ab0:	459c      	cmp	ip, r3
 8007ab2:	d811      	bhi.n	8007ad8 <__ieee754_sqrt+0xec>
 8007ab4:	f1bc 0f00 	cmp.w	ip, #0
 8007ab8:	eb0c 0506 	add.w	r5, ip, r6
 8007abc:	da43      	bge.n	8007b46 <__ieee754_sqrt+0x15a>
 8007abe:	2d00      	cmp	r5, #0
 8007ac0:	db41      	blt.n	8007b46 <__ieee754_sqrt+0x15a>
 8007ac2:	f100 0801 	add.w	r8, r0, #1
 8007ac6:	1a09      	subs	r1, r1, r0
 8007ac8:	459c      	cmp	ip, r3
 8007aca:	bf88      	it	hi
 8007acc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007ad0:	eba3 030c 	sub.w	r3, r3, ip
 8007ad4:	4432      	add	r2, r6
 8007ad6:	4640      	mov	r0, r8
 8007ad8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007adc:	f1be 0e01 	subs.w	lr, lr, #1
 8007ae0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007ae4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007ae8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007aec:	d1db      	bne.n	8007aa6 <__ieee754_sqrt+0xba>
 8007aee:	430b      	orrs	r3, r1
 8007af0:	d006      	beq.n	8007b00 <__ieee754_sqrt+0x114>
 8007af2:	1c50      	adds	r0, r2, #1
 8007af4:	bf13      	iteet	ne
 8007af6:	3201      	addne	r2, #1
 8007af8:	3401      	addeq	r4, #1
 8007afa:	4672      	moveq	r2, lr
 8007afc:	f022 0201 	bicne.w	r2, r2, #1
 8007b00:	1063      	asrs	r3, r4, #1
 8007b02:	0852      	lsrs	r2, r2, #1
 8007b04:	07e1      	lsls	r1, r4, #31
 8007b06:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007b0a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007b0e:	bf48      	it	mi
 8007b10:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007b14:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007b18:	4614      	mov	r4, r2
 8007b1a:	e781      	b.n	8007a20 <__ieee754_sqrt+0x34>
 8007b1c:	0ad9      	lsrs	r1, r3, #11
 8007b1e:	3815      	subs	r0, #21
 8007b20:	055b      	lsls	r3, r3, #21
 8007b22:	2900      	cmp	r1, #0
 8007b24:	d0fa      	beq.n	8007b1c <__ieee754_sqrt+0x130>
 8007b26:	02cd      	lsls	r5, r1, #11
 8007b28:	d50a      	bpl.n	8007b40 <__ieee754_sqrt+0x154>
 8007b2a:	f1c2 0420 	rsb	r4, r2, #32
 8007b2e:	fa23 f404 	lsr.w	r4, r3, r4
 8007b32:	1e55      	subs	r5, r2, #1
 8007b34:	4093      	lsls	r3, r2
 8007b36:	4321      	orrs	r1, r4
 8007b38:	1b42      	subs	r2, r0, r5
 8007b3a:	e78a      	b.n	8007a52 <__ieee754_sqrt+0x66>
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	e7f0      	b.n	8007b22 <__ieee754_sqrt+0x136>
 8007b40:	0049      	lsls	r1, r1, #1
 8007b42:	3201      	adds	r2, #1
 8007b44:	e7ef      	b.n	8007b26 <__ieee754_sqrt+0x13a>
 8007b46:	4680      	mov	r8, r0
 8007b48:	e7bd      	b.n	8007ac6 <__ieee754_sqrt+0xda>
 8007b4a:	bf00      	nop
 8007b4c:	7ff00000 	.word	0x7ff00000

08007b50 <with_errno>:
 8007b50:	b570      	push	{r4, r5, r6, lr}
 8007b52:	4604      	mov	r4, r0
 8007b54:	460d      	mov	r5, r1
 8007b56:	4616      	mov	r6, r2
 8007b58:	f7fc fc60 	bl	800441c <__errno>
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	6006      	str	r6, [r0, #0]
 8007b60:	4620      	mov	r0, r4
 8007b62:	bd70      	pop	{r4, r5, r6, pc}

08007b64 <xflow>:
 8007b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b66:	4614      	mov	r4, r2
 8007b68:	461d      	mov	r5, r3
 8007b6a:	b108      	cbz	r0, 8007b70 <xflow+0xc>
 8007b6c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007b70:	e9cd 2300 	strd	r2, r3, [sp]
 8007b74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b78:	4620      	mov	r0, r4
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	f7f8 fd54 	bl	8000628 <__aeabi_dmul>
 8007b80:	2222      	movs	r2, #34	; 0x22
 8007b82:	b003      	add	sp, #12
 8007b84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b88:	f7ff bfe2 	b.w	8007b50 <with_errno>

08007b8c <__math_uflow>:
 8007b8c:	b508      	push	{r3, lr}
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b94:	f7ff ffe6 	bl	8007b64 <xflow>
 8007b98:	ec41 0b10 	vmov	d0, r0, r1
 8007b9c:	bd08      	pop	{r3, pc}

08007b9e <__math_oflow>:
 8007b9e:	b508      	push	{r3, lr}
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007ba6:	f7ff ffdd 	bl	8007b64 <xflow>
 8007baa:	ec41 0b10 	vmov	d0, r0, r1
 8007bae:	bd08      	pop	{r3, pc}

08007bb0 <fabs>:
 8007bb0:	ec51 0b10 	vmov	r0, r1, d0
 8007bb4:	ee10 2a10 	vmov	r2, s0
 8007bb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007bbc:	ec43 2b10 	vmov	d0, r2, r3
 8007bc0:	4770      	bx	lr

08007bc2 <finite>:
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	ed8d 0b00 	vstr	d0, [sp]
 8007bc8:	9801      	ldr	r0, [sp, #4]
 8007bca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007bce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007bd2:	0fc0      	lsrs	r0, r0, #31
 8007bd4:	b002      	add	sp, #8
 8007bd6:	4770      	bx	lr

08007bd8 <scalbn>:
 8007bd8:	b570      	push	{r4, r5, r6, lr}
 8007bda:	ec55 4b10 	vmov	r4, r5, d0
 8007bde:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007be2:	4606      	mov	r6, r0
 8007be4:	462b      	mov	r3, r5
 8007be6:	b99a      	cbnz	r2, 8007c10 <scalbn+0x38>
 8007be8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007bec:	4323      	orrs	r3, r4
 8007bee:	d036      	beq.n	8007c5e <scalbn+0x86>
 8007bf0:	4b39      	ldr	r3, [pc, #228]	; (8007cd8 <scalbn+0x100>)
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	ee10 0a10 	vmov	r0, s0
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f7f8 fd15 	bl	8000628 <__aeabi_dmul>
 8007bfe:	4b37      	ldr	r3, [pc, #220]	; (8007cdc <scalbn+0x104>)
 8007c00:	429e      	cmp	r6, r3
 8007c02:	4604      	mov	r4, r0
 8007c04:	460d      	mov	r5, r1
 8007c06:	da10      	bge.n	8007c2a <scalbn+0x52>
 8007c08:	a32b      	add	r3, pc, #172	; (adr r3, 8007cb8 <scalbn+0xe0>)
 8007c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0e:	e03a      	b.n	8007c86 <scalbn+0xae>
 8007c10:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007c14:	428a      	cmp	r2, r1
 8007c16:	d10c      	bne.n	8007c32 <scalbn+0x5a>
 8007c18:	ee10 2a10 	vmov	r2, s0
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	4629      	mov	r1, r5
 8007c20:	f7f8 fb4c 	bl	80002bc <__adddf3>
 8007c24:	4604      	mov	r4, r0
 8007c26:	460d      	mov	r5, r1
 8007c28:	e019      	b.n	8007c5e <scalbn+0x86>
 8007c2a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007c2e:	460b      	mov	r3, r1
 8007c30:	3a36      	subs	r2, #54	; 0x36
 8007c32:	4432      	add	r2, r6
 8007c34:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007c38:	428a      	cmp	r2, r1
 8007c3a:	dd08      	ble.n	8007c4e <scalbn+0x76>
 8007c3c:	2d00      	cmp	r5, #0
 8007c3e:	a120      	add	r1, pc, #128	; (adr r1, 8007cc0 <scalbn+0xe8>)
 8007c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c44:	da1c      	bge.n	8007c80 <scalbn+0xa8>
 8007c46:	a120      	add	r1, pc, #128	; (adr r1, 8007cc8 <scalbn+0xf0>)
 8007c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c4c:	e018      	b.n	8007c80 <scalbn+0xa8>
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	dd08      	ble.n	8007c64 <scalbn+0x8c>
 8007c52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c5e:	ec45 4b10 	vmov	d0, r4, r5
 8007c62:	bd70      	pop	{r4, r5, r6, pc}
 8007c64:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007c68:	da19      	bge.n	8007c9e <scalbn+0xc6>
 8007c6a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007c6e:	429e      	cmp	r6, r3
 8007c70:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007c74:	dd0a      	ble.n	8007c8c <scalbn+0xb4>
 8007c76:	a112      	add	r1, pc, #72	; (adr r1, 8007cc0 <scalbn+0xe8>)
 8007c78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e2      	bne.n	8007c46 <scalbn+0x6e>
 8007c80:	a30f      	add	r3, pc, #60	; (adr r3, 8007cc0 <scalbn+0xe8>)
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	f7f8 fccf 	bl	8000628 <__aeabi_dmul>
 8007c8a:	e7cb      	b.n	8007c24 <scalbn+0x4c>
 8007c8c:	a10a      	add	r1, pc, #40	; (adr r1, 8007cb8 <scalbn+0xe0>)
 8007c8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d0b8      	beq.n	8007c08 <scalbn+0x30>
 8007c96:	a10e      	add	r1, pc, #56	; (adr r1, 8007cd0 <scalbn+0xf8>)
 8007c98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c9c:	e7b4      	b.n	8007c08 <scalbn+0x30>
 8007c9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007ca2:	3236      	adds	r2, #54	; 0x36
 8007ca4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007ca8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007cac:	4620      	mov	r0, r4
 8007cae:	4b0c      	ldr	r3, [pc, #48]	; (8007ce0 <scalbn+0x108>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	e7e8      	b.n	8007c86 <scalbn+0xae>
 8007cb4:	f3af 8000 	nop.w
 8007cb8:	c2f8f359 	.word	0xc2f8f359
 8007cbc:	01a56e1f 	.word	0x01a56e1f
 8007cc0:	8800759c 	.word	0x8800759c
 8007cc4:	7e37e43c 	.word	0x7e37e43c
 8007cc8:	8800759c 	.word	0x8800759c
 8007ccc:	fe37e43c 	.word	0xfe37e43c
 8007cd0:	c2f8f359 	.word	0xc2f8f359
 8007cd4:	81a56e1f 	.word	0x81a56e1f
 8007cd8:	43500000 	.word	0x43500000
 8007cdc:	ffff3cb0 	.word	0xffff3cb0
 8007ce0:	3c900000 	.word	0x3c900000

08007ce4 <_init>:
 8007ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce6:	bf00      	nop
 8007ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cea:	bc08      	pop	{r3}
 8007cec:	469e      	mov	lr, r3
 8007cee:	4770      	bx	lr

08007cf0 <_fini>:
 8007cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf2:	bf00      	nop
 8007cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cf6:	bc08      	pop	{r3}
 8007cf8:	469e      	mov	lr, r3
 8007cfa:	4770      	bx	lr
