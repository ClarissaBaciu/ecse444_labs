
lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f94  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d34  08009158  08009158  00019158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e8c  08009e8c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009e8c  08009e8c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e8c  08009e8c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e8c  08009e8c  00019e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e90  08009e90  00019e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  200001dc  0800a070  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  0800a070  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001543c  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad9  00000000  00000000  00035648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  00038128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  000392c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d848  00000000  00000000  0003a318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fa6  00000000  00000000  00067b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011bdd7  00000000  00000000  0007ab06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001968dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a60  00000000  00000000  001969a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  0019c404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800913c 	.word	0x0800913c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	0800913c 	.word	0x0800913c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c82:	2003      	movs	r0, #3
 8000c84:	f001 fba4 	bl	80023d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f000 f80d 	bl	8000ca8 <HAL_InitTick>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d002      	beq.n	8000c9a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	71fb      	strb	r3, [r7, #7]
 8000c98:	e001      	b.n	8000c9e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c9a:	f005 fa0f 	bl	80060bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <HAL_InitTick+0x6c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d023      	beq.n	8000d04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cbc:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <HAL_InitTick+0x70>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <HAL_InitTick+0x6c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 fbb1 	bl	800243a <HAL_SYSTICK_Config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d10f      	bne.n	8000cfe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	d809      	bhi.n	8000cf8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f001 fb7b 	bl	80023e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <HAL_InitTick+0x74>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	e007      	b.n	8000d08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	73fb      	strb	r3, [r7, #15]
 8000cfc:	e004      	b.n	8000d08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	73fb      	strb	r3, [r7, #15]
 8000d02:	e001      	b.n	8000d08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000004 	.word	0x20000004
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000000 	.word	0x20000000

08000d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x20>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x24>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <HAL_IncTick+0x24>)
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000004 	.word	0x20000004
 8000d44:	200001f8 	.word	0x200001f8

08000d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <HAL_GetTick+0x14>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	200001f8 	.word	0x200001f8

08000d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d68:	f7ff ffee 	bl	8000d48 <HAL_GetTick>
 8000d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d78:	d005      	beq.n	8000d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_Delay+0x44>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4413      	add	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d86:	bf00      	nop
 8000d88:	f7ff ffde 	bl	8000d48 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d8f7      	bhi.n	8000d88 <HAL_Delay+0x28>
  {
  }
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000004 	.word	0x20000004

08000da8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	431a      	orrs	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	609a      	str	r2, [r3, #8]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b087      	sub	sp, #28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3360      	adds	r3, #96	; 0x60
 8000e22:	461a      	mov	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <LL_ADC_SetOffset+0x44>)
 8000e32:	4013      	ands	r3, r2
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e48:	bf00      	nop
 8000e4a:	371c      	adds	r7, #28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	03fff000 	.word	0x03fff000

08000e58 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3360      	adds	r3, #96	; 0x60
 8000e66:	461a      	mov	r2, r3
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	3360      	adds	r3, #96	; 0x60
 8000e94:	461a      	mov	r2, r3
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000eae:	bf00      	nop
 8000eb0:	371c      	adds	r7, #28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	615a      	str	r2, [r3, #20]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e000      	b.n	8000efa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b087      	sub	sp, #28
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	60f8      	str	r0, [r7, #12]
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3330      	adds	r3, #48	; 0x30
 8000f16:	461a      	mov	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	f003 030c 	and.w	r3, r3, #12
 8000f22:	4413      	add	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	f003 031f 	and.w	r3, r3, #31
 8000f30:	211f      	movs	r1, #31
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	401a      	ands	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	0e9b      	lsrs	r3, r3, #26
 8000f3e:	f003 011f 	and.w	r1, r3, #31
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	f003 031f 	and.w	r3, r3, #31
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f52:	bf00      	nop
 8000f54:	371c      	adds	r7, #28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b087      	sub	sp, #28
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3314      	adds	r3, #20
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	0e5b      	lsrs	r3, r3, #25
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	4413      	add	r3, r2
 8000f7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	0d1b      	lsrs	r3, r3, #20
 8000f86:	f003 031f 	and.w	r3, r3, #31
 8000f8a:	2107      	movs	r1, #7
 8000f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	401a      	ands	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	0d1b      	lsrs	r3, r3, #20
 8000f98:	f003 031f 	and.w	r3, r3, #31
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000fa8:	bf00      	nop
 8000faa:	371c      	adds	r7, #28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0318 	and.w	r3, r3, #24
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000fd8:	40d9      	lsrs	r1, r3
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	400b      	ands	r3, r1
 8000fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	0007ffff 	.word	0x0007ffff

08000ffc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800100c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6093      	str	r3, [r2, #8]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001034:	d101      	bne.n	800103a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001058:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800105c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001084:	d101      	bne.n	800108a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010ac:	f043 0201 	orr.w	r2, r3, #1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010d4:	f043 0202 	orr.w	r2, r3, #2
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d101      	bne.n	8001100 <LL_ADC_IsEnabled+0x18>
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <LL_ADC_IsEnabled+0x1a>
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b02      	cmp	r3, #2
 8001120:	d101      	bne.n	8001126 <LL_ADC_IsDisableOngoing+0x18>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <LL_ADC_IsDisableOngoing+0x1a>
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001144:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001148:	f043 0204 	orr.w	r2, r3, #4
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800116c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001170:	f043 0210 	orr.w	r2, r3, #16
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b04      	cmp	r3, #4
 8001196:	d101      	bne.n	800119c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011be:	f043 0220 	orr.w	r2, r3, #32
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	2b08      	cmp	r3, #8
 80011e4:	d101      	bne.n	80011ea <LL_ADC_INJ_IsConversionOngoing+0x18>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001200:	2300      	movs	r3, #0
 8001202:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e12f      	b.n	8001472 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121c:	2b00      	cmp	r3, #0
 800121e:	d109      	bne.n	8001234 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f004 ff6f 	bl	8006104 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fef1 	bl	8001020 <LL_ADC_IsDeepPowerDownEnabled>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d004      	beq.n	800124e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fed7 	bl	8000ffc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff0c 	bl	8001070 <LL_ADC_IsInternalRegulatorEnabled>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d115      	bne.n	800128a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fef0 	bl	8001048 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001268:	4b84      	ldr	r3, [pc, #528]	; (800147c <HAL_ADC_Init+0x284>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	099b      	lsrs	r3, r3, #6
 800126e:	4a84      	ldr	r2, [pc, #528]	; (8001480 <HAL_ADC_Init+0x288>)
 8001270:	fba2 2303 	umull	r2, r3, r2, r3
 8001274:	099b      	lsrs	r3, r3, #6
 8001276:	3301      	adds	r3, #1
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800127c:	e002      	b.n	8001284 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	3b01      	subs	r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f9      	bne.n	800127e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff feee 	bl	8001070 <LL_ADC_IsInternalRegulatorEnabled>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10d      	bne.n	80012b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	f043 0210 	orr.w	r2, r3, #16
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff62 	bl	8001184 <LL_ADC_REG_IsConversionOngoing>
 80012c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f040 80c8 	bne.w	8001460 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f040 80c4 	bne.w	8001460 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80012e0:	f043 0202 	orr.w	r2, r3, #2
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fefb 	bl	80010e8 <LL_ADC_IsEnabled>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10b      	bne.n	8001310 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012f8:	4862      	ldr	r0, [pc, #392]	; (8001484 <HAL_ADC_Init+0x28c>)
 80012fa:	f7ff fef5 	bl	80010e8 <LL_ADC_IsEnabled>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d105      	bne.n	8001310 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	4619      	mov	r1, r3
 800130a:	485f      	ldr	r0, [pc, #380]	; (8001488 <HAL_ADC_Init+0x290>)
 800130c:	f7ff fd4c 	bl	8000da8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7e5b      	ldrb	r3, [r3, #25]
 8001314:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800131a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001320:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001326:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800132e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3020 	ldrb.w	r3, [r3, #32]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d106      	bne.n	800134c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	3b01      	subs	r3, #1
 8001344:	045b      	lsls	r3, r3, #17
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	2b00      	cmp	r3, #0
 8001352:	d009      	beq.n	8001368 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001358:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	4b47      	ldr	r3, [pc, #284]	; (800148c <HAL_ADC_Init+0x294>)
 8001370:	4013      	ands	r3, r2
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6812      	ldr	r2, [r2, #0]
 8001376:	69b9      	ldr	r1, [r7, #24]
 8001378:	430b      	orrs	r3, r1
 800137a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff feff 	bl	8001184 <LL_ADC_REG_IsConversionOngoing>
 8001386:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff20 	bl	80011d2 <LL_ADC_INJ_IsConversionOngoing>
 8001392:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d140      	bne.n	800141c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d13d      	bne.n	800141c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7e1b      	ldrb	r3, [r3, #24]
 80013a8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013aa:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013b2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013c2:	f023 0306 	bic.w	r3, r3, #6
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	69b9      	ldr	r1, [r7, #24]
 80013cc:	430b      	orrs	r3, r1
 80013ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d118      	bne.n	800140c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80013e4:	f023 0304 	bic.w	r3, r3, #4
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013f0:	4311      	orrs	r1, r2
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80013f6:	4311      	orrs	r1, r2
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80013fc:	430a      	orrs	r2, r1
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 0201 	orr.w	r2, r2, #1
 8001408:	611a      	str	r2, [r3, #16]
 800140a:	e007      	b.n	800141c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	691a      	ldr	r2, [r3, #16]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0201 	bic.w	r2, r2, #1
 800141a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d10c      	bne.n	800143e <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f023 010f 	bic.w	r1, r3, #15
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	1e5a      	subs	r2, r3, #1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	631a      	str	r2, [r3, #48]	; 0x30
 800143c:	e007      	b.n	800144e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 020f 	bic.w	r2, r2, #15
 800144c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	f023 0303 	bic.w	r3, r3, #3
 8001456:	f043 0201 	orr.w	r2, r3, #1
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	659a      	str	r2, [r3, #88]	; 0x58
 800145e:	e007      	b.n	8001470 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001464:	f043 0210 	orr.w	r2, r3, #16
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001470:	7ffb      	ldrb	r3, [r7, #31]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000008 	.word	0x20000008
 8001480:	053e2d63 	.word	0x053e2d63
 8001484:	50040000 	.word	0x50040000
 8001488:	50040300 	.word	0x50040300
 800148c:	fff0c007 	.word	0xfff0c007

08001490 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fe71 	bl	8001184 <LL_ADC_REG_IsConversionOngoing>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d14f      	bne.n	8001548 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d101      	bne.n	80014b6 <HAL_ADC_Start+0x26>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e04b      	b.n	800154e <HAL_ADC_Start+0xbe>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 fdd0 	bl	8002064 <ADC_Enable>
 80014c4:	4603      	mov	r3, r0
 80014c6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d137      	bne.n	800153e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014d6:	f023 0301 	bic.w	r3, r3, #1
 80014da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ee:	d106      	bne.n	80014fe <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f4:	f023 0206 	bic.w	r2, r3, #6
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80014fc:	e002      	b.n	8001504 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	221c      	movs	r2, #28
 800150a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d007      	beq.n	8001532 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800152a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fdfc 	bl	8001134 <LL_ADC_REG_StartConversion>
 800153c:	e006      	b.n	800154c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001546:	e001      	b.n	800154c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001548:	2302      	movs	r3, #2
 800154a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <HAL_ADC_Stop+0x16>
 8001568:	2302      	movs	r3, #2
 800156a:	e023      	b.n	80015b4 <HAL_ADC_Stop+0x5e>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001574:	2103      	movs	r1, #3
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 fcb8 	bl	8001eec <ADC_ConversionStop>
 800157c:	4603      	mov	r3, r0
 800157e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d111      	bne.n	80015aa <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 fdf2 	bl	8002170 <ADC_Disable>
 800158c:	4603      	mov	r3, r0
 800158e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d109      	bne.n	80015aa <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800159e:	f023 0301 	bic.w	r3, r3, #1
 80015a2:	f043 0201 	orr.w	r2, r3, #1
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d102      	bne.n	80015d4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80015ce:	2308      	movs	r3, #8
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	e010      	b.n	80015f6 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d007      	beq.n	80015f2 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	f043 0220 	orr.w	r2, r3, #32
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e06f      	b.n	80016d2 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80015f2:	2304      	movs	r3, #4
 80015f4:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80015f6:	f7ff fba7 	bl	8000d48 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015fc:	e021      	b.n	8001642 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001604:	d01d      	beq.n	8001642 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001606:	f7ff fb9f 	bl	8000d48 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d302      	bcc.n	800161c <HAL_ADC_PollForConversion+0x60>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d112      	bne.n	8001642 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	4013      	ands	r3, r2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10b      	bne.n	8001642 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	f043 0204 	orr.w	r2, r3, #4
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e047      	b.n	80016d2 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0d6      	beq.n	80015fe <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001654:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fc3d 	bl	8000ee0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d01c      	beq.n	80016a6 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7e5b      	ldrb	r3, [r3, #25]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d118      	bne.n	80016a6 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b08      	cmp	r3, #8
 8001680:	d111      	bne.n	80016a6 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001686:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d105      	bne.n	80016a6 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169e:	f043 0201 	orr.w	r2, r3, #1
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2b08      	cmp	r3, #8
 80016b2:	d104      	bne.n	80016be <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2208      	movs	r2, #8
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	e008      	b.n	80016d0 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d103      	bne.n	80016d0 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	220c      	movs	r2, #12
 80016ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b0b6      	sub	sp, #216	; 0xd8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x22>
 8001712:	2302      	movs	r3, #2
 8001714:	e3d5      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x7ce>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fd2e 	bl	8001184 <LL_ADC_REG_IsConversionOngoing>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	f040 83ba 	bne.w	8001ea4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b05      	cmp	r3, #5
 8001736:	d824      	bhi.n	8001782 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	3b02      	subs	r3, #2
 800173e:	2b03      	cmp	r3, #3
 8001740:	d81b      	bhi.n	800177a <HAL_ADC_ConfigChannel+0x86>
 8001742:	a201      	add	r2, pc, #4	; (adr r2, 8001748 <HAL_ADC_ConfigChannel+0x54>)
 8001744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001748:	08001759 	.word	0x08001759
 800174c:	08001761 	.word	0x08001761
 8001750:	08001769 	.word	0x08001769
 8001754:	08001771 	.word	0x08001771
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	220c      	movs	r2, #12
 800175c:	605a      	str	r2, [r3, #4]
          break;
 800175e:	e011      	b.n	8001784 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	2212      	movs	r2, #18
 8001764:	605a      	str	r2, [r3, #4]
          break;
 8001766:	e00d      	b.n	8001784 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	2218      	movs	r2, #24
 800176c:	605a      	str	r2, [r3, #4]
          break;
 800176e:	e009      	b.n	8001784 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001776:	605a      	str	r2, [r3, #4]
          break;
 8001778:	e004      	b.n	8001784 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	2206      	movs	r2, #6
 800177e:	605a      	str	r2, [r3, #4]
          break;
 8001780:	e000      	b.n	8001784 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001782:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	6859      	ldr	r1, [r3, #4]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	f7ff fbb8 	bl	8000f06 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fcf2 	bl	8001184 <LL_ADC_REG_IsConversionOngoing>
 80017a0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fd12 	bl	80011d2 <LL_ADC_INJ_IsConversionOngoing>
 80017ae:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f040 81c1 	bne.w	8001b3e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f040 81bc 	bne.w	8001b3e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017ce:	d10f      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2200      	movs	r2, #0
 80017da:	4619      	mov	r1, r3
 80017dc:	f7ff fbbf 	bl	8000f5e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fb66 	bl	8000eba <LL_ADC_SetSamplingTimeCommonConfig>
 80017ee:	e00e      	b.n	800180e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	6819      	ldr	r1, [r3, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	461a      	mov	r2, r3
 80017fe:	f7ff fbae 	bl	8000f5e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fb56 	bl	8000eba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	695a      	ldr	r2, [r3, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	08db      	lsrs	r3, r3, #3
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	2b04      	cmp	r3, #4
 800182e:	d00a      	beq.n	8001846 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6818      	ldr	r0, [r3, #0]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	6919      	ldr	r1, [r3, #16]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001840:	f7ff fae6 	bl	8000e10 <LL_ADC_SetOffset>
 8001844:	e17b      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fb03 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 8001852:	4603      	mov	r3, r0
 8001854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10a      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x17e>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff faf8 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 8001868:	4603      	mov	r3, r0
 800186a:	0e9b      	lsrs	r3, r3, #26
 800186c:	f003 021f 	and.w	r2, r3, #31
 8001870:	e01e      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x1bc>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff faed 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 800187e:	4603      	mov	r3, r0
 8001880:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001888:	fa93 f3a3 	rbit	r3, r3
 800188c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001890:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001894:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001898:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80018a0:	2320      	movs	r3, #32
 80018a2:	e004      	b.n	80018ae <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80018a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018a8:	fab3 f383 	clz	r3, r3
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d105      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x1d4>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	0e9b      	lsrs	r3, r3, #26
 80018c2:	f003 031f 	and.w	r3, r3, #31
 80018c6:	e018      	b.n	80018fa <HAL_ADC_ConfigChannel+0x206>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018d4:	fa93 f3a3 	rbit	r3, r3
 80018d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80018dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80018e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80018ec:	2320      	movs	r3, #32
 80018ee:	e004      	b.n	80018fa <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80018f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018f4:	fab3 f383 	clz	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d106      	bne.n	800190c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fabc 	bl	8000e84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2101      	movs	r1, #1
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff faa0 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 8001918:	4603      	mov	r3, r0
 800191a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10a      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x244>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2101      	movs	r1, #1
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fa95 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	0e9b      	lsrs	r3, r3, #26
 8001932:	f003 021f 	and.w	r2, r3, #31
 8001936:	e01e      	b.n	8001976 <HAL_ADC_ConfigChannel+0x282>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2101      	movs	r1, #1
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fa8a 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800194e:	fa93 f3a3 	rbit	r3, r3
 8001952:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001956:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800195a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800195e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001966:	2320      	movs	r3, #32
 8001968:	e004      	b.n	8001974 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800196a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800196e:	fab3 f383 	clz	r3, r3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800197e:	2b00      	cmp	r3, #0
 8001980:	d105      	bne.n	800198e <HAL_ADC_ConfigChannel+0x29a>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	0e9b      	lsrs	r3, r3, #26
 8001988:	f003 031f 	and.w	r3, r3, #31
 800198c:	e018      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x2cc>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800199a:	fa93 f3a3 	rbit	r3, r3
 800199e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80019a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80019aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80019b2:	2320      	movs	r3, #32
 80019b4:	e004      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80019b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019ba:	fab3 f383 	clz	r3, r3
 80019be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d106      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2200      	movs	r2, #0
 80019ca:	2101      	movs	r1, #1
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fa59 	bl	8000e84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2102      	movs	r1, #2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fa3d 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 80019de:	4603      	mov	r3, r0
 80019e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10a      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x30a>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2102      	movs	r1, #2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fa32 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	0e9b      	lsrs	r3, r3, #26
 80019f8:	f003 021f 	and.w	r2, r3, #31
 80019fc:	e01e      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x348>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2102      	movs	r1, #2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fa27 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a14:	fa93 f3a3 	rbit	r3, r3
 8001a18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001a24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001a2c:	2320      	movs	r3, #32
 8001a2e:	e004      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001a30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a34:	fab3 f383 	clz	r3, r3
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d105      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x360>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	0e9b      	lsrs	r3, r3, #26
 8001a4e:	f003 031f 	and.w	r3, r3, #31
 8001a52:	e016      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x38e>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a60:	fa93 f3a3 	rbit	r3, r3
 8001a64:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001a66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001a74:	2320      	movs	r3, #32
 8001a76:	e004      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d106      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff f9f8 	bl	8000e84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2103      	movs	r1, #3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f9dc 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10a      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x3cc>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2103      	movs	r1, #3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff f9d1 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	0e9b      	lsrs	r3, r3, #26
 8001aba:	f003 021f 	and.w	r2, r3, #31
 8001abe:	e017      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x3fc>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2103      	movs	r1, #3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f9c6 	bl	8000e58 <LL_ADC_GetOffsetChannel>
 8001acc:	4603      	mov	r3, r0
 8001ace:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001ad8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ada:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	e003      	b.n	8001aee <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001ae6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ae8:	fab3 f383 	clz	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d105      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x414>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	0e9b      	lsrs	r3, r3, #26
 8001b02:	f003 031f 	and.w	r3, r3, #31
 8001b06:	e011      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x438>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b10:	fa93 f3a3 	rbit	r3, r3
 8001b14:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b18:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001b20:	2320      	movs	r3, #32
 8001b22:	e003      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d106      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2200      	movs	r2, #0
 8001b36:	2103      	movs	r1, #3
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff f9a3 	bl	8000e84 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fad0 	bl	80010e8 <LL_ADC_IsEnabled>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f040 8140 	bne.w	8001dd0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	6819      	ldr	r1, [r3, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	f7ff fa29 	bl	8000fb4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	4a8f      	ldr	r2, [pc, #572]	; (8001da4 <HAL_ADC_ConfigChannel+0x6b0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	f040 8131 	bne.w	8001dd0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10b      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x4a2>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	0e9b      	lsrs	r3, r3, #26
 8001b84:	3301      	adds	r3, #1
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	2b09      	cmp	r3, #9
 8001b8c:	bf94      	ite	ls
 8001b8e:	2301      	movls	r3, #1
 8001b90:	2300      	movhi	r3, #0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	e019      	b.n	8001bca <HAL_ADC_ConfigChannel+0x4d6>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ba6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001ba8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001bae:	2320      	movs	r3, #32
 8001bb0:	e003      	b.n	8001bba <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001bb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bb4:	fab3 f383 	clz	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	2b09      	cmp	r3, #9
 8001bc2:	bf94      	ite	ls
 8001bc4:	2301      	movls	r3, #1
 8001bc6:	2300      	movhi	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d079      	beq.n	8001cc2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d107      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x4f6>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	0e9b      	lsrs	r3, r3, #26
 8001be0:	3301      	adds	r3, #1
 8001be2:	069b      	lsls	r3, r3, #26
 8001be4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001be8:	e015      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x522>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bf2:	fa93 f3a3 	rbit	r3, r3
 8001bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bfa:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001c02:	2320      	movs	r3, #32
 8001c04:	e003      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c08:	fab3 f383 	clz	r3, r3
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	3301      	adds	r3, #1
 8001c10:	069b      	lsls	r3, r3, #26
 8001c12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x542>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	0e9b      	lsrs	r3, r3, #26
 8001c28:	3301      	adds	r3, #1
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	2101      	movs	r1, #1
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	e017      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x572>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c3e:	fa93 f3a3 	rbit	r3, r3
 8001c42:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c46:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001c4e:	2320      	movs	r3, #32
 8001c50:	e003      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c54:	fab3 f383 	clz	r3, r3
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	f003 031f 	and.w	r3, r3, #31
 8001c60:	2101      	movs	r1, #1
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	ea42 0103 	orr.w	r1, r2, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10a      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x598>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	0e9b      	lsrs	r3, r3, #26
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	f003 021f 	and.w	r2, r3, #31
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	051b      	lsls	r3, r3, #20
 8001c8a:	e018      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x5ca>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001ca4:	2320      	movs	r3, #32
 8001ca6:	e003      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f003 021f 	and.w	r2, r3, #31
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cbe:	430b      	orrs	r3, r1
 8001cc0:	e081      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d107      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x5ea>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	0e9b      	lsrs	r3, r3, #26
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	069b      	lsls	r3, r3, #26
 8001cd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cdc:	e015      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x616>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cee:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001cf6:	2320      	movs	r3, #32
 8001cf8:	e003      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	3301      	adds	r3, #1
 8001d04:	069b      	lsls	r3, r3, #26
 8001d06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d109      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x636>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	0e9b      	lsrs	r3, r3, #26
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	2101      	movs	r1, #1
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	e017      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x666>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	6a3b      	ldr	r3, [r7, #32]
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	61fb      	str	r3, [r7, #28]
  return result;
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001d42:	2320      	movs	r3, #32
 8001d44:	e003      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	2101      	movs	r1, #1
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	ea42 0103 	orr.w	r1, r2, r3
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10d      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x692>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0e9b      	lsrs	r3, r3, #26
 8001d70:	3301      	adds	r3, #1
 8001d72:	f003 021f 	and.w	r2, r3, #31
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3b1e      	subs	r3, #30
 8001d7e:	051b      	lsls	r3, r3, #20
 8001d80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d84:	e01e      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x6d0>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	613b      	str	r3, [r7, #16]
  return result;
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d104      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001d9e:	2320      	movs	r3, #32
 8001da0:	e006      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x6bc>
 8001da2:	bf00      	nop
 8001da4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	3301      	adds	r3, #1
 8001db2:	f003 021f 	and.w	r2, r3, #31
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	3b1e      	subs	r3, #30
 8001dbe:	051b      	lsls	r3, r3, #20
 8001dc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dc4:	430b      	orrs	r3, r1
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	6892      	ldr	r2, [r2, #8]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f7ff f8c7 	bl	8000f5e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <HAL_ADC_ConfigChannel+0x7d8>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d06c      	beq.n	8001eb6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ddc:	483c      	ldr	r0, [pc, #240]	; (8001ed0 <HAL_ADC_ConfigChannel+0x7dc>)
 8001dde:	f7ff f809 	bl	8000df4 <LL_ADC_GetCommonPathInternalCh>
 8001de2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a3a      	ldr	r2, [pc, #232]	; (8001ed4 <HAL_ADC_ConfigChannel+0x7e0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d127      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001df0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001df4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d121      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a35      	ldr	r2, [pc, #212]	; (8001ed8 <HAL_ADC_ConfigChannel+0x7e4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d157      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e0e:	4619      	mov	r1, r3
 8001e10:	482f      	ldr	r0, [pc, #188]	; (8001ed0 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e12:	f7fe ffdc 	bl	8000dce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e16:	4b31      	ldr	r3, [pc, #196]	; (8001edc <HAL_ADC_ConfigChannel+0x7e8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	099b      	lsrs	r3, r3, #6
 8001e1c:	4a30      	ldr	r2, [pc, #192]	; (8001ee0 <HAL_ADC_ConfigChannel+0x7ec>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	099b      	lsrs	r3, r3, #6
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	4613      	mov	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e30:	e002      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f9      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e3e:	e03a      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a27      	ldr	r2, [pc, #156]	; (8001ee4 <HAL_ADC_ConfigChannel+0x7f0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d113      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x77e>
 8001e4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10d      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <HAL_ADC_ConfigChannel+0x7e4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d12a      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4819      	ldr	r0, [pc, #100]	; (8001ed0 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e6c:	f7fe ffaf 	bl	8000dce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e70:	e021      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1c      	ldr	r2, [pc, #112]	; (8001ee8 <HAL_ADC_ConfigChannel+0x7f4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d11c      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d116      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <HAL_ADC_ConfigChannel+0x7e4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d111      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	480c      	ldr	r0, [pc, #48]	; (8001ed0 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e9e:	f7fe ff96 	bl	8000dce <LL_ADC_SetCommonPathInternalCh>
 8001ea2:	e008      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	f043 0220 	orr.w	r2, r3, #32
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001ebe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	37d8      	adds	r7, #216	; 0xd8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	80080000 	.word	0x80080000
 8001ed0:	50040300 	.word	0x50040300
 8001ed4:	c7520000 	.word	0xc7520000
 8001ed8:	50040000 	.word	0x50040000
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	053e2d63 	.word	0x053e2d63
 8001ee4:	cb840000 	.word	0xcb840000
 8001ee8:	80000001 	.word	0x80000001

08001eec <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff f93e 	bl	8001184 <LL_ADC_REG_IsConversionOngoing>
 8001f08:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f95f 	bl	80011d2 <LL_ADC_INJ_IsConversionOngoing>
 8001f14:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d103      	bne.n	8001f24 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8098 	beq.w	8002054 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d02a      	beq.n	8001f88 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	7e5b      	ldrb	r3, [r3, #25]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d126      	bne.n	8001f88 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7e1b      	ldrb	r3, [r3, #24]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d122      	bne.n	8001f88 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001f42:	2301      	movs	r3, #1
 8001f44:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001f46:	e014      	b.n	8001f72 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	4a45      	ldr	r2, [pc, #276]	; (8002060 <ADC_ConversionStop+0x174>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d90d      	bls.n	8001f6c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	f043 0210 	orr.w	r2, r3, #16
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e074      	b.n	8002056 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7c:	2b40      	cmp	r3, #64	; 0x40
 8001f7e:	d1e3      	bne.n	8001f48 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2240      	movs	r2, #64	; 0x40
 8001f86:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d014      	beq.n	8001fb8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff f8f6 	bl	8001184 <LL_ADC_REG_IsConversionOngoing>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00c      	beq.n	8001fb8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff f8b3 	bl	800110e <LL_ADC_IsDisableOngoing>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d104      	bne.n	8001fb8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff f8d2 	bl	800115c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d014      	beq.n	8001fe8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff f905 	bl	80011d2 <LL_ADC_INJ_IsConversionOngoing>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00c      	beq.n	8001fe8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff f89b 	bl	800110e <LL_ADC_IsDisableOngoing>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d104      	bne.n	8001fe8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff f8e1 	bl	80011aa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d005      	beq.n	8001ffa <ADC_ConversionStop+0x10e>
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d105      	bne.n	8002000 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001ff4:	230c      	movs	r3, #12
 8001ff6:	617b      	str	r3, [r7, #20]
        break;
 8001ff8:	e005      	b.n	8002006 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001ffa:	2308      	movs	r3, #8
 8001ffc:	617b      	str	r3, [r7, #20]
        break;
 8001ffe:	e002      	b.n	8002006 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002000:	2304      	movs	r3, #4
 8002002:	617b      	str	r3, [r7, #20]
        break;
 8002004:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002006:	f7fe fe9f 	bl	8000d48 <HAL_GetTick>
 800200a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800200c:	e01b      	b.n	8002046 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800200e:	f7fe fe9b 	bl	8000d48 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b05      	cmp	r3, #5
 800201a:	d914      	bls.n	8002046 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00d      	beq.n	8002046 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	f043 0210 	orr.w	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	f043 0201 	orr.w	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e007      	b.n	8002056 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1dc      	bne.n	800200e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3720      	adds	r7, #32
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	a33fffff 	.word	0xa33fffff

08002064 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff f837 	bl	80010e8 <LL_ADC_IsEnabled>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d169      	bne.n	8002154 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	4b36      	ldr	r3, [pc, #216]	; (8002160 <ADC_Enable+0xfc>)
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00d      	beq.n	80020aa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	f043 0210 	orr.w	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209e:	f043 0201 	orr.w	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e055      	b.n	8002156 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fff2 	bl	8001098 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80020b4:	482b      	ldr	r0, [pc, #172]	; (8002164 <ADC_Enable+0x100>)
 80020b6:	f7fe fe9d 	bl	8000df4 <LL_ADC_GetCommonPathInternalCh>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d013      	beq.n	80020ec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020c4:	4b28      	ldr	r3, [pc, #160]	; (8002168 <ADC_Enable+0x104>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	099b      	lsrs	r3, r3, #6
 80020ca:	4a28      	ldr	r2, [pc, #160]	; (800216c <ADC_Enable+0x108>)
 80020cc:	fba2 2303 	umull	r2, r3, r2, r3
 80020d0:	099b      	lsrs	r3, r3, #6
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80020de:	e002      	b.n	80020e6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f9      	bne.n	80020e0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80020ec:	f7fe fe2c 	bl	8000d48 <HAL_GetTick>
 80020f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020f2:	e028      	b.n	8002146 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fff5 	bl	80010e8 <LL_ADC_IsEnabled>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d104      	bne.n	800210e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe ffc5 	bl	8001098 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800210e:	f7fe fe1b 	bl	8000d48 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d914      	bls.n	8002146 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b01      	cmp	r3, #1
 8002128:	d00d      	beq.n	8002146 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	f043 0210 	orr.w	r2, r3, #16
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213a:	f043 0201 	orr.w	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e007      	b.n	8002156 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b01      	cmp	r3, #1
 8002152:	d1cf      	bne.n	80020f4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	8000003f 	.word	0x8000003f
 8002164:	50040300 	.word	0x50040300
 8002168:	20000008 	.word	0x20000008
 800216c:	053e2d63 	.word	0x053e2d63

08002170 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe ffc6 	bl	800110e <LL_ADC_IsDisableOngoing>
 8002182:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe ffad 	bl	80010e8 <LL_ADC_IsEnabled>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d047      	beq.n	8002224 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d144      	bne.n	8002224 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 030d 	and.w	r3, r3, #13
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d10c      	bne.n	80021c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe ff87 	bl	80010c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2203      	movs	r2, #3
 80021b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021ba:	f7fe fdc5 	bl	8000d48 <HAL_GetTick>
 80021be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021c0:	e029      	b.n	8002216 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	f043 0210 	orr.w	r2, r3, #16
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	f043 0201 	orr.w	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e023      	b.n	8002226 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021de:	f7fe fdb3 	bl	8000d48 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d914      	bls.n	8002216 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00d      	beq.n	8002216 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fe:	f043 0210 	orr.w	r2, r3, #16
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220a:	f043 0201 	orr.w	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e007      	b.n	8002226 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1dc      	bne.n	80021de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800224c:	4013      	ands	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800225c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002262:	4a04      	ldr	r2, [pc, #16]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	60d3      	str	r3, [r2, #12]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <__NVIC_GetPriorityGrouping+0x18>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	f003 0307 	and.w	r3, r3, #7
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	db0b      	blt.n	80022be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	4907      	ldr	r1, [pc, #28]	; (80022cc <__NVIC_EnableIRQ+0x38>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	095b      	lsrs	r3, r3, #5
 80022b4:	2001      	movs	r0, #1
 80022b6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000e100 	.word	0xe000e100

080022d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	db0a      	blt.n	80022fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	490c      	ldr	r1, [pc, #48]	; (800231c <__NVIC_SetPriority+0x4c>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	440b      	add	r3, r1
 80022f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f8:	e00a      	b.n	8002310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4908      	ldr	r1, [pc, #32]	; (8002320 <__NVIC_SetPriority+0x50>)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	3b04      	subs	r3, #4
 8002308:	0112      	lsls	r2, r2, #4
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	440b      	add	r3, r1
 800230e:	761a      	strb	r2, [r3, #24]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000e100 	.word	0xe000e100
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f1c3 0307 	rsb	r3, r3, #7
 800233e:	2b04      	cmp	r3, #4
 8002340:	bf28      	it	cs
 8002342:	2304      	movcs	r3, #4
 8002344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3304      	adds	r3, #4
 800234a:	2b06      	cmp	r3, #6
 800234c:	d902      	bls.n	8002354 <NVIC_EncodePriority+0x30>
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3b03      	subs	r3, #3
 8002352:	e000      	b.n	8002356 <NVIC_EncodePriority+0x32>
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	f04f 32ff 	mov.w	r2, #4294967295
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43da      	mvns	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	401a      	ands	r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800236c:	f04f 31ff 	mov.w	r1, #4294967295
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	43d9      	mvns	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	4313      	orrs	r3, r2
         );
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800239c:	d301      	bcc.n	80023a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239e:	2301      	movs	r3, #1
 80023a0:	e00f      	b.n	80023c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a2:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <SysTick_Config+0x40>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023aa:	210f      	movs	r1, #15
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	f7ff ff8e 	bl	80022d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <SysTick_Config+0x40>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ba:	4b04      	ldr	r3, [pc, #16]	; (80023cc <SysTick_Config+0x40>)
 80023bc:	2207      	movs	r2, #7
 80023be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	e000e010 	.word	0xe000e010

080023d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ff29 	bl	8002230 <__NVIC_SetPriorityGrouping>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023f8:	f7ff ff3e 	bl	8002278 <__NVIC_GetPriorityGrouping>
 80023fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	f7ff ff8e 	bl	8002324 <NVIC_EncodePriority>
 8002408:	4602      	mov	r2, r0
 800240a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff5d 	bl	80022d0 <__NVIC_SetPriority>
}
 8002416:	bf00      	nop
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff31 	bl	8002294 <__NVIC_EnableIRQ>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ffa2 	bl	800238c <SysTick_Config>
 8002448:	4603      	mov	r3, r0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e014      	b.n	800248e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	791b      	ldrb	r3, [r3, #4]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d105      	bne.n	800247a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f003 fe89 	bl	800618c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2202      	movs	r2, #2
 800247e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	795b      	ldrb	r3, [r3, #5]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_DAC_Start+0x16>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e040      	b.n	800252e <HAL_DAC_Start+0x98>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2202      	movs	r2, #2
 80024b6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6819      	ldr	r1, [r3, #0]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2201      	movs	r2, #1
 80024c6:	409a      	lsls	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10f      	bne.n	80024f6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d11d      	bne.n	8002520 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	e014      	b.n	8002520 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2102      	movs	r1, #2
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	429a      	cmp	r2, r3
 800250e:	d107      	bne.n	8002520 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0202 	orr.w	r2, r2, #2
 800251e:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	795b      	ldrb	r3, [r3, #5]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_DAC_Start_DMA+0x1e>
 8002556:	2302      	movs	r3, #2
 8002558:	e0ab      	b.n	80026b2 <HAL_DAC_Start_DMA+0x176>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2202      	movs	r2, #2
 8002564:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d12f      	bne.n	80025cc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a52      	ldr	r2, [pc, #328]	; (80026bc <HAL_DAC_Start_DMA+0x180>)
 8002572:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	4a51      	ldr	r2, [pc, #324]	; (80026c0 <HAL_DAC_Start_DMA+0x184>)
 800257a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4a50      	ldr	r2, [pc, #320]	; (80026c4 <HAL_DAC_Start_DMA+0x188>)
 8002582:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002592:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	2b08      	cmp	r3, #8
 8002598:	d013      	beq.n	80025c2 <HAL_DAC_Start_DMA+0x86>
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	2b08      	cmp	r3, #8
 800259e:	d845      	bhi.n	800262c <HAL_DAC_Start_DMA+0xf0>
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_DAC_Start_DMA+0x72>
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d005      	beq.n	80025b8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80025ac:	e03e      	b.n	800262c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3308      	adds	r3, #8
 80025b4:	613b      	str	r3, [r7, #16]
        break;
 80025b6:	e03c      	b.n	8002632 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	330c      	adds	r3, #12
 80025be:	613b      	str	r3, [r7, #16]
        break;
 80025c0:	e037      	b.n	8002632 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	3310      	adds	r3, #16
 80025c8:	613b      	str	r3, [r7, #16]
        break;
 80025ca:	e032      	b.n	8002632 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4a3d      	ldr	r2, [pc, #244]	; (80026c8 <HAL_DAC_Start_DMA+0x18c>)
 80025d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4a3c      	ldr	r2, [pc, #240]	; (80026cc <HAL_DAC_Start_DMA+0x190>)
 80025da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4a3b      	ldr	r2, [pc, #236]	; (80026d0 <HAL_DAC_Start_DMA+0x194>)
 80025e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025f2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d013      	beq.n	8002622 <HAL_DAC_Start_DMA+0xe6>
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d817      	bhi.n	8002630 <HAL_DAC_Start_DMA+0xf4>
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_DAC_Start_DMA+0xd2>
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	2b04      	cmp	r3, #4
 800260a:	d005      	beq.n	8002618 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800260c:	e010      	b.n	8002630 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	3314      	adds	r3, #20
 8002614:	613b      	str	r3, [r7, #16]
        break;
 8002616:	e00c      	b.n	8002632 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	3318      	adds	r3, #24
 800261e:	613b      	str	r3, [r7, #16]
        break;
 8002620:	e007      	b.n	8002632 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	331c      	adds	r3, #28
 8002628:	613b      	str	r3, [r7, #16]
        break;
 800262a:	e002      	b.n	8002632 <HAL_DAC_Start_DMA+0xf6>
        break;
 800262c:	bf00      	nop
 800262e:	e000      	b.n	8002632 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002630:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d111      	bne.n	800265c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002646:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6898      	ldr	r0, [r3, #8]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	f000 fb39 	bl	8002cc8 <HAL_DMA_Start_IT>
 8002656:	4603      	mov	r3, r0
 8002658:	75fb      	strb	r3, [r7, #23]
 800265a:	e010      	b.n	800267e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800266a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	68d8      	ldr	r0, [r3, #12]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	f000 fb27 	bl	8002cc8 <HAL_DMA_Start_IT>
 800267a:	4603      	mov	r3, r0
 800267c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002684:	7dfb      	ldrb	r3, [r7, #23]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10c      	bne.n	80026a4 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6819      	ldr	r1, [r3, #0]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	2201      	movs	r2, #1
 8002698:	409a      	lsls	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	e005      	b.n	80026b0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f043 0204 	orr.w	r2, r3, #4
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80026b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	08002a65 	.word	0x08002a65
 80026c0:	08002a87 	.word	0x08002a87
 80026c4:	08002aa3 	.word	0x08002aa3
 80026c8:	08002b0d 	.word	0x08002b0d
 80026cc:	08002b2f 	.word	0x08002b2f
 80026d0:	08002b4b 	.word	0x08002b4b

080026d4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6819      	ldr	r1, [r3, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43da      	mvns	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	400a      	ands	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6819      	ldr	r1, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	f003 0310 	and.w	r3, r3, #16
 8002708:	2201      	movs	r2, #1
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43da      	mvns	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	400a      	ands	r2, r1
 8002716:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10d      	bne.n	800273a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fb4b 	bl	8002dbe <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	e00c      	b.n	8002754 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fb3d 	bl	8002dbe <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002752:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800275e:	b480      	push	{r7}
 8002760:	b087      	sub	sp, #28
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d105      	bne.n	8002788 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	3308      	adds	r3, #8
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	e004      	b.n	8002792 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	3314      	adds	r3, #20
 8002790:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	461a      	mov	r2, r3
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	795b      	ldrb	r3, [r3, #5]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_DAC_ConfigChannel+0x1c>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e12a      	b.n	8002a56 <HAL_DAC_ConfigChannel+0x272>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2201      	movs	r2, #1
 8002804:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2202      	movs	r2, #2
 800280a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b04      	cmp	r3, #4
 8002812:	d174      	bne.n	80028fe <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002814:	f7fe fa98 	bl	8000d48 <HAL_GetTick>
 8002818:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d134      	bne.n	800288a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002820:	e011      	b.n	8002846 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002822:	f7fe fa91 	bl	8000d48 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d90a      	bls.n	8002846 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	f043 0208 	orr.w	r2, r3, #8
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2203      	movs	r2, #3
 8002840:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e107      	b.n	8002a56 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1e6      	bne.n	8002822 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002854:	2001      	movs	r0, #1
 8002856:	f7fe fa83 	bl	8000d60 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	69d2      	ldr	r2, [r2, #28]
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
 8002864:	e01e      	b.n	80028a4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002866:	f7fe fa6f 	bl	8000d48 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b01      	cmp	r3, #1
 8002872:	d90a      	bls.n	800288a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	f043 0208 	orr.w	r2, r3, #8
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2203      	movs	r2, #3
 8002884:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e0e5      	b.n	8002a56 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002890:	2b00      	cmp	r3, #0
 8002892:	dbe8      	blt.n	8002866 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002894:	2001      	movs	r0, #1
 8002896:	f7fe fa63 	bl	8000d60 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	69d2      	ldr	r2, [r2, #28]
 80028a2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80028b4:	fa01 f303 	lsl.w	r3, r1, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	ea02 0103 	and.w	r1, r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	6a1a      	ldr	r2, [r3, #32]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	409a      	lsls	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	21ff      	movs	r1, #255	; 0xff
 80028e0:	fa01 f303 	lsl.w	r3, r1, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	ea02 0103 	and.w	r1, r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	409a      	lsls	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d11d      	bne.n	8002942 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290c:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	221f      	movs	r2, #31
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	69fa      	ldr	r2, [r7, #28]
 800291e:	4013      	ands	r3, r2
 8002920:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f003 0310 	and.w	r3, r3, #16
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69fa      	ldr	r2, [r7, #28]
 8002936:	4313      	orrs	r3, r2
 8002938:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	69fa      	ldr	r2, [r7, #28]
 8002940:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002948:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2207      	movs	r2, #7
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	4013      	ands	r3, r2
 800295c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	431a      	orrs	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	4313      	orrs	r3, r2
 8002980:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69fa      	ldr	r2, [r7, #28]
 8002988:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6819      	ldr	r1, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43da      	mvns	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	400a      	ands	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029e6:	d104      	bne.n	80029f2 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	e018      	b.n	8002a24 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d104      	bne.n	8002a04 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	e00f      	b.n	8002a24 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002a04:	f001 fc06 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8002a08:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4a14      	ldr	r2, [pc, #80]	; (8002a60 <HAL_DAC_ConfigChannel+0x27c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d904      	bls.n	8002a1c <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	e003      	b.n	8002a24 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a22:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	69fa      	ldr	r2, [r7, #28]
 8002a2a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6819      	ldr	r1, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	22c0      	movs	r2, #192	; 0xc0
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	400a      	ands	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3720      	adds	r7, #32
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	04c4b400 	.word	0x04c4b400

08002a64 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f7ff fe98 	bl	80027a8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	711a      	strb	r2, [r3, #4]
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f7ff fe91 	bl	80027bc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f043 0204 	orr.w	r2, r3, #4
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f7ff fe87 	bl	80027d0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	711a      	strb	r2, [r3, #4]
}
 8002ac8:	bf00      	nop
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f7ff ffd8 	bl	8002ad0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	711a      	strb	r2, [r3, #4]
}
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7ff ffd1 	bl	8002ae4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f043 0204 	orr.w	r2, r3, #4
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f7ff ffc7 	bl	8002af8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	711a      	strb	r2, [r3, #4]
}
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e08d      	b.n	8002ca6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4b47      	ldr	r3, [pc, #284]	; (8002cb0 <HAL_DMA_Init+0x138>)
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d80f      	bhi.n	8002bb6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4b45      	ldr	r3, [pc, #276]	; (8002cb4 <HAL_DMA_Init+0x13c>)
 8002b9e:	4413      	add	r3, r2
 8002ba0:	4a45      	ldr	r2, [pc, #276]	; (8002cb8 <HAL_DMA_Init+0x140>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	009a      	lsls	r2, r3, #2
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a42      	ldr	r2, [pc, #264]	; (8002cbc <HAL_DMA_Init+0x144>)
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40
 8002bb4:	e00e      	b.n	8002bd4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4b40      	ldr	r3, [pc, #256]	; (8002cc0 <HAL_DMA_Init+0x148>)
 8002bbe:	4413      	add	r3, r2
 8002bc0:	4a3d      	ldr	r2, [pc, #244]	; (8002cb8 <HAL_DMA_Init+0x140>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	091b      	lsrs	r3, r3, #4
 8002bc8:	009a      	lsls	r2, r3, #2
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a3c      	ldr	r2, [pc, #240]	; (8002cc4 <HAL_DMA_Init+0x14c>)
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 fa12 	bl	8003050 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c34:	d102      	bne.n	8002c3c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c50:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d010      	beq.n	8002c7c <HAL_DMA_Init+0x104>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d80c      	bhi.n	8002c7c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fa32 	bl	80030cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	e008      	b.n	8002c8e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40020407 	.word	0x40020407
 8002cb4:	bffdfff8 	.word	0xbffdfff8
 8002cb8:	cccccccd 	.word	0xcccccccd
 8002cbc:	40020000 	.word	0x40020000
 8002cc0:	bffdfbf8 	.word	0xbffdfbf8
 8002cc4:	40020400 	.word	0x40020400

08002cc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_DMA_Start_IT+0x20>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e066      	b.n	8002db6 <HAL_DMA_Start_IT+0xee>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d155      	bne.n	8002da8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0201 	bic.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	68b9      	ldr	r1, [r7, #8]
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f957 	bl	8002fd4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 020e 	orr.w	r2, r2, #14
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e00f      	b.n	8002d60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0204 	bic.w	r2, r2, #4
 8002d4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 020a 	orr.w	r2, r2, #10
 8002d5e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d007      	beq.n	8002d7e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d7c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d007      	beq.n	8002d96 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d94:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 0201 	orr.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e005      	b.n	8002db4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
 8002db2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d008      	beq.n	8002de8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2204      	movs	r2, #4
 8002dda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e040      	b.n	8002e6a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 020e 	bic.w	r2, r2, #14
 8002df6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e06:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0201 	bic.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1c:	f003 021c 	and.w	r2, r3, #28
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	2101      	movs	r1, #1
 8002e26:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e34:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00c      	beq.n	8002e58 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e4c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e56:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b084      	sub	sp, #16
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	f003 031c 	and.w	r3, r3, #28
 8002e96:	2204      	movs	r2, #4
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d026      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x7a>
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d021      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d107      	bne.n	8002eca <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0204 	bic.w	r2, r2, #4
 8002ec8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	f003 021c 	and.w	r2, r3, #28
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2104      	movs	r1, #4
 8002ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8002edc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d071      	beq.n	8002fca <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002eee:	e06c      	b.n	8002fca <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	f003 031c 	and.w	r3, r3, #28
 8002ef8:	2202      	movs	r2, #2
 8002efa:	409a      	lsls	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d02e      	beq.n	8002f62 <HAL_DMA_IRQHandler+0xec>
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d029      	beq.n	8002f62 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10b      	bne.n	8002f34 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 020a 	bic.w	r2, r2, #10
 8002f2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f38:	f003 021c 	and.w	r2, r3, #28
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	2102      	movs	r1, #2
 8002f42:	fa01 f202 	lsl.w	r2, r1, r2
 8002f46:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d038      	beq.n	8002fca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f60:	e033      	b.n	8002fca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	f003 031c 	and.w	r3, r3, #28
 8002f6a:	2208      	movs	r2, #8
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d02a      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x156>
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d025      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 020e 	bic.w	r2, r2, #14
 8002f8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f94:	f003 021c 	and.w	r2, r3, #28
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d004      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002fca:	bf00      	nop
 8002fcc:	bf00      	nop
}
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fea:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d004      	beq.n	8002ffe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ffc:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f003 021c 	and.w	r2, r3, #28
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	2101      	movs	r1, #1
 800300c:	fa01 f202 	lsl.w	r2, r1, r2
 8003010:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b10      	cmp	r3, #16
 8003020:	d108      	bne.n	8003034 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003032:	e007      	b.n	8003044 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	60da      	str	r2, [r3, #12]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	4b17      	ldr	r3, [pc, #92]	; (80030bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003060:	429a      	cmp	r2, r3
 8003062:	d80a      	bhi.n	800307a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003068:	089b      	lsrs	r3, r3, #2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003070:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6493      	str	r3, [r2, #72]	; 0x48
 8003078:	e007      	b.n	800308a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	089b      	lsrs	r3, r3, #2
 8003080:	009a      	lsls	r2, r3, #2
 8003082:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003084:	4413      	add	r3, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	3b08      	subs	r3, #8
 8003092:	4a0c      	ldr	r2, [pc, #48]	; (80030c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003094:	fba2 2303 	umull	r2, r3, r2, r3
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80030a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	2201      	movs	r2, #1
 80030aa:	409a      	lsls	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	651a      	str	r2, [r3, #80]	; 0x50
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40020407 	.word	0x40020407
 80030c0:	4002081c 	.word	0x4002081c
 80030c4:	cccccccd 	.word	0xcccccccd
 80030c8:	40020880 	.word	0x40020880

080030cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4b0b      	ldr	r3, [pc, #44]	; (800310c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	461a      	mov	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a08      	ldr	r2, [pc, #32]	; (8003110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80030ee:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	2201      	movs	r2, #1
 80030fa:	409a      	lsls	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003100:	bf00      	nop
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	1000823f 	.word	0x1000823f
 8003110:	40020940 	.word	0x40020940

08003114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003122:	e166      	b.n	80033f2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	2101      	movs	r1, #1
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	fa01 f303 	lsl.w	r3, r1, r3
 8003130:	4013      	ands	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 8158 	beq.w	80033ec <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b01      	cmp	r3, #1
 8003146:	d005      	beq.n	8003154 <HAL_GPIO_Init+0x40>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d130      	bne.n	80031b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	2203      	movs	r2, #3
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4013      	ands	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800318a:	2201      	movs	r2, #1
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43db      	mvns	r3, r3
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4013      	ands	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	f003 0201 	and.w	r2, r3, #1
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d017      	beq.n	80031f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	2203      	movs	r2, #3
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4013      	ands	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d123      	bne.n	8003246 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	08da      	lsrs	r2, r3, #3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3208      	adds	r2, #8
 8003206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800320a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	220f      	movs	r2, #15
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4013      	ands	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	08da      	lsrs	r2, r3, #3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3208      	adds	r2, #8
 8003240:	6939      	ldr	r1, [r7, #16]
 8003242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	2203      	movs	r2, #3
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4013      	ands	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 0203 	and.w	r2, r3, #3
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 80b2 	beq.w	80033ec <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003288:	4b61      	ldr	r3, [pc, #388]	; (8003410 <HAL_GPIO_Init+0x2fc>)
 800328a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328c:	4a60      	ldr	r2, [pc, #384]	; (8003410 <HAL_GPIO_Init+0x2fc>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	6613      	str	r3, [r2, #96]	; 0x60
 8003294:	4b5e      	ldr	r3, [pc, #376]	; (8003410 <HAL_GPIO_Init+0x2fc>)
 8003296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032a0:	4a5c      	ldr	r2, [pc, #368]	; (8003414 <HAL_GPIO_Init+0x300>)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	089b      	lsrs	r3, r3, #2
 80032a6:	3302      	adds	r3, #2
 80032a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	220f      	movs	r2, #15
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032ca:	d02b      	beq.n	8003324 <HAL_GPIO_Init+0x210>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a52      	ldr	r2, [pc, #328]	; (8003418 <HAL_GPIO_Init+0x304>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d025      	beq.n	8003320 <HAL_GPIO_Init+0x20c>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a51      	ldr	r2, [pc, #324]	; (800341c <HAL_GPIO_Init+0x308>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d01f      	beq.n	800331c <HAL_GPIO_Init+0x208>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a50      	ldr	r2, [pc, #320]	; (8003420 <HAL_GPIO_Init+0x30c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d019      	beq.n	8003318 <HAL_GPIO_Init+0x204>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a4f      	ldr	r2, [pc, #316]	; (8003424 <HAL_GPIO_Init+0x310>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d013      	beq.n	8003314 <HAL_GPIO_Init+0x200>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a4e      	ldr	r2, [pc, #312]	; (8003428 <HAL_GPIO_Init+0x314>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00d      	beq.n	8003310 <HAL_GPIO_Init+0x1fc>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a4d      	ldr	r2, [pc, #308]	; (800342c <HAL_GPIO_Init+0x318>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d007      	beq.n	800330c <HAL_GPIO_Init+0x1f8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a4c      	ldr	r2, [pc, #304]	; (8003430 <HAL_GPIO_Init+0x31c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d101      	bne.n	8003308 <HAL_GPIO_Init+0x1f4>
 8003304:	2307      	movs	r3, #7
 8003306:	e00e      	b.n	8003326 <HAL_GPIO_Init+0x212>
 8003308:	2308      	movs	r3, #8
 800330a:	e00c      	b.n	8003326 <HAL_GPIO_Init+0x212>
 800330c:	2306      	movs	r3, #6
 800330e:	e00a      	b.n	8003326 <HAL_GPIO_Init+0x212>
 8003310:	2305      	movs	r3, #5
 8003312:	e008      	b.n	8003326 <HAL_GPIO_Init+0x212>
 8003314:	2304      	movs	r3, #4
 8003316:	e006      	b.n	8003326 <HAL_GPIO_Init+0x212>
 8003318:	2303      	movs	r3, #3
 800331a:	e004      	b.n	8003326 <HAL_GPIO_Init+0x212>
 800331c:	2302      	movs	r3, #2
 800331e:	e002      	b.n	8003326 <HAL_GPIO_Init+0x212>
 8003320:	2301      	movs	r3, #1
 8003322:	e000      	b.n	8003326 <HAL_GPIO_Init+0x212>
 8003324:	2300      	movs	r3, #0
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	f002 0203 	and.w	r2, r2, #3
 800332c:	0092      	lsls	r2, r2, #2
 800332e:	4093      	lsls	r3, r2
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003336:	4937      	ldr	r1, [pc, #220]	; (8003414 <HAL_GPIO_Init+0x300>)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	089b      	lsrs	r3, r3, #2
 800333c:	3302      	adds	r3, #2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003344:	4b3b      	ldr	r3, [pc, #236]	; (8003434 <HAL_GPIO_Init+0x320>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	43db      	mvns	r3, r3
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4013      	ands	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003368:	4a32      	ldr	r2, [pc, #200]	; (8003434 <HAL_GPIO_Init+0x320>)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800336e:	4b31      	ldr	r3, [pc, #196]	; (8003434 <HAL_GPIO_Init+0x320>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	43db      	mvns	r3, r3
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4013      	ands	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003392:	4a28      	ldr	r2, [pc, #160]	; (8003434 <HAL_GPIO_Init+0x320>)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003398:	4b26      	ldr	r3, [pc, #152]	; (8003434 <HAL_GPIO_Init+0x320>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033bc:	4a1d      	ldr	r2, [pc, #116]	; (8003434 <HAL_GPIO_Init+0x320>)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033c2:	4b1c      	ldr	r3, [pc, #112]	; (8003434 <HAL_GPIO_Init+0x320>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4013      	ands	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033e6:	4a13      	ldr	r2, [pc, #76]	; (8003434 <HAL_GPIO_Init+0x320>)
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	3301      	adds	r3, #1
 80033f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f47f ae91 	bne.w	8003124 <HAL_GPIO_Init+0x10>
  }
}
 8003402:	bf00      	nop
 8003404:	bf00      	nop
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	40021000 	.word	0x40021000
 8003414:	40010000 	.word	0x40010000
 8003418:	48000400 	.word	0x48000400
 800341c:	48000800 	.word	0x48000800
 8003420:	48000c00 	.word	0x48000c00
 8003424:	48001000 	.word	0x48001000
 8003428:	48001400 	.word	0x48001400
 800342c:	48001800 	.word	0x48001800
 8003430:	48001c00 	.word	0x48001c00
 8003434:	40010400 	.word	0x40010400

08003438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	807b      	strh	r3, [r7, #2]
 8003444:	4613      	mov	r3, r2
 8003446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003448:	787b      	ldrb	r3, [r7, #1]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800344e:	887a      	ldrh	r2, [r7, #2]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003454:	e002      	b.n	800345c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800347a:	887a      	ldrh	r2, [r7, #2]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4013      	ands	r3, r2
 8003480:	041a      	lsls	r2, r3, #16
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	43d9      	mvns	r1, r3
 8003486:	887b      	ldrh	r3, [r7, #2]
 8003488:	400b      	ands	r3, r1
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	619a      	str	r2, [r3, #24]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034a6:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d006      	beq.n	80034c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034b2:	4a05      	ldr	r2, [pc, #20]	; (80034c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f002 fd1a 	bl	8005ef4 <HAL_GPIO_EXTI_Callback>
  }
}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40010400 	.word	0x40010400

080034cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034d0:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <HAL_PWREx_GetVoltageRange+0x3c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034dc:	d102      	bne.n	80034e4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80034de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034e2:	e00b      	b.n	80034fc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80034e4:	4b08      	ldr	r3, [pc, #32]	; (8003508 <HAL_PWREx_GetVoltageRange+0x3c>)
 80034e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f2:	d102      	bne.n	80034fa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80034f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034f8:	e000      	b.n	80034fc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80034fa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40007000 	.word	0x40007000

0800350c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d141      	bne.n	800359e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800351a:	4b4b      	ldr	r3, [pc, #300]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003526:	d131      	bne.n	800358c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003528:	4b47      	ldr	r3, [pc, #284]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800352a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800352e:	4a46      	ldr	r2, [pc, #280]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003534:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003538:	4b43      	ldr	r3, [pc, #268]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003540:	4a41      	ldr	r2, [pc, #260]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003546:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003548:	4b40      	ldr	r3, [pc, #256]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2232      	movs	r2, #50	; 0x32
 800354e:	fb02 f303 	mul.w	r3, r2, r3
 8003552:	4a3f      	ldr	r2, [pc, #252]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	0c9b      	lsrs	r3, r3, #18
 800355a:	3301      	adds	r3, #1
 800355c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800355e:	e002      	b.n	8003566 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3b01      	subs	r3, #1
 8003564:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003566:	4b38      	ldr	r3, [pc, #224]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003572:	d102      	bne.n	800357a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f2      	bne.n	8003560 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800357a:	4b33      	ldr	r3, [pc, #204]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003586:	d158      	bne.n	800363a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e057      	b.n	800363c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800358c:	4b2e      	ldr	r3, [pc, #184]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800358e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003592:	4a2d      	ldr	r2, [pc, #180]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003598:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800359c:	e04d      	b.n	800363a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a4:	d141      	bne.n	800362a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035a6:	4b28      	ldr	r3, [pc, #160]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b2:	d131      	bne.n	8003618 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035b4:	4b24      	ldr	r3, [pc, #144]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ba:	4a23      	ldr	r2, [pc, #140]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035c4:	4b20      	ldr	r3, [pc, #128]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035cc:	4a1e      	ldr	r2, [pc, #120]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80035d4:	4b1d      	ldr	r3, [pc, #116]	; (800364c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2232      	movs	r2, #50	; 0x32
 80035da:	fb02 f303 	mul.w	r3, r2, r3
 80035de:	4a1c      	ldr	r2, [pc, #112]	; (8003650 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035e0:	fba2 2303 	umull	r2, r3, r2, r3
 80035e4:	0c9b      	lsrs	r3, r3, #18
 80035e6:	3301      	adds	r3, #1
 80035e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035ea:	e002      	b.n	80035f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035f2:	4b15      	ldr	r3, [pc, #84]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fe:	d102      	bne.n	8003606 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f2      	bne.n	80035ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003612:	d112      	bne.n	800363a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e011      	b.n	800363c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800361a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800361e:	4a0a      	ldr	r2, [pc, #40]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003624:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003628:	e007      	b.n	800363a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800362a:	4b07      	ldr	r3, [pc, #28]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003632:	4a05      	ldr	r2, [pc, #20]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003634:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003638:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	40007000 	.word	0x40007000
 800364c:	20000008 	.word	0x20000008
 8003650:	431bde83 	.word	0x431bde83

08003654 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d102      	bne.n	8003668 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f000 bc08 	b.w	8003e78 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003668:	4b96      	ldr	r3, [pc, #600]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 030c 	and.w	r3, r3, #12
 8003670:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003672:	4b94      	ldr	r3, [pc, #592]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80e4 	beq.w	8003852 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d007      	beq.n	80036a0 <HAL_RCC_OscConfig+0x4c>
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	2b0c      	cmp	r3, #12
 8003694:	f040 808b 	bne.w	80037ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2b01      	cmp	r3, #1
 800369c:	f040 8087 	bne.w	80037ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036a0:	4b88      	ldr	r3, [pc, #544]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_OscConfig+0x64>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e3df      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1a      	ldr	r2, [r3, #32]
 80036bc:	4b81      	ldr	r3, [pc, #516]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d004      	beq.n	80036d2 <HAL_RCC_OscConfig+0x7e>
 80036c8:	4b7e      	ldr	r3, [pc, #504]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d0:	e005      	b.n	80036de <HAL_RCC_OscConfig+0x8a>
 80036d2:	4b7c      	ldr	r3, [pc, #496]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80036d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036de:	4293      	cmp	r3, r2
 80036e0:	d223      	bcs.n	800372a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 fda0 	bl	800422c <RCC_SetFlashLatencyFromMSIRange>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e3c0      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036f6:	4b73      	ldr	r3, [pc, #460]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a72      	ldr	r2, [pc, #456]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80036fc:	f043 0308 	orr.w	r3, r3, #8
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	4b70      	ldr	r3, [pc, #448]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	496d      	ldr	r1, [pc, #436]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003710:	4313      	orrs	r3, r2
 8003712:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003714:	4b6b      	ldr	r3, [pc, #428]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	021b      	lsls	r3, r3, #8
 8003722:	4968      	ldr	r1, [pc, #416]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003724:	4313      	orrs	r3, r2
 8003726:	604b      	str	r3, [r1, #4]
 8003728:	e025      	b.n	8003776 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800372a:	4b66      	ldr	r3, [pc, #408]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a65      	ldr	r2, [pc, #404]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003730:	f043 0308 	orr.w	r3, r3, #8
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	4b63      	ldr	r3, [pc, #396]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	4960      	ldr	r1, [pc, #384]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003744:	4313      	orrs	r3, r2
 8003746:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003748:	4b5e      	ldr	r3, [pc, #376]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	021b      	lsls	r3, r3, #8
 8003756:	495b      	ldr	r1, [pc, #364]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d109      	bne.n	8003776 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fd60 	bl	800422c <RCC_SetFlashLatencyFromMSIRange>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e380      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003776:	f000 fcc1 	bl	80040fc <HAL_RCC_GetSysClockFreq>
 800377a:	4602      	mov	r2, r0
 800377c:	4b51      	ldr	r3, [pc, #324]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	4950      	ldr	r1, [pc, #320]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 8003788:	5ccb      	ldrb	r3, [r1, r3]
 800378a:	f003 031f 	and.w	r3, r3, #31
 800378e:	fa22 f303 	lsr.w	r3, r2, r3
 8003792:	4a4e      	ldr	r2, [pc, #312]	; (80038cc <HAL_RCC_OscConfig+0x278>)
 8003794:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003796:	4b4e      	ldr	r3, [pc, #312]	; (80038d0 <HAL_RCC_OscConfig+0x27c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7fd fa84 	bl	8000ca8 <HAL_InitTick>
 80037a0:	4603      	mov	r3, r0
 80037a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d052      	beq.n	8003850 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	e364      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d032      	beq.n	800381c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037b6:	4b43      	ldr	r3, [pc, #268]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a42      	ldr	r2, [pc, #264]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037c2:	f7fd fac1 	bl	8000d48 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037ca:	f7fd fabd 	bl	8000d48 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e34d      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037dc:	4b39      	ldr	r3, [pc, #228]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037e8:	4b36      	ldr	r3, [pc, #216]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a35      	ldr	r2, [pc, #212]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80037ee:	f043 0308 	orr.w	r3, r3, #8
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	4b33      	ldr	r3, [pc, #204]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	4930      	ldr	r1, [pc, #192]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003802:	4313      	orrs	r3, r2
 8003804:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003806:	4b2f      	ldr	r3, [pc, #188]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	492b      	ldr	r1, [pc, #172]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003816:	4313      	orrs	r3, r2
 8003818:	604b      	str	r3, [r1, #4]
 800381a:	e01a      	b.n	8003852 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800381c:	4b29      	ldr	r3, [pc, #164]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a28      	ldr	r2, [pc, #160]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003822:	f023 0301 	bic.w	r3, r3, #1
 8003826:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003828:	f7fd fa8e 	bl	8000d48 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003830:	f7fd fa8a 	bl	8000d48 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e31a      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003842:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x1dc>
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003850:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d073      	beq.n	8003946 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	2b08      	cmp	r3, #8
 8003862:	d005      	beq.n	8003870 <HAL_RCC_OscConfig+0x21c>
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b0c      	cmp	r3, #12
 8003868:	d10e      	bne.n	8003888 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b03      	cmp	r3, #3
 800386e:	d10b      	bne.n	8003888 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003870:	4b14      	ldr	r3, [pc, #80]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d063      	beq.n	8003944 <HAL_RCC_OscConfig+0x2f0>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d15f      	bne.n	8003944 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e2f7      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003890:	d106      	bne.n	80038a0 <HAL_RCC_OscConfig+0x24c>
 8003892:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a0b      	ldr	r2, [pc, #44]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 8003898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	e025      	b.n	80038ec <HAL_RCC_OscConfig+0x298>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038a8:	d114      	bne.n	80038d4 <HAL_RCC_OscConfig+0x280>
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a05      	ldr	r2, [pc, #20]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80038b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a02      	ldr	r2, [pc, #8]	; (80038c4 <HAL_RCC_OscConfig+0x270>)
 80038bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	e013      	b.n	80038ec <HAL_RCC_OscConfig+0x298>
 80038c4:	40021000 	.word	0x40021000
 80038c8:	0800926c 	.word	0x0800926c
 80038cc:	20000008 	.word	0x20000008
 80038d0:	20000000 	.word	0x20000000
 80038d4:	4ba0      	ldr	r3, [pc, #640]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a9f      	ldr	r2, [pc, #636]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 80038da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038de:	6013      	str	r3, [r2, #0]
 80038e0:	4b9d      	ldr	r3, [pc, #628]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a9c      	ldr	r2, [pc, #624]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 80038e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d013      	beq.n	800391c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f4:	f7fd fa28 	bl	8000d48 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038fc:	f7fd fa24 	bl	8000d48 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	; 0x64
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e2b4      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800390e:	4b92      	ldr	r3, [pc, #584]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0x2a8>
 800391a:	e014      	b.n	8003946 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fd fa14 	bl	8000d48 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003924:	f7fd fa10 	bl	8000d48 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b64      	cmp	r3, #100	; 0x64
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e2a0      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003936:	4b88      	ldr	r3, [pc, #544]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x2d0>
 8003942:	e000      	b.n	8003946 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d060      	beq.n	8003a14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	2b04      	cmp	r3, #4
 8003956:	d005      	beq.n	8003964 <HAL_RCC_OscConfig+0x310>
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	2b0c      	cmp	r3, #12
 800395c:	d119      	bne.n	8003992 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2b02      	cmp	r3, #2
 8003962:	d116      	bne.n	8003992 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003964:	4b7c      	ldr	r3, [pc, #496]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_RCC_OscConfig+0x328>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e27d      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397c:	4b76      	ldr	r3, [pc, #472]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	061b      	lsls	r3, r3, #24
 800398a:	4973      	ldr	r1, [pc, #460]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003990:	e040      	b.n	8003a14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d023      	beq.n	80039e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800399a:	4b6f      	ldr	r3, [pc, #444]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a6e      	ldr	r2, [pc, #440]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 80039a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a6:	f7fd f9cf 	bl	8000d48 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ae:	f7fd f9cb 	bl	8000d48 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e25b      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039c0:	4b65      	ldr	r3, [pc, #404]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039cc:	4b62      	ldr	r3, [pc, #392]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	061b      	lsls	r3, r3, #24
 80039da:	495f      	ldr	r1, [pc, #380]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]
 80039e0:	e018      	b.n	8003a14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e2:	4b5d      	ldr	r3, [pc, #372]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a5c      	ldr	r2, [pc, #368]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 80039e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ee:	f7fd f9ab 	bl	8000d48 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f6:	f7fd f9a7 	bl	8000d48 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e237      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a08:	4b53      	ldr	r3, [pc, #332]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f0      	bne.n	80039f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d03c      	beq.n	8003a9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d01c      	beq.n	8003a62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a28:	4b4b      	ldr	r3, [pc, #300]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2e:	4a4a      	ldr	r2, [pc, #296]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fd f986 	bl	8000d48 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a40:	f7fd f982 	bl	8000d48 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e212      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a52:	4b41      	ldr	r3, [pc, #260]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0ef      	beq.n	8003a40 <HAL_RCC_OscConfig+0x3ec>
 8003a60:	e01b      	b.n	8003a9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a62:	4b3d      	ldr	r3, [pc, #244]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a68:	4a3b      	ldr	r2, [pc, #236]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003a6a:	f023 0301 	bic.w	r3, r3, #1
 8003a6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a72:	f7fd f969 	bl	8000d48 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a7a:	f7fd f965 	bl	8000d48 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e1f5      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a8c:	4b32      	ldr	r3, [pc, #200]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1ef      	bne.n	8003a7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 80a6 	beq.w	8003bf4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003aac:	4b2a      	ldr	r3, [pc, #168]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10d      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab8:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	4a26      	ldr	r2, [pc, #152]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac4:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ad4:	4b21      	ldr	r3, [pc, #132]	; (8003b5c <HAL_RCC_OscConfig+0x508>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d118      	bne.n	8003b12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ae0:	4b1e      	ldr	r3, [pc, #120]	; (8003b5c <HAL_RCC_OscConfig+0x508>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <HAL_RCC_OscConfig+0x508>)
 8003ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aec:	f7fd f92c 	bl	8000d48 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af4:	f7fd f928 	bl	8000d48 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e1b8      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <HAL_RCC_OscConfig+0x508>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d108      	bne.n	8003b2c <HAL_RCC_OscConfig+0x4d8>
 8003b1a:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	4a0d      	ldr	r2, [pc, #52]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b2a:	e029      	b.n	8003b80 <HAL_RCC_OscConfig+0x52c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b05      	cmp	r3, #5
 8003b32:	d115      	bne.n	8003b60 <HAL_RCC_OscConfig+0x50c>
 8003b34:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	4a07      	ldr	r2, [pc, #28]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003b3c:	f043 0304 	orr.w	r3, r3, #4
 8003b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b44:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4a:	4a03      	ldr	r2, [pc, #12]	; (8003b58 <HAL_RCC_OscConfig+0x504>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b54:	e014      	b.n	8003b80 <HAL_RCC_OscConfig+0x52c>
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	40007000 	.word	0x40007000
 8003b60:	4b9d      	ldr	r3, [pc, #628]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b66:	4a9c      	ldr	r2, [pc, #624]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003b68:	f023 0301 	bic.w	r3, r3, #1
 8003b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b70:	4b99      	ldr	r3, [pc, #612]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b76:	4a98      	ldr	r2, [pc, #608]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003b78:	f023 0304 	bic.w	r3, r3, #4
 8003b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d016      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b88:	f7fd f8de 	bl	8000d48 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b90:	f7fd f8da 	bl	8000d48 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e168      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba6:	4b8c      	ldr	r3, [pc, #560]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0ed      	beq.n	8003b90 <HAL_RCC_OscConfig+0x53c>
 8003bb4:	e015      	b.n	8003be2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb6:	f7fd f8c7 	bl	8000d48 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bbc:	e00a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bbe:	f7fd f8c3 	bl	8000d48 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e151      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bd4:	4b80      	ldr	r3, [pc, #512]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1ed      	bne.n	8003bbe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003be2:	7ffb      	ldrb	r3, [r7, #31]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d105      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be8:	4b7b      	ldr	r3, [pc, #492]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	4a7a      	ldr	r2, [pc, #488]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d03c      	beq.n	8003c7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d01c      	beq.n	8003c42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c08:	4b73      	ldr	r3, [pc, #460]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c0e:	4a72      	ldr	r2, [pc, #456]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c18:	f7fd f896 	bl	8000d48 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c20:	f7fd f892 	bl	8000d48 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e122      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c32:	4b69      	ldr	r3, [pc, #420]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0ef      	beq.n	8003c20 <HAL_RCC_OscConfig+0x5cc>
 8003c40:	e01b      	b.n	8003c7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c42:	4b65      	ldr	r3, [pc, #404]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c48:	4a63      	ldr	r2, [pc, #396]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003c4a:	f023 0301 	bic.w	r3, r3, #1
 8003c4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c52:	f7fd f879 	bl	8000d48 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c5a:	f7fd f875 	bl	8000d48 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e105      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c6c:	4b5a      	ldr	r3, [pc, #360]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1ef      	bne.n	8003c5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 80f9 	beq.w	8003e76 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	f040 80cf 	bne.w	8003e2c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c8e:	4b52      	ldr	r3, [pc, #328]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f003 0203 	and.w	r2, r3, #3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d12c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	3b01      	subs	r3, #1
 8003cae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d123      	bne.n	8003cfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cbe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d11b      	bne.n	8003cfc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d113      	bne.n	8003cfc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cde:	085b      	lsrs	r3, r3, #1
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d109      	bne.n	8003cfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d071      	beq.n	8003de0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b0c      	cmp	r3, #12
 8003d00:	d068      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d02:	4b35      	ldr	r3, [pc, #212]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d105      	bne.n	8003d1a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d0e:	4b32      	ldr	r3, [pc, #200]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e0ac      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d1e:	4b2e      	ldr	r3, [pc, #184]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a2d      	ldr	r2, [pc, #180]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003d24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d2a:	f7fd f80d 	bl	8000d48 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d32:	f7fd f809 	bl	8000d48 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e099      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d44:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f0      	bne.n	8003d32 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d50:	4b21      	ldr	r3, [pc, #132]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <HAL_RCC_OscConfig+0x788>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d60:	3a01      	subs	r2, #1
 8003d62:	0112      	lsls	r2, r2, #4
 8003d64:	4311      	orrs	r1, r2
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d6a:	0212      	lsls	r2, r2, #8
 8003d6c:	4311      	orrs	r1, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d72:	0852      	lsrs	r2, r2, #1
 8003d74:	3a01      	subs	r2, #1
 8003d76:	0552      	lsls	r2, r2, #21
 8003d78:	4311      	orrs	r1, r2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d7e:	0852      	lsrs	r2, r2, #1
 8003d80:	3a01      	subs	r2, #1
 8003d82:	0652      	lsls	r2, r2, #25
 8003d84:	4311      	orrs	r1, r2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d8a:	06d2      	lsls	r2, r2, #27
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	4912      	ldr	r1, [pc, #72]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d94:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a0f      	ldr	r2, [pc, #60]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003da0:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	4a0c      	ldr	r2, [pc, #48]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003daa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dac:	f7fc ffcc 	bl	8000d48 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db4:	f7fc ffc8 	bl	8000d48 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e058      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc6:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <HAL_RCC_OscConfig+0x784>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dd2:	e050      	b.n	8003e76 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e04f      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003de0:	4b27      	ldr	r3, [pc, #156]	; (8003e80 <HAL_RCC_OscConfig+0x82c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d144      	bne.n	8003e76 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003dec:	4b24      	ldr	r3, [pc, #144]	; (8003e80 <HAL_RCC_OscConfig+0x82c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a23      	ldr	r2, [pc, #140]	; (8003e80 <HAL_RCC_OscConfig+0x82c>)
 8003df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003df8:	4b21      	ldr	r3, [pc, #132]	; (8003e80 <HAL_RCC_OscConfig+0x82c>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4a20      	ldr	r2, [pc, #128]	; (8003e80 <HAL_RCC_OscConfig+0x82c>)
 8003dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e04:	f7fc ffa0 	bl	8000d48 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0c:	f7fc ff9c 	bl	8000d48 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e02c      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e1e:	4b18      	ldr	r3, [pc, #96]	; (8003e80 <HAL_RCC_OscConfig+0x82c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0x7b8>
 8003e2a:	e024      	b.n	8003e76 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	2b0c      	cmp	r3, #12
 8003e30:	d01f      	beq.n	8003e72 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e32:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <HAL_RCC_OscConfig+0x82c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a12      	ldr	r2, [pc, #72]	; (8003e80 <HAL_RCC_OscConfig+0x82c>)
 8003e38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3e:	f7fc ff83 	bl	8000d48 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e46:	f7fc ff7f 	bl	8000d48 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e00f      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e58:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <HAL_RCC_OscConfig+0x82c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1f0      	bne.n	8003e46 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_RCC_OscConfig+0x82c>)
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	4905      	ldr	r1, [pc, #20]	; (8003e80 <HAL_RCC_OscConfig+0x82c>)
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <HAL_RCC_OscConfig+0x830>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	60cb      	str	r3, [r1, #12]
 8003e70:	e001      	b.n	8003e76 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3720      	adds	r7, #32
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40021000 	.word	0x40021000
 8003e84:	feeefffc 	.word	0xfeeefffc

08003e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e11d      	b.n	80040dc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea0:	4b90      	ldr	r3, [pc, #576]	; (80040e4 <HAL_RCC_ClockConfig+0x25c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d910      	bls.n	8003ed0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eae:	4b8d      	ldr	r3, [pc, #564]	; (80040e4 <HAL_RCC_ClockConfig+0x25c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f023 020f 	bic.w	r2, r3, #15
 8003eb6:	498b      	ldr	r1, [pc, #556]	; (80040e4 <HAL_RCC_ClockConfig+0x25c>)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ebe:	4b89      	ldr	r3, [pc, #548]	; (80040e4 <HAL_RCC_ClockConfig+0x25c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e105      	b.n	80040dc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d010      	beq.n	8003efe <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	4b81      	ldr	r3, [pc, #516]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d908      	bls.n	8003efe <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eec:	4b7e      	ldr	r3, [pc, #504]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	497b      	ldr	r1, [pc, #492]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d079      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d11e      	bne.n	8003f50 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f12:	4b75      	ldr	r3, [pc, #468]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e0dc      	b.n	80040dc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003f22:	f000 f9dd 	bl	80042e0 <RCC_GetSysClockFreqFromPLLSource>
 8003f26:	4603      	mov	r3, r0
 8003f28:	4a70      	ldr	r2, [pc, #448]	; (80040ec <HAL_RCC_ClockConfig+0x264>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d946      	bls.n	8003fbc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003f2e:	4b6e      	ldr	r3, [pc, #440]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d140      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f3a:	4b6b      	ldr	r3, [pc, #428]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f42:	4a69      	ldr	r2, [pc, #420]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f4a:	2380      	movs	r3, #128	; 0x80
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	e035      	b.n	8003fbc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d107      	bne.n	8003f68 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f58:	4b63      	ldr	r3, [pc, #396]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d115      	bne.n	8003f90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0b9      	b.n	80040dc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d107      	bne.n	8003f80 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f70:	4b5d      	ldr	r3, [pc, #372]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d109      	bne.n	8003f90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0ad      	b.n	80040dc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f80:	4b59      	ldr	r3, [pc, #356]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0a5      	b.n	80040dc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003f90:	f000 f8b4 	bl	80040fc <HAL_RCC_GetSysClockFreq>
 8003f94:	4603      	mov	r3, r0
 8003f96:	4a55      	ldr	r2, [pc, #340]	; (80040ec <HAL_RCC_ClockConfig+0x264>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d90f      	bls.n	8003fbc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003f9c:	4b52      	ldr	r3, [pc, #328]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d109      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fa8:	4b4f      	ldr	r3, [pc, #316]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fb0:	4a4d      	ldr	r2, [pc, #308]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003fb8:	2380      	movs	r3, #128	; 0x80
 8003fba:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fbc:	4b4a      	ldr	r3, [pc, #296]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f023 0203 	bic.w	r2, r3, #3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	4947      	ldr	r1, [pc, #284]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fce:	f7fc febb 	bl	8000d48 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd4:	e00a      	b.n	8003fec <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd6:	f7fc feb7 	bl	8000d48 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e077      	b.n	80040dc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fec:	4b3e      	ldr	r3, [pc, #248]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 020c 	and.w	r2, r3, #12
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d1eb      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2b80      	cmp	r3, #128	; 0x80
 8004002:	d105      	bne.n	8004010 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004004:	4b38      	ldr	r3, [pc, #224]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	4a37      	ldr	r2, [pc, #220]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 800400a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800400e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d010      	beq.n	800403e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	4b31      	ldr	r3, [pc, #196]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004028:	429a      	cmp	r2, r3
 800402a:	d208      	bcs.n	800403e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800402c:	4b2e      	ldr	r3, [pc, #184]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	492b      	ldr	r1, [pc, #172]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800403e:	4b29      	ldr	r3, [pc, #164]	; (80040e4 <HAL_RCC_ClockConfig+0x25c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d210      	bcs.n	800406e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404c:	4b25      	ldr	r3, [pc, #148]	; (80040e4 <HAL_RCC_ClockConfig+0x25c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f023 020f 	bic.w	r2, r3, #15
 8004054:	4923      	ldr	r1, [pc, #140]	; (80040e4 <HAL_RCC_ClockConfig+0x25c>)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	4313      	orrs	r3, r2
 800405a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800405c:	4b21      	ldr	r3, [pc, #132]	; (80040e4 <HAL_RCC_ClockConfig+0x25c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d001      	beq.n	800406e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e036      	b.n	80040dc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b00      	cmp	r3, #0
 8004078:	d008      	beq.n	800408c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800407a:	4b1b      	ldr	r3, [pc, #108]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	4918      	ldr	r1, [pc, #96]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 8004088:	4313      	orrs	r3, r2
 800408a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d009      	beq.n	80040ac <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004098:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4910      	ldr	r1, [pc, #64]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040ac:	f000 f826 	bl	80040fc <HAL_RCC_GetSysClockFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <HAL_RCC_ClockConfig+0x260>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	091b      	lsrs	r3, r3, #4
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	490c      	ldr	r1, [pc, #48]	; (80040f0 <HAL_RCC_ClockConfig+0x268>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	f003 031f 	and.w	r3, r3, #31
 80040c4:	fa22 f303 	lsr.w	r3, r2, r3
 80040c8:	4a0a      	ldr	r2, [pc, #40]	; (80040f4 <HAL_RCC_ClockConfig+0x26c>)
 80040ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <HAL_RCC_ClockConfig+0x270>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fc fde9 	bl	8000ca8 <HAL_InitTick>
 80040d6:	4603      	mov	r3, r0
 80040d8:	73fb      	strb	r3, [r7, #15]

  return status;
 80040da:	7bfb      	ldrb	r3, [r7, #15]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40022000 	.word	0x40022000
 80040e8:	40021000 	.word	0x40021000
 80040ec:	04c4b400 	.word	0x04c4b400
 80040f0:	0800926c 	.word	0x0800926c
 80040f4:	20000008 	.word	0x20000008
 80040f8:	20000000 	.word	0x20000000

080040fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b089      	sub	sp, #36	; 0x24
 8004100:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	61fb      	str	r3, [r7, #28]
 8004106:	2300      	movs	r3, #0
 8004108:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800410a:	4b3e      	ldr	r3, [pc, #248]	; (8004204 <HAL_RCC_GetSysClockFreq+0x108>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 030c 	and.w	r3, r3, #12
 8004112:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004114:	4b3b      	ldr	r3, [pc, #236]	; (8004204 <HAL_RCC_GetSysClockFreq+0x108>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_RCC_GetSysClockFreq+0x34>
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2b0c      	cmp	r3, #12
 8004128:	d121      	bne.n	800416e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d11e      	bne.n	800416e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004130:	4b34      	ldr	r3, [pc, #208]	; (8004204 <HAL_RCC_GetSysClockFreq+0x108>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d107      	bne.n	800414c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800413c:	4b31      	ldr	r3, [pc, #196]	; (8004204 <HAL_RCC_GetSysClockFreq+0x108>)
 800413e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004142:	0a1b      	lsrs	r3, r3, #8
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	e005      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800414c:	4b2d      	ldr	r3, [pc, #180]	; (8004204 <HAL_RCC_GetSysClockFreq+0x108>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	091b      	lsrs	r3, r3, #4
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004158:	4a2b      	ldr	r2, [pc, #172]	; (8004208 <HAL_RCC_GetSysClockFreq+0x10c>)
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004160:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10d      	bne.n	8004184 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800416c:	e00a      	b.n	8004184 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b04      	cmp	r3, #4
 8004172:	d102      	bne.n	800417a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004174:	4b25      	ldr	r3, [pc, #148]	; (800420c <HAL_RCC_GetSysClockFreq+0x110>)
 8004176:	61bb      	str	r3, [r7, #24]
 8004178:	e004      	b.n	8004184 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	2b08      	cmp	r3, #8
 800417e:	d101      	bne.n	8004184 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004180:	4b23      	ldr	r3, [pc, #140]	; (8004210 <HAL_RCC_GetSysClockFreq+0x114>)
 8004182:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	2b0c      	cmp	r3, #12
 8004188:	d134      	bne.n	80041f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800418a:	4b1e      	ldr	r3, [pc, #120]	; (8004204 <HAL_RCC_GetSysClockFreq+0x108>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d003      	beq.n	80041a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b03      	cmp	r3, #3
 800419e:	d003      	beq.n	80041a8 <HAL_RCC_GetSysClockFreq+0xac>
 80041a0:	e005      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041a2:	4b1a      	ldr	r3, [pc, #104]	; (800420c <HAL_RCC_GetSysClockFreq+0x110>)
 80041a4:	617b      	str	r3, [r7, #20]
      break;
 80041a6:	e005      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041a8:	4b19      	ldr	r3, [pc, #100]	; (8004210 <HAL_RCC_GetSysClockFreq+0x114>)
 80041aa:	617b      	str	r3, [r7, #20]
      break;
 80041ac:	e002      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	617b      	str	r3, [r7, #20]
      break;
 80041b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041b4:	4b13      	ldr	r3, [pc, #76]	; (8004204 <HAL_RCC_GetSysClockFreq+0x108>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	091b      	lsrs	r3, r3, #4
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	3301      	adds	r3, #1
 80041c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041c2:	4b10      	ldr	r3, [pc, #64]	; (8004204 <HAL_RCC_GetSysClockFreq+0x108>)
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	fb03 f202 	mul.w	r2, r3, r2
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041da:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <HAL_RCC_GetSysClockFreq+0x108>)
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	0e5b      	lsrs	r3, r3, #25
 80041e0:	f003 0303 	and.w	r3, r3, #3
 80041e4:	3301      	adds	r3, #1
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041f4:	69bb      	ldr	r3, [r7, #24]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3724      	adds	r7, #36	; 0x24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40021000 	.word	0x40021000
 8004208:	0800927c 	.word	0x0800927c
 800420c:	00f42400 	.word	0x00f42400
 8004210:	007a1200 	.word	0x007a1200

08004214 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004218:	4b03      	ldr	r3, [pc, #12]	; (8004228 <HAL_RCC_GetHCLKFreq+0x14>)
 800421a:	681b      	ldr	r3, [r3, #0]
}
 800421c:	4618      	mov	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000008 	.word	0x20000008

0800422c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004234:	2300      	movs	r3, #0
 8004236:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004238:	4b27      	ldr	r3, [pc, #156]	; (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004244:	f7ff f942 	bl	80034cc <HAL_PWREx_GetVoltageRange>
 8004248:	6178      	str	r0, [r7, #20]
 800424a:	e014      	b.n	8004276 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800424c:	4b22      	ldr	r3, [pc, #136]	; (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800424e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004250:	4a21      	ldr	r2, [pc, #132]	; (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004256:	6593      	str	r3, [r2, #88]	; 0x58
 8004258:	4b1f      	ldr	r3, [pc, #124]	; (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800425a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004264:	f7ff f932 	bl	80034cc <HAL_PWREx_GetVoltageRange>
 8004268:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800426a:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800426c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426e:	4a1a      	ldr	r2, [pc, #104]	; (80042d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004274:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800427c:	d10b      	bne.n	8004296 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b80      	cmp	r3, #128	; 0x80
 8004282:	d913      	bls.n	80042ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2ba0      	cmp	r3, #160	; 0xa0
 8004288:	d902      	bls.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800428a:	2302      	movs	r3, #2
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	e00d      	b.n	80042ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004290:	2301      	movs	r3, #1
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	e00a      	b.n	80042ac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b7f      	cmp	r3, #127	; 0x7f
 800429a:	d902      	bls.n	80042a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800429c:	2302      	movs	r3, #2
 800429e:	613b      	str	r3, [r7, #16]
 80042a0:	e004      	b.n	80042ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b70      	cmp	r3, #112	; 0x70
 80042a6:	d101      	bne.n	80042ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042a8:	2301      	movs	r3, #1
 80042aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f023 020f 	bic.w	r2, r3, #15
 80042b4:	4909      	ldr	r1, [pc, #36]	; (80042dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042bc:	4b07      	ldr	r3, [pc, #28]	; (80042dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d001      	beq.n	80042ce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40021000 	.word	0x40021000
 80042dc:	40022000 	.word	0x40022000

080042e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042e6:	4b2d      	ldr	r3, [pc, #180]	; (800439c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d00b      	beq.n	800430e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d825      	bhi.n	8004348 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d008      	beq.n	8004314 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d11f      	bne.n	8004348 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004308:	4b25      	ldr	r3, [pc, #148]	; (80043a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800430a:	613b      	str	r3, [r7, #16]
    break;
 800430c:	e01f      	b.n	800434e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800430e:	4b25      	ldr	r3, [pc, #148]	; (80043a4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004310:	613b      	str	r3, [r7, #16]
    break;
 8004312:	e01c      	b.n	800434e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004314:	4b21      	ldr	r3, [pc, #132]	; (800439c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d107      	bne.n	8004330 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004320:	4b1e      	ldr	r3, [pc, #120]	; (800439c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004326:	0a1b      	lsrs	r3, r3, #8
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	e005      	b.n	800433c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004330:	4b1a      	ldr	r3, [pc, #104]	; (800439c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	091b      	lsrs	r3, r3, #4
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800433c:	4a1a      	ldr	r2, [pc, #104]	; (80043a8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004344:	613b      	str	r3, [r7, #16]
    break;
 8004346:	e002      	b.n	800434e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	613b      	str	r3, [r7, #16]
    break;
 800434c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800434e:	4b13      	ldr	r3, [pc, #76]	; (800439c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	091b      	lsrs	r3, r3, #4
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	3301      	adds	r3, #1
 800435a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800435c:	4b0f      	ldr	r3, [pc, #60]	; (800439c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	0a1b      	lsrs	r3, r3, #8
 8004362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	fb03 f202 	mul.w	r2, r3, r2
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004372:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004374:	4b09      	ldr	r3, [pc, #36]	; (800439c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	0e5b      	lsrs	r3, r3, #25
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	3301      	adds	r3, #1
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800438e:	683b      	ldr	r3, [r7, #0]
}
 8004390:	4618      	mov	r0, r3
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	40021000 	.word	0x40021000
 80043a0:	00f42400 	.word	0x00f42400
 80043a4:	007a1200 	.word	0x007a1200
 80043a8:	0800927c 	.word	0x0800927c

080043ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043b4:	2300      	movs	r3, #0
 80043b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043b8:	2300      	movs	r3, #0
 80043ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d040      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043cc:	2b80      	cmp	r3, #128	; 0x80
 80043ce:	d02a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80043d0:	2b80      	cmp	r3, #128	; 0x80
 80043d2:	d825      	bhi.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80043d4:	2b60      	cmp	r3, #96	; 0x60
 80043d6:	d026      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80043d8:	2b60      	cmp	r3, #96	; 0x60
 80043da:	d821      	bhi.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80043dc:	2b40      	cmp	r3, #64	; 0x40
 80043de:	d006      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x42>
 80043e0:	2b40      	cmp	r3, #64	; 0x40
 80043e2:	d81d      	bhi.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d009      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80043e8:	2b20      	cmp	r3, #32
 80043ea:	d010      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x62>
 80043ec:	e018      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043ee:	4b89      	ldr	r3, [pc, #548]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	4a88      	ldr	r2, [pc, #544]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043fa:	e015      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3304      	adds	r3, #4
 8004400:	2100      	movs	r1, #0
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fb02 	bl	8004a0c <RCCEx_PLLSAI1_Config>
 8004408:	4603      	mov	r3, r0
 800440a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800440c:	e00c      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3320      	adds	r3, #32
 8004412:	2100      	movs	r1, #0
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fbed 	bl	8004bf4 <RCCEx_PLLSAI2_Config>
 800441a:	4603      	mov	r3, r0
 800441c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800441e:	e003      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	74fb      	strb	r3, [r7, #19]
      break;
 8004424:	e000      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004428:	7cfb      	ldrb	r3, [r7, #19]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10b      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800442e:	4b79      	ldr	r3, [pc, #484]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004430:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004434:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800443c:	4975      	ldr	r1, [pc, #468]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004444:	e001      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004446:	7cfb      	ldrb	r3, [r7, #19]
 8004448:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d047      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445e:	d030      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004464:	d82a      	bhi.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800446a:	d02a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800446c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004470:	d824      	bhi.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004476:	d008      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800447c:	d81e      	bhi.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004486:	d010      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004488:	e018      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800448a:	4b62      	ldr	r3, [pc, #392]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	4a61      	ldr	r2, [pc, #388]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004494:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004496:	e015      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3304      	adds	r3, #4
 800449c:	2100      	movs	r1, #0
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fab4 	bl	8004a0c <RCCEx_PLLSAI1_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044a8:	e00c      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3320      	adds	r3, #32
 80044ae:	2100      	movs	r1, #0
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fb9f 	bl	8004bf4 <RCCEx_PLLSAI2_Config>
 80044b6:	4603      	mov	r3, r0
 80044b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044ba:	e003      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	74fb      	strb	r3, [r7, #19]
      break;
 80044c0:	e000      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80044c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044c4:	7cfb      	ldrb	r3, [r7, #19]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10b      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044ca:	4b52      	ldr	r3, [pc, #328]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d8:	494e      	ldr	r1, [pc, #312]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80044e0:	e001      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e2:	7cfb      	ldrb	r3, [r7, #19]
 80044e4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 809f 	beq.w	8004632 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f4:	2300      	movs	r3, #0
 80044f6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044f8:	4b46      	ldr	r3, [pc, #280]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004508:	2300      	movs	r3, #0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00d      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450e:	4b41      	ldr	r3, [pc, #260]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004512:	4a40      	ldr	r2, [pc, #256]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004518:	6593      	str	r3, [r2, #88]	; 0x58
 800451a:	4b3e      	ldr	r3, [pc, #248]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800451c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004522:	60bb      	str	r3, [r7, #8]
 8004524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004526:	2301      	movs	r3, #1
 8004528:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800452a:	4b3b      	ldr	r3, [pc, #236]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a3a      	ldr	r2, [pc, #232]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004534:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004536:	f7fc fc07 	bl	8000d48 <HAL_GetTick>
 800453a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800453c:	e009      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453e:	f7fc fc03 	bl	8000d48 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d902      	bls.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	74fb      	strb	r3, [r7, #19]
        break;
 8004550:	e005      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004552:	4b31      	ldr	r3, [pc, #196]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0ef      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800455e:	7cfb      	ldrb	r3, [r7, #19]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d15b      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004564:	4b2b      	ldr	r3, [pc, #172]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d01f      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	429a      	cmp	r2, r3
 8004580:	d019      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004582:	4b24      	ldr	r3, [pc, #144]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800458e:	4b21      	ldr	r3, [pc, #132]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004594:	4a1f      	ldr	r2, [pc, #124]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800459e:	4b1d      	ldr	r3, [pc, #116]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a4:	4a1b      	ldr	r2, [pc, #108]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045ae:	4a19      	ldr	r2, [pc, #100]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d016      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c0:	f7fc fbc2 	bl	8000d48 <HAL_GetTick>
 80045c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c6:	e00b      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c8:	f7fc fbbe 	bl	8000d48 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d902      	bls.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	74fb      	strb	r3, [r7, #19]
            break;
 80045de:	e006      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e0:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0ec      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80045ee:	7cfb      	ldrb	r3, [r7, #19]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10c      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045f4:	4b07      	ldr	r3, [pc, #28]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004604:	4903      	ldr	r1, [pc, #12]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800460c:	e008      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800460e:	7cfb      	ldrb	r3, [r7, #19]
 8004610:	74bb      	strb	r3, [r7, #18]
 8004612:	e005      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004614:	40021000 	.word	0x40021000
 8004618:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461c:	7cfb      	ldrb	r3, [r7, #19]
 800461e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004620:	7c7b      	ldrb	r3, [r7, #17]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d105      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004626:	4ba0      	ldr	r3, [pc, #640]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462a:	4a9f      	ldr	r2, [pc, #636]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800462c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004630:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800463e:	4b9a      	ldr	r3, [pc, #616]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004644:	f023 0203 	bic.w	r2, r3, #3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464c:	4996      	ldr	r1, [pc, #600]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004660:	4b91      	ldr	r3, [pc, #580]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004666:	f023 020c 	bic.w	r2, r3, #12
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	498e      	ldr	r1, [pc, #568]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004682:	4b89      	ldr	r3, [pc, #548]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004688:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004690:	4985      	ldr	r1, [pc, #532]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046a4:	4b80      	ldr	r3, [pc, #512]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b2:	497d      	ldr	r1, [pc, #500]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0310 	and.w	r3, r3, #16
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046c6:	4b78      	ldr	r3, [pc, #480]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d4:	4974      	ldr	r1, [pc, #464]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0320 	and.w	r3, r3, #32
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046e8:	4b6f      	ldr	r3, [pc, #444]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f6:	496c      	ldr	r1, [pc, #432]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800470a:	4b67      	ldr	r3, [pc, #412]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004710:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004718:	4963      	ldr	r1, [pc, #396]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800472c:	4b5e      	ldr	r3, [pc, #376]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800472e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004732:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800473a:	495b      	ldr	r1, [pc, #364]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800474e:	4b56      	ldr	r3, [pc, #344]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004754:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475c:	4952      	ldr	r1, [pc, #328]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004770:	4b4d      	ldr	r3, [pc, #308]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477e:	494a      	ldr	r1, [pc, #296]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004792:	4b45      	ldr	r3, [pc, #276]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004798:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a0:	4941      	ldr	r1, [pc, #260]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047b4:	4b3c      	ldr	r3, [pc, #240]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047ba:	f023 0203 	bic.w	r2, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c2:	4939      	ldr	r1, [pc, #228]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d028      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047d6:	4b34      	ldr	r3, [pc, #208]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e4:	4930      	ldr	r1, [pc, #192]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047f4:	d106      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047f6:	4b2c      	ldr	r3, [pc, #176]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	4a2b      	ldr	r2, [pc, #172]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004800:	60d3      	str	r3, [r2, #12]
 8004802:	e011      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004808:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800480c:	d10c      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3304      	adds	r3, #4
 8004812:	2101      	movs	r1, #1
 8004814:	4618      	mov	r0, r3
 8004816:	f000 f8f9 	bl	8004a0c <RCCEx_PLLSAI1_Config>
 800481a:	4603      	mov	r3, r0
 800481c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800481e:	7cfb      	ldrb	r3, [r7, #19]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004824:	7cfb      	ldrb	r3, [r7, #19]
 8004826:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d04d      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800483c:	d108      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800483e:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004840:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004844:	4a18      	ldr	r2, [pc, #96]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800484a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800484e:	e012      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004850:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004852:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004856:	4a14      	ldr	r2, [pc, #80]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004858:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800485c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004860:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004866:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800486e:	490e      	ldr	r1, [pc, #56]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800487a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800487e:	d106      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004880:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	4a08      	ldr	r2, [pc, #32]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800488a:	60d3      	str	r3, [r2, #12]
 800488c:	e020      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004896:	d109      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004898:	4b03      	ldr	r3, [pc, #12]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	4a02      	ldr	r2, [pc, #8]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800489e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a2:	60d3      	str	r3, [r2, #12]
 80048a4:	e014      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80048a6:	bf00      	nop
 80048a8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3304      	adds	r3, #4
 80048ba:	2101      	movs	r1, #1
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 f8a5 	bl	8004a0c <RCCEx_PLLSAI1_Config>
 80048c2:	4603      	mov	r3, r0
 80048c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048c6:	7cfb      	ldrb	r3, [r7, #19]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80048cc:	7cfb      	ldrb	r3, [r7, #19]
 80048ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d028      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048dc:	4b4a      	ldr	r3, [pc, #296]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ea:	4947      	ldr	r1, [pc, #284]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048fa:	d106      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048fc:	4b42      	ldr	r3, [pc, #264]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4a41      	ldr	r2, [pc, #260]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004906:	60d3      	str	r3, [r2, #12]
 8004908:	e011      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800490e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004912:	d10c      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3304      	adds	r3, #4
 8004918:	2101      	movs	r1, #1
 800491a:	4618      	mov	r0, r3
 800491c:	f000 f876 	bl	8004a0c <RCCEx_PLLSAI1_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004924:	7cfb      	ldrb	r3, [r7, #19]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800492a:	7cfb      	ldrb	r3, [r7, #19]
 800492c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d01e      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800493a:	4b33      	ldr	r3, [pc, #204]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004940:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800494a:	492f      	ldr	r1, [pc, #188]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004958:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800495c:	d10c      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3304      	adds	r3, #4
 8004962:	2102      	movs	r1, #2
 8004964:	4618      	mov	r0, r3
 8004966:	f000 f851 	bl	8004a0c <RCCEx_PLLSAI1_Config>
 800496a:	4603      	mov	r3, r0
 800496c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800496e:	7cfb      	ldrb	r3, [r7, #19]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004974:	7cfb      	ldrb	r3, [r7, #19]
 8004976:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00b      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004984:	4b20      	ldr	r3, [pc, #128]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004986:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800498a:	f023 0204 	bic.w	r2, r3, #4
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004994:	491c      	ldr	r1, [pc, #112]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00b      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80049a8:	4b17      	ldr	r3, [pc, #92]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049ae:	f023 0218 	bic.w	r2, r3, #24
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b8:	4913      	ldr	r1, [pc, #76]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d017      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80049cc:	4b0e      	ldr	r3, [pc, #56]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049dc:	490a      	ldr	r1, [pc, #40]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049ee:	d105      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	4a04      	ldr	r2, [pc, #16]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40021000 	.word	0x40021000

08004a0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a1a:	4b72      	ldr	r3, [pc, #456]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00e      	beq.n	8004a44 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a26:	4b6f      	ldr	r3, [pc, #444]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f003 0203 	and.w	r2, r3, #3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d103      	bne.n	8004a3e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
       ||
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d142      	bne.n	8004ac4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	73fb      	strb	r3, [r7, #15]
 8004a42:	e03f      	b.n	8004ac4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d018      	beq.n	8004a7e <RCCEx_PLLSAI1_Config+0x72>
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d825      	bhi.n	8004a9c <RCCEx_PLLSAI1_Config+0x90>
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d002      	beq.n	8004a5a <RCCEx_PLLSAI1_Config+0x4e>
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d009      	beq.n	8004a6c <RCCEx_PLLSAI1_Config+0x60>
 8004a58:	e020      	b.n	8004a9c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a5a:	4b62      	ldr	r3, [pc, #392]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d11d      	bne.n	8004aa2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a6a:	e01a      	b.n	8004aa2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a6c:	4b5d      	ldr	r3, [pc, #372]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d116      	bne.n	8004aa6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a7c:	e013      	b.n	8004aa6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a7e:	4b59      	ldr	r3, [pc, #356]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10f      	bne.n	8004aaa <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a8a:	4b56      	ldr	r3, [pc, #344]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d109      	bne.n	8004aaa <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a9a:	e006      	b.n	8004aaa <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa0:	e004      	b.n	8004aac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004aa2:	bf00      	nop
 8004aa4:	e002      	b.n	8004aac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004aa6:	bf00      	nop
 8004aa8:	e000      	b.n	8004aac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004aaa:	bf00      	nop
    }

    if(status == HAL_OK)
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d108      	bne.n	8004ac4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004ab2:	4b4c      	ldr	r3, [pc, #304]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f023 0203 	bic.w	r2, r3, #3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4949      	ldr	r1, [pc, #292]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f040 8086 	bne.w	8004bd8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004acc:	4b45      	ldr	r3, [pc, #276]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a44      	ldr	r2, [pc, #272]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ad2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad8:	f7fc f936 	bl	8000d48 <HAL_GetTick>
 8004adc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ade:	e009      	b.n	8004af4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ae0:	f7fc f932 	bl	8000d48 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d902      	bls.n	8004af4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	73fb      	strb	r3, [r7, #15]
        break;
 8004af2:	e005      	b.n	8004b00 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004af4:	4b3b      	ldr	r3, [pc, #236]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1ef      	bne.n	8004ae0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d168      	bne.n	8004bd8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d113      	bne.n	8004b34 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b0c:	4b35      	ldr	r3, [pc, #212]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	4b35      	ldr	r3, [pc, #212]	; (8004be8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6892      	ldr	r2, [r2, #8]
 8004b18:	0211      	lsls	r1, r2, #8
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	68d2      	ldr	r2, [r2, #12]
 8004b1e:	06d2      	lsls	r2, r2, #27
 8004b20:	4311      	orrs	r1, r2
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6852      	ldr	r2, [r2, #4]
 8004b26:	3a01      	subs	r2, #1
 8004b28:	0112      	lsls	r2, r2, #4
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	492d      	ldr	r1, [pc, #180]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	610b      	str	r3, [r1, #16]
 8004b32:	e02d      	b.n	8004b90 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d115      	bne.n	8004b66 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b3a:	4b2a      	ldr	r3, [pc, #168]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	4b2b      	ldr	r3, [pc, #172]	; (8004bec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6892      	ldr	r2, [r2, #8]
 8004b46:	0211      	lsls	r1, r2, #8
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6912      	ldr	r2, [r2, #16]
 8004b4c:	0852      	lsrs	r2, r2, #1
 8004b4e:	3a01      	subs	r2, #1
 8004b50:	0552      	lsls	r2, r2, #21
 8004b52:	4311      	orrs	r1, r2
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6852      	ldr	r2, [r2, #4]
 8004b58:	3a01      	subs	r2, #1
 8004b5a:	0112      	lsls	r2, r2, #4
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	4921      	ldr	r1, [pc, #132]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	610b      	str	r3, [r1, #16]
 8004b64:	e014      	b.n	8004b90 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b66:	4b1f      	ldr	r3, [pc, #124]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	4b21      	ldr	r3, [pc, #132]	; (8004bf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6892      	ldr	r2, [r2, #8]
 8004b72:	0211      	lsls	r1, r2, #8
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6952      	ldr	r2, [r2, #20]
 8004b78:	0852      	lsrs	r2, r2, #1
 8004b7a:	3a01      	subs	r2, #1
 8004b7c:	0652      	lsls	r2, r2, #25
 8004b7e:	4311      	orrs	r1, r2
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6852      	ldr	r2, [r2, #4]
 8004b84:	3a01      	subs	r2, #1
 8004b86:	0112      	lsls	r2, r2, #4
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	4916      	ldr	r1, [pc, #88]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b90:	4b14      	ldr	r3, [pc, #80]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a13      	ldr	r2, [pc, #76]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9c:	f7fc f8d4 	bl	8000d48 <HAL_GetTick>
 8004ba0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ba2:	e009      	b.n	8004bb8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ba4:	f7fc f8d0 	bl	8000d48 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d902      	bls.n	8004bb8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	73fb      	strb	r3, [r7, #15]
          break;
 8004bb6:	e005      	b.n	8004bc4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bb8:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0ef      	beq.n	8004ba4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	4904      	ldr	r1, [pc, #16]	; (8004be4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	40021000 	.word	0x40021000
 8004be8:	07ff800f 	.word	0x07ff800f
 8004bec:	ff9f800f 	.word	0xff9f800f
 8004bf0:	f9ff800f 	.word	0xf9ff800f

08004bf4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c02:	4b72      	ldr	r3, [pc, #456]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00e      	beq.n	8004c2c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c0e:	4b6f      	ldr	r3, [pc, #444]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f003 0203 	and.w	r2, r3, #3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d103      	bne.n	8004c26 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
       ||
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d142      	bne.n	8004cac <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	73fb      	strb	r3, [r7, #15]
 8004c2a:	e03f      	b.n	8004cac <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d018      	beq.n	8004c66 <RCCEx_PLLSAI2_Config+0x72>
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d825      	bhi.n	8004c84 <RCCEx_PLLSAI2_Config+0x90>
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d002      	beq.n	8004c42 <RCCEx_PLLSAI2_Config+0x4e>
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d009      	beq.n	8004c54 <RCCEx_PLLSAI2_Config+0x60>
 8004c40:	e020      	b.n	8004c84 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c42:	4b62      	ldr	r3, [pc, #392]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d11d      	bne.n	8004c8a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c52:	e01a      	b.n	8004c8a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c54:	4b5d      	ldr	r3, [pc, #372]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d116      	bne.n	8004c8e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c64:	e013      	b.n	8004c8e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c66:	4b59      	ldr	r3, [pc, #356]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10f      	bne.n	8004c92 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c72:	4b56      	ldr	r3, [pc, #344]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c82:	e006      	b.n	8004c92 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	73fb      	strb	r3, [r7, #15]
      break;
 8004c88:	e004      	b.n	8004c94 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004c8a:	bf00      	nop
 8004c8c:	e002      	b.n	8004c94 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004c8e:	bf00      	nop
 8004c90:	e000      	b.n	8004c94 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004c92:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d108      	bne.n	8004cac <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004c9a:	4b4c      	ldr	r3, [pc, #304]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f023 0203 	bic.w	r2, r3, #3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4949      	ldr	r1, [pc, #292]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f040 8086 	bne.w	8004dc0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004cb4:	4b45      	ldr	r3, [pc, #276]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a44      	ldr	r2, [pc, #272]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc0:	f7fc f842 	bl	8000d48 <HAL_GetTick>
 8004cc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cc6:	e009      	b.n	8004cdc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cc8:	f7fc f83e 	bl	8000d48 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d902      	bls.n	8004cdc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	73fb      	strb	r3, [r7, #15]
        break;
 8004cda:	e005      	b.n	8004ce8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cdc:	4b3b      	ldr	r3, [pc, #236]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1ef      	bne.n	8004cc8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d168      	bne.n	8004dc0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d113      	bne.n	8004d1c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cf4:	4b35      	ldr	r3, [pc, #212]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cf6:	695a      	ldr	r2, [r3, #20]
 8004cf8:	4b35      	ldr	r3, [pc, #212]	; (8004dd0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6892      	ldr	r2, [r2, #8]
 8004d00:	0211      	lsls	r1, r2, #8
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	68d2      	ldr	r2, [r2, #12]
 8004d06:	06d2      	lsls	r2, r2, #27
 8004d08:	4311      	orrs	r1, r2
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6852      	ldr	r2, [r2, #4]
 8004d0e:	3a01      	subs	r2, #1
 8004d10:	0112      	lsls	r2, r2, #4
 8004d12:	430a      	orrs	r2, r1
 8004d14:	492d      	ldr	r1, [pc, #180]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	614b      	str	r3, [r1, #20]
 8004d1a:	e02d      	b.n	8004d78 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d115      	bne.n	8004d4e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d22:	4b2a      	ldr	r3, [pc, #168]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d24:	695a      	ldr	r2, [r3, #20]
 8004d26:	4b2b      	ldr	r3, [pc, #172]	; (8004dd4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6892      	ldr	r2, [r2, #8]
 8004d2e:	0211      	lsls	r1, r2, #8
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6912      	ldr	r2, [r2, #16]
 8004d34:	0852      	lsrs	r2, r2, #1
 8004d36:	3a01      	subs	r2, #1
 8004d38:	0552      	lsls	r2, r2, #21
 8004d3a:	4311      	orrs	r1, r2
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6852      	ldr	r2, [r2, #4]
 8004d40:	3a01      	subs	r2, #1
 8004d42:	0112      	lsls	r2, r2, #4
 8004d44:	430a      	orrs	r2, r1
 8004d46:	4921      	ldr	r1, [pc, #132]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	614b      	str	r3, [r1, #20]
 8004d4c:	e014      	b.n	8004d78 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d4e:	4b1f      	ldr	r3, [pc, #124]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d50:	695a      	ldr	r2, [r3, #20]
 8004d52:	4b21      	ldr	r3, [pc, #132]	; (8004dd8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6892      	ldr	r2, [r2, #8]
 8004d5a:	0211      	lsls	r1, r2, #8
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6952      	ldr	r2, [r2, #20]
 8004d60:	0852      	lsrs	r2, r2, #1
 8004d62:	3a01      	subs	r2, #1
 8004d64:	0652      	lsls	r2, r2, #25
 8004d66:	4311      	orrs	r1, r2
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6852      	ldr	r2, [r2, #4]
 8004d6c:	3a01      	subs	r2, #1
 8004d6e:	0112      	lsls	r2, r2, #4
 8004d70:	430a      	orrs	r2, r1
 8004d72:	4916      	ldr	r1, [pc, #88]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d78:	4b14      	ldr	r3, [pc, #80]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a13      	ldr	r2, [pc, #76]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d84:	f7fb ffe0 	bl	8000d48 <HAL_GetTick>
 8004d88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d8a:	e009      	b.n	8004da0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d8c:	f7fb ffdc 	bl	8000d48 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d902      	bls.n	8004da0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	73fb      	strb	r3, [r7, #15]
          break;
 8004d9e:	e005      	b.n	8004dac <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004da0:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d0ef      	beq.n	8004d8c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d106      	bne.n	8004dc0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004db2:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004db4:	695a      	ldr	r2, [r3, #20]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	4904      	ldr	r1, [pc, #16]	; (8004dcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	07ff800f 	.word	0x07ff800f
 8004dd4:	ff9f800f 	.word	0xff9f800f
 8004dd8:	f9ff800f 	.word	0xf9ff800f

08004ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e049      	b.n	8004e82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f001 fa30 	bl	8006268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3304      	adds	r3, #4
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	f000 fab6 	bl	800538c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d001      	beq.n	8004ea4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e04f      	b.n	8004f44 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a23      	ldr	r2, [pc, #140]	; (8004f50 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d01d      	beq.n	8004f02 <HAL_TIM_Base_Start_IT+0x76>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ece:	d018      	beq.n	8004f02 <HAL_TIM_Base_Start_IT+0x76>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1f      	ldr	r2, [pc, #124]	; (8004f54 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d013      	beq.n	8004f02 <HAL_TIM_Base_Start_IT+0x76>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1e      	ldr	r2, [pc, #120]	; (8004f58 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00e      	beq.n	8004f02 <HAL_TIM_Base_Start_IT+0x76>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1c      	ldr	r2, [pc, #112]	; (8004f5c <HAL_TIM_Base_Start_IT+0xd0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d009      	beq.n	8004f02 <HAL_TIM_Base_Start_IT+0x76>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1b      	ldr	r2, [pc, #108]	; (8004f60 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d004      	beq.n	8004f02 <HAL_TIM_Base_Start_IT+0x76>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a19      	ldr	r2, [pc, #100]	; (8004f64 <HAL_TIM_Base_Start_IT+0xd8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d115      	bne.n	8004f2e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	4b17      	ldr	r3, [pc, #92]	; (8004f68 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b06      	cmp	r3, #6
 8004f12:	d015      	beq.n	8004f40 <HAL_TIM_Base_Start_IT+0xb4>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1a:	d011      	beq.n	8004f40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2c:	e008      	b.n	8004f40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f042 0201 	orr.w	r2, r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	e000      	b.n	8004f42 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	40012c00 	.word	0x40012c00
 8004f54:	40000400 	.word	0x40000400
 8004f58:	40000800 	.word	0x40000800
 8004f5c:	40000c00 	.word	0x40000c00
 8004f60:	40013400 	.word	0x40013400
 8004f64:	40014000 	.word	0x40014000
 8004f68:	00010007 	.word	0x00010007

08004f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d122      	bne.n	8004fc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d11b      	bne.n	8004fc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f06f 0202 	mvn.w	r2, #2
 8004f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f9ce 	bl	8005350 <HAL_TIM_IC_CaptureCallback>
 8004fb4:	e005      	b.n	8004fc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f9c0 	bl	800533c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f9d1 	bl	8005364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f003 0304 	and.w	r3, r3, #4
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d122      	bne.n	800501c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d11b      	bne.n	800501c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f06f 0204 	mvn.w	r2, #4
 8004fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f9a4 	bl	8005350 <HAL_TIM_IC_CaptureCallback>
 8005008:	e005      	b.n	8005016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f996 	bl	800533c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f9a7 	bl	8005364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b08      	cmp	r3, #8
 8005028:	d122      	bne.n	8005070 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b08      	cmp	r3, #8
 8005036:	d11b      	bne.n	8005070 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0208 	mvn.w	r2, #8
 8005040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2204      	movs	r2, #4
 8005046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f97a 	bl	8005350 <HAL_TIM_IC_CaptureCallback>
 800505c:	e005      	b.n	800506a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f96c 	bl	800533c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f97d 	bl	8005364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b10      	cmp	r3, #16
 800507c:	d122      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	2b10      	cmp	r3, #16
 800508a:	d11b      	bne.n	80050c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f06f 0210 	mvn.w	r2, #16
 8005094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2208      	movs	r2, #8
 800509a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f950 	bl	8005350 <HAL_TIM_IC_CaptureCallback>
 80050b0:	e005      	b.n	80050be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f942 	bl	800533c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f953 	bl	8005364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d10e      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d107      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0201 	mvn.w	r2, #1
 80050e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fe5e 	bl	8005dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fa:	2b80      	cmp	r3, #128	; 0x80
 80050fc:	d10e      	bne.n	800511c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005108:	2b80      	cmp	r3, #128	; 0x80
 800510a:	d107      	bne.n	800511c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fafe 	bl	8005718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512a:	d10e      	bne.n	800514a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005136:	2b80      	cmp	r3, #128	; 0x80
 8005138:	d107      	bne.n	800514a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 faf1 	bl	800572c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b40      	cmp	r3, #64	; 0x40
 8005156:	d10e      	bne.n	8005176 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005162:	2b40      	cmp	r3, #64	; 0x40
 8005164:	d107      	bne.n	8005176 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800516e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f901 	bl	8005378 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b20      	cmp	r3, #32
 8005182:	d10e      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b20      	cmp	r3, #32
 8005190:	d107      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f06f 0220 	mvn.w	r2, #32
 800519a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fab1 	bl	8005704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051a2:	bf00      	nop
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b084      	sub	sp, #16
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d101      	bne.n	80051c6 <HAL_TIM_ConfigClockSource+0x1c>
 80051c2:	2302      	movs	r3, #2
 80051c4:	e0b6      	b.n	8005334 <HAL_TIM_ConfigClockSource+0x18a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2202      	movs	r2, #2
 80051d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051f0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005202:	d03e      	beq.n	8005282 <HAL_TIM_ConfigClockSource+0xd8>
 8005204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005208:	f200 8087 	bhi.w	800531a <HAL_TIM_ConfigClockSource+0x170>
 800520c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005210:	f000 8086 	beq.w	8005320 <HAL_TIM_ConfigClockSource+0x176>
 8005214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005218:	d87f      	bhi.n	800531a <HAL_TIM_ConfigClockSource+0x170>
 800521a:	2b70      	cmp	r3, #112	; 0x70
 800521c:	d01a      	beq.n	8005254 <HAL_TIM_ConfigClockSource+0xaa>
 800521e:	2b70      	cmp	r3, #112	; 0x70
 8005220:	d87b      	bhi.n	800531a <HAL_TIM_ConfigClockSource+0x170>
 8005222:	2b60      	cmp	r3, #96	; 0x60
 8005224:	d050      	beq.n	80052c8 <HAL_TIM_ConfigClockSource+0x11e>
 8005226:	2b60      	cmp	r3, #96	; 0x60
 8005228:	d877      	bhi.n	800531a <HAL_TIM_ConfigClockSource+0x170>
 800522a:	2b50      	cmp	r3, #80	; 0x50
 800522c:	d03c      	beq.n	80052a8 <HAL_TIM_ConfigClockSource+0xfe>
 800522e:	2b50      	cmp	r3, #80	; 0x50
 8005230:	d873      	bhi.n	800531a <HAL_TIM_ConfigClockSource+0x170>
 8005232:	2b40      	cmp	r3, #64	; 0x40
 8005234:	d058      	beq.n	80052e8 <HAL_TIM_ConfigClockSource+0x13e>
 8005236:	2b40      	cmp	r3, #64	; 0x40
 8005238:	d86f      	bhi.n	800531a <HAL_TIM_ConfigClockSource+0x170>
 800523a:	2b30      	cmp	r3, #48	; 0x30
 800523c:	d064      	beq.n	8005308 <HAL_TIM_ConfigClockSource+0x15e>
 800523e:	2b30      	cmp	r3, #48	; 0x30
 8005240:	d86b      	bhi.n	800531a <HAL_TIM_ConfigClockSource+0x170>
 8005242:	2b20      	cmp	r3, #32
 8005244:	d060      	beq.n	8005308 <HAL_TIM_ConfigClockSource+0x15e>
 8005246:	2b20      	cmp	r3, #32
 8005248:	d867      	bhi.n	800531a <HAL_TIM_ConfigClockSource+0x170>
 800524a:	2b00      	cmp	r3, #0
 800524c:	d05c      	beq.n	8005308 <HAL_TIM_ConfigClockSource+0x15e>
 800524e:	2b10      	cmp	r3, #16
 8005250:	d05a      	beq.n	8005308 <HAL_TIM_ConfigClockSource+0x15e>
 8005252:	e062      	b.n	800531a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	6899      	ldr	r1, [r3, #8]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f000 f9a6 	bl	80055b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005276:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	609a      	str	r2, [r3, #8]
      break;
 8005280:	e04f      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6899      	ldr	r1, [r3, #8]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f000 f98f 	bl	80055b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052a4:	609a      	str	r2, [r3, #8]
      break;
 80052a6:	e03c      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6818      	ldr	r0, [r3, #0]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	6859      	ldr	r1, [r3, #4]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	461a      	mov	r2, r3
 80052b6:	f000 f903 	bl	80054c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2150      	movs	r1, #80	; 0x50
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 f95c 	bl	800557e <TIM_ITRx_SetConfig>
      break;
 80052c6:	e02c      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6818      	ldr	r0, [r3, #0]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	6859      	ldr	r1, [r3, #4]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	461a      	mov	r2, r3
 80052d6:	f000 f922 	bl	800551e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2160      	movs	r1, #96	; 0x60
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 f94c 	bl	800557e <TIM_ITRx_SetConfig>
      break;
 80052e6:	e01c      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	6859      	ldr	r1, [r3, #4]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	461a      	mov	r2, r3
 80052f6:	f000 f8e3 	bl	80054c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2140      	movs	r1, #64	; 0x40
 8005300:	4618      	mov	r0, r3
 8005302:	f000 f93c 	bl	800557e <TIM_ITRx_SetConfig>
      break;
 8005306:	e00c      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4619      	mov	r1, r3
 8005312:	4610      	mov	r0, r2
 8005314:	f000 f933 	bl	800557e <TIM_ITRx_SetConfig>
      break;
 8005318:	e003      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	73fb      	strb	r3, [r7, #15]
      break;
 800531e:	e000      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005320:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005332:	7bfb      	ldrb	r3, [r7, #15]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a40      	ldr	r2, [pc, #256]	; (80054a0 <TIM_Base_SetConfig+0x114>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d013      	beq.n	80053cc <TIM_Base_SetConfig+0x40>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053aa:	d00f      	beq.n	80053cc <TIM_Base_SetConfig+0x40>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a3d      	ldr	r2, [pc, #244]	; (80054a4 <TIM_Base_SetConfig+0x118>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00b      	beq.n	80053cc <TIM_Base_SetConfig+0x40>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a3c      	ldr	r2, [pc, #240]	; (80054a8 <TIM_Base_SetConfig+0x11c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d007      	beq.n	80053cc <TIM_Base_SetConfig+0x40>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a3b      	ldr	r2, [pc, #236]	; (80054ac <TIM_Base_SetConfig+0x120>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d003      	beq.n	80053cc <TIM_Base_SetConfig+0x40>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a3a      	ldr	r2, [pc, #232]	; (80054b0 <TIM_Base_SetConfig+0x124>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d108      	bne.n	80053de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a2f      	ldr	r2, [pc, #188]	; (80054a0 <TIM_Base_SetConfig+0x114>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d01f      	beq.n	8005426 <TIM_Base_SetConfig+0x9a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ec:	d01b      	beq.n	8005426 <TIM_Base_SetConfig+0x9a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a2c      	ldr	r2, [pc, #176]	; (80054a4 <TIM_Base_SetConfig+0x118>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d017      	beq.n	8005426 <TIM_Base_SetConfig+0x9a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a2b      	ldr	r2, [pc, #172]	; (80054a8 <TIM_Base_SetConfig+0x11c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d013      	beq.n	8005426 <TIM_Base_SetConfig+0x9a>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a2a      	ldr	r2, [pc, #168]	; (80054ac <TIM_Base_SetConfig+0x120>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00f      	beq.n	8005426 <TIM_Base_SetConfig+0x9a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a29      	ldr	r2, [pc, #164]	; (80054b0 <TIM_Base_SetConfig+0x124>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00b      	beq.n	8005426 <TIM_Base_SetConfig+0x9a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a28      	ldr	r2, [pc, #160]	; (80054b4 <TIM_Base_SetConfig+0x128>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d007      	beq.n	8005426 <TIM_Base_SetConfig+0x9a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a27      	ldr	r2, [pc, #156]	; (80054b8 <TIM_Base_SetConfig+0x12c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d003      	beq.n	8005426 <TIM_Base_SetConfig+0x9a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a26      	ldr	r2, [pc, #152]	; (80054bc <TIM_Base_SetConfig+0x130>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d108      	bne.n	8005438 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800542c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	4313      	orrs	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a10      	ldr	r2, [pc, #64]	; (80054a0 <TIM_Base_SetConfig+0x114>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00f      	beq.n	8005484 <TIM_Base_SetConfig+0xf8>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a12      	ldr	r2, [pc, #72]	; (80054b0 <TIM_Base_SetConfig+0x124>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00b      	beq.n	8005484 <TIM_Base_SetConfig+0xf8>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a11      	ldr	r2, [pc, #68]	; (80054b4 <TIM_Base_SetConfig+0x128>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d007      	beq.n	8005484 <TIM_Base_SetConfig+0xf8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a10      	ldr	r2, [pc, #64]	; (80054b8 <TIM_Base_SetConfig+0x12c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_Base_SetConfig+0xf8>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a0f      	ldr	r2, [pc, #60]	; (80054bc <TIM_Base_SetConfig+0x130>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d103      	bne.n	800548c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	615a      	str	r2, [r3, #20]
}
 8005492:	bf00      	nop
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40012c00 	.word	0x40012c00
 80054a4:	40000400 	.word	0x40000400
 80054a8:	40000800 	.word	0x40000800
 80054ac:	40000c00 	.word	0x40000c00
 80054b0:	40013400 	.word	0x40013400
 80054b4:	40014000 	.word	0x40014000
 80054b8:	40014400 	.word	0x40014400
 80054bc:	40014800 	.word	0x40014800

080054c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	f023 0201 	bic.w	r2, r3, #1
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f023 030a 	bic.w	r3, r3, #10
 80054fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4313      	orrs	r3, r2
 8005504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	621a      	str	r2, [r3, #32]
}
 8005512:	bf00      	nop
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800551e:	b480      	push	{r7}
 8005520:	b087      	sub	sp, #28
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	f023 0210 	bic.w	r2, r3, #16
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005548:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	031b      	lsls	r3, r3, #12
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800555a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	011b      	lsls	r3, r3, #4
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	4313      	orrs	r3, r2
 8005564:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	621a      	str	r2, [r3, #32]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005594:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	f043 0307 	orr.w	r3, r3, #7
 80055a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	609a      	str	r2, [r3, #8]
}
 80055a8:	bf00      	nop
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	021a      	lsls	r2, r3, #8
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4313      	orrs	r3, r2
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	609a      	str	r2, [r3, #8]
}
 80055e8:	bf00      	nop
 80055ea:	371c      	adds	r7, #28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005608:	2302      	movs	r3, #2
 800560a:	e068      	b.n	80056de <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a2e      	ldr	r2, [pc, #184]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d004      	beq.n	8005640 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a2d      	ldr	r2, [pc, #180]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d108      	bne.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005646:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005658:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a1e      	ldr	r2, [pc, #120]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d01d      	beq.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567e:	d018      	beq.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a1b      	ldr	r2, [pc, #108]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d013      	beq.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a1a      	ldr	r2, [pc, #104]	; (80056f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00e      	beq.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a18      	ldr	r2, [pc, #96]	; (80056fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d009      	beq.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a13      	ldr	r2, [pc, #76]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d004      	beq.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a14      	ldr	r2, [pc, #80]	; (8005700 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d10c      	bne.n	80056cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	40012c00 	.word	0x40012c00
 80056f0:	40013400 	.word	0x40013400
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40000800 	.word	0x40000800
 80056fc:	40000c00 	.word	0x40000c00
 8005700:	40014000 	.word	0x40014000

08005704 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005748:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800574c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d013      	beq.n	8005780 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8005758:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800575c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8005760:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00b      	beq.n	8005780 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8005768:	e000      	b.n	800576c <ITM_SendChar+0x2c>
    {
      __NOP();
 800576a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800576c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0f9      	beq.n	800576a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8005776:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	b2d2      	uxtb	r2, r2
 800577e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8005780:	687b      	ldr	r3, [r7, #4]
}
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
	...

08005790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b088      	sub	sp, #32
 8005794:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005796:	f7fb fa6f 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800579a:	f000 f935 	bl	8005a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800579e:	f000 faa1 	bl	8005ce4 <MX_GPIO_Init>
  MX_DMA_Init();
 80057a2:	f000 fa75 	bl	8005c90 <MX_DMA_Init>
  MX_ADC1_Init();
 80057a6:	f000 f981 	bl	8005aac <MX_ADC1_Init>
  MX_DAC1_Init();
 80057aa:	f000 f9e5 	bl	8005b78 <MX_DAC1_Init>
  MX_TIM2_Init();
 80057ae:	f000 fa23 	bl	8005bf8 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // find vref
  configure_channels(0); 										//switch to voltage channel on ADC MUX
 80057b2:	2000      	movs	r0, #0
 80057b4:	f000 fc2c 	bl	8006010 <configure_channels>
  HAL_ADC_Start(&hadc1); 								   //activate peripheral and start conversion
 80057b8:	4883      	ldr	r0, [pc, #524]	; (80059c8 <main+0x238>)
 80057ba:	f7fb fe69 	bl	8001490 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);  	  //wait for completion
 80057be:	f04f 31ff 	mov.w	r1, #4294967295
 80057c2:	4881      	ldr	r0, [pc, #516]	; (80059c8 <main+0x238>)
 80057c4:	f7fb fefa 	bl	80015bc <HAL_ADC_PollForConversion>
  float raw_voltage = HAL_ADC_GetValue(&hadc1);		  //read sensor's digital value
 80057c8:	487f      	ldr	r0, [pc, #508]	; (80059c8 <main+0x238>)
 80057ca:	f7fb ff86 	bl	80016da <HAL_ADC_GetValue>
 80057ce:	ee07 0a90 	vmov	s15, r0
 80057d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d6:	edc7 7a04 	vstr	s15, [r7, #16]
  HAL_ADC_Stop(&hadc1);
 80057da:	487b      	ldr	r0, [pc, #492]	; (80059c8 <main+0x238>)
 80057dc:	f7fb febb 	bl	8001556 <HAL_ADC_Stop>
  vref = 3.0f * (*VREFINT)/raw_voltage;
 80057e0:	4b7a      	ldr	r3, [pc, #488]	; (80059cc <main+0x23c>)
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	ee07 3a90 	vmov	s15, r3
 80057e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057ec:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80057f0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80057f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80057f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057fc:	4b74      	ldr	r3, [pc, #464]	; (80059d0 <main+0x240>)
 80057fe:	edc3 7a00 	vstr	s15, [r3]

  // initialize variables
//  int frequency = 65;
//  int numSamples = 4*frequency;
//  double timestep = 1/frequency/numSamples*1000; // get the timestep in ms
  int nb = 8; // number of bits in data
 8005802:	2308      	movs	r3, #8
 8005804:	60fb      	str	r3, [r7, #12]

  // initialize DAC data
  sawtooth_data = 0;
 8005806:	4b73      	ldr	r3, [pc, #460]	; (80059d4 <main+0x244>)
 8005808:	2200      	movs	r2, #0
 800580a:	801a      	strh	r2, [r3, #0]
  triangle_data = 0;
 800580c:	4b72      	ldr	r3, [pc, #456]	; (80059d8 <main+0x248>)
 800580e:	2200      	movs	r2, #0
 8005810:	801a      	strh	r2, [r3, #0]
  globalIndex = 0;
 8005812:	4b72      	ldr	r3, [pc, #456]	; (80059dc <main+0x24c>)
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]
  secondsElapsed = 0;
 8005818:	4b71      	ldr	r3, [pc, #452]	; (80059e0 <main+0x250>)
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]
//  double sawtooth;
//  double triangle;
  double sin;
  sin_data = 0;
 800581e:	4b71      	ldr	r3, [pc, #452]	; (80059e4 <main+0x254>)
 8005820:	2200      	movs	r2, #0
 8005822:	801a      	strh	r2, [r3, #0]



  float rad = 0;
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	60bb      	str	r3, [r7, #8]


  //start DMA
 // printf("Starting while loop \n");

  selector = 0; //to select between sin waves
 800582a:	4b6f      	ldr	r3, [pc, #444]	; (80059e8 <main+0x258>)
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]

  //create the 1 kHz wave => 44 samples
  for (int y = 0; y<SIZE1K ; y++){
 8005830:	2300      	movs	r3, #0
 8005832:	61fb      	str	r3, [r7, #28]
 8005834:	e03c      	b.n	80058b0 <main+0x120>
	  rad = (2*M_PI/SIZE1K)*y;
 8005836:	69f8      	ldr	r0, [r7, #28]
 8005838:	f7fa fe8c 	bl	8000554 <__aeabi_i2d>
 800583c:	a35a      	add	r3, pc, #360	; (adr r3, 80059a8 <main+0x218>)
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	f7fa fef1 	bl	8000628 <__aeabi_dmul>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4610      	mov	r0, r2
 800584c:	4619      	mov	r1, r3
 800584e:	f7fb f9c3 	bl	8000bd8 <__aeabi_d2f>
 8005852:	4603      	mov	r3, r0
 8005854:	60bb      	str	r3, [r7, #8]
	  sin1kHz[y] = (arm_sin_f32(rad)+ 1)*4096/3.3; // +1 for positive and multiplication for amplitude
 8005856:	ed97 0a02 	vldr	s0, [r7, #8]
 800585a:	f000 fe55 	bl	8006508 <arm_sin_f32>
 800585e:	eef0 7a40 	vmov.f32	s15, s0
 8005862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005866:	ee77 7a87 	vadd.f32	s15, s15, s14
 800586a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80059ec <main+0x25c>
 800586e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005872:	ee17 0a90 	vmov	r0, s15
 8005876:	f7fa fe7f 	bl	8000578 <__aeabi_f2d>
 800587a:	a34d      	add	r3, pc, #308	; (adr r3, 80059b0 <main+0x220>)
 800587c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005880:	f7fa fffc 	bl	800087c <__aeabi_ddiv>
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	4610      	mov	r0, r2
 800588a:	4619      	mov	r1, r3
 800588c:	f7fb f97c 	bl	8000b88 <__aeabi_d2iz>
 8005890:	4602      	mov	r2, r0
 8005892:	4957      	ldr	r1, [pc, #348]	; (80059f0 <main+0x260>)
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  printf("%d", sin1kHz[y]);
 800589a:	4a55      	ldr	r2, [pc, #340]	; (80059f0 <main+0x260>)
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058a2:	4619      	mov	r1, r3
 80058a4:	4853      	ldr	r0, [pc, #332]	; (80059f4 <main+0x264>)
 80058a6:	f001 fb11 	bl	8006ecc <iprintf>
  for (int y = 0; y<SIZE1K ; y++){
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	3301      	adds	r3, #1
 80058ae:	61fb      	str	r3, [r7, #28]
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	2b2b      	cmp	r3, #43	; 0x2b
 80058b4:	ddbf      	ble.n	8005836 <main+0xa6>
  }

  for (int y = 0; y<SIZE15K ; y++){
 80058b6:	2300      	movs	r3, #0
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	e02e      	b.n	800591a <main+0x18a>
  	  rad = (2*M_PI/SIZE15K)*y;
 80058bc:	69b8      	ldr	r0, [r7, #24]
 80058be:	f7fa fe49 	bl	8000554 <__aeabi_i2d>
 80058c2:	a33d      	add	r3, pc, #244	; (adr r3, 80059b8 <main+0x228>)
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	f7fa feae 	bl	8000628 <__aeabi_dmul>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4610      	mov	r0, r2
 80058d2:	4619      	mov	r1, r3
 80058d4:	f7fb f980 	bl	8000bd8 <__aeabi_d2f>
 80058d8:	4603      	mov	r3, r0
 80058da:	60bb      	str	r3, [r7, #8]
  	  sin15kHz[y] = (arm_sin_f32(rad)+ 1)*4096/vref; // +1 for positive and multiplication for amplitude
 80058dc:	ed97 0a02 	vldr	s0, [r7, #8]
 80058e0:	f000 fe12 	bl	8006508 <arm_sin_f32>
 80058e4:	eef0 7a40 	vmov.f32	s15, s0
 80058e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058f0:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80059ec <main+0x25c>
 80058f4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80058f8:	4b35      	ldr	r3, [pc, #212]	; (80059d0 <main+0x240>)
 80058fa:	ed93 7a00 	vldr	s14, [r3]
 80058fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005906:	ee17 3a90 	vmov	r3, s15
 800590a:	b299      	uxth	r1, r3
 800590c:	4a3a      	ldr	r2, [pc, #232]	; (80059f8 <main+0x268>)
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int y = 0; y<SIZE15K ; y++){
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	3301      	adds	r3, #1
 8005918:	61bb      	str	r3, [r7, #24]
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	2b1d      	cmp	r3, #29
 800591e:	ddcd      	ble.n	80058bc <main+0x12c>
  }

  for (int y = 0; y<SIZE2K ; y++){
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	e02e      	b.n	8005984 <main+0x1f4>
  	  rad = (2*M_PI/SIZE2K)*y;
 8005926:	6978      	ldr	r0, [r7, #20]
 8005928:	f7fa fe14 	bl	8000554 <__aeabi_i2d>
 800592c:	a324      	add	r3, pc, #144	; (adr r3, 80059c0 <main+0x230>)
 800592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005932:	f7fa fe79 	bl	8000628 <__aeabi_dmul>
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	4610      	mov	r0, r2
 800593c:	4619      	mov	r1, r3
 800593e:	f7fb f94b 	bl	8000bd8 <__aeabi_d2f>
 8005942:	4603      	mov	r3, r0
 8005944:	60bb      	str	r3, [r7, #8]
  	  sin2kHz[y] = (arm_sin_f32(rad)+ 1)*4096/vref; // +1 for positive and multiplication for amplitude
 8005946:	ed97 0a02 	vldr	s0, [r7, #8]
 800594a:	f000 fddd 	bl	8006508 <arm_sin_f32>
 800594e:	eef0 7a40 	vmov.f32	s15, s0
 8005952:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005956:	ee77 7a87 	vadd.f32	s15, s15, s14
 800595a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80059ec <main+0x25c>
 800595e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8005962:	4b1b      	ldr	r3, [pc, #108]	; (80059d0 <main+0x240>)
 8005964:	ed93 7a00 	vldr	s14, [r3]
 8005968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800596c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005970:	ee17 3a90 	vmov	r3, s15
 8005974:	b299      	uxth	r1, r3
 8005976:	4a21      	ldr	r2, [pc, #132]	; (80059fc <main+0x26c>)
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int y = 0; y<SIZE2K ; y++){
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	3301      	adds	r3, #1
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2b15      	cmp	r3, #21
 8005988:	ddcd      	ble.n	8005926 <main+0x196>
  }

  int i = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	607b      	str	r3, [r7, #4]

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800598e:	2100      	movs	r1, #0
 8005990:	481b      	ldr	r0, [pc, #108]	; (8005a00 <main+0x270>)
 8005992:	f7fc fd80 	bl	8002496 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8005996:	2110      	movs	r1, #16
 8005998:	4819      	ldr	r0, [pc, #100]	; (8005a00 <main+0x270>)
 800599a:	f7fc fd7c 	bl	8002496 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800599e:	4819      	ldr	r0, [pc, #100]	; (8005a04 <main+0x274>)
 80059a0:	f7ff fa74 	bl	8004e8c <HAL_TIM_Base_Start_IT>

#ifdef DMA
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,(uint32_t*)sin1kHz, SIZE1K, DAC_ALIGN_12B_R);
#endif

  while (1)
 80059a4:	e7fe      	b.n	80059a4 <main+0x214>
 80059a6:	bf00      	nop
 80059a8:	6bd47de3 	.word	0x6bd47de3
 80059ac:	3fc24742 	.word	0x3fc24742
 80059b0:	66666666 	.word	0x66666666
 80059b4:	400a6666 	.word	0x400a6666
 80059b8:	f37bebd5 	.word	0xf37bebd5
 80059bc:	3fcacee9 	.word	0x3fcacee9
 80059c0:	6bd47de3 	.word	0x6bd47de3
 80059c4:	3fd24742 	.word	0x3fd24742
 80059c8:	200001fc 	.word	0x200001fc
 80059cc:	1fff75aa 	.word	0x1fff75aa
 80059d0:	20000324 	.word	0x20000324
 80059d4:	20000328 	.word	0x20000328
 80059d8:	2000032a 	.word	0x2000032a
 80059dc:	20000330 	.word	0x20000330
 80059e0:	20000334 	.word	0x20000334
 80059e4:	2000032c 	.word	0x2000032c
 80059e8:	20000450 	.word	0x20000450
 80059ec:	45800000 	.word	0x45800000
 80059f0:	20000338 	.word	0x20000338
 80059f4:	08009158 	.word	0x08009158
 80059f8:	200003e8 	.word	0x200003e8
 80059fc:	20000424 	.word	0x20000424
 8005a00:	20000264 	.word	0x20000264
 8005a04:	200002d8 	.word	0x200002d8

08005a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b096      	sub	sp, #88	; 0x58
 8005a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a0e:	f107 0314 	add.w	r3, r7, #20
 8005a12:	2244      	movs	r2, #68	; 0x44
 8005a14:	2100      	movs	r1, #0
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fde6 	bl	80065e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	605a      	str	r2, [r3, #4]
 8005a24:	609a      	str	r2, [r3, #8]
 8005a26:	60da      	str	r2, [r3, #12]
 8005a28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	f7fd fd6e 	bl	800350c <HAL_PWREx_ControlVoltageScaling>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8005a36:	f000 fb3b 	bl	80060b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005a3a:	2310      	movs	r3, #16
 8005a3c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005a46:	2360      	movs	r3, #96	; 0x60
 8005a48:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005a52:	2301      	movs	r3, #1
 8005a54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8005a56:	233c      	movs	r3, #60	; 0x3c
 8005a58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005a5e:	2302      	movs	r3, #2
 8005a60:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005a62:	2302      	movs	r3, #2
 8005a64:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a66:	f107 0314 	add.w	r3, r7, #20
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fd fdf2 	bl	8003654 <HAL_RCC_OscConfig>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8005a76:	f000 fb1b 	bl	80060b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a7a:	230f      	movs	r3, #15
 8005a7c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a82:	2300      	movs	r3, #0
 8005a84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005a8e:	463b      	mov	r3, r7
 8005a90:	2105      	movs	r1, #5
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fe f9f8 	bl	8003e88 <HAL_RCC_ClockConfig>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005a9e:	f000 fb07 	bl	80060b0 <Error_Handler>
  }
}
 8005aa2:	bf00      	nop
 8005aa4:	3758      	adds	r7, #88	; 0x58
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
	...

08005aac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005ab2:	463b      	mov	r3, r7
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	605a      	str	r2, [r3, #4]
 8005aba:	609a      	str	r2, [r3, #8]
 8005abc:	60da      	str	r2, [r3, #12]
 8005abe:	611a      	str	r2, [r3, #16]
 8005ac0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8005ac2:	4b2a      	ldr	r3, [pc, #168]	; (8005b6c <MX_ADC1_Init+0xc0>)
 8005ac4:	4a2a      	ldr	r2, [pc, #168]	; (8005b70 <MX_ADC1_Init+0xc4>)
 8005ac6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005ac8:	4b28      	ldr	r3, [pc, #160]	; (8005b6c <MX_ADC1_Init+0xc0>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005ace:	4b27      	ldr	r3, [pc, #156]	; (8005b6c <MX_ADC1_Init+0xc0>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005ad4:	4b25      	ldr	r3, [pc, #148]	; (8005b6c <MX_ADC1_Init+0xc0>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005ada:	4b24      	ldr	r3, [pc, #144]	; (8005b6c <MX_ADC1_Init+0xc0>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005ae0:	4b22      	ldr	r3, [pc, #136]	; (8005b6c <MX_ADC1_Init+0xc0>)
 8005ae2:	2204      	movs	r2, #4
 8005ae4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005ae6:	4b21      	ldr	r3, [pc, #132]	; (8005b6c <MX_ADC1_Init+0xc0>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005aec:	4b1f      	ldr	r3, [pc, #124]	; (8005b6c <MX_ADC1_Init+0xc0>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8005af2:	4b1e      	ldr	r3, [pc, #120]	; (8005b6c <MX_ADC1_Init+0xc0>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005af8:	4b1c      	ldr	r3, [pc, #112]	; (8005b6c <MX_ADC1_Init+0xc0>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005b00:	4b1a      	ldr	r3, [pc, #104]	; (8005b6c <MX_ADC1_Init+0xc0>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005b06:	4b19      	ldr	r3, [pc, #100]	; (8005b6c <MX_ADC1_Init+0xc0>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005b0c:	4b17      	ldr	r3, [pc, #92]	; (8005b6c <MX_ADC1_Init+0xc0>)
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005b14:	4b15      	ldr	r3, [pc, #84]	; (8005b6c <MX_ADC1_Init+0xc0>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8005b1a:	4b14      	ldr	r3, [pc, #80]	; (8005b6c <MX_ADC1_Init+0xc0>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8005b22:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <MX_ADC1_Init+0xc0>)
 8005b24:	2204      	movs	r2, #4
 8005b26:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005b28:	4810      	ldr	r0, [pc, #64]	; (8005b6c <MX_ADC1_Init+0xc0>)
 8005b2a:	f7fb fb65 	bl	80011f8 <HAL_ADC_Init>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8005b34:	f000 fabc 	bl	80060b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8005b38:	4b0e      	ldr	r3, [pc, #56]	; (8005b74 <MX_ADC1_Init+0xc8>)
 8005b3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005b3c:	2306      	movs	r3, #6
 8005b3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8005b40:	2307      	movs	r3, #7
 8005b42:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005b44:	237f      	movs	r3, #127	; 0x7f
 8005b46:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005b48:	2304      	movs	r3, #4
 8005b4a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b50:	463b      	mov	r3, r7
 8005b52:	4619      	mov	r1, r3
 8005b54:	4805      	ldr	r0, [pc, #20]	; (8005b6c <MX_ADC1_Init+0xc0>)
 8005b56:	f7fb fdcd 	bl	80016f4 <HAL_ADC_ConfigChannel>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8005b60:	f000 faa6 	bl	80060b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005b64:	bf00      	nop
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	200001fc 	.word	0x200001fc
 8005b70:	50040000 	.word	0x50040000
 8005b74:	c7520000 	.word	0xc7520000

08005b78 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08a      	sub	sp, #40	; 0x28
 8005b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8005b7e:	463b      	mov	r3, r7
 8005b80:	2228      	movs	r2, #40	; 0x28
 8005b82:	2100      	movs	r1, #0
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fd2f 	bl	80065e8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8005b8a:	4b19      	ldr	r3, [pc, #100]	; (8005bf0 <MX_DAC1_Init+0x78>)
 8005b8c:	4a19      	ldr	r2, [pc, #100]	; (8005bf4 <MX_DAC1_Init+0x7c>)
 8005b8e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8005b90:	4817      	ldr	r0, [pc, #92]	; (8005bf0 <MX_DAC1_Init+0x78>)
 8005b92:	f7fc fc5e 	bl	8002452 <HAL_DAC_Init>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8005b9c:	f000 fa88 	bl	80060b0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005ba8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bac:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005bba:	463b      	mov	r3, r7
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	480b      	ldr	r0, [pc, #44]	; (8005bf0 <MX_DAC1_Init+0x78>)
 8005bc2:	f7fc fe0f 	bl	80027e4 <HAL_DAC_ConfigChannel>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8005bcc:	f000 fa70 	bl	80060b0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8005bd0:	463b      	mov	r3, r7
 8005bd2:	2210      	movs	r2, #16
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4806      	ldr	r0, [pc, #24]	; (8005bf0 <MX_DAC1_Init+0x78>)
 8005bd8:	f7fc fe04 	bl	80027e4 <HAL_DAC_ConfigChannel>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <MX_DAC1_Init+0x6e>
  {
    Error_Handler();
 8005be2:	f000 fa65 	bl	80060b0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8005be6:	bf00      	nop
 8005be8:	3728      	adds	r7, #40	; 0x28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000264 	.word	0x20000264
 8005bf4:	40007400 	.word	0x40007400

08005bf8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b088      	sub	sp, #32
 8005bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005bfe:	f107 0310 	add.w	r3, r7, #16
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	605a      	str	r2, [r3, #4]
 8005c08:	609a      	str	r2, [r3, #8]
 8005c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c0c:	1d3b      	adds	r3, r7, #4
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	605a      	str	r2, [r3, #4]
 8005c14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005c16:	4b1d      	ldr	r3, [pc, #116]	; (8005c8c <MX_TIM2_Init+0x94>)
 8005c18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 120;
 8005c1e:	4b1b      	ldr	r3, [pc, #108]	; (8005c8c <MX_TIM2_Init+0x94>)
 8005c20:	2278      	movs	r2, #120	; 0x78
 8005c22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c24:	4b19      	ldr	r3, [pc, #100]	; (8005c8c <MX_TIM2_Init+0x94>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 23;
 8005c2a:	4b18      	ldr	r3, [pc, #96]	; (8005c8c <MX_TIM2_Init+0x94>)
 8005c2c:	2217      	movs	r2, #23
 8005c2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c30:	4b16      	ldr	r3, [pc, #88]	; (8005c8c <MX_TIM2_Init+0x94>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c36:	4b15      	ldr	r3, [pc, #84]	; (8005c8c <MX_TIM2_Init+0x94>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005c3c:	4813      	ldr	r0, [pc, #76]	; (8005c8c <MX_TIM2_Init+0x94>)
 8005c3e:	f7ff f8cd 	bl	8004ddc <HAL_TIM_Base_Init>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005c48:	f000 fa32 	bl	80060b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005c52:	f107 0310 	add.w	r3, r7, #16
 8005c56:	4619      	mov	r1, r3
 8005c58:	480c      	ldr	r0, [pc, #48]	; (8005c8c <MX_TIM2_Init+0x94>)
 8005c5a:	f7ff faa6 	bl	80051aa <HAL_TIM_ConfigClockSource>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005c64:	f000 fa24 	bl	80060b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005c70:	1d3b      	adds	r3, r7, #4
 8005c72:	4619      	mov	r1, r3
 8005c74:	4805      	ldr	r0, [pc, #20]	; (8005c8c <MX_TIM2_Init+0x94>)
 8005c76:	f7ff fcbd 	bl	80055f4 <HAL_TIMEx_MasterConfigSynchronization>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005c80:	f000 fa16 	bl	80060b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005c84:	bf00      	nop
 8005c86:	3720      	adds	r7, #32
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	200002d8 	.word	0x200002d8

08005c90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8005c96:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <MX_DMA_Init+0x50>)
 8005c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c9a:	4a11      	ldr	r2, [pc, #68]	; (8005ce0 <MX_DMA_Init+0x50>)
 8005c9c:	f043 0304 	orr.w	r3, r3, #4
 8005ca0:	6493      	str	r3, [r2, #72]	; 0x48
 8005ca2:	4b0f      	ldr	r3, [pc, #60]	; (8005ce0 <MX_DMA_Init+0x50>)
 8005ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ca6:	f003 0304 	and.w	r3, r3, #4
 8005caa:	607b      	str	r3, [r7, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005cae:	4b0c      	ldr	r3, [pc, #48]	; (8005ce0 <MX_DMA_Init+0x50>)
 8005cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cb2:	4a0b      	ldr	r2, [pc, #44]	; (8005ce0 <MX_DMA_Init+0x50>)
 8005cb4:	f043 0301 	orr.w	r3, r3, #1
 8005cb8:	6493      	str	r3, [r2, #72]	; 0x48
 8005cba:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <MX_DMA_Init+0x50>)
 8005cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	603b      	str	r3, [r7, #0]
 8005cc4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2100      	movs	r1, #0
 8005cca:	200c      	movs	r0, #12
 8005ccc:	f7fc fb8b 	bl	80023e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8005cd0:	200c      	movs	r0, #12
 8005cd2:	f7fc fba4 	bl	800241e <HAL_NVIC_EnableIRQ>

}
 8005cd6:	bf00      	nop
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40021000 	.word	0x40021000

08005ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b088      	sub	sp, #32
 8005ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cea:	f107 030c 	add.w	r3, r7, #12
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	605a      	str	r2, [r3, #4]
 8005cf4:	609a      	str	r2, [r3, #8]
 8005cf6:	60da      	str	r2, [r3, #12]
 8005cf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cfa:	4b29      	ldr	r3, [pc, #164]	; (8005da0 <MX_GPIO_Init+0xbc>)
 8005cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfe:	4a28      	ldr	r2, [pc, #160]	; (8005da0 <MX_GPIO_Init+0xbc>)
 8005d00:	f043 0304 	orr.w	r3, r3, #4
 8005d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d06:	4b26      	ldr	r3, [pc, #152]	; (8005da0 <MX_GPIO_Init+0xbc>)
 8005d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d0a:	f003 0304 	and.w	r3, r3, #4
 8005d0e:	60bb      	str	r3, [r7, #8]
 8005d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d12:	4b23      	ldr	r3, [pc, #140]	; (8005da0 <MX_GPIO_Init+0xbc>)
 8005d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d16:	4a22      	ldr	r2, [pc, #136]	; (8005da0 <MX_GPIO_Init+0xbc>)
 8005d18:	f043 0301 	orr.w	r3, r3, #1
 8005d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d1e:	4b20      	ldr	r3, [pc, #128]	; (8005da0 <MX_GPIO_Init+0xbc>)
 8005d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	607b      	str	r3, [r7, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d2a:	4b1d      	ldr	r3, [pc, #116]	; (8005da0 <MX_GPIO_Init+0xbc>)
 8005d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d2e:	4a1c      	ldr	r2, [pc, #112]	; (8005da0 <MX_GPIO_Init+0xbc>)
 8005d30:	f043 0302 	orr.w	r3, r3, #2
 8005d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d36:	4b1a      	ldr	r3, [pc, #104]	; (8005da0 <MX_GPIO_Init+0xbc>)
 8005d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_RESET);
 8005d42:	2200      	movs	r2, #0
 8005d44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d48:	4816      	ldr	r0, [pc, #88]	; (8005da4 <MX_GPIO_Init+0xc0>)
 8005d4a:	f7fd fb75 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005d54:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005d58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d5e:	f107 030c 	add.w	r3, r7, #12
 8005d62:	4619      	mov	r1, r3
 8005d64:	4810      	ldr	r0, [pc, #64]	; (8005da8 <MX_GPIO_Init+0xc4>)
 8005d66:	f7fd f9d5 	bl	8003114 <HAL_GPIO_Init>

  /*Configure GPIO pin : myLed_Pin */
  GPIO_InitStruct.Pin = myLed_Pin;
 8005d6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d70:	2301      	movs	r3, #1
 8005d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(myLed_GPIO_Port, &GPIO_InitStruct);
 8005d7c:	f107 030c 	add.w	r3, r7, #12
 8005d80:	4619      	mov	r1, r3
 8005d82:	4808      	ldr	r0, [pc, #32]	; (8005da4 <MX_GPIO_Init+0xc0>)
 8005d84:	f7fd f9c6 	bl	8003114 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	2028      	movs	r0, #40	; 0x28
 8005d8e:	f7fc fb2a 	bl	80023e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005d92:	2028      	movs	r0, #40	; 0x28
 8005d94:	f7fc fb43 	bl	800241e <HAL_NVIC_EnableIRQ>

}
 8005d98:	bf00      	nop
 8005d9a:	3720      	adds	r7, #32
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	40021000 	.word	0x40021000
 8005da4:	48000400 	.word	0x48000400
 8005da8:	48000800 	.word	0x48000800

08005dac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

#ifdef TIMER
//call back function for timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dbc:	f040 8082 	bne.w	8005ec4 <HAL_TIM_PeriodElapsedCallback+0x118>
		printf("-------Timer call back function, writing to DAC ----- \n Index : %d, ",globalIndex%15);
 8005dc0:	4b42      	ldr	r3, [pc, #264]	; (8005ecc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	4b42      	ldr	r3, [pc, #264]	; (8005ed0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8005dc6:	fb83 1302 	smull	r1, r3, r3, r2
 8005dca:	4413      	add	r3, r2
 8005dcc:	10d9      	asrs	r1, r3, #3
 8005dce:	17d3      	asrs	r3, r2, #31
 8005dd0:	1ac9      	subs	r1, r1, r3
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	1a5b      	subs	r3, r3, r1
 8005dd8:	1ad1      	subs	r1, r2, r3
 8005dda:	483e      	ldr	r0, [pc, #248]	; (8005ed4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8005ddc:	f001 f876 	bl	8006ecc <iprintf>
		HAL_GPIO_TogglePin (myLed_GPIO_Port, myLed_Pin);
 8005de0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005de4:	483c      	ldr	r0, [pc, #240]	; (8005ed8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8005de6:	f7fd fb3f 	bl	8003468 <HAL_GPIO_TogglePin>


		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sin1kHz[globalIndex%44]);
 8005dea:	4b38      	ldr	r3, [pc, #224]	; (8005ecc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	4b3b      	ldr	r3, [pc, #236]	; (8005edc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005df0:	fb83 1302 	smull	r1, r3, r3, r2
 8005df4:	10d9      	asrs	r1, r3, #3
 8005df6:	17d3      	asrs	r3, r2, #31
 8005df8:	1acb      	subs	r3, r1, r3
 8005dfa:	212c      	movs	r1, #44	; 0x2c
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	4a37      	ldr	r2, [pc, #220]	; (8005ee0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8005e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	4835      	ldr	r0, [pc, #212]	; (8005ee4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005e0e:	f7fc fca6 	bl	800275e <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, sin2kHz[globalIndex%22]);
 8005e12:	4b2e      	ldr	r3, [pc, #184]	; (8005ecc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4b31      	ldr	r3, [pc, #196]	; (8005edc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005e18:	fb83 1302 	smull	r1, r3, r3, r2
 8005e1c:	1099      	asrs	r1, r3, #2
 8005e1e:	17d3      	asrs	r3, r2, #31
 8005e20:	1acb      	subs	r3, r1, r3
 8005e22:	2116      	movs	r1, #22
 8005e24:	fb01 f303 	mul.w	r3, r1, r3
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	4a2f      	ldr	r2, [pc, #188]	; (8005ee8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e30:	2200      	movs	r2, #0
 8005e32:	2110      	movs	r1, #16
 8005e34:	482b      	ldr	r0, [pc, #172]	; (8005ee4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005e36:	f7fc fc92 	bl	800275e <HAL_DAC_SetValue>
		printf("1k sine wave value :index: %d :  %d\n",globalIndex%44, sin1kHz[globalIndex%44]);
 8005e3a:	4b24      	ldr	r3, [pc, #144]	; (8005ecc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a27      	ldr	r2, [pc, #156]	; (8005edc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005e40:	fb82 1203 	smull	r1, r2, r2, r3
 8005e44:	10d1      	asrs	r1, r2, #3
 8005e46:	17da      	asrs	r2, r3, #31
 8005e48:	1a89      	subs	r1, r1, r2
 8005e4a:	222c      	movs	r2, #44	; 0x2c
 8005e4c:	fb01 f202 	mul.w	r2, r1, r2
 8005e50:	1a99      	subs	r1, r3, r2
 8005e52:	4b1e      	ldr	r3, [pc, #120]	; (8005ecc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	4b21      	ldr	r3, [pc, #132]	; (8005edc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005e58:	fb83 0302 	smull	r0, r3, r3, r2
 8005e5c:	10d8      	asrs	r0, r3, #3
 8005e5e:	17d3      	asrs	r3, r2, #31
 8005e60:	1ac3      	subs	r3, r0, r3
 8005e62:	202c      	movs	r0, #44	; 0x2c
 8005e64:	fb00 f303 	mul.w	r3, r0, r3
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8005e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e70:	461a      	mov	r2, r3
 8005e72:	481e      	ldr	r0, [pc, #120]	; (8005eec <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005e74:	f001 f82a 	bl	8006ecc <iprintf>
		printf("2k sine wave value :index: %d :  %d \n",globalIndex%22, sin1kHz[globalIndex%22]);
 8005e78:	4b14      	ldr	r3, [pc, #80]	; (8005ecc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a17      	ldr	r2, [pc, #92]	; (8005edc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005e7e:	fb82 1203 	smull	r1, r2, r2, r3
 8005e82:	1091      	asrs	r1, r2, #2
 8005e84:	17da      	asrs	r2, r3, #31
 8005e86:	1a89      	subs	r1, r1, r2
 8005e88:	2216      	movs	r2, #22
 8005e8a:	fb01 f202 	mul.w	r2, r1, r2
 8005e8e:	1a99      	subs	r1, r3, r2
 8005e90:	4b0e      	ldr	r3, [pc, #56]	; (8005ecc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	4b11      	ldr	r3, [pc, #68]	; (8005edc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005e96:	fb83 0302 	smull	r0, r3, r3, r2
 8005e9a:	1098      	asrs	r0, r3, #2
 8005e9c:	17d3      	asrs	r3, r2, #31
 8005e9e:	1ac3      	subs	r3, r0, r3
 8005ea0:	2016      	movs	r0, #22
 8005ea2:	fb00 f303 	mul.w	r3, r0, r3
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	4a0d      	ldr	r2, [pc, #52]	; (8005ee0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8005eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	480f      	ldr	r0, [pc, #60]	; (8005ef0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005eb2:	f001 f80b 	bl	8006ecc <iprintf>
//		printf("Seconds elapsed:%d \n", secondsElapsed);
//		printf("Triangle value : %d \n Sawtooth value : %d \n", triangle_data, sawtooth_data);
//		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, triangle_data);
//		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R,sawtooth_data);

		globalIndex++;
 8005eb6:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	4a03      	ldr	r2, [pc, #12]	; (8005ecc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005ebe:	6013      	str	r3, [r2, #0]

		HAL_IncTick();
 8005ec0:	f7fa ff2e 	bl	8000d20 <HAL_IncTick>

	}

}
 8005ec4:	bf00      	nop
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	20000330 	.word	0x20000330
 8005ed0:	88888889 	.word	0x88888889
 8005ed4:	0800915c 	.word	0x0800915c
 8005ed8:	48000400 	.word	0x48000400
 8005edc:	2e8ba2e9 	.word	0x2e8ba2e9
 8005ee0:	20000338 	.word	0x20000338
 8005ee4:	20000264 	.word	0x20000264
 8005ee8:	20000424 	.word	0x20000424
 8005eec:	080091a4 	.word	0x080091a4
 8005ef0:	080091cc 	.word	0x080091cc

08005ef4 <HAL_GPIO_EXTI_Callback>:
#endif


//callback function for interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	4603      	mov	r3, r0
 8005efc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) { //verify pin
 8005efe:	88fb      	ldrh	r3, [r7, #6]
 8005f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f04:	d168      	bne.n	8005fd8 <HAL_GPIO_EXTI_Callback+0xe4>
		printf("Button has been pressed, switching frequencies \n");
 8005f06:	4836      	ldr	r0, [pc, #216]	; (8005fe0 <HAL_GPIO_EXTI_Callback+0xec>)
 8005f08:	f001 f866 	bl	8006fd8 <puts>
		HAL_GPIO_TogglePin (myLed_GPIO_Port, myLed_Pin);
 8005f0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f10:	4834      	ldr	r0, [pc, #208]	; (8005fe4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8005f12:	f7fd faa9 	bl	8003468 <HAL_GPIO_TogglePin>
		if (globalIndex == 0){
 8005f16:	4b34      	ldr	r3, [pc, #208]	; (8005fe8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d104      	bne.n	8005f28 <HAL_GPIO_EXTI_Callback+0x34>
			selector++;
 8005f1e:	4b33      	ldr	r3, [pc, #204]	; (8005fec <HAL_GPIO_EXTI_Callback+0xf8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3301      	adds	r3, #1
 8005f24:	4a31      	ldr	r2, [pc, #196]	; (8005fec <HAL_GPIO_EXTI_Callback+0xf8>)
 8005f26:	6013      	str	r3, [r2, #0]
		}
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8005f28:	2100      	movs	r1, #0
 8005f2a:	4831      	ldr	r0, [pc, #196]	; (8005ff0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8005f2c:	f7fc fbd2 	bl	80026d4 <HAL_DAC_Stop_DMA>
		// stop dma
		if (selector%3 == 0){
 8005f30:	4b2e      	ldr	r3, [pc, #184]	; (8005fec <HAL_GPIO_EXTI_Callback+0xf8>)
 8005f32:	6819      	ldr	r1, [r3, #0]
 8005f34:	4b2f      	ldr	r3, [pc, #188]	; (8005ff4 <HAL_GPIO_EXTI_Callback+0x100>)
 8005f36:	fb83 3201 	smull	r3, r2, r3, r1
 8005f3a:	17cb      	asrs	r3, r1, #31
 8005f3c:	1ad2      	subs	r2, r2, r3
 8005f3e:	4613      	mov	r3, r2
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	4413      	add	r3, r2
 8005f44:	1aca      	subs	r2, r1, r3
 8005f46:	2a00      	cmp	r2, #0
 8005f48:	d10b      	bne.n	8005f62 <HAL_GPIO_EXTI_Callback+0x6e>
			printf("Switching to 1kH wave\n");
 8005f4a:	482b      	ldr	r0, [pc, #172]	; (8005ff8 <HAL_GPIO_EXTI_Callback+0x104>)
 8005f4c:	f001 f844 	bl	8006fd8 <puts>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,(uint32_t*)sin1kHz, SIZE1K, DAC_ALIGN_12B_R);
 8005f50:	2300      	movs	r3, #0
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	232c      	movs	r3, #44	; 0x2c
 8005f56:	4a29      	ldr	r2, [pc, #164]	; (8005ffc <HAL_GPIO_EXTI_Callback+0x108>)
 8005f58:	2100      	movs	r1, #0
 8005f5a:	4825      	ldr	r0, [pc, #148]	; (8005ff0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8005f5c:	f7fc faee 	bl	800253c <HAL_DAC_Start_DMA>
 8005f60:	e030      	b.n	8005fc4 <HAL_GPIO_EXTI_Callback+0xd0>
		}else if (selector%3 == 1){
 8005f62:	4b22      	ldr	r3, [pc, #136]	; (8005fec <HAL_GPIO_EXTI_Callback+0xf8>)
 8005f64:	6819      	ldr	r1, [r3, #0]
 8005f66:	4b23      	ldr	r3, [pc, #140]	; (8005ff4 <HAL_GPIO_EXTI_Callback+0x100>)
 8005f68:	fb83 3201 	smull	r3, r2, r3, r1
 8005f6c:	17cb      	asrs	r3, r1, #31
 8005f6e:	1ad2      	subs	r2, r2, r3
 8005f70:	4613      	mov	r3, r2
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	4413      	add	r3, r2
 8005f76:	1aca      	subs	r2, r1, r3
 8005f78:	2a01      	cmp	r2, #1
 8005f7a:	d10b      	bne.n	8005f94 <HAL_GPIO_EXTI_Callback+0xa0>
			printf("Switching to 1.5kH wave\n");
 8005f7c:	4820      	ldr	r0, [pc, #128]	; (8006000 <HAL_GPIO_EXTI_Callback+0x10c>)
 8005f7e:	f001 f82b 	bl	8006fd8 <puts>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,(uint32_t*)sin15kHz, SIZE15K, DAC_ALIGN_12B_R);
 8005f82:	2300      	movs	r3, #0
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	231e      	movs	r3, #30
 8005f88:	4a1e      	ldr	r2, [pc, #120]	; (8006004 <HAL_GPIO_EXTI_Callback+0x110>)
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	4818      	ldr	r0, [pc, #96]	; (8005ff0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8005f8e:	f7fc fad5 	bl	800253c <HAL_DAC_Start_DMA>
 8005f92:	e017      	b.n	8005fc4 <HAL_GPIO_EXTI_Callback+0xd0>
		}else if (selector%3 == 2){
 8005f94:	4b15      	ldr	r3, [pc, #84]	; (8005fec <HAL_GPIO_EXTI_Callback+0xf8>)
 8005f96:	6819      	ldr	r1, [r3, #0]
 8005f98:	4b16      	ldr	r3, [pc, #88]	; (8005ff4 <HAL_GPIO_EXTI_Callback+0x100>)
 8005f9a:	fb83 3201 	smull	r3, r2, r3, r1
 8005f9e:	17cb      	asrs	r3, r1, #31
 8005fa0:	1ad2      	subs	r2, r2, r3
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	005b      	lsls	r3, r3, #1
 8005fa6:	4413      	add	r3, r2
 8005fa8:	1aca      	subs	r2, r1, r3
 8005faa:	2a02      	cmp	r2, #2
 8005fac:	d10a      	bne.n	8005fc4 <HAL_GPIO_EXTI_Callback+0xd0>
			printf("Switching to 2kH wave\n");
 8005fae:	4816      	ldr	r0, [pc, #88]	; (8006008 <HAL_GPIO_EXTI_Callback+0x114>)
 8005fb0:	f001 f812 	bl	8006fd8 <puts>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,(uint32_t*)sin2kHz, SIZE2K, DAC_ALIGN_12B_R);
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	2316      	movs	r3, #22
 8005fba:	4a14      	ldr	r2, [pc, #80]	; (800600c <HAL_GPIO_EXTI_Callback+0x118>)
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	480c      	ldr	r0, [pc, #48]	; (8005ff0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8005fc0:	f7fc fabc 	bl	800253c <HAL_DAC_Start_DMA>
		}
		globalIndex++;
 8005fc4:	4b08      	ldr	r3, [pc, #32]	; (8005fe8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	4a07      	ldr	r2, [pc, #28]	; (8005fe8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8005fcc:	6013      	str	r3, [r2, #0]
		selector++;
 8005fce:	4b07      	ldr	r3, [pc, #28]	; (8005fec <HAL_GPIO_EXTI_Callback+0xf8>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	4a05      	ldr	r2, [pc, #20]	; (8005fec <HAL_GPIO_EXTI_Callback+0xf8>)
 8005fd6:	6013      	str	r3, [r2, #0]
	}
}
 8005fd8:	bf00      	nop
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	080091f4 	.word	0x080091f4
 8005fe4:	48000400 	.word	0x48000400
 8005fe8:	20000330 	.word	0x20000330
 8005fec:	20000450 	.word	0x20000450
 8005ff0:	20000264 	.word	0x20000264
 8005ff4:	55555556 	.word	0x55555556
 8005ff8:	08009224 	.word	0x08009224
 8005ffc:	20000338 	.word	0x20000338
 8006000:	0800923c 	.word	0x0800923c
 8006004:	200003e8 	.word	0x200003e8
 8006008:	08009254 	.word	0x08009254
 800600c:	20000424 	.word	0x20000424

08006010 <configure_channels>:

//configure channels
//0 for Vref and 1 for temp
void configure_channels(int i){
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]

	ADC_ChannelConfTypeDef sConfig = {0};
 8006018:	f107 0308 	add.w	r3, r7, #8
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	605a      	str	r2, [r3, #4]
 8006022:	609a      	str	r2, [r3, #8]
 8006024:	60da      	str	r2, [r3, #12]
 8006026:	611a      	str	r2, [r3, #16]
 8006028:	615a      	str	r2, [r3, #20]
	if (i == 0){
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d102      	bne.n	8006036 <configure_channels+0x26>
		sConfig.Channel = ADC_CHANNEL_VREFINT;
 8006030:	4b0e      	ldr	r3, [pc, #56]	; (800606c <configure_channels+0x5c>)
 8006032:	60bb      	str	r3, [r7, #8]
 8006034:	e001      	b.n	800603a <configure_channels+0x2a>
	}else{
		sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8006036:	4b0e      	ldr	r3, [pc, #56]	; (8006070 <configure_channels+0x60>)
 8006038:	60bb      	str	r3, [r7, #8]
	}
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800603a:	2306      	movs	r3, #6
 800603c:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800603e:	2307      	movs	r3, #7
 8006040:	613b      	str	r3, [r7, #16]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006042:	237f      	movs	r3, #127	; 0x7f
 8006044:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006046:	2304      	movs	r3, #4
 8006048:	61bb      	str	r3, [r7, #24]
	sConfig.Offset = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	61fb      	str	r3, [r7, #28]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800604e:	f107 0308 	add.w	r3, r7, #8
 8006052:	4619      	mov	r1, r3
 8006054:	4807      	ldr	r0, [pc, #28]	; (8006074 <configure_channels+0x64>)
 8006056:	f7fb fb4d 	bl	80016f4 <HAL_ADC_ConfigChannel>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <configure_channels+0x54>
	{
	Error_Handler();
 8006060:	f000 f826 	bl	80060b0 <Error_Handler>
	}

}
 8006064:	bf00      	nop
 8006066:	3720      	adds	r7, #32
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	80000001 	.word	0x80000001
 8006070:	c7520000 	.word	0xc7520000
 8006074:	200001fc 	.word	0x200001fc

08006078 <_write>:

//function for printing to console (swb port 0)
int _write(int file, char *ptr, int len)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006084:	2300      	movs	r3, #0
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	e009      	b.n	800609e <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	1c5a      	adds	r2, r3, #1
 800608e:	60ba      	str	r2, [r7, #8]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff fb54 	bl	8005740 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	3301      	adds	r3, #1
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	dbf1      	blt.n	800608a <_write+0x12>
  }
  return len;
 80060a6:	687b      	ldr	r3, [r7, #4]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80060b4:	b672      	cpsid	i
}
 80060b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80060b8:	e7fe      	b.n	80060b8 <Error_Handler+0x8>
	...

080060bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060c2:	4b0f      	ldr	r3, [pc, #60]	; (8006100 <HAL_MspInit+0x44>)
 80060c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c6:	4a0e      	ldr	r2, [pc, #56]	; (8006100 <HAL_MspInit+0x44>)
 80060c8:	f043 0301 	orr.w	r3, r3, #1
 80060cc:	6613      	str	r3, [r2, #96]	; 0x60
 80060ce:	4b0c      	ldr	r3, [pc, #48]	; (8006100 <HAL_MspInit+0x44>)
 80060d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	607b      	str	r3, [r7, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80060da:	4b09      	ldr	r3, [pc, #36]	; (8006100 <HAL_MspInit+0x44>)
 80060dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060de:	4a08      	ldr	r2, [pc, #32]	; (8006100 <HAL_MspInit+0x44>)
 80060e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e4:	6593      	str	r3, [r2, #88]	; 0x58
 80060e6:	4b06      	ldr	r3, [pc, #24]	; (8006100 <HAL_MspInit+0x44>)
 80060e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ee:	603b      	str	r3, [r7, #0]
 80060f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	40021000 	.word	0x40021000

08006104 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b0a8      	sub	sp, #160	; 0xa0
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800610c:	f107 030c 	add.w	r3, r7, #12
 8006110:	2294      	movs	r2, #148	; 0x94
 8006112:	2100      	movs	r1, #0
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fa67 	bl	80065e8 <memset>
  if(hadc->Instance==ADC1)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a19      	ldr	r2, [pc, #100]	; (8006184 <HAL_ADC_MspInit+0x80>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d12b      	bne.n	800617c <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006124:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006128:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800612a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800612e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8006132:	2301      	movs	r3, #1
 8006134:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8006136:	2301      	movs	r3, #1
 8006138:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800613a:	2310      	movs	r3, #16
 800613c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800613e:	2302      	movs	r3, #2
 8006140:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8006142:	2302      	movs	r3, #2
 8006144:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8006146:	2302      	movs	r3, #2
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800614a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800614e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006150:	f107 030c 	add.w	r3, r7, #12
 8006154:	4618      	mov	r0, r3
 8006156:	f7fe f929 	bl	80043ac <HAL_RCCEx_PeriphCLKConfig>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8006160:	f7ff ffa6 	bl	80060b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8006164:	4b08      	ldr	r3, [pc, #32]	; (8006188 <HAL_ADC_MspInit+0x84>)
 8006166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006168:	4a07      	ldr	r2, [pc, #28]	; (8006188 <HAL_ADC_MspInit+0x84>)
 800616a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800616e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006170:	4b05      	ldr	r3, [pc, #20]	; (8006188 <HAL_ADC_MspInit+0x84>)
 8006172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006174:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006178:	60bb      	str	r3, [r7, #8]
 800617a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800617c:	bf00      	nop
 800617e:	37a0      	adds	r7, #160	; 0xa0
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	50040000 	.word	0x50040000
 8006188:	40021000 	.word	0x40021000

0800618c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08a      	sub	sp, #40	; 0x28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006194:	f107 0314 	add.w	r3, r7, #20
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	605a      	str	r2, [r3, #4]
 800619e:	609a      	str	r2, [r3, #8]
 80061a0:	60da      	str	r2, [r3, #12]
 80061a2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a2b      	ldr	r2, [pc, #172]	; (8006258 <HAL_DAC_MspInit+0xcc>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d14f      	bne.n	800624e <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80061ae:	4b2b      	ldr	r3, [pc, #172]	; (800625c <HAL_DAC_MspInit+0xd0>)
 80061b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b2:	4a2a      	ldr	r2, [pc, #168]	; (800625c <HAL_DAC_MspInit+0xd0>)
 80061b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061b8:	6593      	str	r3, [r2, #88]	; 0x58
 80061ba:	4b28      	ldr	r3, [pc, #160]	; (800625c <HAL_DAC_MspInit+0xd0>)
 80061bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061c2:	613b      	str	r3, [r7, #16]
 80061c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061c6:	4b25      	ldr	r3, [pc, #148]	; (800625c <HAL_DAC_MspInit+0xd0>)
 80061c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ca:	4a24      	ldr	r2, [pc, #144]	; (800625c <HAL_DAC_MspInit+0xd0>)
 80061cc:	f043 0301 	orr.w	r3, r3, #1
 80061d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061d2:	4b22      	ldr	r3, [pc, #136]	; (800625c <HAL_DAC_MspInit+0xd0>)
 80061d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80061de:	2330      	movs	r3, #48	; 0x30
 80061e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80061e2:	2303      	movs	r3, #3
 80061e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061ea:	f107 0314 	add.w	r3, r7, #20
 80061ee:	4619      	mov	r1, r3
 80061f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061f4:	f7fc ff8e 	bl	8003114 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80061f8:	4b19      	ldr	r3, [pc, #100]	; (8006260 <HAL_DAC_MspInit+0xd4>)
 80061fa:	4a1a      	ldr	r2, [pc, #104]	; (8006264 <HAL_DAC_MspInit+0xd8>)
 80061fc:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 80061fe:	4b18      	ldr	r3, [pc, #96]	; (8006260 <HAL_DAC_MspInit+0xd4>)
 8006200:	2206      	movs	r2, #6
 8006202:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006204:	4b16      	ldr	r3, [pc, #88]	; (8006260 <HAL_DAC_MspInit+0xd4>)
 8006206:	2210      	movs	r2, #16
 8006208:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800620a:	4b15      	ldr	r3, [pc, #84]	; (8006260 <HAL_DAC_MspInit+0xd4>)
 800620c:	2200      	movs	r2, #0
 800620e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006210:	4b13      	ldr	r3, [pc, #76]	; (8006260 <HAL_DAC_MspInit+0xd4>)
 8006212:	2280      	movs	r2, #128	; 0x80
 8006214:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006216:	4b12      	ldr	r3, [pc, #72]	; (8006260 <HAL_DAC_MspInit+0xd4>)
 8006218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800621c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800621e:	4b10      	ldr	r3, [pc, #64]	; (8006260 <HAL_DAC_MspInit+0xd4>)
 8006220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006224:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8006226:	4b0e      	ldr	r3, [pc, #56]	; (8006260 <HAL_DAC_MspInit+0xd4>)
 8006228:	2220      	movs	r2, #32
 800622a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800622c:	4b0c      	ldr	r3, [pc, #48]	; (8006260 <HAL_DAC_MspInit+0xd4>)
 800622e:	2200      	movs	r2, #0
 8006230:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006232:	480b      	ldr	r0, [pc, #44]	; (8006260 <HAL_DAC_MspInit+0xd4>)
 8006234:	f7fc fca0 	bl	8002b78 <HAL_DMA_Init>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800623e:	f7ff ff37 	bl	80060b0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a06      	ldr	r2, [pc, #24]	; (8006260 <HAL_DAC_MspInit+0xd4>)
 8006246:	609a      	str	r2, [r3, #8]
 8006248:	4a05      	ldr	r2, [pc, #20]	; (8006260 <HAL_DAC_MspInit+0xd4>)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800624e:	bf00      	nop
 8006250:	3728      	adds	r7, #40	; 0x28
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	40007400 	.word	0x40007400
 800625c:	40021000 	.word	0x40021000
 8006260:	20000278 	.word	0x20000278
 8006264:	4002001c 	.word	0x4002001c

08006268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006278:	d113      	bne.n	80062a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800627a:	4b0c      	ldr	r3, [pc, #48]	; (80062ac <HAL_TIM_Base_MspInit+0x44>)
 800627c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800627e:	4a0b      	ldr	r2, [pc, #44]	; (80062ac <HAL_TIM_Base_MspInit+0x44>)
 8006280:	f043 0301 	orr.w	r3, r3, #1
 8006284:	6593      	str	r3, [r2, #88]	; 0x58
 8006286:	4b09      	ldr	r3, [pc, #36]	; (80062ac <HAL_TIM_Base_MspInit+0x44>)
 8006288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006292:	2200      	movs	r2, #0
 8006294:	2100      	movs	r1, #0
 8006296:	201c      	movs	r0, #28
 8006298:	f7fc f8a5 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800629c:	201c      	movs	r0, #28
 800629e:	f7fc f8be 	bl	800241e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80062a2:	bf00      	nop
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	40021000 	.word	0x40021000

080062b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80062b4:	e7fe      	b.n	80062b4 <NMI_Handler+0x4>

080062b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062b6:	b480      	push	{r7}
 80062b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80062ba:	e7fe      	b.n	80062ba <HardFault_Handler+0x4>

080062bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80062bc:	b480      	push	{r7}
 80062be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80062c0:	e7fe      	b.n	80062c0 <MemManage_Handler+0x4>

080062c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80062c2:	b480      	push	{r7}
 80062c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80062c6:	e7fe      	b.n	80062c6 <BusFault_Handler+0x4>

080062c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80062c8:	b480      	push	{r7}
 80062ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80062cc:	e7fe      	b.n	80062cc <UsageFault_Handler+0x4>

080062ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80062ce:	b480      	push	{r7}
 80062d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80062d2:	bf00      	nop
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80062e0:	bf00      	nop
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80062ea:	b480      	push	{r7}
 80062ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80062ee:	bf00      	nop
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80062fc:	f7fa fd10 	bl	8000d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006300:	bf00      	nop
 8006302:	bd80      	pop	{r7, pc}

08006304 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8006308:	4802      	ldr	r0, [pc, #8]	; (8006314 <DMA1_Channel2_IRQHandler+0x10>)
 800630a:	f7fc fdb4 	bl	8002e76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800630e:	bf00      	nop
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	20000278 	.word	0x20000278

08006318 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800631c:	4802      	ldr	r0, [pc, #8]	; (8006328 <TIM2_IRQHandler+0x10>)
 800631e:	f7fe fe25 	bl	8004f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006322:	bf00      	nop
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	200002d8 	.word	0x200002d8

0800632c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006330:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006334:	f7fd f8b2 	bl	800349c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006338:	bf00      	nop
 800633a:	bd80      	pop	{r7, pc}

0800633c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
  return 1;
 8006340:	2301      	movs	r3, #1
}
 8006342:	4618      	mov	r0, r3
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <_kill>:

int _kill(int pid, int sig)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006356:	f000 f91d 	bl	8006594 <__errno>
 800635a:	4603      	mov	r3, r0
 800635c:	2216      	movs	r2, #22
 800635e:	601a      	str	r2, [r3, #0]
  return -1;
 8006360:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006364:	4618      	mov	r0, r3
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <_exit>:

void _exit (int status)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006374:	f04f 31ff 	mov.w	r1, #4294967295
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7ff ffe7 	bl	800634c <_kill>
  while (1) {}    /* Make sure we hang here */
 800637e:	e7fe      	b.n	800637e <_exit+0x12>

08006380 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800638c:	2300      	movs	r3, #0
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	e00a      	b.n	80063a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006392:	f3af 8000 	nop.w
 8006396:	4601      	mov	r1, r0
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	60ba      	str	r2, [r7, #8]
 800639e:	b2ca      	uxtb	r2, r1
 80063a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	3301      	adds	r3, #1
 80063a6:	617b      	str	r3, [r7, #20]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	dbf0      	blt.n	8006392 <_read+0x12>
  }

  return len;
 80063b0:	687b      	ldr	r3, [r7, #4]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <_close>:
  }
  return len;
}

int _close(int file)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80063c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80063e2:	605a      	str	r2, [r3, #4]
  return 0;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <_isatty>:

int _isatty(int file)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80063fa:	2301      	movs	r3, #1
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
	...

08006424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800642c:	4a14      	ldr	r2, [pc, #80]	; (8006480 <_sbrk+0x5c>)
 800642e:	4b15      	ldr	r3, [pc, #84]	; (8006484 <_sbrk+0x60>)
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006438:	4b13      	ldr	r3, [pc, #76]	; (8006488 <_sbrk+0x64>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d102      	bne.n	8006446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006440:	4b11      	ldr	r3, [pc, #68]	; (8006488 <_sbrk+0x64>)
 8006442:	4a12      	ldr	r2, [pc, #72]	; (800648c <_sbrk+0x68>)
 8006444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006446:	4b10      	ldr	r3, [pc, #64]	; (8006488 <_sbrk+0x64>)
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4413      	add	r3, r2
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	429a      	cmp	r2, r3
 8006452:	d207      	bcs.n	8006464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006454:	f000 f89e 	bl	8006594 <__errno>
 8006458:	4603      	mov	r3, r0
 800645a:	220c      	movs	r2, #12
 800645c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800645e:	f04f 33ff 	mov.w	r3, #4294967295
 8006462:	e009      	b.n	8006478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006464:	4b08      	ldr	r3, [pc, #32]	; (8006488 <_sbrk+0x64>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800646a:	4b07      	ldr	r3, [pc, #28]	; (8006488 <_sbrk+0x64>)
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4413      	add	r3, r2
 8006472:	4a05      	ldr	r2, [pc, #20]	; (8006488 <_sbrk+0x64>)
 8006474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006476:	68fb      	ldr	r3, [r7, #12]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3718      	adds	r7, #24
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	200a0000 	.word	0x200a0000
 8006484:	00000400 	.word	0x00000400
 8006488:	20000454 	.word	0x20000454
 800648c:	20000468 	.word	0x20000468

08006490 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006494:	4b06      	ldr	r3, [pc, #24]	; (80064b0 <SystemInit+0x20>)
 8006496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649a:	4a05      	ldr	r2, [pc, #20]	; (80064b0 <SystemInit+0x20>)
 800649c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80064a4:	bf00      	nop
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	e000ed00 	.word	0xe000ed00

080064b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80064b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80064ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80064b8:	f7ff ffea 	bl	8006490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80064bc:	480c      	ldr	r0, [pc, #48]	; (80064f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80064be:	490d      	ldr	r1, [pc, #52]	; (80064f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80064c0:	4a0d      	ldr	r2, [pc, #52]	; (80064f8 <LoopForever+0xe>)
  movs r3, #0
 80064c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80064c4:	e002      	b.n	80064cc <LoopCopyDataInit>

080064c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80064c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80064c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80064ca:	3304      	adds	r3, #4

080064cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80064cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80064ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80064d0:	d3f9      	bcc.n	80064c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80064d2:	4a0a      	ldr	r2, [pc, #40]	; (80064fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80064d4:	4c0a      	ldr	r4, [pc, #40]	; (8006500 <LoopForever+0x16>)
  movs r3, #0
 80064d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80064d8:	e001      	b.n	80064de <LoopFillZerobss>

080064da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80064da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80064dc:	3204      	adds	r2, #4

080064de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80064de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80064e0:	d3fb      	bcc.n	80064da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80064e2:	f000 f85d 	bl	80065a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80064e6:	f7ff f953 	bl	8005790 <main>

080064ea <LoopForever>:

LoopForever:
    b LoopForever
 80064ea:	e7fe      	b.n	80064ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80064ec:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80064f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80064f4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80064f8:	08009e94 	.word	0x08009e94
  ldr r2, =_sbss
 80064fc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8006500:	20000468 	.word	0x20000468

08006504 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006504:	e7fe      	b.n	8006504 <ADC1_IRQHandler>
	...

08006508 <arm_sin_f32>:
 8006508:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006588 <arm_sin_f32+0x80>
 800650c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006510:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006518:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800651c:	d504      	bpl.n	8006528 <arm_sin_f32+0x20>
 800651e:	ee17 3a90 	vmov	r3, s15
 8006522:	3b01      	subs	r3, #1
 8006524:	ee07 3a90 	vmov	s15, r3
 8006528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800652c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800658c <arm_sin_f32+0x84>
 8006530:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006534:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006538:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800653c:	ee17 3a90 	vmov	r3, s15
 8006540:	b29b      	uxth	r3, r3
 8006542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006546:	d21a      	bcs.n	800657e <arm_sin_f32+0x76>
 8006548:	ee07 3a90 	vmov	s15, r3
 800654c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006550:	1c59      	adds	r1, r3, #1
 8006552:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006556:	4a0e      	ldr	r2, [pc, #56]	; (8006590 <arm_sin_f32+0x88>)
 8006558:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800655c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006560:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006564:	ed93 7a00 	vldr	s14, [r3]
 8006568:	edd2 6a00 	vldr	s13, [r2]
 800656c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006570:	ee20 0a26 	vmul.f32	s0, s0, s13
 8006574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006578:	ee37 0a80 	vadd.f32	s0, s15, s0
 800657c:	4770      	bx	lr
 800657e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006582:	2101      	movs	r1, #1
 8006584:	2300      	movs	r3, #0
 8006586:	e7e6      	b.n	8006556 <arm_sin_f32+0x4e>
 8006588:	3e22f983 	.word	0x3e22f983
 800658c:	44000000 	.word	0x44000000
 8006590:	080092ac 	.word	0x080092ac

08006594 <__errno>:
 8006594:	4b01      	ldr	r3, [pc, #4]	; (800659c <__errno+0x8>)
 8006596:	6818      	ldr	r0, [r3, #0]
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	2000000c 	.word	0x2000000c

080065a0 <__libc_init_array>:
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	4d0d      	ldr	r5, [pc, #52]	; (80065d8 <__libc_init_array+0x38>)
 80065a4:	4c0d      	ldr	r4, [pc, #52]	; (80065dc <__libc_init_array+0x3c>)
 80065a6:	1b64      	subs	r4, r4, r5
 80065a8:	10a4      	asrs	r4, r4, #2
 80065aa:	2600      	movs	r6, #0
 80065ac:	42a6      	cmp	r6, r4
 80065ae:	d109      	bne.n	80065c4 <__libc_init_array+0x24>
 80065b0:	4d0b      	ldr	r5, [pc, #44]	; (80065e0 <__libc_init_array+0x40>)
 80065b2:	4c0c      	ldr	r4, [pc, #48]	; (80065e4 <__libc_init_array+0x44>)
 80065b4:	f002 fdc2 	bl	800913c <_init>
 80065b8:	1b64      	subs	r4, r4, r5
 80065ba:	10a4      	asrs	r4, r4, #2
 80065bc:	2600      	movs	r6, #0
 80065be:	42a6      	cmp	r6, r4
 80065c0:	d105      	bne.n	80065ce <__libc_init_array+0x2e>
 80065c2:	bd70      	pop	{r4, r5, r6, pc}
 80065c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c8:	4798      	blx	r3
 80065ca:	3601      	adds	r6, #1
 80065cc:	e7ee      	b.n	80065ac <__libc_init_array+0xc>
 80065ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d2:	4798      	blx	r3
 80065d4:	3601      	adds	r6, #1
 80065d6:	e7f2      	b.n	80065be <__libc_init_array+0x1e>
 80065d8:	08009e8c 	.word	0x08009e8c
 80065dc:	08009e8c 	.word	0x08009e8c
 80065e0:	08009e8c 	.word	0x08009e8c
 80065e4:	08009e90 	.word	0x08009e90

080065e8 <memset>:
 80065e8:	4402      	add	r2, r0
 80065ea:	4603      	mov	r3, r0
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d100      	bne.n	80065f2 <memset+0xa>
 80065f0:	4770      	bx	lr
 80065f2:	f803 1b01 	strb.w	r1, [r3], #1
 80065f6:	e7f9      	b.n	80065ec <memset+0x4>

080065f8 <__cvt>:
 80065f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065fc:	ec55 4b10 	vmov	r4, r5, d0
 8006600:	2d00      	cmp	r5, #0
 8006602:	460e      	mov	r6, r1
 8006604:	4619      	mov	r1, r3
 8006606:	462b      	mov	r3, r5
 8006608:	bfbb      	ittet	lt
 800660a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800660e:	461d      	movlt	r5, r3
 8006610:	2300      	movge	r3, #0
 8006612:	232d      	movlt	r3, #45	; 0x2d
 8006614:	700b      	strb	r3, [r1, #0]
 8006616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006618:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800661c:	4691      	mov	r9, r2
 800661e:	f023 0820 	bic.w	r8, r3, #32
 8006622:	bfbc      	itt	lt
 8006624:	4622      	movlt	r2, r4
 8006626:	4614      	movlt	r4, r2
 8006628:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800662c:	d005      	beq.n	800663a <__cvt+0x42>
 800662e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006632:	d100      	bne.n	8006636 <__cvt+0x3e>
 8006634:	3601      	adds	r6, #1
 8006636:	2102      	movs	r1, #2
 8006638:	e000      	b.n	800663c <__cvt+0x44>
 800663a:	2103      	movs	r1, #3
 800663c:	ab03      	add	r3, sp, #12
 800663e:	9301      	str	r3, [sp, #4]
 8006640:	ab02      	add	r3, sp, #8
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	ec45 4b10 	vmov	d0, r4, r5
 8006648:	4653      	mov	r3, sl
 800664a:	4632      	mov	r2, r6
 800664c:	f000 fe18 	bl	8007280 <_dtoa_r>
 8006650:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006654:	4607      	mov	r7, r0
 8006656:	d102      	bne.n	800665e <__cvt+0x66>
 8006658:	f019 0f01 	tst.w	r9, #1
 800665c:	d022      	beq.n	80066a4 <__cvt+0xac>
 800665e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006662:	eb07 0906 	add.w	r9, r7, r6
 8006666:	d110      	bne.n	800668a <__cvt+0x92>
 8006668:	783b      	ldrb	r3, [r7, #0]
 800666a:	2b30      	cmp	r3, #48	; 0x30
 800666c:	d10a      	bne.n	8006684 <__cvt+0x8c>
 800666e:	2200      	movs	r2, #0
 8006670:	2300      	movs	r3, #0
 8006672:	4620      	mov	r0, r4
 8006674:	4629      	mov	r1, r5
 8006676:	f7fa fa3f 	bl	8000af8 <__aeabi_dcmpeq>
 800667a:	b918      	cbnz	r0, 8006684 <__cvt+0x8c>
 800667c:	f1c6 0601 	rsb	r6, r6, #1
 8006680:	f8ca 6000 	str.w	r6, [sl]
 8006684:	f8da 3000 	ldr.w	r3, [sl]
 8006688:	4499      	add	r9, r3
 800668a:	2200      	movs	r2, #0
 800668c:	2300      	movs	r3, #0
 800668e:	4620      	mov	r0, r4
 8006690:	4629      	mov	r1, r5
 8006692:	f7fa fa31 	bl	8000af8 <__aeabi_dcmpeq>
 8006696:	b108      	cbz	r0, 800669c <__cvt+0xa4>
 8006698:	f8cd 900c 	str.w	r9, [sp, #12]
 800669c:	2230      	movs	r2, #48	; 0x30
 800669e:	9b03      	ldr	r3, [sp, #12]
 80066a0:	454b      	cmp	r3, r9
 80066a2:	d307      	bcc.n	80066b4 <__cvt+0xbc>
 80066a4:	9b03      	ldr	r3, [sp, #12]
 80066a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066a8:	1bdb      	subs	r3, r3, r7
 80066aa:	4638      	mov	r0, r7
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	b004      	add	sp, #16
 80066b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066b4:	1c59      	adds	r1, r3, #1
 80066b6:	9103      	str	r1, [sp, #12]
 80066b8:	701a      	strb	r2, [r3, #0]
 80066ba:	e7f0      	b.n	800669e <__cvt+0xa6>

080066bc <__exponent>:
 80066bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066be:	4603      	mov	r3, r0
 80066c0:	2900      	cmp	r1, #0
 80066c2:	bfb8      	it	lt
 80066c4:	4249      	neglt	r1, r1
 80066c6:	f803 2b02 	strb.w	r2, [r3], #2
 80066ca:	bfb4      	ite	lt
 80066cc:	222d      	movlt	r2, #45	; 0x2d
 80066ce:	222b      	movge	r2, #43	; 0x2b
 80066d0:	2909      	cmp	r1, #9
 80066d2:	7042      	strb	r2, [r0, #1]
 80066d4:	dd2a      	ble.n	800672c <__exponent+0x70>
 80066d6:	f10d 0407 	add.w	r4, sp, #7
 80066da:	46a4      	mov	ip, r4
 80066dc:	270a      	movs	r7, #10
 80066de:	46a6      	mov	lr, r4
 80066e0:	460a      	mov	r2, r1
 80066e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80066e6:	fb07 1516 	mls	r5, r7, r6, r1
 80066ea:	3530      	adds	r5, #48	; 0x30
 80066ec:	2a63      	cmp	r2, #99	; 0x63
 80066ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80066f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80066f6:	4631      	mov	r1, r6
 80066f8:	dcf1      	bgt.n	80066de <__exponent+0x22>
 80066fa:	3130      	adds	r1, #48	; 0x30
 80066fc:	f1ae 0502 	sub.w	r5, lr, #2
 8006700:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006704:	1c44      	adds	r4, r0, #1
 8006706:	4629      	mov	r1, r5
 8006708:	4561      	cmp	r1, ip
 800670a:	d30a      	bcc.n	8006722 <__exponent+0x66>
 800670c:	f10d 0209 	add.w	r2, sp, #9
 8006710:	eba2 020e 	sub.w	r2, r2, lr
 8006714:	4565      	cmp	r5, ip
 8006716:	bf88      	it	hi
 8006718:	2200      	movhi	r2, #0
 800671a:	4413      	add	r3, r2
 800671c:	1a18      	subs	r0, r3, r0
 800671e:	b003      	add	sp, #12
 8006720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006726:	f804 2f01 	strb.w	r2, [r4, #1]!
 800672a:	e7ed      	b.n	8006708 <__exponent+0x4c>
 800672c:	2330      	movs	r3, #48	; 0x30
 800672e:	3130      	adds	r1, #48	; 0x30
 8006730:	7083      	strb	r3, [r0, #2]
 8006732:	70c1      	strb	r1, [r0, #3]
 8006734:	1d03      	adds	r3, r0, #4
 8006736:	e7f1      	b.n	800671c <__exponent+0x60>

08006738 <_printf_float>:
 8006738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673c:	ed2d 8b02 	vpush	{d8}
 8006740:	b08d      	sub	sp, #52	; 0x34
 8006742:	460c      	mov	r4, r1
 8006744:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006748:	4616      	mov	r6, r2
 800674a:	461f      	mov	r7, r3
 800674c:	4605      	mov	r5, r0
 800674e:	f001 fd3d 	bl	80081cc <_localeconv_r>
 8006752:	f8d0 a000 	ldr.w	sl, [r0]
 8006756:	4650      	mov	r0, sl
 8006758:	f7f9 fd52 	bl	8000200 <strlen>
 800675c:	2300      	movs	r3, #0
 800675e:	930a      	str	r3, [sp, #40]	; 0x28
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	9305      	str	r3, [sp, #20]
 8006764:	f8d8 3000 	ldr.w	r3, [r8]
 8006768:	f894 b018 	ldrb.w	fp, [r4, #24]
 800676c:	3307      	adds	r3, #7
 800676e:	f023 0307 	bic.w	r3, r3, #7
 8006772:	f103 0208 	add.w	r2, r3, #8
 8006776:	f8c8 2000 	str.w	r2, [r8]
 800677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006782:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006786:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800678a:	9307      	str	r3, [sp, #28]
 800678c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006790:	ee08 0a10 	vmov	s16, r0
 8006794:	4b9f      	ldr	r3, [pc, #636]	; (8006a14 <_printf_float+0x2dc>)
 8006796:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800679a:	f04f 32ff 	mov.w	r2, #4294967295
 800679e:	f7fa f9dd 	bl	8000b5c <__aeabi_dcmpun>
 80067a2:	bb88      	cbnz	r0, 8006808 <_printf_float+0xd0>
 80067a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067a8:	4b9a      	ldr	r3, [pc, #616]	; (8006a14 <_printf_float+0x2dc>)
 80067aa:	f04f 32ff 	mov.w	r2, #4294967295
 80067ae:	f7fa f9b7 	bl	8000b20 <__aeabi_dcmple>
 80067b2:	bb48      	cbnz	r0, 8006808 <_printf_float+0xd0>
 80067b4:	2200      	movs	r2, #0
 80067b6:	2300      	movs	r3, #0
 80067b8:	4640      	mov	r0, r8
 80067ba:	4649      	mov	r1, r9
 80067bc:	f7fa f9a6 	bl	8000b0c <__aeabi_dcmplt>
 80067c0:	b110      	cbz	r0, 80067c8 <_printf_float+0x90>
 80067c2:	232d      	movs	r3, #45	; 0x2d
 80067c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067c8:	4b93      	ldr	r3, [pc, #588]	; (8006a18 <_printf_float+0x2e0>)
 80067ca:	4894      	ldr	r0, [pc, #592]	; (8006a1c <_printf_float+0x2e4>)
 80067cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80067d0:	bf94      	ite	ls
 80067d2:	4698      	movls	r8, r3
 80067d4:	4680      	movhi	r8, r0
 80067d6:	2303      	movs	r3, #3
 80067d8:	6123      	str	r3, [r4, #16]
 80067da:	9b05      	ldr	r3, [sp, #20]
 80067dc:	f023 0204 	bic.w	r2, r3, #4
 80067e0:	6022      	str	r2, [r4, #0]
 80067e2:	f04f 0900 	mov.w	r9, #0
 80067e6:	9700      	str	r7, [sp, #0]
 80067e8:	4633      	mov	r3, r6
 80067ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80067ec:	4621      	mov	r1, r4
 80067ee:	4628      	mov	r0, r5
 80067f0:	f000 f9d8 	bl	8006ba4 <_printf_common>
 80067f4:	3001      	adds	r0, #1
 80067f6:	f040 8090 	bne.w	800691a <_printf_float+0x1e2>
 80067fa:	f04f 30ff 	mov.w	r0, #4294967295
 80067fe:	b00d      	add	sp, #52	; 0x34
 8006800:	ecbd 8b02 	vpop	{d8}
 8006804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006808:	4642      	mov	r2, r8
 800680a:	464b      	mov	r3, r9
 800680c:	4640      	mov	r0, r8
 800680e:	4649      	mov	r1, r9
 8006810:	f7fa f9a4 	bl	8000b5c <__aeabi_dcmpun>
 8006814:	b140      	cbz	r0, 8006828 <_printf_float+0xf0>
 8006816:	464b      	mov	r3, r9
 8006818:	2b00      	cmp	r3, #0
 800681a:	bfbc      	itt	lt
 800681c:	232d      	movlt	r3, #45	; 0x2d
 800681e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006822:	487f      	ldr	r0, [pc, #508]	; (8006a20 <_printf_float+0x2e8>)
 8006824:	4b7f      	ldr	r3, [pc, #508]	; (8006a24 <_printf_float+0x2ec>)
 8006826:	e7d1      	b.n	80067cc <_printf_float+0x94>
 8006828:	6863      	ldr	r3, [r4, #4]
 800682a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800682e:	9206      	str	r2, [sp, #24]
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	d13f      	bne.n	80068b4 <_printf_float+0x17c>
 8006834:	2306      	movs	r3, #6
 8006836:	6063      	str	r3, [r4, #4]
 8006838:	9b05      	ldr	r3, [sp, #20]
 800683a:	6861      	ldr	r1, [r4, #4]
 800683c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006840:	2300      	movs	r3, #0
 8006842:	9303      	str	r3, [sp, #12]
 8006844:	ab0a      	add	r3, sp, #40	; 0x28
 8006846:	e9cd b301 	strd	fp, r3, [sp, #4]
 800684a:	ab09      	add	r3, sp, #36	; 0x24
 800684c:	ec49 8b10 	vmov	d0, r8, r9
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	6022      	str	r2, [r4, #0]
 8006854:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006858:	4628      	mov	r0, r5
 800685a:	f7ff fecd 	bl	80065f8 <__cvt>
 800685e:	9b06      	ldr	r3, [sp, #24]
 8006860:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006862:	2b47      	cmp	r3, #71	; 0x47
 8006864:	4680      	mov	r8, r0
 8006866:	d108      	bne.n	800687a <_printf_float+0x142>
 8006868:	1cc8      	adds	r0, r1, #3
 800686a:	db02      	blt.n	8006872 <_printf_float+0x13a>
 800686c:	6863      	ldr	r3, [r4, #4]
 800686e:	4299      	cmp	r1, r3
 8006870:	dd41      	ble.n	80068f6 <_printf_float+0x1be>
 8006872:	f1ab 0b02 	sub.w	fp, fp, #2
 8006876:	fa5f fb8b 	uxtb.w	fp, fp
 800687a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800687e:	d820      	bhi.n	80068c2 <_printf_float+0x18a>
 8006880:	3901      	subs	r1, #1
 8006882:	465a      	mov	r2, fp
 8006884:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006888:	9109      	str	r1, [sp, #36]	; 0x24
 800688a:	f7ff ff17 	bl	80066bc <__exponent>
 800688e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006890:	1813      	adds	r3, r2, r0
 8006892:	2a01      	cmp	r2, #1
 8006894:	4681      	mov	r9, r0
 8006896:	6123      	str	r3, [r4, #16]
 8006898:	dc02      	bgt.n	80068a0 <_printf_float+0x168>
 800689a:	6822      	ldr	r2, [r4, #0]
 800689c:	07d2      	lsls	r2, r2, #31
 800689e:	d501      	bpl.n	80068a4 <_printf_float+0x16c>
 80068a0:	3301      	adds	r3, #1
 80068a2:	6123      	str	r3, [r4, #16]
 80068a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d09c      	beq.n	80067e6 <_printf_float+0xae>
 80068ac:	232d      	movs	r3, #45	; 0x2d
 80068ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068b2:	e798      	b.n	80067e6 <_printf_float+0xae>
 80068b4:	9a06      	ldr	r2, [sp, #24]
 80068b6:	2a47      	cmp	r2, #71	; 0x47
 80068b8:	d1be      	bne.n	8006838 <_printf_float+0x100>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1bc      	bne.n	8006838 <_printf_float+0x100>
 80068be:	2301      	movs	r3, #1
 80068c0:	e7b9      	b.n	8006836 <_printf_float+0xfe>
 80068c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80068c6:	d118      	bne.n	80068fa <_printf_float+0x1c2>
 80068c8:	2900      	cmp	r1, #0
 80068ca:	6863      	ldr	r3, [r4, #4]
 80068cc:	dd0b      	ble.n	80068e6 <_printf_float+0x1ae>
 80068ce:	6121      	str	r1, [r4, #16]
 80068d0:	b913      	cbnz	r3, 80068d8 <_printf_float+0x1a0>
 80068d2:	6822      	ldr	r2, [r4, #0]
 80068d4:	07d0      	lsls	r0, r2, #31
 80068d6:	d502      	bpl.n	80068de <_printf_float+0x1a6>
 80068d8:	3301      	adds	r3, #1
 80068da:	440b      	add	r3, r1
 80068dc:	6123      	str	r3, [r4, #16]
 80068de:	65a1      	str	r1, [r4, #88]	; 0x58
 80068e0:	f04f 0900 	mov.w	r9, #0
 80068e4:	e7de      	b.n	80068a4 <_printf_float+0x16c>
 80068e6:	b913      	cbnz	r3, 80068ee <_printf_float+0x1b6>
 80068e8:	6822      	ldr	r2, [r4, #0]
 80068ea:	07d2      	lsls	r2, r2, #31
 80068ec:	d501      	bpl.n	80068f2 <_printf_float+0x1ba>
 80068ee:	3302      	adds	r3, #2
 80068f0:	e7f4      	b.n	80068dc <_printf_float+0x1a4>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e7f2      	b.n	80068dc <_printf_float+0x1a4>
 80068f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80068fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068fc:	4299      	cmp	r1, r3
 80068fe:	db05      	blt.n	800690c <_printf_float+0x1d4>
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	6121      	str	r1, [r4, #16]
 8006904:	07d8      	lsls	r0, r3, #31
 8006906:	d5ea      	bpl.n	80068de <_printf_float+0x1a6>
 8006908:	1c4b      	adds	r3, r1, #1
 800690a:	e7e7      	b.n	80068dc <_printf_float+0x1a4>
 800690c:	2900      	cmp	r1, #0
 800690e:	bfd4      	ite	le
 8006910:	f1c1 0202 	rsble	r2, r1, #2
 8006914:	2201      	movgt	r2, #1
 8006916:	4413      	add	r3, r2
 8006918:	e7e0      	b.n	80068dc <_printf_float+0x1a4>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	055a      	lsls	r2, r3, #21
 800691e:	d407      	bmi.n	8006930 <_printf_float+0x1f8>
 8006920:	6923      	ldr	r3, [r4, #16]
 8006922:	4642      	mov	r2, r8
 8006924:	4631      	mov	r1, r6
 8006926:	4628      	mov	r0, r5
 8006928:	47b8      	blx	r7
 800692a:	3001      	adds	r0, #1
 800692c:	d12c      	bne.n	8006988 <_printf_float+0x250>
 800692e:	e764      	b.n	80067fa <_printf_float+0xc2>
 8006930:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006934:	f240 80e0 	bls.w	8006af8 <_printf_float+0x3c0>
 8006938:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800693c:	2200      	movs	r2, #0
 800693e:	2300      	movs	r3, #0
 8006940:	f7fa f8da 	bl	8000af8 <__aeabi_dcmpeq>
 8006944:	2800      	cmp	r0, #0
 8006946:	d034      	beq.n	80069b2 <_printf_float+0x27a>
 8006948:	4a37      	ldr	r2, [pc, #220]	; (8006a28 <_printf_float+0x2f0>)
 800694a:	2301      	movs	r3, #1
 800694c:	4631      	mov	r1, r6
 800694e:	4628      	mov	r0, r5
 8006950:	47b8      	blx	r7
 8006952:	3001      	adds	r0, #1
 8006954:	f43f af51 	beq.w	80067fa <_printf_float+0xc2>
 8006958:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800695c:	429a      	cmp	r2, r3
 800695e:	db02      	blt.n	8006966 <_printf_float+0x22e>
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	07d8      	lsls	r0, r3, #31
 8006964:	d510      	bpl.n	8006988 <_printf_float+0x250>
 8006966:	ee18 3a10 	vmov	r3, s16
 800696a:	4652      	mov	r2, sl
 800696c:	4631      	mov	r1, r6
 800696e:	4628      	mov	r0, r5
 8006970:	47b8      	blx	r7
 8006972:	3001      	adds	r0, #1
 8006974:	f43f af41 	beq.w	80067fa <_printf_float+0xc2>
 8006978:	f04f 0800 	mov.w	r8, #0
 800697c:	f104 091a 	add.w	r9, r4, #26
 8006980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006982:	3b01      	subs	r3, #1
 8006984:	4543      	cmp	r3, r8
 8006986:	dc09      	bgt.n	800699c <_printf_float+0x264>
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	079b      	lsls	r3, r3, #30
 800698c:	f100 8105 	bmi.w	8006b9a <_printf_float+0x462>
 8006990:	68e0      	ldr	r0, [r4, #12]
 8006992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006994:	4298      	cmp	r0, r3
 8006996:	bfb8      	it	lt
 8006998:	4618      	movlt	r0, r3
 800699a:	e730      	b.n	80067fe <_printf_float+0xc6>
 800699c:	2301      	movs	r3, #1
 800699e:	464a      	mov	r2, r9
 80069a0:	4631      	mov	r1, r6
 80069a2:	4628      	mov	r0, r5
 80069a4:	47b8      	blx	r7
 80069a6:	3001      	adds	r0, #1
 80069a8:	f43f af27 	beq.w	80067fa <_printf_float+0xc2>
 80069ac:	f108 0801 	add.w	r8, r8, #1
 80069b0:	e7e6      	b.n	8006980 <_printf_float+0x248>
 80069b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	dc39      	bgt.n	8006a2c <_printf_float+0x2f4>
 80069b8:	4a1b      	ldr	r2, [pc, #108]	; (8006a28 <_printf_float+0x2f0>)
 80069ba:	2301      	movs	r3, #1
 80069bc:	4631      	mov	r1, r6
 80069be:	4628      	mov	r0, r5
 80069c0:	47b8      	blx	r7
 80069c2:	3001      	adds	r0, #1
 80069c4:	f43f af19 	beq.w	80067fa <_printf_float+0xc2>
 80069c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069cc:	4313      	orrs	r3, r2
 80069ce:	d102      	bne.n	80069d6 <_printf_float+0x29e>
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	07d9      	lsls	r1, r3, #31
 80069d4:	d5d8      	bpl.n	8006988 <_printf_float+0x250>
 80069d6:	ee18 3a10 	vmov	r3, s16
 80069da:	4652      	mov	r2, sl
 80069dc:	4631      	mov	r1, r6
 80069de:	4628      	mov	r0, r5
 80069e0:	47b8      	blx	r7
 80069e2:	3001      	adds	r0, #1
 80069e4:	f43f af09 	beq.w	80067fa <_printf_float+0xc2>
 80069e8:	f04f 0900 	mov.w	r9, #0
 80069ec:	f104 0a1a 	add.w	sl, r4, #26
 80069f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f2:	425b      	negs	r3, r3
 80069f4:	454b      	cmp	r3, r9
 80069f6:	dc01      	bgt.n	80069fc <_printf_float+0x2c4>
 80069f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069fa:	e792      	b.n	8006922 <_printf_float+0x1ea>
 80069fc:	2301      	movs	r3, #1
 80069fe:	4652      	mov	r2, sl
 8006a00:	4631      	mov	r1, r6
 8006a02:	4628      	mov	r0, r5
 8006a04:	47b8      	blx	r7
 8006a06:	3001      	adds	r0, #1
 8006a08:	f43f aef7 	beq.w	80067fa <_printf_float+0xc2>
 8006a0c:	f109 0901 	add.w	r9, r9, #1
 8006a10:	e7ee      	b.n	80069f0 <_printf_float+0x2b8>
 8006a12:	bf00      	nop
 8006a14:	7fefffff 	.word	0x7fefffff
 8006a18:	08009ab4 	.word	0x08009ab4
 8006a1c:	08009ab8 	.word	0x08009ab8
 8006a20:	08009ac0 	.word	0x08009ac0
 8006a24:	08009abc 	.word	0x08009abc
 8006a28:	08009ac4 	.word	0x08009ac4
 8006a2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a30:	429a      	cmp	r2, r3
 8006a32:	bfa8      	it	ge
 8006a34:	461a      	movge	r2, r3
 8006a36:	2a00      	cmp	r2, #0
 8006a38:	4691      	mov	r9, r2
 8006a3a:	dc37      	bgt.n	8006aac <_printf_float+0x374>
 8006a3c:	f04f 0b00 	mov.w	fp, #0
 8006a40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a44:	f104 021a 	add.w	r2, r4, #26
 8006a48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a4a:	9305      	str	r3, [sp, #20]
 8006a4c:	eba3 0309 	sub.w	r3, r3, r9
 8006a50:	455b      	cmp	r3, fp
 8006a52:	dc33      	bgt.n	8006abc <_printf_float+0x384>
 8006a54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	db3b      	blt.n	8006ad4 <_printf_float+0x39c>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	07da      	lsls	r2, r3, #31
 8006a60:	d438      	bmi.n	8006ad4 <_printf_float+0x39c>
 8006a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a64:	9a05      	ldr	r2, [sp, #20]
 8006a66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a68:	1a9a      	subs	r2, r3, r2
 8006a6a:	eba3 0901 	sub.w	r9, r3, r1
 8006a6e:	4591      	cmp	r9, r2
 8006a70:	bfa8      	it	ge
 8006a72:	4691      	movge	r9, r2
 8006a74:	f1b9 0f00 	cmp.w	r9, #0
 8006a78:	dc35      	bgt.n	8006ae6 <_printf_float+0x3ae>
 8006a7a:	f04f 0800 	mov.w	r8, #0
 8006a7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a82:	f104 0a1a 	add.w	sl, r4, #26
 8006a86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a8a:	1a9b      	subs	r3, r3, r2
 8006a8c:	eba3 0309 	sub.w	r3, r3, r9
 8006a90:	4543      	cmp	r3, r8
 8006a92:	f77f af79 	ble.w	8006988 <_printf_float+0x250>
 8006a96:	2301      	movs	r3, #1
 8006a98:	4652      	mov	r2, sl
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	47b8      	blx	r7
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	f43f aeaa 	beq.w	80067fa <_printf_float+0xc2>
 8006aa6:	f108 0801 	add.w	r8, r8, #1
 8006aaa:	e7ec      	b.n	8006a86 <_printf_float+0x34e>
 8006aac:	4613      	mov	r3, r2
 8006aae:	4631      	mov	r1, r6
 8006ab0:	4642      	mov	r2, r8
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	47b8      	blx	r7
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d1c0      	bne.n	8006a3c <_printf_float+0x304>
 8006aba:	e69e      	b.n	80067fa <_printf_float+0xc2>
 8006abc:	2301      	movs	r3, #1
 8006abe:	4631      	mov	r1, r6
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	9205      	str	r2, [sp, #20]
 8006ac4:	47b8      	blx	r7
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	f43f ae97 	beq.w	80067fa <_printf_float+0xc2>
 8006acc:	9a05      	ldr	r2, [sp, #20]
 8006ace:	f10b 0b01 	add.w	fp, fp, #1
 8006ad2:	e7b9      	b.n	8006a48 <_printf_float+0x310>
 8006ad4:	ee18 3a10 	vmov	r3, s16
 8006ad8:	4652      	mov	r2, sl
 8006ada:	4631      	mov	r1, r6
 8006adc:	4628      	mov	r0, r5
 8006ade:	47b8      	blx	r7
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d1be      	bne.n	8006a62 <_printf_float+0x32a>
 8006ae4:	e689      	b.n	80067fa <_printf_float+0xc2>
 8006ae6:	9a05      	ldr	r2, [sp, #20]
 8006ae8:	464b      	mov	r3, r9
 8006aea:	4442      	add	r2, r8
 8006aec:	4631      	mov	r1, r6
 8006aee:	4628      	mov	r0, r5
 8006af0:	47b8      	blx	r7
 8006af2:	3001      	adds	r0, #1
 8006af4:	d1c1      	bne.n	8006a7a <_printf_float+0x342>
 8006af6:	e680      	b.n	80067fa <_printf_float+0xc2>
 8006af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006afa:	2a01      	cmp	r2, #1
 8006afc:	dc01      	bgt.n	8006b02 <_printf_float+0x3ca>
 8006afe:	07db      	lsls	r3, r3, #31
 8006b00:	d538      	bpl.n	8006b74 <_printf_float+0x43c>
 8006b02:	2301      	movs	r3, #1
 8006b04:	4642      	mov	r2, r8
 8006b06:	4631      	mov	r1, r6
 8006b08:	4628      	mov	r0, r5
 8006b0a:	47b8      	blx	r7
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	f43f ae74 	beq.w	80067fa <_printf_float+0xc2>
 8006b12:	ee18 3a10 	vmov	r3, s16
 8006b16:	4652      	mov	r2, sl
 8006b18:	4631      	mov	r1, r6
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	47b8      	blx	r7
 8006b1e:	3001      	adds	r0, #1
 8006b20:	f43f ae6b 	beq.w	80067fa <_printf_float+0xc2>
 8006b24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f7f9 ffe4 	bl	8000af8 <__aeabi_dcmpeq>
 8006b30:	b9d8      	cbnz	r0, 8006b6a <_printf_float+0x432>
 8006b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b34:	f108 0201 	add.w	r2, r8, #1
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	47b8      	blx	r7
 8006b40:	3001      	adds	r0, #1
 8006b42:	d10e      	bne.n	8006b62 <_printf_float+0x42a>
 8006b44:	e659      	b.n	80067fa <_printf_float+0xc2>
 8006b46:	2301      	movs	r3, #1
 8006b48:	4652      	mov	r2, sl
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	47b8      	blx	r7
 8006b50:	3001      	adds	r0, #1
 8006b52:	f43f ae52 	beq.w	80067fa <_printf_float+0xc2>
 8006b56:	f108 0801 	add.w	r8, r8, #1
 8006b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	4543      	cmp	r3, r8
 8006b60:	dcf1      	bgt.n	8006b46 <_printf_float+0x40e>
 8006b62:	464b      	mov	r3, r9
 8006b64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b68:	e6dc      	b.n	8006924 <_printf_float+0x1ec>
 8006b6a:	f04f 0800 	mov.w	r8, #0
 8006b6e:	f104 0a1a 	add.w	sl, r4, #26
 8006b72:	e7f2      	b.n	8006b5a <_printf_float+0x422>
 8006b74:	2301      	movs	r3, #1
 8006b76:	4642      	mov	r2, r8
 8006b78:	e7df      	b.n	8006b3a <_printf_float+0x402>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	464a      	mov	r2, r9
 8006b7e:	4631      	mov	r1, r6
 8006b80:	4628      	mov	r0, r5
 8006b82:	47b8      	blx	r7
 8006b84:	3001      	adds	r0, #1
 8006b86:	f43f ae38 	beq.w	80067fa <_printf_float+0xc2>
 8006b8a:	f108 0801 	add.w	r8, r8, #1
 8006b8e:	68e3      	ldr	r3, [r4, #12]
 8006b90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b92:	1a5b      	subs	r3, r3, r1
 8006b94:	4543      	cmp	r3, r8
 8006b96:	dcf0      	bgt.n	8006b7a <_printf_float+0x442>
 8006b98:	e6fa      	b.n	8006990 <_printf_float+0x258>
 8006b9a:	f04f 0800 	mov.w	r8, #0
 8006b9e:	f104 0919 	add.w	r9, r4, #25
 8006ba2:	e7f4      	b.n	8006b8e <_printf_float+0x456>

08006ba4 <_printf_common>:
 8006ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba8:	4616      	mov	r6, r2
 8006baa:	4699      	mov	r9, r3
 8006bac:	688a      	ldr	r2, [r1, #8]
 8006bae:	690b      	ldr	r3, [r1, #16]
 8006bb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	bfb8      	it	lt
 8006bb8:	4613      	movlt	r3, r2
 8006bba:	6033      	str	r3, [r6, #0]
 8006bbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bc0:	4607      	mov	r7, r0
 8006bc2:	460c      	mov	r4, r1
 8006bc4:	b10a      	cbz	r2, 8006bca <_printf_common+0x26>
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	6033      	str	r3, [r6, #0]
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	0699      	lsls	r1, r3, #26
 8006bce:	bf42      	ittt	mi
 8006bd0:	6833      	ldrmi	r3, [r6, #0]
 8006bd2:	3302      	addmi	r3, #2
 8006bd4:	6033      	strmi	r3, [r6, #0]
 8006bd6:	6825      	ldr	r5, [r4, #0]
 8006bd8:	f015 0506 	ands.w	r5, r5, #6
 8006bdc:	d106      	bne.n	8006bec <_printf_common+0x48>
 8006bde:	f104 0a19 	add.w	sl, r4, #25
 8006be2:	68e3      	ldr	r3, [r4, #12]
 8006be4:	6832      	ldr	r2, [r6, #0]
 8006be6:	1a9b      	subs	r3, r3, r2
 8006be8:	42ab      	cmp	r3, r5
 8006bea:	dc26      	bgt.n	8006c3a <_printf_common+0x96>
 8006bec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bf0:	1e13      	subs	r3, r2, #0
 8006bf2:	6822      	ldr	r2, [r4, #0]
 8006bf4:	bf18      	it	ne
 8006bf6:	2301      	movne	r3, #1
 8006bf8:	0692      	lsls	r2, r2, #26
 8006bfa:	d42b      	bmi.n	8006c54 <_printf_common+0xb0>
 8006bfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c00:	4649      	mov	r1, r9
 8006c02:	4638      	mov	r0, r7
 8006c04:	47c0      	blx	r8
 8006c06:	3001      	adds	r0, #1
 8006c08:	d01e      	beq.n	8006c48 <_printf_common+0xa4>
 8006c0a:	6823      	ldr	r3, [r4, #0]
 8006c0c:	68e5      	ldr	r5, [r4, #12]
 8006c0e:	6832      	ldr	r2, [r6, #0]
 8006c10:	f003 0306 	and.w	r3, r3, #6
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	bf08      	it	eq
 8006c18:	1aad      	subeq	r5, r5, r2
 8006c1a:	68a3      	ldr	r3, [r4, #8]
 8006c1c:	6922      	ldr	r2, [r4, #16]
 8006c1e:	bf0c      	ite	eq
 8006c20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c24:	2500      	movne	r5, #0
 8006c26:	4293      	cmp	r3, r2
 8006c28:	bfc4      	itt	gt
 8006c2a:	1a9b      	subgt	r3, r3, r2
 8006c2c:	18ed      	addgt	r5, r5, r3
 8006c2e:	2600      	movs	r6, #0
 8006c30:	341a      	adds	r4, #26
 8006c32:	42b5      	cmp	r5, r6
 8006c34:	d11a      	bne.n	8006c6c <_printf_common+0xc8>
 8006c36:	2000      	movs	r0, #0
 8006c38:	e008      	b.n	8006c4c <_printf_common+0xa8>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	4652      	mov	r2, sl
 8006c3e:	4649      	mov	r1, r9
 8006c40:	4638      	mov	r0, r7
 8006c42:	47c0      	blx	r8
 8006c44:	3001      	adds	r0, #1
 8006c46:	d103      	bne.n	8006c50 <_printf_common+0xac>
 8006c48:	f04f 30ff 	mov.w	r0, #4294967295
 8006c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c50:	3501      	adds	r5, #1
 8006c52:	e7c6      	b.n	8006be2 <_printf_common+0x3e>
 8006c54:	18e1      	adds	r1, r4, r3
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	2030      	movs	r0, #48	; 0x30
 8006c5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c5e:	4422      	add	r2, r4
 8006c60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c68:	3302      	adds	r3, #2
 8006c6a:	e7c7      	b.n	8006bfc <_printf_common+0x58>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	4622      	mov	r2, r4
 8006c70:	4649      	mov	r1, r9
 8006c72:	4638      	mov	r0, r7
 8006c74:	47c0      	blx	r8
 8006c76:	3001      	adds	r0, #1
 8006c78:	d0e6      	beq.n	8006c48 <_printf_common+0xa4>
 8006c7a:	3601      	adds	r6, #1
 8006c7c:	e7d9      	b.n	8006c32 <_printf_common+0x8e>
	...

08006c80 <_printf_i>:
 8006c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c84:	7e0f      	ldrb	r7, [r1, #24]
 8006c86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c88:	2f78      	cmp	r7, #120	; 0x78
 8006c8a:	4691      	mov	r9, r2
 8006c8c:	4680      	mov	r8, r0
 8006c8e:	460c      	mov	r4, r1
 8006c90:	469a      	mov	sl, r3
 8006c92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c96:	d807      	bhi.n	8006ca8 <_printf_i+0x28>
 8006c98:	2f62      	cmp	r7, #98	; 0x62
 8006c9a:	d80a      	bhi.n	8006cb2 <_printf_i+0x32>
 8006c9c:	2f00      	cmp	r7, #0
 8006c9e:	f000 80d8 	beq.w	8006e52 <_printf_i+0x1d2>
 8006ca2:	2f58      	cmp	r7, #88	; 0x58
 8006ca4:	f000 80a3 	beq.w	8006dee <_printf_i+0x16e>
 8006ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cb0:	e03a      	b.n	8006d28 <_printf_i+0xa8>
 8006cb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cb6:	2b15      	cmp	r3, #21
 8006cb8:	d8f6      	bhi.n	8006ca8 <_printf_i+0x28>
 8006cba:	a101      	add	r1, pc, #4	; (adr r1, 8006cc0 <_printf_i+0x40>)
 8006cbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cc0:	08006d19 	.word	0x08006d19
 8006cc4:	08006d2d 	.word	0x08006d2d
 8006cc8:	08006ca9 	.word	0x08006ca9
 8006ccc:	08006ca9 	.word	0x08006ca9
 8006cd0:	08006ca9 	.word	0x08006ca9
 8006cd4:	08006ca9 	.word	0x08006ca9
 8006cd8:	08006d2d 	.word	0x08006d2d
 8006cdc:	08006ca9 	.word	0x08006ca9
 8006ce0:	08006ca9 	.word	0x08006ca9
 8006ce4:	08006ca9 	.word	0x08006ca9
 8006ce8:	08006ca9 	.word	0x08006ca9
 8006cec:	08006e39 	.word	0x08006e39
 8006cf0:	08006d5d 	.word	0x08006d5d
 8006cf4:	08006e1b 	.word	0x08006e1b
 8006cf8:	08006ca9 	.word	0x08006ca9
 8006cfc:	08006ca9 	.word	0x08006ca9
 8006d00:	08006e5b 	.word	0x08006e5b
 8006d04:	08006ca9 	.word	0x08006ca9
 8006d08:	08006d5d 	.word	0x08006d5d
 8006d0c:	08006ca9 	.word	0x08006ca9
 8006d10:	08006ca9 	.word	0x08006ca9
 8006d14:	08006e23 	.word	0x08006e23
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	1d1a      	adds	r2, r3, #4
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	602a      	str	r2, [r5, #0]
 8006d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e0a3      	b.n	8006e74 <_printf_i+0x1f4>
 8006d2c:	6820      	ldr	r0, [r4, #0]
 8006d2e:	6829      	ldr	r1, [r5, #0]
 8006d30:	0606      	lsls	r6, r0, #24
 8006d32:	f101 0304 	add.w	r3, r1, #4
 8006d36:	d50a      	bpl.n	8006d4e <_printf_i+0xce>
 8006d38:	680e      	ldr	r6, [r1, #0]
 8006d3a:	602b      	str	r3, [r5, #0]
 8006d3c:	2e00      	cmp	r6, #0
 8006d3e:	da03      	bge.n	8006d48 <_printf_i+0xc8>
 8006d40:	232d      	movs	r3, #45	; 0x2d
 8006d42:	4276      	negs	r6, r6
 8006d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d48:	485e      	ldr	r0, [pc, #376]	; (8006ec4 <_printf_i+0x244>)
 8006d4a:	230a      	movs	r3, #10
 8006d4c:	e019      	b.n	8006d82 <_printf_i+0x102>
 8006d4e:	680e      	ldr	r6, [r1, #0]
 8006d50:	602b      	str	r3, [r5, #0]
 8006d52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d56:	bf18      	it	ne
 8006d58:	b236      	sxthne	r6, r6
 8006d5a:	e7ef      	b.n	8006d3c <_printf_i+0xbc>
 8006d5c:	682b      	ldr	r3, [r5, #0]
 8006d5e:	6820      	ldr	r0, [r4, #0]
 8006d60:	1d19      	adds	r1, r3, #4
 8006d62:	6029      	str	r1, [r5, #0]
 8006d64:	0601      	lsls	r1, r0, #24
 8006d66:	d501      	bpl.n	8006d6c <_printf_i+0xec>
 8006d68:	681e      	ldr	r6, [r3, #0]
 8006d6a:	e002      	b.n	8006d72 <_printf_i+0xf2>
 8006d6c:	0646      	lsls	r6, r0, #25
 8006d6e:	d5fb      	bpl.n	8006d68 <_printf_i+0xe8>
 8006d70:	881e      	ldrh	r6, [r3, #0]
 8006d72:	4854      	ldr	r0, [pc, #336]	; (8006ec4 <_printf_i+0x244>)
 8006d74:	2f6f      	cmp	r7, #111	; 0x6f
 8006d76:	bf0c      	ite	eq
 8006d78:	2308      	moveq	r3, #8
 8006d7a:	230a      	movne	r3, #10
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d82:	6865      	ldr	r5, [r4, #4]
 8006d84:	60a5      	str	r5, [r4, #8]
 8006d86:	2d00      	cmp	r5, #0
 8006d88:	bfa2      	ittt	ge
 8006d8a:	6821      	ldrge	r1, [r4, #0]
 8006d8c:	f021 0104 	bicge.w	r1, r1, #4
 8006d90:	6021      	strge	r1, [r4, #0]
 8006d92:	b90e      	cbnz	r6, 8006d98 <_printf_i+0x118>
 8006d94:	2d00      	cmp	r5, #0
 8006d96:	d04d      	beq.n	8006e34 <_printf_i+0x1b4>
 8006d98:	4615      	mov	r5, r2
 8006d9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d9e:	fb03 6711 	mls	r7, r3, r1, r6
 8006da2:	5dc7      	ldrb	r7, [r0, r7]
 8006da4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006da8:	4637      	mov	r7, r6
 8006daa:	42bb      	cmp	r3, r7
 8006dac:	460e      	mov	r6, r1
 8006dae:	d9f4      	bls.n	8006d9a <_printf_i+0x11a>
 8006db0:	2b08      	cmp	r3, #8
 8006db2:	d10b      	bne.n	8006dcc <_printf_i+0x14c>
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	07de      	lsls	r6, r3, #31
 8006db8:	d508      	bpl.n	8006dcc <_printf_i+0x14c>
 8006dba:	6923      	ldr	r3, [r4, #16]
 8006dbc:	6861      	ldr	r1, [r4, #4]
 8006dbe:	4299      	cmp	r1, r3
 8006dc0:	bfde      	ittt	le
 8006dc2:	2330      	movle	r3, #48	; 0x30
 8006dc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006dc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006dcc:	1b52      	subs	r2, r2, r5
 8006dce:	6122      	str	r2, [r4, #16]
 8006dd0:	f8cd a000 	str.w	sl, [sp]
 8006dd4:	464b      	mov	r3, r9
 8006dd6:	aa03      	add	r2, sp, #12
 8006dd8:	4621      	mov	r1, r4
 8006dda:	4640      	mov	r0, r8
 8006ddc:	f7ff fee2 	bl	8006ba4 <_printf_common>
 8006de0:	3001      	adds	r0, #1
 8006de2:	d14c      	bne.n	8006e7e <_printf_i+0x1fe>
 8006de4:	f04f 30ff 	mov.w	r0, #4294967295
 8006de8:	b004      	add	sp, #16
 8006dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dee:	4835      	ldr	r0, [pc, #212]	; (8006ec4 <_printf_i+0x244>)
 8006df0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006df4:	6829      	ldr	r1, [r5, #0]
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006dfc:	6029      	str	r1, [r5, #0]
 8006dfe:	061d      	lsls	r5, r3, #24
 8006e00:	d514      	bpl.n	8006e2c <_printf_i+0x1ac>
 8006e02:	07df      	lsls	r7, r3, #31
 8006e04:	bf44      	itt	mi
 8006e06:	f043 0320 	orrmi.w	r3, r3, #32
 8006e0a:	6023      	strmi	r3, [r4, #0]
 8006e0c:	b91e      	cbnz	r6, 8006e16 <_printf_i+0x196>
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	f023 0320 	bic.w	r3, r3, #32
 8006e14:	6023      	str	r3, [r4, #0]
 8006e16:	2310      	movs	r3, #16
 8006e18:	e7b0      	b.n	8006d7c <_printf_i+0xfc>
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	f043 0320 	orr.w	r3, r3, #32
 8006e20:	6023      	str	r3, [r4, #0]
 8006e22:	2378      	movs	r3, #120	; 0x78
 8006e24:	4828      	ldr	r0, [pc, #160]	; (8006ec8 <_printf_i+0x248>)
 8006e26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e2a:	e7e3      	b.n	8006df4 <_printf_i+0x174>
 8006e2c:	0659      	lsls	r1, r3, #25
 8006e2e:	bf48      	it	mi
 8006e30:	b2b6      	uxthmi	r6, r6
 8006e32:	e7e6      	b.n	8006e02 <_printf_i+0x182>
 8006e34:	4615      	mov	r5, r2
 8006e36:	e7bb      	b.n	8006db0 <_printf_i+0x130>
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	6826      	ldr	r6, [r4, #0]
 8006e3c:	6961      	ldr	r1, [r4, #20]
 8006e3e:	1d18      	adds	r0, r3, #4
 8006e40:	6028      	str	r0, [r5, #0]
 8006e42:	0635      	lsls	r5, r6, #24
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	d501      	bpl.n	8006e4c <_printf_i+0x1cc>
 8006e48:	6019      	str	r1, [r3, #0]
 8006e4a:	e002      	b.n	8006e52 <_printf_i+0x1d2>
 8006e4c:	0670      	lsls	r0, r6, #25
 8006e4e:	d5fb      	bpl.n	8006e48 <_printf_i+0x1c8>
 8006e50:	8019      	strh	r1, [r3, #0]
 8006e52:	2300      	movs	r3, #0
 8006e54:	6123      	str	r3, [r4, #16]
 8006e56:	4615      	mov	r5, r2
 8006e58:	e7ba      	b.n	8006dd0 <_printf_i+0x150>
 8006e5a:	682b      	ldr	r3, [r5, #0]
 8006e5c:	1d1a      	adds	r2, r3, #4
 8006e5e:	602a      	str	r2, [r5, #0]
 8006e60:	681d      	ldr	r5, [r3, #0]
 8006e62:	6862      	ldr	r2, [r4, #4]
 8006e64:	2100      	movs	r1, #0
 8006e66:	4628      	mov	r0, r5
 8006e68:	f7f9 f9d2 	bl	8000210 <memchr>
 8006e6c:	b108      	cbz	r0, 8006e72 <_printf_i+0x1f2>
 8006e6e:	1b40      	subs	r0, r0, r5
 8006e70:	6060      	str	r0, [r4, #4]
 8006e72:	6863      	ldr	r3, [r4, #4]
 8006e74:	6123      	str	r3, [r4, #16]
 8006e76:	2300      	movs	r3, #0
 8006e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e7c:	e7a8      	b.n	8006dd0 <_printf_i+0x150>
 8006e7e:	6923      	ldr	r3, [r4, #16]
 8006e80:	462a      	mov	r2, r5
 8006e82:	4649      	mov	r1, r9
 8006e84:	4640      	mov	r0, r8
 8006e86:	47d0      	blx	sl
 8006e88:	3001      	adds	r0, #1
 8006e8a:	d0ab      	beq.n	8006de4 <_printf_i+0x164>
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	079b      	lsls	r3, r3, #30
 8006e90:	d413      	bmi.n	8006eba <_printf_i+0x23a>
 8006e92:	68e0      	ldr	r0, [r4, #12]
 8006e94:	9b03      	ldr	r3, [sp, #12]
 8006e96:	4298      	cmp	r0, r3
 8006e98:	bfb8      	it	lt
 8006e9a:	4618      	movlt	r0, r3
 8006e9c:	e7a4      	b.n	8006de8 <_printf_i+0x168>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	4632      	mov	r2, r6
 8006ea2:	4649      	mov	r1, r9
 8006ea4:	4640      	mov	r0, r8
 8006ea6:	47d0      	blx	sl
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	d09b      	beq.n	8006de4 <_printf_i+0x164>
 8006eac:	3501      	adds	r5, #1
 8006eae:	68e3      	ldr	r3, [r4, #12]
 8006eb0:	9903      	ldr	r1, [sp, #12]
 8006eb2:	1a5b      	subs	r3, r3, r1
 8006eb4:	42ab      	cmp	r3, r5
 8006eb6:	dcf2      	bgt.n	8006e9e <_printf_i+0x21e>
 8006eb8:	e7eb      	b.n	8006e92 <_printf_i+0x212>
 8006eba:	2500      	movs	r5, #0
 8006ebc:	f104 0619 	add.w	r6, r4, #25
 8006ec0:	e7f5      	b.n	8006eae <_printf_i+0x22e>
 8006ec2:	bf00      	nop
 8006ec4:	08009ac6 	.word	0x08009ac6
 8006ec8:	08009ad7 	.word	0x08009ad7

08006ecc <iprintf>:
 8006ecc:	b40f      	push	{r0, r1, r2, r3}
 8006ece:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <iprintf+0x2c>)
 8006ed0:	b513      	push	{r0, r1, r4, lr}
 8006ed2:	681c      	ldr	r4, [r3, #0]
 8006ed4:	b124      	cbz	r4, 8006ee0 <iprintf+0x14>
 8006ed6:	69a3      	ldr	r3, [r4, #24]
 8006ed8:	b913      	cbnz	r3, 8006ee0 <iprintf+0x14>
 8006eda:	4620      	mov	r0, r4
 8006edc:	f001 f8d8 	bl	8008090 <__sinit>
 8006ee0:	ab05      	add	r3, sp, #20
 8006ee2:	9a04      	ldr	r2, [sp, #16]
 8006ee4:	68a1      	ldr	r1, [r4, #8]
 8006ee6:	9301      	str	r3, [sp, #4]
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f001 fe95 	bl	8008c18 <_vfiprintf_r>
 8006eee:	b002      	add	sp, #8
 8006ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ef4:	b004      	add	sp, #16
 8006ef6:	4770      	bx	lr
 8006ef8:	2000000c 	.word	0x2000000c

08006efc <_puts_r>:
 8006efc:	b570      	push	{r4, r5, r6, lr}
 8006efe:	460e      	mov	r6, r1
 8006f00:	4605      	mov	r5, r0
 8006f02:	b118      	cbz	r0, 8006f0c <_puts_r+0x10>
 8006f04:	6983      	ldr	r3, [r0, #24]
 8006f06:	b90b      	cbnz	r3, 8006f0c <_puts_r+0x10>
 8006f08:	f001 f8c2 	bl	8008090 <__sinit>
 8006f0c:	69ab      	ldr	r3, [r5, #24]
 8006f0e:	68ac      	ldr	r4, [r5, #8]
 8006f10:	b913      	cbnz	r3, 8006f18 <_puts_r+0x1c>
 8006f12:	4628      	mov	r0, r5
 8006f14:	f001 f8bc 	bl	8008090 <__sinit>
 8006f18:	4b2c      	ldr	r3, [pc, #176]	; (8006fcc <_puts_r+0xd0>)
 8006f1a:	429c      	cmp	r4, r3
 8006f1c:	d120      	bne.n	8006f60 <_puts_r+0x64>
 8006f1e:	686c      	ldr	r4, [r5, #4]
 8006f20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f22:	07db      	lsls	r3, r3, #31
 8006f24:	d405      	bmi.n	8006f32 <_puts_r+0x36>
 8006f26:	89a3      	ldrh	r3, [r4, #12]
 8006f28:	0598      	lsls	r0, r3, #22
 8006f2a:	d402      	bmi.n	8006f32 <_puts_r+0x36>
 8006f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f2e:	f001 f952 	bl	80081d6 <__retarget_lock_acquire_recursive>
 8006f32:	89a3      	ldrh	r3, [r4, #12]
 8006f34:	0719      	lsls	r1, r3, #28
 8006f36:	d51d      	bpl.n	8006f74 <_puts_r+0x78>
 8006f38:	6923      	ldr	r3, [r4, #16]
 8006f3a:	b1db      	cbz	r3, 8006f74 <_puts_r+0x78>
 8006f3c:	3e01      	subs	r6, #1
 8006f3e:	68a3      	ldr	r3, [r4, #8]
 8006f40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f44:	3b01      	subs	r3, #1
 8006f46:	60a3      	str	r3, [r4, #8]
 8006f48:	bb39      	cbnz	r1, 8006f9a <_puts_r+0x9e>
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	da38      	bge.n	8006fc0 <_puts_r+0xc4>
 8006f4e:	4622      	mov	r2, r4
 8006f50:	210a      	movs	r1, #10
 8006f52:	4628      	mov	r0, r5
 8006f54:	f000 f848 	bl	8006fe8 <__swbuf_r>
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d011      	beq.n	8006f80 <_puts_r+0x84>
 8006f5c:	250a      	movs	r5, #10
 8006f5e:	e011      	b.n	8006f84 <_puts_r+0x88>
 8006f60:	4b1b      	ldr	r3, [pc, #108]	; (8006fd0 <_puts_r+0xd4>)
 8006f62:	429c      	cmp	r4, r3
 8006f64:	d101      	bne.n	8006f6a <_puts_r+0x6e>
 8006f66:	68ac      	ldr	r4, [r5, #8]
 8006f68:	e7da      	b.n	8006f20 <_puts_r+0x24>
 8006f6a:	4b1a      	ldr	r3, [pc, #104]	; (8006fd4 <_puts_r+0xd8>)
 8006f6c:	429c      	cmp	r4, r3
 8006f6e:	bf08      	it	eq
 8006f70:	68ec      	ldreq	r4, [r5, #12]
 8006f72:	e7d5      	b.n	8006f20 <_puts_r+0x24>
 8006f74:	4621      	mov	r1, r4
 8006f76:	4628      	mov	r0, r5
 8006f78:	f000 f888 	bl	800708c <__swsetup_r>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d0dd      	beq.n	8006f3c <_puts_r+0x40>
 8006f80:	f04f 35ff 	mov.w	r5, #4294967295
 8006f84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f86:	07da      	lsls	r2, r3, #31
 8006f88:	d405      	bmi.n	8006f96 <_puts_r+0x9a>
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	059b      	lsls	r3, r3, #22
 8006f8e:	d402      	bmi.n	8006f96 <_puts_r+0x9a>
 8006f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f92:	f001 f921 	bl	80081d8 <__retarget_lock_release_recursive>
 8006f96:	4628      	mov	r0, r5
 8006f98:	bd70      	pop	{r4, r5, r6, pc}
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	da04      	bge.n	8006fa8 <_puts_r+0xac>
 8006f9e:	69a2      	ldr	r2, [r4, #24]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	dc06      	bgt.n	8006fb2 <_puts_r+0xb6>
 8006fa4:	290a      	cmp	r1, #10
 8006fa6:	d004      	beq.n	8006fb2 <_puts_r+0xb6>
 8006fa8:	6823      	ldr	r3, [r4, #0]
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	6022      	str	r2, [r4, #0]
 8006fae:	7019      	strb	r1, [r3, #0]
 8006fb0:	e7c5      	b.n	8006f3e <_puts_r+0x42>
 8006fb2:	4622      	mov	r2, r4
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	f000 f817 	bl	8006fe8 <__swbuf_r>
 8006fba:	3001      	adds	r0, #1
 8006fbc:	d1bf      	bne.n	8006f3e <_puts_r+0x42>
 8006fbe:	e7df      	b.n	8006f80 <_puts_r+0x84>
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	250a      	movs	r5, #10
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	6022      	str	r2, [r4, #0]
 8006fc8:	701d      	strb	r5, [r3, #0]
 8006fca:	e7db      	b.n	8006f84 <_puts_r+0x88>
 8006fcc:	08009b98 	.word	0x08009b98
 8006fd0:	08009bb8 	.word	0x08009bb8
 8006fd4:	08009b78 	.word	0x08009b78

08006fd8 <puts>:
 8006fd8:	4b02      	ldr	r3, [pc, #8]	; (8006fe4 <puts+0xc>)
 8006fda:	4601      	mov	r1, r0
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	f7ff bf8d 	b.w	8006efc <_puts_r>
 8006fe2:	bf00      	nop
 8006fe4:	2000000c 	.word	0x2000000c

08006fe8 <__swbuf_r>:
 8006fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fea:	460e      	mov	r6, r1
 8006fec:	4614      	mov	r4, r2
 8006fee:	4605      	mov	r5, r0
 8006ff0:	b118      	cbz	r0, 8006ffa <__swbuf_r+0x12>
 8006ff2:	6983      	ldr	r3, [r0, #24]
 8006ff4:	b90b      	cbnz	r3, 8006ffa <__swbuf_r+0x12>
 8006ff6:	f001 f84b 	bl	8008090 <__sinit>
 8006ffa:	4b21      	ldr	r3, [pc, #132]	; (8007080 <__swbuf_r+0x98>)
 8006ffc:	429c      	cmp	r4, r3
 8006ffe:	d12b      	bne.n	8007058 <__swbuf_r+0x70>
 8007000:	686c      	ldr	r4, [r5, #4]
 8007002:	69a3      	ldr	r3, [r4, #24]
 8007004:	60a3      	str	r3, [r4, #8]
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	071a      	lsls	r2, r3, #28
 800700a:	d52f      	bpl.n	800706c <__swbuf_r+0x84>
 800700c:	6923      	ldr	r3, [r4, #16]
 800700e:	b36b      	cbz	r3, 800706c <__swbuf_r+0x84>
 8007010:	6923      	ldr	r3, [r4, #16]
 8007012:	6820      	ldr	r0, [r4, #0]
 8007014:	1ac0      	subs	r0, r0, r3
 8007016:	6963      	ldr	r3, [r4, #20]
 8007018:	b2f6      	uxtb	r6, r6
 800701a:	4283      	cmp	r3, r0
 800701c:	4637      	mov	r7, r6
 800701e:	dc04      	bgt.n	800702a <__swbuf_r+0x42>
 8007020:	4621      	mov	r1, r4
 8007022:	4628      	mov	r0, r5
 8007024:	f000 ffa0 	bl	8007f68 <_fflush_r>
 8007028:	bb30      	cbnz	r0, 8007078 <__swbuf_r+0x90>
 800702a:	68a3      	ldr	r3, [r4, #8]
 800702c:	3b01      	subs	r3, #1
 800702e:	60a3      	str	r3, [r4, #8]
 8007030:	6823      	ldr	r3, [r4, #0]
 8007032:	1c5a      	adds	r2, r3, #1
 8007034:	6022      	str	r2, [r4, #0]
 8007036:	701e      	strb	r6, [r3, #0]
 8007038:	6963      	ldr	r3, [r4, #20]
 800703a:	3001      	adds	r0, #1
 800703c:	4283      	cmp	r3, r0
 800703e:	d004      	beq.n	800704a <__swbuf_r+0x62>
 8007040:	89a3      	ldrh	r3, [r4, #12]
 8007042:	07db      	lsls	r3, r3, #31
 8007044:	d506      	bpl.n	8007054 <__swbuf_r+0x6c>
 8007046:	2e0a      	cmp	r6, #10
 8007048:	d104      	bne.n	8007054 <__swbuf_r+0x6c>
 800704a:	4621      	mov	r1, r4
 800704c:	4628      	mov	r0, r5
 800704e:	f000 ff8b 	bl	8007f68 <_fflush_r>
 8007052:	b988      	cbnz	r0, 8007078 <__swbuf_r+0x90>
 8007054:	4638      	mov	r0, r7
 8007056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007058:	4b0a      	ldr	r3, [pc, #40]	; (8007084 <__swbuf_r+0x9c>)
 800705a:	429c      	cmp	r4, r3
 800705c:	d101      	bne.n	8007062 <__swbuf_r+0x7a>
 800705e:	68ac      	ldr	r4, [r5, #8]
 8007060:	e7cf      	b.n	8007002 <__swbuf_r+0x1a>
 8007062:	4b09      	ldr	r3, [pc, #36]	; (8007088 <__swbuf_r+0xa0>)
 8007064:	429c      	cmp	r4, r3
 8007066:	bf08      	it	eq
 8007068:	68ec      	ldreq	r4, [r5, #12]
 800706a:	e7ca      	b.n	8007002 <__swbuf_r+0x1a>
 800706c:	4621      	mov	r1, r4
 800706e:	4628      	mov	r0, r5
 8007070:	f000 f80c 	bl	800708c <__swsetup_r>
 8007074:	2800      	cmp	r0, #0
 8007076:	d0cb      	beq.n	8007010 <__swbuf_r+0x28>
 8007078:	f04f 37ff 	mov.w	r7, #4294967295
 800707c:	e7ea      	b.n	8007054 <__swbuf_r+0x6c>
 800707e:	bf00      	nop
 8007080:	08009b98 	.word	0x08009b98
 8007084:	08009bb8 	.word	0x08009bb8
 8007088:	08009b78 	.word	0x08009b78

0800708c <__swsetup_r>:
 800708c:	4b32      	ldr	r3, [pc, #200]	; (8007158 <__swsetup_r+0xcc>)
 800708e:	b570      	push	{r4, r5, r6, lr}
 8007090:	681d      	ldr	r5, [r3, #0]
 8007092:	4606      	mov	r6, r0
 8007094:	460c      	mov	r4, r1
 8007096:	b125      	cbz	r5, 80070a2 <__swsetup_r+0x16>
 8007098:	69ab      	ldr	r3, [r5, #24]
 800709a:	b913      	cbnz	r3, 80070a2 <__swsetup_r+0x16>
 800709c:	4628      	mov	r0, r5
 800709e:	f000 fff7 	bl	8008090 <__sinit>
 80070a2:	4b2e      	ldr	r3, [pc, #184]	; (800715c <__swsetup_r+0xd0>)
 80070a4:	429c      	cmp	r4, r3
 80070a6:	d10f      	bne.n	80070c8 <__swsetup_r+0x3c>
 80070a8:	686c      	ldr	r4, [r5, #4]
 80070aa:	89a3      	ldrh	r3, [r4, #12]
 80070ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070b0:	0719      	lsls	r1, r3, #28
 80070b2:	d42c      	bmi.n	800710e <__swsetup_r+0x82>
 80070b4:	06dd      	lsls	r5, r3, #27
 80070b6:	d411      	bmi.n	80070dc <__swsetup_r+0x50>
 80070b8:	2309      	movs	r3, #9
 80070ba:	6033      	str	r3, [r6, #0]
 80070bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070c0:	81a3      	strh	r3, [r4, #12]
 80070c2:	f04f 30ff 	mov.w	r0, #4294967295
 80070c6:	e03e      	b.n	8007146 <__swsetup_r+0xba>
 80070c8:	4b25      	ldr	r3, [pc, #148]	; (8007160 <__swsetup_r+0xd4>)
 80070ca:	429c      	cmp	r4, r3
 80070cc:	d101      	bne.n	80070d2 <__swsetup_r+0x46>
 80070ce:	68ac      	ldr	r4, [r5, #8]
 80070d0:	e7eb      	b.n	80070aa <__swsetup_r+0x1e>
 80070d2:	4b24      	ldr	r3, [pc, #144]	; (8007164 <__swsetup_r+0xd8>)
 80070d4:	429c      	cmp	r4, r3
 80070d6:	bf08      	it	eq
 80070d8:	68ec      	ldreq	r4, [r5, #12]
 80070da:	e7e6      	b.n	80070aa <__swsetup_r+0x1e>
 80070dc:	0758      	lsls	r0, r3, #29
 80070de:	d512      	bpl.n	8007106 <__swsetup_r+0x7a>
 80070e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070e2:	b141      	cbz	r1, 80070f6 <__swsetup_r+0x6a>
 80070e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070e8:	4299      	cmp	r1, r3
 80070ea:	d002      	beq.n	80070f2 <__swsetup_r+0x66>
 80070ec:	4630      	mov	r0, r6
 80070ee:	f001 fc89 	bl	8008a04 <_free_r>
 80070f2:	2300      	movs	r3, #0
 80070f4:	6363      	str	r3, [r4, #52]	; 0x34
 80070f6:	89a3      	ldrh	r3, [r4, #12]
 80070f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070fc:	81a3      	strh	r3, [r4, #12]
 80070fe:	2300      	movs	r3, #0
 8007100:	6063      	str	r3, [r4, #4]
 8007102:	6923      	ldr	r3, [r4, #16]
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	89a3      	ldrh	r3, [r4, #12]
 8007108:	f043 0308 	orr.w	r3, r3, #8
 800710c:	81a3      	strh	r3, [r4, #12]
 800710e:	6923      	ldr	r3, [r4, #16]
 8007110:	b94b      	cbnz	r3, 8007126 <__swsetup_r+0x9a>
 8007112:	89a3      	ldrh	r3, [r4, #12]
 8007114:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800711c:	d003      	beq.n	8007126 <__swsetup_r+0x9a>
 800711e:	4621      	mov	r1, r4
 8007120:	4630      	mov	r0, r6
 8007122:	f001 f87f 	bl	8008224 <__smakebuf_r>
 8007126:	89a0      	ldrh	r0, [r4, #12]
 8007128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800712c:	f010 0301 	ands.w	r3, r0, #1
 8007130:	d00a      	beq.n	8007148 <__swsetup_r+0xbc>
 8007132:	2300      	movs	r3, #0
 8007134:	60a3      	str	r3, [r4, #8]
 8007136:	6963      	ldr	r3, [r4, #20]
 8007138:	425b      	negs	r3, r3
 800713a:	61a3      	str	r3, [r4, #24]
 800713c:	6923      	ldr	r3, [r4, #16]
 800713e:	b943      	cbnz	r3, 8007152 <__swsetup_r+0xc6>
 8007140:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007144:	d1ba      	bne.n	80070bc <__swsetup_r+0x30>
 8007146:	bd70      	pop	{r4, r5, r6, pc}
 8007148:	0781      	lsls	r1, r0, #30
 800714a:	bf58      	it	pl
 800714c:	6963      	ldrpl	r3, [r4, #20]
 800714e:	60a3      	str	r3, [r4, #8]
 8007150:	e7f4      	b.n	800713c <__swsetup_r+0xb0>
 8007152:	2000      	movs	r0, #0
 8007154:	e7f7      	b.n	8007146 <__swsetup_r+0xba>
 8007156:	bf00      	nop
 8007158:	2000000c 	.word	0x2000000c
 800715c:	08009b98 	.word	0x08009b98
 8007160:	08009bb8 	.word	0x08009bb8
 8007164:	08009b78 	.word	0x08009b78

08007168 <quorem>:
 8007168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716c:	6903      	ldr	r3, [r0, #16]
 800716e:	690c      	ldr	r4, [r1, #16]
 8007170:	42a3      	cmp	r3, r4
 8007172:	4607      	mov	r7, r0
 8007174:	f2c0 8081 	blt.w	800727a <quorem+0x112>
 8007178:	3c01      	subs	r4, #1
 800717a:	f101 0814 	add.w	r8, r1, #20
 800717e:	f100 0514 	add.w	r5, r0, #20
 8007182:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007186:	9301      	str	r3, [sp, #4]
 8007188:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800718c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007190:	3301      	adds	r3, #1
 8007192:	429a      	cmp	r2, r3
 8007194:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007198:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800719c:	fbb2 f6f3 	udiv	r6, r2, r3
 80071a0:	d331      	bcc.n	8007206 <quorem+0x9e>
 80071a2:	f04f 0e00 	mov.w	lr, #0
 80071a6:	4640      	mov	r0, r8
 80071a8:	46ac      	mov	ip, r5
 80071aa:	46f2      	mov	sl, lr
 80071ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80071b0:	b293      	uxth	r3, r2
 80071b2:	fb06 e303 	mla	r3, r6, r3, lr
 80071b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	ebaa 0303 	sub.w	r3, sl, r3
 80071c0:	f8dc a000 	ldr.w	sl, [ip]
 80071c4:	0c12      	lsrs	r2, r2, #16
 80071c6:	fa13 f38a 	uxtah	r3, r3, sl
 80071ca:	fb06 e202 	mla	r2, r6, r2, lr
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	9b00      	ldr	r3, [sp, #0]
 80071d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071d6:	b292      	uxth	r2, r2
 80071d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80071dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80071e4:	4581      	cmp	r9, r0
 80071e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071ea:	f84c 3b04 	str.w	r3, [ip], #4
 80071ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80071f2:	d2db      	bcs.n	80071ac <quorem+0x44>
 80071f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80071f8:	b92b      	cbnz	r3, 8007206 <quorem+0x9e>
 80071fa:	9b01      	ldr	r3, [sp, #4]
 80071fc:	3b04      	subs	r3, #4
 80071fe:	429d      	cmp	r5, r3
 8007200:	461a      	mov	r2, r3
 8007202:	d32e      	bcc.n	8007262 <quorem+0xfa>
 8007204:	613c      	str	r4, [r7, #16]
 8007206:	4638      	mov	r0, r7
 8007208:	f001 fae4 	bl	80087d4 <__mcmp>
 800720c:	2800      	cmp	r0, #0
 800720e:	db24      	blt.n	800725a <quorem+0xf2>
 8007210:	3601      	adds	r6, #1
 8007212:	4628      	mov	r0, r5
 8007214:	f04f 0c00 	mov.w	ip, #0
 8007218:	f858 2b04 	ldr.w	r2, [r8], #4
 800721c:	f8d0 e000 	ldr.w	lr, [r0]
 8007220:	b293      	uxth	r3, r2
 8007222:	ebac 0303 	sub.w	r3, ip, r3
 8007226:	0c12      	lsrs	r2, r2, #16
 8007228:	fa13 f38e 	uxtah	r3, r3, lr
 800722c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007230:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007234:	b29b      	uxth	r3, r3
 8007236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800723a:	45c1      	cmp	r9, r8
 800723c:	f840 3b04 	str.w	r3, [r0], #4
 8007240:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007244:	d2e8      	bcs.n	8007218 <quorem+0xb0>
 8007246:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800724a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800724e:	b922      	cbnz	r2, 800725a <quorem+0xf2>
 8007250:	3b04      	subs	r3, #4
 8007252:	429d      	cmp	r5, r3
 8007254:	461a      	mov	r2, r3
 8007256:	d30a      	bcc.n	800726e <quorem+0x106>
 8007258:	613c      	str	r4, [r7, #16]
 800725a:	4630      	mov	r0, r6
 800725c:	b003      	add	sp, #12
 800725e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007262:	6812      	ldr	r2, [r2, #0]
 8007264:	3b04      	subs	r3, #4
 8007266:	2a00      	cmp	r2, #0
 8007268:	d1cc      	bne.n	8007204 <quorem+0x9c>
 800726a:	3c01      	subs	r4, #1
 800726c:	e7c7      	b.n	80071fe <quorem+0x96>
 800726e:	6812      	ldr	r2, [r2, #0]
 8007270:	3b04      	subs	r3, #4
 8007272:	2a00      	cmp	r2, #0
 8007274:	d1f0      	bne.n	8007258 <quorem+0xf0>
 8007276:	3c01      	subs	r4, #1
 8007278:	e7eb      	b.n	8007252 <quorem+0xea>
 800727a:	2000      	movs	r0, #0
 800727c:	e7ee      	b.n	800725c <quorem+0xf4>
	...

08007280 <_dtoa_r>:
 8007280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007284:	ed2d 8b04 	vpush	{d8-d9}
 8007288:	ec57 6b10 	vmov	r6, r7, d0
 800728c:	b093      	sub	sp, #76	; 0x4c
 800728e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007290:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007294:	9106      	str	r1, [sp, #24]
 8007296:	ee10 aa10 	vmov	sl, s0
 800729a:	4604      	mov	r4, r0
 800729c:	9209      	str	r2, [sp, #36]	; 0x24
 800729e:	930c      	str	r3, [sp, #48]	; 0x30
 80072a0:	46bb      	mov	fp, r7
 80072a2:	b975      	cbnz	r5, 80072c2 <_dtoa_r+0x42>
 80072a4:	2010      	movs	r0, #16
 80072a6:	f000 fffd 	bl	80082a4 <malloc>
 80072aa:	4602      	mov	r2, r0
 80072ac:	6260      	str	r0, [r4, #36]	; 0x24
 80072ae:	b920      	cbnz	r0, 80072ba <_dtoa_r+0x3a>
 80072b0:	4ba7      	ldr	r3, [pc, #668]	; (8007550 <_dtoa_r+0x2d0>)
 80072b2:	21ea      	movs	r1, #234	; 0xea
 80072b4:	48a7      	ldr	r0, [pc, #668]	; (8007554 <_dtoa_r+0x2d4>)
 80072b6:	f001 fe45 	bl	8008f44 <__assert_func>
 80072ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80072be:	6005      	str	r5, [r0, #0]
 80072c0:	60c5      	str	r5, [r0, #12]
 80072c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072c4:	6819      	ldr	r1, [r3, #0]
 80072c6:	b151      	cbz	r1, 80072de <_dtoa_r+0x5e>
 80072c8:	685a      	ldr	r2, [r3, #4]
 80072ca:	604a      	str	r2, [r1, #4]
 80072cc:	2301      	movs	r3, #1
 80072ce:	4093      	lsls	r3, r2
 80072d0:	608b      	str	r3, [r1, #8]
 80072d2:	4620      	mov	r0, r4
 80072d4:	f001 f83c 	bl	8008350 <_Bfree>
 80072d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072da:	2200      	movs	r2, #0
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	1e3b      	subs	r3, r7, #0
 80072e0:	bfaa      	itet	ge
 80072e2:	2300      	movge	r3, #0
 80072e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80072e8:	f8c8 3000 	strge.w	r3, [r8]
 80072ec:	4b9a      	ldr	r3, [pc, #616]	; (8007558 <_dtoa_r+0x2d8>)
 80072ee:	bfbc      	itt	lt
 80072f0:	2201      	movlt	r2, #1
 80072f2:	f8c8 2000 	strlt.w	r2, [r8]
 80072f6:	ea33 030b 	bics.w	r3, r3, fp
 80072fa:	d11b      	bne.n	8007334 <_dtoa_r+0xb4>
 80072fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007308:	4333      	orrs	r3, r6
 800730a:	f000 8592 	beq.w	8007e32 <_dtoa_r+0xbb2>
 800730e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007310:	b963      	cbnz	r3, 800732c <_dtoa_r+0xac>
 8007312:	4b92      	ldr	r3, [pc, #584]	; (800755c <_dtoa_r+0x2dc>)
 8007314:	e022      	b.n	800735c <_dtoa_r+0xdc>
 8007316:	4b92      	ldr	r3, [pc, #584]	; (8007560 <_dtoa_r+0x2e0>)
 8007318:	9301      	str	r3, [sp, #4]
 800731a:	3308      	adds	r3, #8
 800731c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800731e:	6013      	str	r3, [r2, #0]
 8007320:	9801      	ldr	r0, [sp, #4]
 8007322:	b013      	add	sp, #76	; 0x4c
 8007324:	ecbd 8b04 	vpop	{d8-d9}
 8007328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800732c:	4b8b      	ldr	r3, [pc, #556]	; (800755c <_dtoa_r+0x2dc>)
 800732e:	9301      	str	r3, [sp, #4]
 8007330:	3303      	adds	r3, #3
 8007332:	e7f3      	b.n	800731c <_dtoa_r+0x9c>
 8007334:	2200      	movs	r2, #0
 8007336:	2300      	movs	r3, #0
 8007338:	4650      	mov	r0, sl
 800733a:	4659      	mov	r1, fp
 800733c:	f7f9 fbdc 	bl	8000af8 <__aeabi_dcmpeq>
 8007340:	ec4b ab19 	vmov	d9, sl, fp
 8007344:	4680      	mov	r8, r0
 8007346:	b158      	cbz	r0, 8007360 <_dtoa_r+0xe0>
 8007348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800734a:	2301      	movs	r3, #1
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 856b 	beq.w	8007e2c <_dtoa_r+0xbac>
 8007356:	4883      	ldr	r0, [pc, #524]	; (8007564 <_dtoa_r+0x2e4>)
 8007358:	6018      	str	r0, [r3, #0]
 800735a:	1e43      	subs	r3, r0, #1
 800735c:	9301      	str	r3, [sp, #4]
 800735e:	e7df      	b.n	8007320 <_dtoa_r+0xa0>
 8007360:	ec4b ab10 	vmov	d0, sl, fp
 8007364:	aa10      	add	r2, sp, #64	; 0x40
 8007366:	a911      	add	r1, sp, #68	; 0x44
 8007368:	4620      	mov	r0, r4
 800736a:	f001 fad9 	bl	8008920 <__d2b>
 800736e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007372:	ee08 0a10 	vmov	s16, r0
 8007376:	2d00      	cmp	r5, #0
 8007378:	f000 8084 	beq.w	8007484 <_dtoa_r+0x204>
 800737c:	ee19 3a90 	vmov	r3, s19
 8007380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007384:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007388:	4656      	mov	r6, sl
 800738a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800738e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007392:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007396:	4b74      	ldr	r3, [pc, #464]	; (8007568 <_dtoa_r+0x2e8>)
 8007398:	2200      	movs	r2, #0
 800739a:	4630      	mov	r0, r6
 800739c:	4639      	mov	r1, r7
 800739e:	f7f8 ff8b 	bl	80002b8 <__aeabi_dsub>
 80073a2:	a365      	add	r3, pc, #404	; (adr r3, 8007538 <_dtoa_r+0x2b8>)
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	f7f9 f93e 	bl	8000628 <__aeabi_dmul>
 80073ac:	a364      	add	r3, pc, #400	; (adr r3, 8007540 <_dtoa_r+0x2c0>)
 80073ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b2:	f7f8 ff83 	bl	80002bc <__adddf3>
 80073b6:	4606      	mov	r6, r0
 80073b8:	4628      	mov	r0, r5
 80073ba:	460f      	mov	r7, r1
 80073bc:	f7f9 f8ca 	bl	8000554 <__aeabi_i2d>
 80073c0:	a361      	add	r3, pc, #388	; (adr r3, 8007548 <_dtoa_r+0x2c8>)
 80073c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c6:	f7f9 f92f 	bl	8000628 <__aeabi_dmul>
 80073ca:	4602      	mov	r2, r0
 80073cc:	460b      	mov	r3, r1
 80073ce:	4630      	mov	r0, r6
 80073d0:	4639      	mov	r1, r7
 80073d2:	f7f8 ff73 	bl	80002bc <__adddf3>
 80073d6:	4606      	mov	r6, r0
 80073d8:	460f      	mov	r7, r1
 80073da:	f7f9 fbd5 	bl	8000b88 <__aeabi_d2iz>
 80073de:	2200      	movs	r2, #0
 80073e0:	9000      	str	r0, [sp, #0]
 80073e2:	2300      	movs	r3, #0
 80073e4:	4630      	mov	r0, r6
 80073e6:	4639      	mov	r1, r7
 80073e8:	f7f9 fb90 	bl	8000b0c <__aeabi_dcmplt>
 80073ec:	b150      	cbz	r0, 8007404 <_dtoa_r+0x184>
 80073ee:	9800      	ldr	r0, [sp, #0]
 80073f0:	f7f9 f8b0 	bl	8000554 <__aeabi_i2d>
 80073f4:	4632      	mov	r2, r6
 80073f6:	463b      	mov	r3, r7
 80073f8:	f7f9 fb7e 	bl	8000af8 <__aeabi_dcmpeq>
 80073fc:	b910      	cbnz	r0, 8007404 <_dtoa_r+0x184>
 80073fe:	9b00      	ldr	r3, [sp, #0]
 8007400:	3b01      	subs	r3, #1
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	9b00      	ldr	r3, [sp, #0]
 8007406:	2b16      	cmp	r3, #22
 8007408:	d85a      	bhi.n	80074c0 <_dtoa_r+0x240>
 800740a:	9a00      	ldr	r2, [sp, #0]
 800740c:	4b57      	ldr	r3, [pc, #348]	; (800756c <_dtoa_r+0x2ec>)
 800740e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	ec51 0b19 	vmov	r0, r1, d9
 800741a:	f7f9 fb77 	bl	8000b0c <__aeabi_dcmplt>
 800741e:	2800      	cmp	r0, #0
 8007420:	d050      	beq.n	80074c4 <_dtoa_r+0x244>
 8007422:	9b00      	ldr	r3, [sp, #0]
 8007424:	3b01      	subs	r3, #1
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	2300      	movs	r3, #0
 800742a:	930b      	str	r3, [sp, #44]	; 0x2c
 800742c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800742e:	1b5d      	subs	r5, r3, r5
 8007430:	1e6b      	subs	r3, r5, #1
 8007432:	9305      	str	r3, [sp, #20]
 8007434:	bf45      	ittet	mi
 8007436:	f1c5 0301 	rsbmi	r3, r5, #1
 800743a:	9304      	strmi	r3, [sp, #16]
 800743c:	2300      	movpl	r3, #0
 800743e:	2300      	movmi	r3, #0
 8007440:	bf4c      	ite	mi
 8007442:	9305      	strmi	r3, [sp, #20]
 8007444:	9304      	strpl	r3, [sp, #16]
 8007446:	9b00      	ldr	r3, [sp, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	db3d      	blt.n	80074c8 <_dtoa_r+0x248>
 800744c:	9b05      	ldr	r3, [sp, #20]
 800744e:	9a00      	ldr	r2, [sp, #0]
 8007450:	920a      	str	r2, [sp, #40]	; 0x28
 8007452:	4413      	add	r3, r2
 8007454:	9305      	str	r3, [sp, #20]
 8007456:	2300      	movs	r3, #0
 8007458:	9307      	str	r3, [sp, #28]
 800745a:	9b06      	ldr	r3, [sp, #24]
 800745c:	2b09      	cmp	r3, #9
 800745e:	f200 8089 	bhi.w	8007574 <_dtoa_r+0x2f4>
 8007462:	2b05      	cmp	r3, #5
 8007464:	bfc4      	itt	gt
 8007466:	3b04      	subgt	r3, #4
 8007468:	9306      	strgt	r3, [sp, #24]
 800746a:	9b06      	ldr	r3, [sp, #24]
 800746c:	f1a3 0302 	sub.w	r3, r3, #2
 8007470:	bfcc      	ite	gt
 8007472:	2500      	movgt	r5, #0
 8007474:	2501      	movle	r5, #1
 8007476:	2b03      	cmp	r3, #3
 8007478:	f200 8087 	bhi.w	800758a <_dtoa_r+0x30a>
 800747c:	e8df f003 	tbb	[pc, r3]
 8007480:	59383a2d 	.word	0x59383a2d
 8007484:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007488:	441d      	add	r5, r3
 800748a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800748e:	2b20      	cmp	r3, #32
 8007490:	bfc1      	itttt	gt
 8007492:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007496:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800749a:	fa0b f303 	lslgt.w	r3, fp, r3
 800749e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80074a2:	bfda      	itte	le
 80074a4:	f1c3 0320 	rsble	r3, r3, #32
 80074a8:	fa06 f003 	lslle.w	r0, r6, r3
 80074ac:	4318      	orrgt	r0, r3
 80074ae:	f7f9 f841 	bl	8000534 <__aeabi_ui2d>
 80074b2:	2301      	movs	r3, #1
 80074b4:	4606      	mov	r6, r0
 80074b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80074ba:	3d01      	subs	r5, #1
 80074bc:	930e      	str	r3, [sp, #56]	; 0x38
 80074be:	e76a      	b.n	8007396 <_dtoa_r+0x116>
 80074c0:	2301      	movs	r3, #1
 80074c2:	e7b2      	b.n	800742a <_dtoa_r+0x1aa>
 80074c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80074c6:	e7b1      	b.n	800742c <_dtoa_r+0x1ac>
 80074c8:	9b04      	ldr	r3, [sp, #16]
 80074ca:	9a00      	ldr	r2, [sp, #0]
 80074cc:	1a9b      	subs	r3, r3, r2
 80074ce:	9304      	str	r3, [sp, #16]
 80074d0:	4253      	negs	r3, r2
 80074d2:	9307      	str	r3, [sp, #28]
 80074d4:	2300      	movs	r3, #0
 80074d6:	930a      	str	r3, [sp, #40]	; 0x28
 80074d8:	e7bf      	b.n	800745a <_dtoa_r+0x1da>
 80074da:	2300      	movs	r3, #0
 80074dc:	9308      	str	r3, [sp, #32]
 80074de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	dc55      	bgt.n	8007590 <_dtoa_r+0x310>
 80074e4:	2301      	movs	r3, #1
 80074e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80074ea:	461a      	mov	r2, r3
 80074ec:	9209      	str	r2, [sp, #36]	; 0x24
 80074ee:	e00c      	b.n	800750a <_dtoa_r+0x28a>
 80074f0:	2301      	movs	r3, #1
 80074f2:	e7f3      	b.n	80074dc <_dtoa_r+0x25c>
 80074f4:	2300      	movs	r3, #0
 80074f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074f8:	9308      	str	r3, [sp, #32]
 80074fa:	9b00      	ldr	r3, [sp, #0]
 80074fc:	4413      	add	r3, r2
 80074fe:	9302      	str	r3, [sp, #8]
 8007500:	3301      	adds	r3, #1
 8007502:	2b01      	cmp	r3, #1
 8007504:	9303      	str	r3, [sp, #12]
 8007506:	bfb8      	it	lt
 8007508:	2301      	movlt	r3, #1
 800750a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800750c:	2200      	movs	r2, #0
 800750e:	6042      	str	r2, [r0, #4]
 8007510:	2204      	movs	r2, #4
 8007512:	f102 0614 	add.w	r6, r2, #20
 8007516:	429e      	cmp	r6, r3
 8007518:	6841      	ldr	r1, [r0, #4]
 800751a:	d93d      	bls.n	8007598 <_dtoa_r+0x318>
 800751c:	4620      	mov	r0, r4
 800751e:	f000 fed7 	bl	80082d0 <_Balloc>
 8007522:	9001      	str	r0, [sp, #4]
 8007524:	2800      	cmp	r0, #0
 8007526:	d13b      	bne.n	80075a0 <_dtoa_r+0x320>
 8007528:	4b11      	ldr	r3, [pc, #68]	; (8007570 <_dtoa_r+0x2f0>)
 800752a:	4602      	mov	r2, r0
 800752c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007530:	e6c0      	b.n	80072b4 <_dtoa_r+0x34>
 8007532:	2301      	movs	r3, #1
 8007534:	e7df      	b.n	80074f6 <_dtoa_r+0x276>
 8007536:	bf00      	nop
 8007538:	636f4361 	.word	0x636f4361
 800753c:	3fd287a7 	.word	0x3fd287a7
 8007540:	8b60c8b3 	.word	0x8b60c8b3
 8007544:	3fc68a28 	.word	0x3fc68a28
 8007548:	509f79fb 	.word	0x509f79fb
 800754c:	3fd34413 	.word	0x3fd34413
 8007550:	08009af5 	.word	0x08009af5
 8007554:	08009b0c 	.word	0x08009b0c
 8007558:	7ff00000 	.word	0x7ff00000
 800755c:	08009af1 	.word	0x08009af1
 8007560:	08009ae8 	.word	0x08009ae8
 8007564:	08009ac5 	.word	0x08009ac5
 8007568:	3ff80000 	.word	0x3ff80000
 800756c:	08009c60 	.word	0x08009c60
 8007570:	08009b67 	.word	0x08009b67
 8007574:	2501      	movs	r5, #1
 8007576:	2300      	movs	r3, #0
 8007578:	9306      	str	r3, [sp, #24]
 800757a:	9508      	str	r5, [sp, #32]
 800757c:	f04f 33ff 	mov.w	r3, #4294967295
 8007580:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007584:	2200      	movs	r2, #0
 8007586:	2312      	movs	r3, #18
 8007588:	e7b0      	b.n	80074ec <_dtoa_r+0x26c>
 800758a:	2301      	movs	r3, #1
 800758c:	9308      	str	r3, [sp, #32]
 800758e:	e7f5      	b.n	800757c <_dtoa_r+0x2fc>
 8007590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007592:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007596:	e7b8      	b.n	800750a <_dtoa_r+0x28a>
 8007598:	3101      	adds	r1, #1
 800759a:	6041      	str	r1, [r0, #4]
 800759c:	0052      	lsls	r2, r2, #1
 800759e:	e7b8      	b.n	8007512 <_dtoa_r+0x292>
 80075a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075a2:	9a01      	ldr	r2, [sp, #4]
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	9b03      	ldr	r3, [sp, #12]
 80075a8:	2b0e      	cmp	r3, #14
 80075aa:	f200 809d 	bhi.w	80076e8 <_dtoa_r+0x468>
 80075ae:	2d00      	cmp	r5, #0
 80075b0:	f000 809a 	beq.w	80076e8 <_dtoa_r+0x468>
 80075b4:	9b00      	ldr	r3, [sp, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	dd32      	ble.n	8007620 <_dtoa_r+0x3a0>
 80075ba:	4ab7      	ldr	r2, [pc, #732]	; (8007898 <_dtoa_r+0x618>)
 80075bc:	f003 030f 	and.w	r3, r3, #15
 80075c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80075c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075c8:	9b00      	ldr	r3, [sp, #0]
 80075ca:	05d8      	lsls	r0, r3, #23
 80075cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80075d0:	d516      	bpl.n	8007600 <_dtoa_r+0x380>
 80075d2:	4bb2      	ldr	r3, [pc, #712]	; (800789c <_dtoa_r+0x61c>)
 80075d4:	ec51 0b19 	vmov	r0, r1, d9
 80075d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075dc:	f7f9 f94e 	bl	800087c <__aeabi_ddiv>
 80075e0:	f007 070f 	and.w	r7, r7, #15
 80075e4:	4682      	mov	sl, r0
 80075e6:	468b      	mov	fp, r1
 80075e8:	2503      	movs	r5, #3
 80075ea:	4eac      	ldr	r6, [pc, #688]	; (800789c <_dtoa_r+0x61c>)
 80075ec:	b957      	cbnz	r7, 8007604 <_dtoa_r+0x384>
 80075ee:	4642      	mov	r2, r8
 80075f0:	464b      	mov	r3, r9
 80075f2:	4650      	mov	r0, sl
 80075f4:	4659      	mov	r1, fp
 80075f6:	f7f9 f941 	bl	800087c <__aeabi_ddiv>
 80075fa:	4682      	mov	sl, r0
 80075fc:	468b      	mov	fp, r1
 80075fe:	e028      	b.n	8007652 <_dtoa_r+0x3d2>
 8007600:	2502      	movs	r5, #2
 8007602:	e7f2      	b.n	80075ea <_dtoa_r+0x36a>
 8007604:	07f9      	lsls	r1, r7, #31
 8007606:	d508      	bpl.n	800761a <_dtoa_r+0x39a>
 8007608:	4640      	mov	r0, r8
 800760a:	4649      	mov	r1, r9
 800760c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007610:	f7f9 f80a 	bl	8000628 <__aeabi_dmul>
 8007614:	3501      	adds	r5, #1
 8007616:	4680      	mov	r8, r0
 8007618:	4689      	mov	r9, r1
 800761a:	107f      	asrs	r7, r7, #1
 800761c:	3608      	adds	r6, #8
 800761e:	e7e5      	b.n	80075ec <_dtoa_r+0x36c>
 8007620:	f000 809b 	beq.w	800775a <_dtoa_r+0x4da>
 8007624:	9b00      	ldr	r3, [sp, #0]
 8007626:	4f9d      	ldr	r7, [pc, #628]	; (800789c <_dtoa_r+0x61c>)
 8007628:	425e      	negs	r6, r3
 800762a:	4b9b      	ldr	r3, [pc, #620]	; (8007898 <_dtoa_r+0x618>)
 800762c:	f006 020f 	and.w	r2, r6, #15
 8007630:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007638:	ec51 0b19 	vmov	r0, r1, d9
 800763c:	f7f8 fff4 	bl	8000628 <__aeabi_dmul>
 8007640:	1136      	asrs	r6, r6, #4
 8007642:	4682      	mov	sl, r0
 8007644:	468b      	mov	fp, r1
 8007646:	2300      	movs	r3, #0
 8007648:	2502      	movs	r5, #2
 800764a:	2e00      	cmp	r6, #0
 800764c:	d17a      	bne.n	8007744 <_dtoa_r+0x4c4>
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1d3      	bne.n	80075fa <_dtoa_r+0x37a>
 8007652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007654:	2b00      	cmp	r3, #0
 8007656:	f000 8082 	beq.w	800775e <_dtoa_r+0x4de>
 800765a:	4b91      	ldr	r3, [pc, #580]	; (80078a0 <_dtoa_r+0x620>)
 800765c:	2200      	movs	r2, #0
 800765e:	4650      	mov	r0, sl
 8007660:	4659      	mov	r1, fp
 8007662:	f7f9 fa53 	bl	8000b0c <__aeabi_dcmplt>
 8007666:	2800      	cmp	r0, #0
 8007668:	d079      	beq.n	800775e <_dtoa_r+0x4de>
 800766a:	9b03      	ldr	r3, [sp, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d076      	beq.n	800775e <_dtoa_r+0x4de>
 8007670:	9b02      	ldr	r3, [sp, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	dd36      	ble.n	80076e4 <_dtoa_r+0x464>
 8007676:	9b00      	ldr	r3, [sp, #0]
 8007678:	4650      	mov	r0, sl
 800767a:	4659      	mov	r1, fp
 800767c:	1e5f      	subs	r7, r3, #1
 800767e:	2200      	movs	r2, #0
 8007680:	4b88      	ldr	r3, [pc, #544]	; (80078a4 <_dtoa_r+0x624>)
 8007682:	f7f8 ffd1 	bl	8000628 <__aeabi_dmul>
 8007686:	9e02      	ldr	r6, [sp, #8]
 8007688:	4682      	mov	sl, r0
 800768a:	468b      	mov	fp, r1
 800768c:	3501      	adds	r5, #1
 800768e:	4628      	mov	r0, r5
 8007690:	f7f8 ff60 	bl	8000554 <__aeabi_i2d>
 8007694:	4652      	mov	r2, sl
 8007696:	465b      	mov	r3, fp
 8007698:	f7f8 ffc6 	bl	8000628 <__aeabi_dmul>
 800769c:	4b82      	ldr	r3, [pc, #520]	; (80078a8 <_dtoa_r+0x628>)
 800769e:	2200      	movs	r2, #0
 80076a0:	f7f8 fe0c 	bl	80002bc <__adddf3>
 80076a4:	46d0      	mov	r8, sl
 80076a6:	46d9      	mov	r9, fp
 80076a8:	4682      	mov	sl, r0
 80076aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80076ae:	2e00      	cmp	r6, #0
 80076b0:	d158      	bne.n	8007764 <_dtoa_r+0x4e4>
 80076b2:	4b7e      	ldr	r3, [pc, #504]	; (80078ac <_dtoa_r+0x62c>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	4640      	mov	r0, r8
 80076b8:	4649      	mov	r1, r9
 80076ba:	f7f8 fdfd 	bl	80002b8 <__aeabi_dsub>
 80076be:	4652      	mov	r2, sl
 80076c0:	465b      	mov	r3, fp
 80076c2:	4680      	mov	r8, r0
 80076c4:	4689      	mov	r9, r1
 80076c6:	f7f9 fa3f 	bl	8000b48 <__aeabi_dcmpgt>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	f040 8295 	bne.w	8007bfa <_dtoa_r+0x97a>
 80076d0:	4652      	mov	r2, sl
 80076d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80076d6:	4640      	mov	r0, r8
 80076d8:	4649      	mov	r1, r9
 80076da:	f7f9 fa17 	bl	8000b0c <__aeabi_dcmplt>
 80076de:	2800      	cmp	r0, #0
 80076e0:	f040 8289 	bne.w	8007bf6 <_dtoa_r+0x976>
 80076e4:	ec5b ab19 	vmov	sl, fp, d9
 80076e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f2c0 8148 	blt.w	8007980 <_dtoa_r+0x700>
 80076f0:	9a00      	ldr	r2, [sp, #0]
 80076f2:	2a0e      	cmp	r2, #14
 80076f4:	f300 8144 	bgt.w	8007980 <_dtoa_r+0x700>
 80076f8:	4b67      	ldr	r3, [pc, #412]	; (8007898 <_dtoa_r+0x618>)
 80076fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007704:	2b00      	cmp	r3, #0
 8007706:	f280 80d5 	bge.w	80078b4 <_dtoa_r+0x634>
 800770a:	9b03      	ldr	r3, [sp, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	f300 80d1 	bgt.w	80078b4 <_dtoa_r+0x634>
 8007712:	f040 826f 	bne.w	8007bf4 <_dtoa_r+0x974>
 8007716:	4b65      	ldr	r3, [pc, #404]	; (80078ac <_dtoa_r+0x62c>)
 8007718:	2200      	movs	r2, #0
 800771a:	4640      	mov	r0, r8
 800771c:	4649      	mov	r1, r9
 800771e:	f7f8 ff83 	bl	8000628 <__aeabi_dmul>
 8007722:	4652      	mov	r2, sl
 8007724:	465b      	mov	r3, fp
 8007726:	f7f9 fa05 	bl	8000b34 <__aeabi_dcmpge>
 800772a:	9e03      	ldr	r6, [sp, #12]
 800772c:	4637      	mov	r7, r6
 800772e:	2800      	cmp	r0, #0
 8007730:	f040 8245 	bne.w	8007bbe <_dtoa_r+0x93e>
 8007734:	9d01      	ldr	r5, [sp, #4]
 8007736:	2331      	movs	r3, #49	; 0x31
 8007738:	f805 3b01 	strb.w	r3, [r5], #1
 800773c:	9b00      	ldr	r3, [sp, #0]
 800773e:	3301      	adds	r3, #1
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	e240      	b.n	8007bc6 <_dtoa_r+0x946>
 8007744:	07f2      	lsls	r2, r6, #31
 8007746:	d505      	bpl.n	8007754 <_dtoa_r+0x4d4>
 8007748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800774c:	f7f8 ff6c 	bl	8000628 <__aeabi_dmul>
 8007750:	3501      	adds	r5, #1
 8007752:	2301      	movs	r3, #1
 8007754:	1076      	asrs	r6, r6, #1
 8007756:	3708      	adds	r7, #8
 8007758:	e777      	b.n	800764a <_dtoa_r+0x3ca>
 800775a:	2502      	movs	r5, #2
 800775c:	e779      	b.n	8007652 <_dtoa_r+0x3d2>
 800775e:	9f00      	ldr	r7, [sp, #0]
 8007760:	9e03      	ldr	r6, [sp, #12]
 8007762:	e794      	b.n	800768e <_dtoa_r+0x40e>
 8007764:	9901      	ldr	r1, [sp, #4]
 8007766:	4b4c      	ldr	r3, [pc, #304]	; (8007898 <_dtoa_r+0x618>)
 8007768:	4431      	add	r1, r6
 800776a:	910d      	str	r1, [sp, #52]	; 0x34
 800776c:	9908      	ldr	r1, [sp, #32]
 800776e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007772:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007776:	2900      	cmp	r1, #0
 8007778:	d043      	beq.n	8007802 <_dtoa_r+0x582>
 800777a:	494d      	ldr	r1, [pc, #308]	; (80078b0 <_dtoa_r+0x630>)
 800777c:	2000      	movs	r0, #0
 800777e:	f7f9 f87d 	bl	800087c <__aeabi_ddiv>
 8007782:	4652      	mov	r2, sl
 8007784:	465b      	mov	r3, fp
 8007786:	f7f8 fd97 	bl	80002b8 <__aeabi_dsub>
 800778a:	9d01      	ldr	r5, [sp, #4]
 800778c:	4682      	mov	sl, r0
 800778e:	468b      	mov	fp, r1
 8007790:	4649      	mov	r1, r9
 8007792:	4640      	mov	r0, r8
 8007794:	f7f9 f9f8 	bl	8000b88 <__aeabi_d2iz>
 8007798:	4606      	mov	r6, r0
 800779a:	f7f8 fedb 	bl	8000554 <__aeabi_i2d>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	4640      	mov	r0, r8
 80077a4:	4649      	mov	r1, r9
 80077a6:	f7f8 fd87 	bl	80002b8 <__aeabi_dsub>
 80077aa:	3630      	adds	r6, #48	; 0x30
 80077ac:	f805 6b01 	strb.w	r6, [r5], #1
 80077b0:	4652      	mov	r2, sl
 80077b2:	465b      	mov	r3, fp
 80077b4:	4680      	mov	r8, r0
 80077b6:	4689      	mov	r9, r1
 80077b8:	f7f9 f9a8 	bl	8000b0c <__aeabi_dcmplt>
 80077bc:	2800      	cmp	r0, #0
 80077be:	d163      	bne.n	8007888 <_dtoa_r+0x608>
 80077c0:	4642      	mov	r2, r8
 80077c2:	464b      	mov	r3, r9
 80077c4:	4936      	ldr	r1, [pc, #216]	; (80078a0 <_dtoa_r+0x620>)
 80077c6:	2000      	movs	r0, #0
 80077c8:	f7f8 fd76 	bl	80002b8 <__aeabi_dsub>
 80077cc:	4652      	mov	r2, sl
 80077ce:	465b      	mov	r3, fp
 80077d0:	f7f9 f99c 	bl	8000b0c <__aeabi_dcmplt>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	f040 80b5 	bne.w	8007944 <_dtoa_r+0x6c4>
 80077da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077dc:	429d      	cmp	r5, r3
 80077de:	d081      	beq.n	80076e4 <_dtoa_r+0x464>
 80077e0:	4b30      	ldr	r3, [pc, #192]	; (80078a4 <_dtoa_r+0x624>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	4650      	mov	r0, sl
 80077e6:	4659      	mov	r1, fp
 80077e8:	f7f8 ff1e 	bl	8000628 <__aeabi_dmul>
 80077ec:	4b2d      	ldr	r3, [pc, #180]	; (80078a4 <_dtoa_r+0x624>)
 80077ee:	4682      	mov	sl, r0
 80077f0:	468b      	mov	fp, r1
 80077f2:	4640      	mov	r0, r8
 80077f4:	4649      	mov	r1, r9
 80077f6:	2200      	movs	r2, #0
 80077f8:	f7f8 ff16 	bl	8000628 <__aeabi_dmul>
 80077fc:	4680      	mov	r8, r0
 80077fe:	4689      	mov	r9, r1
 8007800:	e7c6      	b.n	8007790 <_dtoa_r+0x510>
 8007802:	4650      	mov	r0, sl
 8007804:	4659      	mov	r1, fp
 8007806:	f7f8 ff0f 	bl	8000628 <__aeabi_dmul>
 800780a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800780c:	9d01      	ldr	r5, [sp, #4]
 800780e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007810:	4682      	mov	sl, r0
 8007812:	468b      	mov	fp, r1
 8007814:	4649      	mov	r1, r9
 8007816:	4640      	mov	r0, r8
 8007818:	f7f9 f9b6 	bl	8000b88 <__aeabi_d2iz>
 800781c:	4606      	mov	r6, r0
 800781e:	f7f8 fe99 	bl	8000554 <__aeabi_i2d>
 8007822:	3630      	adds	r6, #48	; 0x30
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	4640      	mov	r0, r8
 800782a:	4649      	mov	r1, r9
 800782c:	f7f8 fd44 	bl	80002b8 <__aeabi_dsub>
 8007830:	f805 6b01 	strb.w	r6, [r5], #1
 8007834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007836:	429d      	cmp	r5, r3
 8007838:	4680      	mov	r8, r0
 800783a:	4689      	mov	r9, r1
 800783c:	f04f 0200 	mov.w	r2, #0
 8007840:	d124      	bne.n	800788c <_dtoa_r+0x60c>
 8007842:	4b1b      	ldr	r3, [pc, #108]	; (80078b0 <_dtoa_r+0x630>)
 8007844:	4650      	mov	r0, sl
 8007846:	4659      	mov	r1, fp
 8007848:	f7f8 fd38 	bl	80002bc <__adddf3>
 800784c:	4602      	mov	r2, r0
 800784e:	460b      	mov	r3, r1
 8007850:	4640      	mov	r0, r8
 8007852:	4649      	mov	r1, r9
 8007854:	f7f9 f978 	bl	8000b48 <__aeabi_dcmpgt>
 8007858:	2800      	cmp	r0, #0
 800785a:	d173      	bne.n	8007944 <_dtoa_r+0x6c4>
 800785c:	4652      	mov	r2, sl
 800785e:	465b      	mov	r3, fp
 8007860:	4913      	ldr	r1, [pc, #76]	; (80078b0 <_dtoa_r+0x630>)
 8007862:	2000      	movs	r0, #0
 8007864:	f7f8 fd28 	bl	80002b8 <__aeabi_dsub>
 8007868:	4602      	mov	r2, r0
 800786a:	460b      	mov	r3, r1
 800786c:	4640      	mov	r0, r8
 800786e:	4649      	mov	r1, r9
 8007870:	f7f9 f94c 	bl	8000b0c <__aeabi_dcmplt>
 8007874:	2800      	cmp	r0, #0
 8007876:	f43f af35 	beq.w	80076e4 <_dtoa_r+0x464>
 800787a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800787c:	1e6b      	subs	r3, r5, #1
 800787e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007880:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007884:	2b30      	cmp	r3, #48	; 0x30
 8007886:	d0f8      	beq.n	800787a <_dtoa_r+0x5fa>
 8007888:	9700      	str	r7, [sp, #0]
 800788a:	e049      	b.n	8007920 <_dtoa_r+0x6a0>
 800788c:	4b05      	ldr	r3, [pc, #20]	; (80078a4 <_dtoa_r+0x624>)
 800788e:	f7f8 fecb 	bl	8000628 <__aeabi_dmul>
 8007892:	4680      	mov	r8, r0
 8007894:	4689      	mov	r9, r1
 8007896:	e7bd      	b.n	8007814 <_dtoa_r+0x594>
 8007898:	08009c60 	.word	0x08009c60
 800789c:	08009c38 	.word	0x08009c38
 80078a0:	3ff00000 	.word	0x3ff00000
 80078a4:	40240000 	.word	0x40240000
 80078a8:	401c0000 	.word	0x401c0000
 80078ac:	40140000 	.word	0x40140000
 80078b0:	3fe00000 	.word	0x3fe00000
 80078b4:	9d01      	ldr	r5, [sp, #4]
 80078b6:	4656      	mov	r6, sl
 80078b8:	465f      	mov	r7, fp
 80078ba:	4642      	mov	r2, r8
 80078bc:	464b      	mov	r3, r9
 80078be:	4630      	mov	r0, r6
 80078c0:	4639      	mov	r1, r7
 80078c2:	f7f8 ffdb 	bl	800087c <__aeabi_ddiv>
 80078c6:	f7f9 f95f 	bl	8000b88 <__aeabi_d2iz>
 80078ca:	4682      	mov	sl, r0
 80078cc:	f7f8 fe42 	bl	8000554 <__aeabi_i2d>
 80078d0:	4642      	mov	r2, r8
 80078d2:	464b      	mov	r3, r9
 80078d4:	f7f8 fea8 	bl	8000628 <__aeabi_dmul>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4630      	mov	r0, r6
 80078de:	4639      	mov	r1, r7
 80078e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80078e4:	f7f8 fce8 	bl	80002b8 <__aeabi_dsub>
 80078e8:	f805 6b01 	strb.w	r6, [r5], #1
 80078ec:	9e01      	ldr	r6, [sp, #4]
 80078ee:	9f03      	ldr	r7, [sp, #12]
 80078f0:	1bae      	subs	r6, r5, r6
 80078f2:	42b7      	cmp	r7, r6
 80078f4:	4602      	mov	r2, r0
 80078f6:	460b      	mov	r3, r1
 80078f8:	d135      	bne.n	8007966 <_dtoa_r+0x6e6>
 80078fa:	f7f8 fcdf 	bl	80002bc <__adddf3>
 80078fe:	4642      	mov	r2, r8
 8007900:	464b      	mov	r3, r9
 8007902:	4606      	mov	r6, r0
 8007904:	460f      	mov	r7, r1
 8007906:	f7f9 f91f 	bl	8000b48 <__aeabi_dcmpgt>
 800790a:	b9d0      	cbnz	r0, 8007942 <_dtoa_r+0x6c2>
 800790c:	4642      	mov	r2, r8
 800790e:	464b      	mov	r3, r9
 8007910:	4630      	mov	r0, r6
 8007912:	4639      	mov	r1, r7
 8007914:	f7f9 f8f0 	bl	8000af8 <__aeabi_dcmpeq>
 8007918:	b110      	cbz	r0, 8007920 <_dtoa_r+0x6a0>
 800791a:	f01a 0f01 	tst.w	sl, #1
 800791e:	d110      	bne.n	8007942 <_dtoa_r+0x6c2>
 8007920:	4620      	mov	r0, r4
 8007922:	ee18 1a10 	vmov	r1, s16
 8007926:	f000 fd13 	bl	8008350 <_Bfree>
 800792a:	2300      	movs	r3, #0
 800792c:	9800      	ldr	r0, [sp, #0]
 800792e:	702b      	strb	r3, [r5, #0]
 8007930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007932:	3001      	adds	r0, #1
 8007934:	6018      	str	r0, [r3, #0]
 8007936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007938:	2b00      	cmp	r3, #0
 800793a:	f43f acf1 	beq.w	8007320 <_dtoa_r+0xa0>
 800793e:	601d      	str	r5, [r3, #0]
 8007940:	e4ee      	b.n	8007320 <_dtoa_r+0xa0>
 8007942:	9f00      	ldr	r7, [sp, #0]
 8007944:	462b      	mov	r3, r5
 8007946:	461d      	mov	r5, r3
 8007948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800794c:	2a39      	cmp	r2, #57	; 0x39
 800794e:	d106      	bne.n	800795e <_dtoa_r+0x6de>
 8007950:	9a01      	ldr	r2, [sp, #4]
 8007952:	429a      	cmp	r2, r3
 8007954:	d1f7      	bne.n	8007946 <_dtoa_r+0x6c6>
 8007956:	9901      	ldr	r1, [sp, #4]
 8007958:	2230      	movs	r2, #48	; 0x30
 800795a:	3701      	adds	r7, #1
 800795c:	700a      	strb	r2, [r1, #0]
 800795e:	781a      	ldrb	r2, [r3, #0]
 8007960:	3201      	adds	r2, #1
 8007962:	701a      	strb	r2, [r3, #0]
 8007964:	e790      	b.n	8007888 <_dtoa_r+0x608>
 8007966:	4ba6      	ldr	r3, [pc, #664]	; (8007c00 <_dtoa_r+0x980>)
 8007968:	2200      	movs	r2, #0
 800796a:	f7f8 fe5d 	bl	8000628 <__aeabi_dmul>
 800796e:	2200      	movs	r2, #0
 8007970:	2300      	movs	r3, #0
 8007972:	4606      	mov	r6, r0
 8007974:	460f      	mov	r7, r1
 8007976:	f7f9 f8bf 	bl	8000af8 <__aeabi_dcmpeq>
 800797a:	2800      	cmp	r0, #0
 800797c:	d09d      	beq.n	80078ba <_dtoa_r+0x63a>
 800797e:	e7cf      	b.n	8007920 <_dtoa_r+0x6a0>
 8007980:	9a08      	ldr	r2, [sp, #32]
 8007982:	2a00      	cmp	r2, #0
 8007984:	f000 80d7 	beq.w	8007b36 <_dtoa_r+0x8b6>
 8007988:	9a06      	ldr	r2, [sp, #24]
 800798a:	2a01      	cmp	r2, #1
 800798c:	f300 80ba 	bgt.w	8007b04 <_dtoa_r+0x884>
 8007990:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007992:	2a00      	cmp	r2, #0
 8007994:	f000 80b2 	beq.w	8007afc <_dtoa_r+0x87c>
 8007998:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800799c:	9e07      	ldr	r6, [sp, #28]
 800799e:	9d04      	ldr	r5, [sp, #16]
 80079a0:	9a04      	ldr	r2, [sp, #16]
 80079a2:	441a      	add	r2, r3
 80079a4:	9204      	str	r2, [sp, #16]
 80079a6:	9a05      	ldr	r2, [sp, #20]
 80079a8:	2101      	movs	r1, #1
 80079aa:	441a      	add	r2, r3
 80079ac:	4620      	mov	r0, r4
 80079ae:	9205      	str	r2, [sp, #20]
 80079b0:	f000 fd86 	bl	80084c0 <__i2b>
 80079b4:	4607      	mov	r7, r0
 80079b6:	2d00      	cmp	r5, #0
 80079b8:	dd0c      	ble.n	80079d4 <_dtoa_r+0x754>
 80079ba:	9b05      	ldr	r3, [sp, #20]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	dd09      	ble.n	80079d4 <_dtoa_r+0x754>
 80079c0:	42ab      	cmp	r3, r5
 80079c2:	9a04      	ldr	r2, [sp, #16]
 80079c4:	bfa8      	it	ge
 80079c6:	462b      	movge	r3, r5
 80079c8:	1ad2      	subs	r2, r2, r3
 80079ca:	9204      	str	r2, [sp, #16]
 80079cc:	9a05      	ldr	r2, [sp, #20]
 80079ce:	1aed      	subs	r5, r5, r3
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	9305      	str	r3, [sp, #20]
 80079d4:	9b07      	ldr	r3, [sp, #28]
 80079d6:	b31b      	cbz	r3, 8007a20 <_dtoa_r+0x7a0>
 80079d8:	9b08      	ldr	r3, [sp, #32]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 80af 	beq.w	8007b3e <_dtoa_r+0x8be>
 80079e0:	2e00      	cmp	r6, #0
 80079e2:	dd13      	ble.n	8007a0c <_dtoa_r+0x78c>
 80079e4:	4639      	mov	r1, r7
 80079e6:	4632      	mov	r2, r6
 80079e8:	4620      	mov	r0, r4
 80079ea:	f000 fe29 	bl	8008640 <__pow5mult>
 80079ee:	ee18 2a10 	vmov	r2, s16
 80079f2:	4601      	mov	r1, r0
 80079f4:	4607      	mov	r7, r0
 80079f6:	4620      	mov	r0, r4
 80079f8:	f000 fd78 	bl	80084ec <__multiply>
 80079fc:	ee18 1a10 	vmov	r1, s16
 8007a00:	4680      	mov	r8, r0
 8007a02:	4620      	mov	r0, r4
 8007a04:	f000 fca4 	bl	8008350 <_Bfree>
 8007a08:	ee08 8a10 	vmov	s16, r8
 8007a0c:	9b07      	ldr	r3, [sp, #28]
 8007a0e:	1b9a      	subs	r2, r3, r6
 8007a10:	d006      	beq.n	8007a20 <_dtoa_r+0x7a0>
 8007a12:	ee18 1a10 	vmov	r1, s16
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 fe12 	bl	8008640 <__pow5mult>
 8007a1c:	ee08 0a10 	vmov	s16, r0
 8007a20:	2101      	movs	r1, #1
 8007a22:	4620      	mov	r0, r4
 8007a24:	f000 fd4c 	bl	80084c0 <__i2b>
 8007a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	4606      	mov	r6, r0
 8007a2e:	f340 8088 	ble.w	8007b42 <_dtoa_r+0x8c2>
 8007a32:	461a      	mov	r2, r3
 8007a34:	4601      	mov	r1, r0
 8007a36:	4620      	mov	r0, r4
 8007a38:	f000 fe02 	bl	8008640 <__pow5mult>
 8007a3c:	9b06      	ldr	r3, [sp, #24]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	4606      	mov	r6, r0
 8007a42:	f340 8081 	ble.w	8007b48 <_dtoa_r+0x8c8>
 8007a46:	f04f 0800 	mov.w	r8, #0
 8007a4a:	6933      	ldr	r3, [r6, #16]
 8007a4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007a50:	6918      	ldr	r0, [r3, #16]
 8007a52:	f000 fce5 	bl	8008420 <__hi0bits>
 8007a56:	f1c0 0020 	rsb	r0, r0, #32
 8007a5a:	9b05      	ldr	r3, [sp, #20]
 8007a5c:	4418      	add	r0, r3
 8007a5e:	f010 001f 	ands.w	r0, r0, #31
 8007a62:	f000 8092 	beq.w	8007b8a <_dtoa_r+0x90a>
 8007a66:	f1c0 0320 	rsb	r3, r0, #32
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	f340 808a 	ble.w	8007b84 <_dtoa_r+0x904>
 8007a70:	f1c0 001c 	rsb	r0, r0, #28
 8007a74:	9b04      	ldr	r3, [sp, #16]
 8007a76:	4403      	add	r3, r0
 8007a78:	9304      	str	r3, [sp, #16]
 8007a7a:	9b05      	ldr	r3, [sp, #20]
 8007a7c:	4403      	add	r3, r0
 8007a7e:	4405      	add	r5, r0
 8007a80:	9305      	str	r3, [sp, #20]
 8007a82:	9b04      	ldr	r3, [sp, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	dd07      	ble.n	8007a98 <_dtoa_r+0x818>
 8007a88:	ee18 1a10 	vmov	r1, s16
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 fe30 	bl	80086f4 <__lshift>
 8007a94:	ee08 0a10 	vmov	s16, r0
 8007a98:	9b05      	ldr	r3, [sp, #20]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	dd05      	ble.n	8007aaa <_dtoa_r+0x82a>
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f000 fe26 	bl	80086f4 <__lshift>
 8007aa8:	4606      	mov	r6, r0
 8007aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d06e      	beq.n	8007b8e <_dtoa_r+0x90e>
 8007ab0:	ee18 0a10 	vmov	r0, s16
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	f000 fe8d 	bl	80087d4 <__mcmp>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	da67      	bge.n	8007b8e <_dtoa_r+0x90e>
 8007abe:	9b00      	ldr	r3, [sp, #0]
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	ee18 1a10 	vmov	r1, s16
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	220a      	movs	r2, #10
 8007aca:	2300      	movs	r3, #0
 8007acc:	4620      	mov	r0, r4
 8007ace:	f000 fc61 	bl	8008394 <__multadd>
 8007ad2:	9b08      	ldr	r3, [sp, #32]
 8007ad4:	ee08 0a10 	vmov	s16, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 81b1 	beq.w	8007e40 <_dtoa_r+0xbc0>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	4639      	mov	r1, r7
 8007ae2:	220a      	movs	r2, #10
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	f000 fc55 	bl	8008394 <__multadd>
 8007aea:	9b02      	ldr	r3, [sp, #8]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	4607      	mov	r7, r0
 8007af0:	f300 808e 	bgt.w	8007c10 <_dtoa_r+0x990>
 8007af4:	9b06      	ldr	r3, [sp, #24]
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	dc51      	bgt.n	8007b9e <_dtoa_r+0x91e>
 8007afa:	e089      	b.n	8007c10 <_dtoa_r+0x990>
 8007afc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007afe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b02:	e74b      	b.n	800799c <_dtoa_r+0x71c>
 8007b04:	9b03      	ldr	r3, [sp, #12]
 8007b06:	1e5e      	subs	r6, r3, #1
 8007b08:	9b07      	ldr	r3, [sp, #28]
 8007b0a:	42b3      	cmp	r3, r6
 8007b0c:	bfbf      	itttt	lt
 8007b0e:	9b07      	ldrlt	r3, [sp, #28]
 8007b10:	9607      	strlt	r6, [sp, #28]
 8007b12:	1af2      	sublt	r2, r6, r3
 8007b14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007b16:	bfb6      	itet	lt
 8007b18:	189b      	addlt	r3, r3, r2
 8007b1a:	1b9e      	subge	r6, r3, r6
 8007b1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007b1e:	9b03      	ldr	r3, [sp, #12]
 8007b20:	bfb8      	it	lt
 8007b22:	2600      	movlt	r6, #0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	bfb7      	itett	lt
 8007b28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007b2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007b30:	1a9d      	sublt	r5, r3, r2
 8007b32:	2300      	movlt	r3, #0
 8007b34:	e734      	b.n	80079a0 <_dtoa_r+0x720>
 8007b36:	9e07      	ldr	r6, [sp, #28]
 8007b38:	9d04      	ldr	r5, [sp, #16]
 8007b3a:	9f08      	ldr	r7, [sp, #32]
 8007b3c:	e73b      	b.n	80079b6 <_dtoa_r+0x736>
 8007b3e:	9a07      	ldr	r2, [sp, #28]
 8007b40:	e767      	b.n	8007a12 <_dtoa_r+0x792>
 8007b42:	9b06      	ldr	r3, [sp, #24]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	dc18      	bgt.n	8007b7a <_dtoa_r+0x8fa>
 8007b48:	f1ba 0f00 	cmp.w	sl, #0
 8007b4c:	d115      	bne.n	8007b7a <_dtoa_r+0x8fa>
 8007b4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b52:	b993      	cbnz	r3, 8007b7a <_dtoa_r+0x8fa>
 8007b54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007b58:	0d1b      	lsrs	r3, r3, #20
 8007b5a:	051b      	lsls	r3, r3, #20
 8007b5c:	b183      	cbz	r3, 8007b80 <_dtoa_r+0x900>
 8007b5e:	9b04      	ldr	r3, [sp, #16]
 8007b60:	3301      	adds	r3, #1
 8007b62:	9304      	str	r3, [sp, #16]
 8007b64:	9b05      	ldr	r3, [sp, #20]
 8007b66:	3301      	adds	r3, #1
 8007b68:	9305      	str	r3, [sp, #20]
 8007b6a:	f04f 0801 	mov.w	r8, #1
 8007b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f47f af6a 	bne.w	8007a4a <_dtoa_r+0x7ca>
 8007b76:	2001      	movs	r0, #1
 8007b78:	e76f      	b.n	8007a5a <_dtoa_r+0x7da>
 8007b7a:	f04f 0800 	mov.w	r8, #0
 8007b7e:	e7f6      	b.n	8007b6e <_dtoa_r+0x8ee>
 8007b80:	4698      	mov	r8, r3
 8007b82:	e7f4      	b.n	8007b6e <_dtoa_r+0x8ee>
 8007b84:	f43f af7d 	beq.w	8007a82 <_dtoa_r+0x802>
 8007b88:	4618      	mov	r0, r3
 8007b8a:	301c      	adds	r0, #28
 8007b8c:	e772      	b.n	8007a74 <_dtoa_r+0x7f4>
 8007b8e:	9b03      	ldr	r3, [sp, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	dc37      	bgt.n	8007c04 <_dtoa_r+0x984>
 8007b94:	9b06      	ldr	r3, [sp, #24]
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	dd34      	ble.n	8007c04 <_dtoa_r+0x984>
 8007b9a:	9b03      	ldr	r3, [sp, #12]
 8007b9c:	9302      	str	r3, [sp, #8]
 8007b9e:	9b02      	ldr	r3, [sp, #8]
 8007ba0:	b96b      	cbnz	r3, 8007bbe <_dtoa_r+0x93e>
 8007ba2:	4631      	mov	r1, r6
 8007ba4:	2205      	movs	r2, #5
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f000 fbf4 	bl	8008394 <__multadd>
 8007bac:	4601      	mov	r1, r0
 8007bae:	4606      	mov	r6, r0
 8007bb0:	ee18 0a10 	vmov	r0, s16
 8007bb4:	f000 fe0e 	bl	80087d4 <__mcmp>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	f73f adbb 	bgt.w	8007734 <_dtoa_r+0x4b4>
 8007bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc0:	9d01      	ldr	r5, [sp, #4]
 8007bc2:	43db      	mvns	r3, r3
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	f04f 0800 	mov.w	r8, #0
 8007bca:	4631      	mov	r1, r6
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f000 fbbf 	bl	8008350 <_Bfree>
 8007bd2:	2f00      	cmp	r7, #0
 8007bd4:	f43f aea4 	beq.w	8007920 <_dtoa_r+0x6a0>
 8007bd8:	f1b8 0f00 	cmp.w	r8, #0
 8007bdc:	d005      	beq.n	8007bea <_dtoa_r+0x96a>
 8007bde:	45b8      	cmp	r8, r7
 8007be0:	d003      	beq.n	8007bea <_dtoa_r+0x96a>
 8007be2:	4641      	mov	r1, r8
 8007be4:	4620      	mov	r0, r4
 8007be6:	f000 fbb3 	bl	8008350 <_Bfree>
 8007bea:	4639      	mov	r1, r7
 8007bec:	4620      	mov	r0, r4
 8007bee:	f000 fbaf 	bl	8008350 <_Bfree>
 8007bf2:	e695      	b.n	8007920 <_dtoa_r+0x6a0>
 8007bf4:	2600      	movs	r6, #0
 8007bf6:	4637      	mov	r7, r6
 8007bf8:	e7e1      	b.n	8007bbe <_dtoa_r+0x93e>
 8007bfa:	9700      	str	r7, [sp, #0]
 8007bfc:	4637      	mov	r7, r6
 8007bfe:	e599      	b.n	8007734 <_dtoa_r+0x4b4>
 8007c00:	40240000 	.word	0x40240000
 8007c04:	9b08      	ldr	r3, [sp, #32]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 80ca 	beq.w	8007da0 <_dtoa_r+0xb20>
 8007c0c:	9b03      	ldr	r3, [sp, #12]
 8007c0e:	9302      	str	r3, [sp, #8]
 8007c10:	2d00      	cmp	r5, #0
 8007c12:	dd05      	ble.n	8007c20 <_dtoa_r+0x9a0>
 8007c14:	4639      	mov	r1, r7
 8007c16:	462a      	mov	r2, r5
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f000 fd6b 	bl	80086f4 <__lshift>
 8007c1e:	4607      	mov	r7, r0
 8007c20:	f1b8 0f00 	cmp.w	r8, #0
 8007c24:	d05b      	beq.n	8007cde <_dtoa_r+0xa5e>
 8007c26:	6879      	ldr	r1, [r7, #4]
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f000 fb51 	bl	80082d0 <_Balloc>
 8007c2e:	4605      	mov	r5, r0
 8007c30:	b928      	cbnz	r0, 8007c3e <_dtoa_r+0x9be>
 8007c32:	4b87      	ldr	r3, [pc, #540]	; (8007e50 <_dtoa_r+0xbd0>)
 8007c34:	4602      	mov	r2, r0
 8007c36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007c3a:	f7ff bb3b 	b.w	80072b4 <_dtoa_r+0x34>
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	3202      	adds	r2, #2
 8007c42:	0092      	lsls	r2, r2, #2
 8007c44:	f107 010c 	add.w	r1, r7, #12
 8007c48:	300c      	adds	r0, #12
 8007c4a:	f000 fb33 	bl	80082b4 <memcpy>
 8007c4e:	2201      	movs	r2, #1
 8007c50:	4629      	mov	r1, r5
 8007c52:	4620      	mov	r0, r4
 8007c54:	f000 fd4e 	bl	80086f4 <__lshift>
 8007c58:	9b01      	ldr	r3, [sp, #4]
 8007c5a:	f103 0901 	add.w	r9, r3, #1
 8007c5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007c62:	4413      	add	r3, r2
 8007c64:	9305      	str	r3, [sp, #20]
 8007c66:	f00a 0301 	and.w	r3, sl, #1
 8007c6a:	46b8      	mov	r8, r7
 8007c6c:	9304      	str	r3, [sp, #16]
 8007c6e:	4607      	mov	r7, r0
 8007c70:	4631      	mov	r1, r6
 8007c72:	ee18 0a10 	vmov	r0, s16
 8007c76:	f7ff fa77 	bl	8007168 <quorem>
 8007c7a:	4641      	mov	r1, r8
 8007c7c:	9002      	str	r0, [sp, #8]
 8007c7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007c82:	ee18 0a10 	vmov	r0, s16
 8007c86:	f000 fda5 	bl	80087d4 <__mcmp>
 8007c8a:	463a      	mov	r2, r7
 8007c8c:	9003      	str	r0, [sp, #12]
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4620      	mov	r0, r4
 8007c92:	f000 fdbb 	bl	800880c <__mdiff>
 8007c96:	68c2      	ldr	r2, [r0, #12]
 8007c98:	f109 3bff 	add.w	fp, r9, #4294967295
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	bb02      	cbnz	r2, 8007ce2 <_dtoa_r+0xa62>
 8007ca0:	4601      	mov	r1, r0
 8007ca2:	ee18 0a10 	vmov	r0, s16
 8007ca6:	f000 fd95 	bl	80087d4 <__mcmp>
 8007caa:	4602      	mov	r2, r0
 8007cac:	4629      	mov	r1, r5
 8007cae:	4620      	mov	r0, r4
 8007cb0:	9207      	str	r2, [sp, #28]
 8007cb2:	f000 fb4d 	bl	8008350 <_Bfree>
 8007cb6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007cba:	ea43 0102 	orr.w	r1, r3, r2
 8007cbe:	9b04      	ldr	r3, [sp, #16]
 8007cc0:	430b      	orrs	r3, r1
 8007cc2:	464d      	mov	r5, r9
 8007cc4:	d10f      	bne.n	8007ce6 <_dtoa_r+0xa66>
 8007cc6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007cca:	d02a      	beq.n	8007d22 <_dtoa_r+0xaa2>
 8007ccc:	9b03      	ldr	r3, [sp, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	dd02      	ble.n	8007cd8 <_dtoa_r+0xa58>
 8007cd2:	9b02      	ldr	r3, [sp, #8]
 8007cd4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007cd8:	f88b a000 	strb.w	sl, [fp]
 8007cdc:	e775      	b.n	8007bca <_dtoa_r+0x94a>
 8007cde:	4638      	mov	r0, r7
 8007ce0:	e7ba      	b.n	8007c58 <_dtoa_r+0x9d8>
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	e7e2      	b.n	8007cac <_dtoa_r+0xa2c>
 8007ce6:	9b03      	ldr	r3, [sp, #12]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	db04      	blt.n	8007cf6 <_dtoa_r+0xa76>
 8007cec:	9906      	ldr	r1, [sp, #24]
 8007cee:	430b      	orrs	r3, r1
 8007cf0:	9904      	ldr	r1, [sp, #16]
 8007cf2:	430b      	orrs	r3, r1
 8007cf4:	d122      	bne.n	8007d3c <_dtoa_r+0xabc>
 8007cf6:	2a00      	cmp	r2, #0
 8007cf8:	ddee      	ble.n	8007cd8 <_dtoa_r+0xa58>
 8007cfa:	ee18 1a10 	vmov	r1, s16
 8007cfe:	2201      	movs	r2, #1
 8007d00:	4620      	mov	r0, r4
 8007d02:	f000 fcf7 	bl	80086f4 <__lshift>
 8007d06:	4631      	mov	r1, r6
 8007d08:	ee08 0a10 	vmov	s16, r0
 8007d0c:	f000 fd62 	bl	80087d4 <__mcmp>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	dc03      	bgt.n	8007d1c <_dtoa_r+0xa9c>
 8007d14:	d1e0      	bne.n	8007cd8 <_dtoa_r+0xa58>
 8007d16:	f01a 0f01 	tst.w	sl, #1
 8007d1a:	d0dd      	beq.n	8007cd8 <_dtoa_r+0xa58>
 8007d1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d20:	d1d7      	bne.n	8007cd2 <_dtoa_r+0xa52>
 8007d22:	2339      	movs	r3, #57	; 0x39
 8007d24:	f88b 3000 	strb.w	r3, [fp]
 8007d28:	462b      	mov	r3, r5
 8007d2a:	461d      	mov	r5, r3
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007d32:	2a39      	cmp	r2, #57	; 0x39
 8007d34:	d071      	beq.n	8007e1a <_dtoa_r+0xb9a>
 8007d36:	3201      	adds	r2, #1
 8007d38:	701a      	strb	r2, [r3, #0]
 8007d3a:	e746      	b.n	8007bca <_dtoa_r+0x94a>
 8007d3c:	2a00      	cmp	r2, #0
 8007d3e:	dd07      	ble.n	8007d50 <_dtoa_r+0xad0>
 8007d40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d44:	d0ed      	beq.n	8007d22 <_dtoa_r+0xaa2>
 8007d46:	f10a 0301 	add.w	r3, sl, #1
 8007d4a:	f88b 3000 	strb.w	r3, [fp]
 8007d4e:	e73c      	b.n	8007bca <_dtoa_r+0x94a>
 8007d50:	9b05      	ldr	r3, [sp, #20]
 8007d52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007d56:	4599      	cmp	r9, r3
 8007d58:	d047      	beq.n	8007dea <_dtoa_r+0xb6a>
 8007d5a:	ee18 1a10 	vmov	r1, s16
 8007d5e:	2300      	movs	r3, #0
 8007d60:	220a      	movs	r2, #10
 8007d62:	4620      	mov	r0, r4
 8007d64:	f000 fb16 	bl	8008394 <__multadd>
 8007d68:	45b8      	cmp	r8, r7
 8007d6a:	ee08 0a10 	vmov	s16, r0
 8007d6e:	f04f 0300 	mov.w	r3, #0
 8007d72:	f04f 020a 	mov.w	r2, #10
 8007d76:	4641      	mov	r1, r8
 8007d78:	4620      	mov	r0, r4
 8007d7a:	d106      	bne.n	8007d8a <_dtoa_r+0xb0a>
 8007d7c:	f000 fb0a 	bl	8008394 <__multadd>
 8007d80:	4680      	mov	r8, r0
 8007d82:	4607      	mov	r7, r0
 8007d84:	f109 0901 	add.w	r9, r9, #1
 8007d88:	e772      	b.n	8007c70 <_dtoa_r+0x9f0>
 8007d8a:	f000 fb03 	bl	8008394 <__multadd>
 8007d8e:	4639      	mov	r1, r7
 8007d90:	4680      	mov	r8, r0
 8007d92:	2300      	movs	r3, #0
 8007d94:	220a      	movs	r2, #10
 8007d96:	4620      	mov	r0, r4
 8007d98:	f000 fafc 	bl	8008394 <__multadd>
 8007d9c:	4607      	mov	r7, r0
 8007d9e:	e7f1      	b.n	8007d84 <_dtoa_r+0xb04>
 8007da0:	9b03      	ldr	r3, [sp, #12]
 8007da2:	9302      	str	r3, [sp, #8]
 8007da4:	9d01      	ldr	r5, [sp, #4]
 8007da6:	ee18 0a10 	vmov	r0, s16
 8007daa:	4631      	mov	r1, r6
 8007dac:	f7ff f9dc 	bl	8007168 <quorem>
 8007db0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007db4:	9b01      	ldr	r3, [sp, #4]
 8007db6:	f805 ab01 	strb.w	sl, [r5], #1
 8007dba:	1aea      	subs	r2, r5, r3
 8007dbc:	9b02      	ldr	r3, [sp, #8]
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	dd09      	ble.n	8007dd6 <_dtoa_r+0xb56>
 8007dc2:	ee18 1a10 	vmov	r1, s16
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	220a      	movs	r2, #10
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 fae2 	bl	8008394 <__multadd>
 8007dd0:	ee08 0a10 	vmov	s16, r0
 8007dd4:	e7e7      	b.n	8007da6 <_dtoa_r+0xb26>
 8007dd6:	9b02      	ldr	r3, [sp, #8]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	bfc8      	it	gt
 8007ddc:	461d      	movgt	r5, r3
 8007dde:	9b01      	ldr	r3, [sp, #4]
 8007de0:	bfd8      	it	le
 8007de2:	2501      	movle	r5, #1
 8007de4:	441d      	add	r5, r3
 8007de6:	f04f 0800 	mov.w	r8, #0
 8007dea:	ee18 1a10 	vmov	r1, s16
 8007dee:	2201      	movs	r2, #1
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 fc7f 	bl	80086f4 <__lshift>
 8007df6:	4631      	mov	r1, r6
 8007df8:	ee08 0a10 	vmov	s16, r0
 8007dfc:	f000 fcea 	bl	80087d4 <__mcmp>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	dc91      	bgt.n	8007d28 <_dtoa_r+0xaa8>
 8007e04:	d102      	bne.n	8007e0c <_dtoa_r+0xb8c>
 8007e06:	f01a 0f01 	tst.w	sl, #1
 8007e0a:	d18d      	bne.n	8007d28 <_dtoa_r+0xaa8>
 8007e0c:	462b      	mov	r3, r5
 8007e0e:	461d      	mov	r5, r3
 8007e10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e14:	2a30      	cmp	r2, #48	; 0x30
 8007e16:	d0fa      	beq.n	8007e0e <_dtoa_r+0xb8e>
 8007e18:	e6d7      	b.n	8007bca <_dtoa_r+0x94a>
 8007e1a:	9a01      	ldr	r2, [sp, #4]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d184      	bne.n	8007d2a <_dtoa_r+0xaaa>
 8007e20:	9b00      	ldr	r3, [sp, #0]
 8007e22:	3301      	adds	r3, #1
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	2331      	movs	r3, #49	; 0x31
 8007e28:	7013      	strb	r3, [r2, #0]
 8007e2a:	e6ce      	b.n	8007bca <_dtoa_r+0x94a>
 8007e2c:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <_dtoa_r+0xbd4>)
 8007e2e:	f7ff ba95 	b.w	800735c <_dtoa_r+0xdc>
 8007e32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f47f aa6e 	bne.w	8007316 <_dtoa_r+0x96>
 8007e3a:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <_dtoa_r+0xbd8>)
 8007e3c:	f7ff ba8e 	b.w	800735c <_dtoa_r+0xdc>
 8007e40:	9b02      	ldr	r3, [sp, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	dcae      	bgt.n	8007da4 <_dtoa_r+0xb24>
 8007e46:	9b06      	ldr	r3, [sp, #24]
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	f73f aea8 	bgt.w	8007b9e <_dtoa_r+0x91e>
 8007e4e:	e7a9      	b.n	8007da4 <_dtoa_r+0xb24>
 8007e50:	08009b67 	.word	0x08009b67
 8007e54:	08009ac4 	.word	0x08009ac4
 8007e58:	08009ae8 	.word	0x08009ae8

08007e5c <__sflush_r>:
 8007e5c:	898a      	ldrh	r2, [r1, #12]
 8007e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e62:	4605      	mov	r5, r0
 8007e64:	0710      	lsls	r0, r2, #28
 8007e66:	460c      	mov	r4, r1
 8007e68:	d458      	bmi.n	8007f1c <__sflush_r+0xc0>
 8007e6a:	684b      	ldr	r3, [r1, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dc05      	bgt.n	8007e7c <__sflush_r+0x20>
 8007e70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	dc02      	bgt.n	8007e7c <__sflush_r+0x20>
 8007e76:	2000      	movs	r0, #0
 8007e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e7e:	2e00      	cmp	r6, #0
 8007e80:	d0f9      	beq.n	8007e76 <__sflush_r+0x1a>
 8007e82:	2300      	movs	r3, #0
 8007e84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e88:	682f      	ldr	r7, [r5, #0]
 8007e8a:	602b      	str	r3, [r5, #0]
 8007e8c:	d032      	beq.n	8007ef4 <__sflush_r+0x98>
 8007e8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	075a      	lsls	r2, r3, #29
 8007e94:	d505      	bpl.n	8007ea2 <__sflush_r+0x46>
 8007e96:	6863      	ldr	r3, [r4, #4]
 8007e98:	1ac0      	subs	r0, r0, r3
 8007e9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e9c:	b10b      	cbz	r3, 8007ea2 <__sflush_r+0x46>
 8007e9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ea0:	1ac0      	subs	r0, r0, r3
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ea8:	6a21      	ldr	r1, [r4, #32]
 8007eaa:	4628      	mov	r0, r5
 8007eac:	47b0      	blx	r6
 8007eae:	1c43      	adds	r3, r0, #1
 8007eb0:	89a3      	ldrh	r3, [r4, #12]
 8007eb2:	d106      	bne.n	8007ec2 <__sflush_r+0x66>
 8007eb4:	6829      	ldr	r1, [r5, #0]
 8007eb6:	291d      	cmp	r1, #29
 8007eb8:	d82c      	bhi.n	8007f14 <__sflush_r+0xb8>
 8007eba:	4a2a      	ldr	r2, [pc, #168]	; (8007f64 <__sflush_r+0x108>)
 8007ebc:	40ca      	lsrs	r2, r1
 8007ebe:	07d6      	lsls	r6, r2, #31
 8007ec0:	d528      	bpl.n	8007f14 <__sflush_r+0xb8>
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	6062      	str	r2, [r4, #4]
 8007ec6:	04d9      	lsls	r1, r3, #19
 8007ec8:	6922      	ldr	r2, [r4, #16]
 8007eca:	6022      	str	r2, [r4, #0]
 8007ecc:	d504      	bpl.n	8007ed8 <__sflush_r+0x7c>
 8007ece:	1c42      	adds	r2, r0, #1
 8007ed0:	d101      	bne.n	8007ed6 <__sflush_r+0x7a>
 8007ed2:	682b      	ldr	r3, [r5, #0]
 8007ed4:	b903      	cbnz	r3, 8007ed8 <__sflush_r+0x7c>
 8007ed6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eda:	602f      	str	r7, [r5, #0]
 8007edc:	2900      	cmp	r1, #0
 8007ede:	d0ca      	beq.n	8007e76 <__sflush_r+0x1a>
 8007ee0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ee4:	4299      	cmp	r1, r3
 8007ee6:	d002      	beq.n	8007eee <__sflush_r+0x92>
 8007ee8:	4628      	mov	r0, r5
 8007eea:	f000 fd8b 	bl	8008a04 <_free_r>
 8007eee:	2000      	movs	r0, #0
 8007ef0:	6360      	str	r0, [r4, #52]	; 0x34
 8007ef2:	e7c1      	b.n	8007e78 <__sflush_r+0x1c>
 8007ef4:	6a21      	ldr	r1, [r4, #32]
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	4628      	mov	r0, r5
 8007efa:	47b0      	blx	r6
 8007efc:	1c41      	adds	r1, r0, #1
 8007efe:	d1c7      	bne.n	8007e90 <__sflush_r+0x34>
 8007f00:	682b      	ldr	r3, [r5, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d0c4      	beq.n	8007e90 <__sflush_r+0x34>
 8007f06:	2b1d      	cmp	r3, #29
 8007f08:	d001      	beq.n	8007f0e <__sflush_r+0xb2>
 8007f0a:	2b16      	cmp	r3, #22
 8007f0c:	d101      	bne.n	8007f12 <__sflush_r+0xb6>
 8007f0e:	602f      	str	r7, [r5, #0]
 8007f10:	e7b1      	b.n	8007e76 <__sflush_r+0x1a>
 8007f12:	89a3      	ldrh	r3, [r4, #12]
 8007f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f18:	81a3      	strh	r3, [r4, #12]
 8007f1a:	e7ad      	b.n	8007e78 <__sflush_r+0x1c>
 8007f1c:	690f      	ldr	r7, [r1, #16]
 8007f1e:	2f00      	cmp	r7, #0
 8007f20:	d0a9      	beq.n	8007e76 <__sflush_r+0x1a>
 8007f22:	0793      	lsls	r3, r2, #30
 8007f24:	680e      	ldr	r6, [r1, #0]
 8007f26:	bf08      	it	eq
 8007f28:	694b      	ldreq	r3, [r1, #20]
 8007f2a:	600f      	str	r7, [r1, #0]
 8007f2c:	bf18      	it	ne
 8007f2e:	2300      	movne	r3, #0
 8007f30:	eba6 0807 	sub.w	r8, r6, r7
 8007f34:	608b      	str	r3, [r1, #8]
 8007f36:	f1b8 0f00 	cmp.w	r8, #0
 8007f3a:	dd9c      	ble.n	8007e76 <__sflush_r+0x1a>
 8007f3c:	6a21      	ldr	r1, [r4, #32]
 8007f3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f40:	4643      	mov	r3, r8
 8007f42:	463a      	mov	r2, r7
 8007f44:	4628      	mov	r0, r5
 8007f46:	47b0      	blx	r6
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	dc06      	bgt.n	8007f5a <__sflush_r+0xfe>
 8007f4c:	89a3      	ldrh	r3, [r4, #12]
 8007f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f52:	81a3      	strh	r3, [r4, #12]
 8007f54:	f04f 30ff 	mov.w	r0, #4294967295
 8007f58:	e78e      	b.n	8007e78 <__sflush_r+0x1c>
 8007f5a:	4407      	add	r7, r0
 8007f5c:	eba8 0800 	sub.w	r8, r8, r0
 8007f60:	e7e9      	b.n	8007f36 <__sflush_r+0xda>
 8007f62:	bf00      	nop
 8007f64:	20400001 	.word	0x20400001

08007f68 <_fflush_r>:
 8007f68:	b538      	push	{r3, r4, r5, lr}
 8007f6a:	690b      	ldr	r3, [r1, #16]
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	460c      	mov	r4, r1
 8007f70:	b913      	cbnz	r3, 8007f78 <_fflush_r+0x10>
 8007f72:	2500      	movs	r5, #0
 8007f74:	4628      	mov	r0, r5
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	b118      	cbz	r0, 8007f82 <_fflush_r+0x1a>
 8007f7a:	6983      	ldr	r3, [r0, #24]
 8007f7c:	b90b      	cbnz	r3, 8007f82 <_fflush_r+0x1a>
 8007f7e:	f000 f887 	bl	8008090 <__sinit>
 8007f82:	4b14      	ldr	r3, [pc, #80]	; (8007fd4 <_fflush_r+0x6c>)
 8007f84:	429c      	cmp	r4, r3
 8007f86:	d11b      	bne.n	8007fc0 <_fflush_r+0x58>
 8007f88:	686c      	ldr	r4, [r5, #4]
 8007f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d0ef      	beq.n	8007f72 <_fflush_r+0xa>
 8007f92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f94:	07d0      	lsls	r0, r2, #31
 8007f96:	d404      	bmi.n	8007fa2 <_fflush_r+0x3a>
 8007f98:	0599      	lsls	r1, r3, #22
 8007f9a:	d402      	bmi.n	8007fa2 <_fflush_r+0x3a>
 8007f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f9e:	f000 f91a 	bl	80081d6 <__retarget_lock_acquire_recursive>
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	f7ff ff59 	bl	8007e5c <__sflush_r>
 8007faa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fac:	07da      	lsls	r2, r3, #31
 8007fae:	4605      	mov	r5, r0
 8007fb0:	d4e0      	bmi.n	8007f74 <_fflush_r+0xc>
 8007fb2:	89a3      	ldrh	r3, [r4, #12]
 8007fb4:	059b      	lsls	r3, r3, #22
 8007fb6:	d4dd      	bmi.n	8007f74 <_fflush_r+0xc>
 8007fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fba:	f000 f90d 	bl	80081d8 <__retarget_lock_release_recursive>
 8007fbe:	e7d9      	b.n	8007f74 <_fflush_r+0xc>
 8007fc0:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <_fflush_r+0x70>)
 8007fc2:	429c      	cmp	r4, r3
 8007fc4:	d101      	bne.n	8007fca <_fflush_r+0x62>
 8007fc6:	68ac      	ldr	r4, [r5, #8]
 8007fc8:	e7df      	b.n	8007f8a <_fflush_r+0x22>
 8007fca:	4b04      	ldr	r3, [pc, #16]	; (8007fdc <_fflush_r+0x74>)
 8007fcc:	429c      	cmp	r4, r3
 8007fce:	bf08      	it	eq
 8007fd0:	68ec      	ldreq	r4, [r5, #12]
 8007fd2:	e7da      	b.n	8007f8a <_fflush_r+0x22>
 8007fd4:	08009b98 	.word	0x08009b98
 8007fd8:	08009bb8 	.word	0x08009bb8
 8007fdc:	08009b78 	.word	0x08009b78

08007fe0 <std>:
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	b510      	push	{r4, lr}
 8007fe4:	4604      	mov	r4, r0
 8007fe6:	e9c0 3300 	strd	r3, r3, [r0]
 8007fea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fee:	6083      	str	r3, [r0, #8]
 8007ff0:	8181      	strh	r1, [r0, #12]
 8007ff2:	6643      	str	r3, [r0, #100]	; 0x64
 8007ff4:	81c2      	strh	r2, [r0, #14]
 8007ff6:	6183      	str	r3, [r0, #24]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	2208      	movs	r2, #8
 8007ffc:	305c      	adds	r0, #92	; 0x5c
 8007ffe:	f7fe faf3 	bl	80065e8 <memset>
 8008002:	4b05      	ldr	r3, [pc, #20]	; (8008018 <std+0x38>)
 8008004:	6263      	str	r3, [r4, #36]	; 0x24
 8008006:	4b05      	ldr	r3, [pc, #20]	; (800801c <std+0x3c>)
 8008008:	62a3      	str	r3, [r4, #40]	; 0x28
 800800a:	4b05      	ldr	r3, [pc, #20]	; (8008020 <std+0x40>)
 800800c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800800e:	4b05      	ldr	r3, [pc, #20]	; (8008024 <std+0x44>)
 8008010:	6224      	str	r4, [r4, #32]
 8008012:	6323      	str	r3, [r4, #48]	; 0x30
 8008014:	bd10      	pop	{r4, pc}
 8008016:	bf00      	nop
 8008018:	08008e99 	.word	0x08008e99
 800801c:	08008ebb 	.word	0x08008ebb
 8008020:	08008ef3 	.word	0x08008ef3
 8008024:	08008f17 	.word	0x08008f17

08008028 <_cleanup_r>:
 8008028:	4901      	ldr	r1, [pc, #4]	; (8008030 <_cleanup_r+0x8>)
 800802a:	f000 b8af 	b.w	800818c <_fwalk_reent>
 800802e:	bf00      	nop
 8008030:	08007f69 	.word	0x08007f69

08008034 <__sfmoreglue>:
 8008034:	b570      	push	{r4, r5, r6, lr}
 8008036:	2268      	movs	r2, #104	; 0x68
 8008038:	1e4d      	subs	r5, r1, #1
 800803a:	4355      	muls	r5, r2
 800803c:	460e      	mov	r6, r1
 800803e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008042:	f000 fd4b 	bl	8008adc <_malloc_r>
 8008046:	4604      	mov	r4, r0
 8008048:	b140      	cbz	r0, 800805c <__sfmoreglue+0x28>
 800804a:	2100      	movs	r1, #0
 800804c:	e9c0 1600 	strd	r1, r6, [r0]
 8008050:	300c      	adds	r0, #12
 8008052:	60a0      	str	r0, [r4, #8]
 8008054:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008058:	f7fe fac6 	bl	80065e8 <memset>
 800805c:	4620      	mov	r0, r4
 800805e:	bd70      	pop	{r4, r5, r6, pc}

08008060 <__sfp_lock_acquire>:
 8008060:	4801      	ldr	r0, [pc, #4]	; (8008068 <__sfp_lock_acquire+0x8>)
 8008062:	f000 b8b8 	b.w	80081d6 <__retarget_lock_acquire_recursive>
 8008066:	bf00      	nop
 8008068:	20000459 	.word	0x20000459

0800806c <__sfp_lock_release>:
 800806c:	4801      	ldr	r0, [pc, #4]	; (8008074 <__sfp_lock_release+0x8>)
 800806e:	f000 b8b3 	b.w	80081d8 <__retarget_lock_release_recursive>
 8008072:	bf00      	nop
 8008074:	20000459 	.word	0x20000459

08008078 <__sinit_lock_acquire>:
 8008078:	4801      	ldr	r0, [pc, #4]	; (8008080 <__sinit_lock_acquire+0x8>)
 800807a:	f000 b8ac 	b.w	80081d6 <__retarget_lock_acquire_recursive>
 800807e:	bf00      	nop
 8008080:	2000045a 	.word	0x2000045a

08008084 <__sinit_lock_release>:
 8008084:	4801      	ldr	r0, [pc, #4]	; (800808c <__sinit_lock_release+0x8>)
 8008086:	f000 b8a7 	b.w	80081d8 <__retarget_lock_release_recursive>
 800808a:	bf00      	nop
 800808c:	2000045a 	.word	0x2000045a

08008090 <__sinit>:
 8008090:	b510      	push	{r4, lr}
 8008092:	4604      	mov	r4, r0
 8008094:	f7ff fff0 	bl	8008078 <__sinit_lock_acquire>
 8008098:	69a3      	ldr	r3, [r4, #24]
 800809a:	b11b      	cbz	r3, 80080a4 <__sinit+0x14>
 800809c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080a0:	f7ff bff0 	b.w	8008084 <__sinit_lock_release>
 80080a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80080a8:	6523      	str	r3, [r4, #80]	; 0x50
 80080aa:	4b13      	ldr	r3, [pc, #76]	; (80080f8 <__sinit+0x68>)
 80080ac:	4a13      	ldr	r2, [pc, #76]	; (80080fc <__sinit+0x6c>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80080b2:	42a3      	cmp	r3, r4
 80080b4:	bf04      	itt	eq
 80080b6:	2301      	moveq	r3, #1
 80080b8:	61a3      	streq	r3, [r4, #24]
 80080ba:	4620      	mov	r0, r4
 80080bc:	f000 f820 	bl	8008100 <__sfp>
 80080c0:	6060      	str	r0, [r4, #4]
 80080c2:	4620      	mov	r0, r4
 80080c4:	f000 f81c 	bl	8008100 <__sfp>
 80080c8:	60a0      	str	r0, [r4, #8]
 80080ca:	4620      	mov	r0, r4
 80080cc:	f000 f818 	bl	8008100 <__sfp>
 80080d0:	2200      	movs	r2, #0
 80080d2:	60e0      	str	r0, [r4, #12]
 80080d4:	2104      	movs	r1, #4
 80080d6:	6860      	ldr	r0, [r4, #4]
 80080d8:	f7ff ff82 	bl	8007fe0 <std>
 80080dc:	68a0      	ldr	r0, [r4, #8]
 80080de:	2201      	movs	r2, #1
 80080e0:	2109      	movs	r1, #9
 80080e2:	f7ff ff7d 	bl	8007fe0 <std>
 80080e6:	68e0      	ldr	r0, [r4, #12]
 80080e8:	2202      	movs	r2, #2
 80080ea:	2112      	movs	r1, #18
 80080ec:	f7ff ff78 	bl	8007fe0 <std>
 80080f0:	2301      	movs	r3, #1
 80080f2:	61a3      	str	r3, [r4, #24]
 80080f4:	e7d2      	b.n	800809c <__sinit+0xc>
 80080f6:	bf00      	nop
 80080f8:	08009ab0 	.word	0x08009ab0
 80080fc:	08008029 	.word	0x08008029

08008100 <__sfp>:
 8008100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008102:	4607      	mov	r7, r0
 8008104:	f7ff ffac 	bl	8008060 <__sfp_lock_acquire>
 8008108:	4b1e      	ldr	r3, [pc, #120]	; (8008184 <__sfp+0x84>)
 800810a:	681e      	ldr	r6, [r3, #0]
 800810c:	69b3      	ldr	r3, [r6, #24]
 800810e:	b913      	cbnz	r3, 8008116 <__sfp+0x16>
 8008110:	4630      	mov	r0, r6
 8008112:	f7ff ffbd 	bl	8008090 <__sinit>
 8008116:	3648      	adds	r6, #72	; 0x48
 8008118:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800811c:	3b01      	subs	r3, #1
 800811e:	d503      	bpl.n	8008128 <__sfp+0x28>
 8008120:	6833      	ldr	r3, [r6, #0]
 8008122:	b30b      	cbz	r3, 8008168 <__sfp+0x68>
 8008124:	6836      	ldr	r6, [r6, #0]
 8008126:	e7f7      	b.n	8008118 <__sfp+0x18>
 8008128:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800812c:	b9d5      	cbnz	r5, 8008164 <__sfp+0x64>
 800812e:	4b16      	ldr	r3, [pc, #88]	; (8008188 <__sfp+0x88>)
 8008130:	60e3      	str	r3, [r4, #12]
 8008132:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008136:	6665      	str	r5, [r4, #100]	; 0x64
 8008138:	f000 f84c 	bl	80081d4 <__retarget_lock_init_recursive>
 800813c:	f7ff ff96 	bl	800806c <__sfp_lock_release>
 8008140:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008144:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008148:	6025      	str	r5, [r4, #0]
 800814a:	61a5      	str	r5, [r4, #24]
 800814c:	2208      	movs	r2, #8
 800814e:	4629      	mov	r1, r5
 8008150:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008154:	f7fe fa48 	bl	80065e8 <memset>
 8008158:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800815c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008160:	4620      	mov	r0, r4
 8008162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008164:	3468      	adds	r4, #104	; 0x68
 8008166:	e7d9      	b.n	800811c <__sfp+0x1c>
 8008168:	2104      	movs	r1, #4
 800816a:	4638      	mov	r0, r7
 800816c:	f7ff ff62 	bl	8008034 <__sfmoreglue>
 8008170:	4604      	mov	r4, r0
 8008172:	6030      	str	r0, [r6, #0]
 8008174:	2800      	cmp	r0, #0
 8008176:	d1d5      	bne.n	8008124 <__sfp+0x24>
 8008178:	f7ff ff78 	bl	800806c <__sfp_lock_release>
 800817c:	230c      	movs	r3, #12
 800817e:	603b      	str	r3, [r7, #0]
 8008180:	e7ee      	b.n	8008160 <__sfp+0x60>
 8008182:	bf00      	nop
 8008184:	08009ab0 	.word	0x08009ab0
 8008188:	ffff0001 	.word	0xffff0001

0800818c <_fwalk_reent>:
 800818c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008190:	4606      	mov	r6, r0
 8008192:	4688      	mov	r8, r1
 8008194:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008198:	2700      	movs	r7, #0
 800819a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800819e:	f1b9 0901 	subs.w	r9, r9, #1
 80081a2:	d505      	bpl.n	80081b0 <_fwalk_reent+0x24>
 80081a4:	6824      	ldr	r4, [r4, #0]
 80081a6:	2c00      	cmp	r4, #0
 80081a8:	d1f7      	bne.n	800819a <_fwalk_reent+0xe>
 80081aa:	4638      	mov	r0, r7
 80081ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081b0:	89ab      	ldrh	r3, [r5, #12]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d907      	bls.n	80081c6 <_fwalk_reent+0x3a>
 80081b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081ba:	3301      	adds	r3, #1
 80081bc:	d003      	beq.n	80081c6 <_fwalk_reent+0x3a>
 80081be:	4629      	mov	r1, r5
 80081c0:	4630      	mov	r0, r6
 80081c2:	47c0      	blx	r8
 80081c4:	4307      	orrs	r7, r0
 80081c6:	3568      	adds	r5, #104	; 0x68
 80081c8:	e7e9      	b.n	800819e <_fwalk_reent+0x12>
	...

080081cc <_localeconv_r>:
 80081cc:	4800      	ldr	r0, [pc, #0]	; (80081d0 <_localeconv_r+0x4>)
 80081ce:	4770      	bx	lr
 80081d0:	20000160 	.word	0x20000160

080081d4 <__retarget_lock_init_recursive>:
 80081d4:	4770      	bx	lr

080081d6 <__retarget_lock_acquire_recursive>:
 80081d6:	4770      	bx	lr

080081d8 <__retarget_lock_release_recursive>:
 80081d8:	4770      	bx	lr

080081da <__swhatbuf_r>:
 80081da:	b570      	push	{r4, r5, r6, lr}
 80081dc:	460e      	mov	r6, r1
 80081de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e2:	2900      	cmp	r1, #0
 80081e4:	b096      	sub	sp, #88	; 0x58
 80081e6:	4614      	mov	r4, r2
 80081e8:	461d      	mov	r5, r3
 80081ea:	da08      	bge.n	80081fe <__swhatbuf_r+0x24>
 80081ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	602a      	str	r2, [r5, #0]
 80081f4:	061a      	lsls	r2, r3, #24
 80081f6:	d410      	bmi.n	800821a <__swhatbuf_r+0x40>
 80081f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081fc:	e00e      	b.n	800821c <__swhatbuf_r+0x42>
 80081fe:	466a      	mov	r2, sp
 8008200:	f000 fee0 	bl	8008fc4 <_fstat_r>
 8008204:	2800      	cmp	r0, #0
 8008206:	dbf1      	blt.n	80081ec <__swhatbuf_r+0x12>
 8008208:	9a01      	ldr	r2, [sp, #4]
 800820a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800820e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008212:	425a      	negs	r2, r3
 8008214:	415a      	adcs	r2, r3
 8008216:	602a      	str	r2, [r5, #0]
 8008218:	e7ee      	b.n	80081f8 <__swhatbuf_r+0x1e>
 800821a:	2340      	movs	r3, #64	; 0x40
 800821c:	2000      	movs	r0, #0
 800821e:	6023      	str	r3, [r4, #0]
 8008220:	b016      	add	sp, #88	; 0x58
 8008222:	bd70      	pop	{r4, r5, r6, pc}

08008224 <__smakebuf_r>:
 8008224:	898b      	ldrh	r3, [r1, #12]
 8008226:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008228:	079d      	lsls	r5, r3, #30
 800822a:	4606      	mov	r6, r0
 800822c:	460c      	mov	r4, r1
 800822e:	d507      	bpl.n	8008240 <__smakebuf_r+0x1c>
 8008230:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	6123      	str	r3, [r4, #16]
 8008238:	2301      	movs	r3, #1
 800823a:	6163      	str	r3, [r4, #20]
 800823c:	b002      	add	sp, #8
 800823e:	bd70      	pop	{r4, r5, r6, pc}
 8008240:	ab01      	add	r3, sp, #4
 8008242:	466a      	mov	r2, sp
 8008244:	f7ff ffc9 	bl	80081da <__swhatbuf_r>
 8008248:	9900      	ldr	r1, [sp, #0]
 800824a:	4605      	mov	r5, r0
 800824c:	4630      	mov	r0, r6
 800824e:	f000 fc45 	bl	8008adc <_malloc_r>
 8008252:	b948      	cbnz	r0, 8008268 <__smakebuf_r+0x44>
 8008254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008258:	059a      	lsls	r2, r3, #22
 800825a:	d4ef      	bmi.n	800823c <__smakebuf_r+0x18>
 800825c:	f023 0303 	bic.w	r3, r3, #3
 8008260:	f043 0302 	orr.w	r3, r3, #2
 8008264:	81a3      	strh	r3, [r4, #12]
 8008266:	e7e3      	b.n	8008230 <__smakebuf_r+0xc>
 8008268:	4b0d      	ldr	r3, [pc, #52]	; (80082a0 <__smakebuf_r+0x7c>)
 800826a:	62b3      	str	r3, [r6, #40]	; 0x28
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	6020      	str	r0, [r4, #0]
 8008270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008274:	81a3      	strh	r3, [r4, #12]
 8008276:	9b00      	ldr	r3, [sp, #0]
 8008278:	6163      	str	r3, [r4, #20]
 800827a:	9b01      	ldr	r3, [sp, #4]
 800827c:	6120      	str	r0, [r4, #16]
 800827e:	b15b      	cbz	r3, 8008298 <__smakebuf_r+0x74>
 8008280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008284:	4630      	mov	r0, r6
 8008286:	f000 feaf 	bl	8008fe8 <_isatty_r>
 800828a:	b128      	cbz	r0, 8008298 <__smakebuf_r+0x74>
 800828c:	89a3      	ldrh	r3, [r4, #12]
 800828e:	f023 0303 	bic.w	r3, r3, #3
 8008292:	f043 0301 	orr.w	r3, r3, #1
 8008296:	81a3      	strh	r3, [r4, #12]
 8008298:	89a0      	ldrh	r0, [r4, #12]
 800829a:	4305      	orrs	r5, r0
 800829c:	81a5      	strh	r5, [r4, #12]
 800829e:	e7cd      	b.n	800823c <__smakebuf_r+0x18>
 80082a0:	08008029 	.word	0x08008029

080082a4 <malloc>:
 80082a4:	4b02      	ldr	r3, [pc, #8]	; (80082b0 <malloc+0xc>)
 80082a6:	4601      	mov	r1, r0
 80082a8:	6818      	ldr	r0, [r3, #0]
 80082aa:	f000 bc17 	b.w	8008adc <_malloc_r>
 80082ae:	bf00      	nop
 80082b0:	2000000c 	.word	0x2000000c

080082b4 <memcpy>:
 80082b4:	440a      	add	r2, r1
 80082b6:	4291      	cmp	r1, r2
 80082b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80082bc:	d100      	bne.n	80082c0 <memcpy+0xc>
 80082be:	4770      	bx	lr
 80082c0:	b510      	push	{r4, lr}
 80082c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ca:	4291      	cmp	r1, r2
 80082cc:	d1f9      	bne.n	80082c2 <memcpy+0xe>
 80082ce:	bd10      	pop	{r4, pc}

080082d0 <_Balloc>:
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082d4:	4604      	mov	r4, r0
 80082d6:	460d      	mov	r5, r1
 80082d8:	b976      	cbnz	r6, 80082f8 <_Balloc+0x28>
 80082da:	2010      	movs	r0, #16
 80082dc:	f7ff ffe2 	bl	80082a4 <malloc>
 80082e0:	4602      	mov	r2, r0
 80082e2:	6260      	str	r0, [r4, #36]	; 0x24
 80082e4:	b920      	cbnz	r0, 80082f0 <_Balloc+0x20>
 80082e6:	4b18      	ldr	r3, [pc, #96]	; (8008348 <_Balloc+0x78>)
 80082e8:	4818      	ldr	r0, [pc, #96]	; (800834c <_Balloc+0x7c>)
 80082ea:	2166      	movs	r1, #102	; 0x66
 80082ec:	f000 fe2a 	bl	8008f44 <__assert_func>
 80082f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082f4:	6006      	str	r6, [r0, #0]
 80082f6:	60c6      	str	r6, [r0, #12]
 80082f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80082fa:	68f3      	ldr	r3, [r6, #12]
 80082fc:	b183      	cbz	r3, 8008320 <_Balloc+0x50>
 80082fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008306:	b9b8      	cbnz	r0, 8008338 <_Balloc+0x68>
 8008308:	2101      	movs	r1, #1
 800830a:	fa01 f605 	lsl.w	r6, r1, r5
 800830e:	1d72      	adds	r2, r6, #5
 8008310:	0092      	lsls	r2, r2, #2
 8008312:	4620      	mov	r0, r4
 8008314:	f000 fb60 	bl	80089d8 <_calloc_r>
 8008318:	b160      	cbz	r0, 8008334 <_Balloc+0x64>
 800831a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800831e:	e00e      	b.n	800833e <_Balloc+0x6e>
 8008320:	2221      	movs	r2, #33	; 0x21
 8008322:	2104      	movs	r1, #4
 8008324:	4620      	mov	r0, r4
 8008326:	f000 fb57 	bl	80089d8 <_calloc_r>
 800832a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800832c:	60f0      	str	r0, [r6, #12]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1e4      	bne.n	80082fe <_Balloc+0x2e>
 8008334:	2000      	movs	r0, #0
 8008336:	bd70      	pop	{r4, r5, r6, pc}
 8008338:	6802      	ldr	r2, [r0, #0]
 800833a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800833e:	2300      	movs	r3, #0
 8008340:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008344:	e7f7      	b.n	8008336 <_Balloc+0x66>
 8008346:	bf00      	nop
 8008348:	08009af5 	.word	0x08009af5
 800834c:	08009bd8 	.word	0x08009bd8

08008350 <_Bfree>:
 8008350:	b570      	push	{r4, r5, r6, lr}
 8008352:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008354:	4605      	mov	r5, r0
 8008356:	460c      	mov	r4, r1
 8008358:	b976      	cbnz	r6, 8008378 <_Bfree+0x28>
 800835a:	2010      	movs	r0, #16
 800835c:	f7ff ffa2 	bl	80082a4 <malloc>
 8008360:	4602      	mov	r2, r0
 8008362:	6268      	str	r0, [r5, #36]	; 0x24
 8008364:	b920      	cbnz	r0, 8008370 <_Bfree+0x20>
 8008366:	4b09      	ldr	r3, [pc, #36]	; (800838c <_Bfree+0x3c>)
 8008368:	4809      	ldr	r0, [pc, #36]	; (8008390 <_Bfree+0x40>)
 800836a:	218a      	movs	r1, #138	; 0x8a
 800836c:	f000 fdea 	bl	8008f44 <__assert_func>
 8008370:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008374:	6006      	str	r6, [r0, #0]
 8008376:	60c6      	str	r6, [r0, #12]
 8008378:	b13c      	cbz	r4, 800838a <_Bfree+0x3a>
 800837a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800837c:	6862      	ldr	r2, [r4, #4]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008384:	6021      	str	r1, [r4, #0]
 8008386:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800838a:	bd70      	pop	{r4, r5, r6, pc}
 800838c:	08009af5 	.word	0x08009af5
 8008390:	08009bd8 	.word	0x08009bd8

08008394 <__multadd>:
 8008394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008398:	690d      	ldr	r5, [r1, #16]
 800839a:	4607      	mov	r7, r0
 800839c:	460c      	mov	r4, r1
 800839e:	461e      	mov	r6, r3
 80083a0:	f101 0c14 	add.w	ip, r1, #20
 80083a4:	2000      	movs	r0, #0
 80083a6:	f8dc 3000 	ldr.w	r3, [ip]
 80083aa:	b299      	uxth	r1, r3
 80083ac:	fb02 6101 	mla	r1, r2, r1, r6
 80083b0:	0c1e      	lsrs	r6, r3, #16
 80083b2:	0c0b      	lsrs	r3, r1, #16
 80083b4:	fb02 3306 	mla	r3, r2, r6, r3
 80083b8:	b289      	uxth	r1, r1
 80083ba:	3001      	adds	r0, #1
 80083bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80083c0:	4285      	cmp	r5, r0
 80083c2:	f84c 1b04 	str.w	r1, [ip], #4
 80083c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083ca:	dcec      	bgt.n	80083a6 <__multadd+0x12>
 80083cc:	b30e      	cbz	r6, 8008412 <__multadd+0x7e>
 80083ce:	68a3      	ldr	r3, [r4, #8]
 80083d0:	42ab      	cmp	r3, r5
 80083d2:	dc19      	bgt.n	8008408 <__multadd+0x74>
 80083d4:	6861      	ldr	r1, [r4, #4]
 80083d6:	4638      	mov	r0, r7
 80083d8:	3101      	adds	r1, #1
 80083da:	f7ff ff79 	bl	80082d0 <_Balloc>
 80083de:	4680      	mov	r8, r0
 80083e0:	b928      	cbnz	r0, 80083ee <__multadd+0x5a>
 80083e2:	4602      	mov	r2, r0
 80083e4:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <__multadd+0x84>)
 80083e6:	480d      	ldr	r0, [pc, #52]	; (800841c <__multadd+0x88>)
 80083e8:	21b5      	movs	r1, #181	; 0xb5
 80083ea:	f000 fdab 	bl	8008f44 <__assert_func>
 80083ee:	6922      	ldr	r2, [r4, #16]
 80083f0:	3202      	adds	r2, #2
 80083f2:	f104 010c 	add.w	r1, r4, #12
 80083f6:	0092      	lsls	r2, r2, #2
 80083f8:	300c      	adds	r0, #12
 80083fa:	f7ff ff5b 	bl	80082b4 <memcpy>
 80083fe:	4621      	mov	r1, r4
 8008400:	4638      	mov	r0, r7
 8008402:	f7ff ffa5 	bl	8008350 <_Bfree>
 8008406:	4644      	mov	r4, r8
 8008408:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800840c:	3501      	adds	r5, #1
 800840e:	615e      	str	r6, [r3, #20]
 8008410:	6125      	str	r5, [r4, #16]
 8008412:	4620      	mov	r0, r4
 8008414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008418:	08009b67 	.word	0x08009b67
 800841c:	08009bd8 	.word	0x08009bd8

08008420 <__hi0bits>:
 8008420:	0c03      	lsrs	r3, r0, #16
 8008422:	041b      	lsls	r3, r3, #16
 8008424:	b9d3      	cbnz	r3, 800845c <__hi0bits+0x3c>
 8008426:	0400      	lsls	r0, r0, #16
 8008428:	2310      	movs	r3, #16
 800842a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800842e:	bf04      	itt	eq
 8008430:	0200      	lsleq	r0, r0, #8
 8008432:	3308      	addeq	r3, #8
 8008434:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008438:	bf04      	itt	eq
 800843a:	0100      	lsleq	r0, r0, #4
 800843c:	3304      	addeq	r3, #4
 800843e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008442:	bf04      	itt	eq
 8008444:	0080      	lsleq	r0, r0, #2
 8008446:	3302      	addeq	r3, #2
 8008448:	2800      	cmp	r0, #0
 800844a:	db05      	blt.n	8008458 <__hi0bits+0x38>
 800844c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008450:	f103 0301 	add.w	r3, r3, #1
 8008454:	bf08      	it	eq
 8008456:	2320      	moveq	r3, #32
 8008458:	4618      	mov	r0, r3
 800845a:	4770      	bx	lr
 800845c:	2300      	movs	r3, #0
 800845e:	e7e4      	b.n	800842a <__hi0bits+0xa>

08008460 <__lo0bits>:
 8008460:	6803      	ldr	r3, [r0, #0]
 8008462:	f013 0207 	ands.w	r2, r3, #7
 8008466:	4601      	mov	r1, r0
 8008468:	d00b      	beq.n	8008482 <__lo0bits+0x22>
 800846a:	07da      	lsls	r2, r3, #31
 800846c:	d423      	bmi.n	80084b6 <__lo0bits+0x56>
 800846e:	0798      	lsls	r0, r3, #30
 8008470:	bf49      	itett	mi
 8008472:	085b      	lsrmi	r3, r3, #1
 8008474:	089b      	lsrpl	r3, r3, #2
 8008476:	2001      	movmi	r0, #1
 8008478:	600b      	strmi	r3, [r1, #0]
 800847a:	bf5c      	itt	pl
 800847c:	600b      	strpl	r3, [r1, #0]
 800847e:	2002      	movpl	r0, #2
 8008480:	4770      	bx	lr
 8008482:	b298      	uxth	r0, r3
 8008484:	b9a8      	cbnz	r0, 80084b2 <__lo0bits+0x52>
 8008486:	0c1b      	lsrs	r3, r3, #16
 8008488:	2010      	movs	r0, #16
 800848a:	b2da      	uxtb	r2, r3
 800848c:	b90a      	cbnz	r2, 8008492 <__lo0bits+0x32>
 800848e:	3008      	adds	r0, #8
 8008490:	0a1b      	lsrs	r3, r3, #8
 8008492:	071a      	lsls	r2, r3, #28
 8008494:	bf04      	itt	eq
 8008496:	091b      	lsreq	r3, r3, #4
 8008498:	3004      	addeq	r0, #4
 800849a:	079a      	lsls	r2, r3, #30
 800849c:	bf04      	itt	eq
 800849e:	089b      	lsreq	r3, r3, #2
 80084a0:	3002      	addeq	r0, #2
 80084a2:	07da      	lsls	r2, r3, #31
 80084a4:	d403      	bmi.n	80084ae <__lo0bits+0x4e>
 80084a6:	085b      	lsrs	r3, r3, #1
 80084a8:	f100 0001 	add.w	r0, r0, #1
 80084ac:	d005      	beq.n	80084ba <__lo0bits+0x5a>
 80084ae:	600b      	str	r3, [r1, #0]
 80084b0:	4770      	bx	lr
 80084b2:	4610      	mov	r0, r2
 80084b4:	e7e9      	b.n	800848a <__lo0bits+0x2a>
 80084b6:	2000      	movs	r0, #0
 80084b8:	4770      	bx	lr
 80084ba:	2020      	movs	r0, #32
 80084bc:	4770      	bx	lr
	...

080084c0 <__i2b>:
 80084c0:	b510      	push	{r4, lr}
 80084c2:	460c      	mov	r4, r1
 80084c4:	2101      	movs	r1, #1
 80084c6:	f7ff ff03 	bl	80082d0 <_Balloc>
 80084ca:	4602      	mov	r2, r0
 80084cc:	b928      	cbnz	r0, 80084da <__i2b+0x1a>
 80084ce:	4b05      	ldr	r3, [pc, #20]	; (80084e4 <__i2b+0x24>)
 80084d0:	4805      	ldr	r0, [pc, #20]	; (80084e8 <__i2b+0x28>)
 80084d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80084d6:	f000 fd35 	bl	8008f44 <__assert_func>
 80084da:	2301      	movs	r3, #1
 80084dc:	6144      	str	r4, [r0, #20]
 80084de:	6103      	str	r3, [r0, #16]
 80084e0:	bd10      	pop	{r4, pc}
 80084e2:	bf00      	nop
 80084e4:	08009b67 	.word	0x08009b67
 80084e8:	08009bd8 	.word	0x08009bd8

080084ec <__multiply>:
 80084ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f0:	4691      	mov	r9, r2
 80084f2:	690a      	ldr	r2, [r1, #16]
 80084f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	bfb8      	it	lt
 80084fc:	460b      	movlt	r3, r1
 80084fe:	460c      	mov	r4, r1
 8008500:	bfbc      	itt	lt
 8008502:	464c      	movlt	r4, r9
 8008504:	4699      	movlt	r9, r3
 8008506:	6927      	ldr	r7, [r4, #16]
 8008508:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800850c:	68a3      	ldr	r3, [r4, #8]
 800850e:	6861      	ldr	r1, [r4, #4]
 8008510:	eb07 060a 	add.w	r6, r7, sl
 8008514:	42b3      	cmp	r3, r6
 8008516:	b085      	sub	sp, #20
 8008518:	bfb8      	it	lt
 800851a:	3101      	addlt	r1, #1
 800851c:	f7ff fed8 	bl	80082d0 <_Balloc>
 8008520:	b930      	cbnz	r0, 8008530 <__multiply+0x44>
 8008522:	4602      	mov	r2, r0
 8008524:	4b44      	ldr	r3, [pc, #272]	; (8008638 <__multiply+0x14c>)
 8008526:	4845      	ldr	r0, [pc, #276]	; (800863c <__multiply+0x150>)
 8008528:	f240 115d 	movw	r1, #349	; 0x15d
 800852c:	f000 fd0a 	bl	8008f44 <__assert_func>
 8008530:	f100 0514 	add.w	r5, r0, #20
 8008534:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008538:	462b      	mov	r3, r5
 800853a:	2200      	movs	r2, #0
 800853c:	4543      	cmp	r3, r8
 800853e:	d321      	bcc.n	8008584 <__multiply+0x98>
 8008540:	f104 0314 	add.w	r3, r4, #20
 8008544:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008548:	f109 0314 	add.w	r3, r9, #20
 800854c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008550:	9202      	str	r2, [sp, #8]
 8008552:	1b3a      	subs	r2, r7, r4
 8008554:	3a15      	subs	r2, #21
 8008556:	f022 0203 	bic.w	r2, r2, #3
 800855a:	3204      	adds	r2, #4
 800855c:	f104 0115 	add.w	r1, r4, #21
 8008560:	428f      	cmp	r7, r1
 8008562:	bf38      	it	cc
 8008564:	2204      	movcc	r2, #4
 8008566:	9201      	str	r2, [sp, #4]
 8008568:	9a02      	ldr	r2, [sp, #8]
 800856a:	9303      	str	r3, [sp, #12]
 800856c:	429a      	cmp	r2, r3
 800856e:	d80c      	bhi.n	800858a <__multiply+0x9e>
 8008570:	2e00      	cmp	r6, #0
 8008572:	dd03      	ble.n	800857c <__multiply+0x90>
 8008574:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008578:	2b00      	cmp	r3, #0
 800857a:	d05a      	beq.n	8008632 <__multiply+0x146>
 800857c:	6106      	str	r6, [r0, #16]
 800857e:	b005      	add	sp, #20
 8008580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008584:	f843 2b04 	str.w	r2, [r3], #4
 8008588:	e7d8      	b.n	800853c <__multiply+0x50>
 800858a:	f8b3 a000 	ldrh.w	sl, [r3]
 800858e:	f1ba 0f00 	cmp.w	sl, #0
 8008592:	d024      	beq.n	80085de <__multiply+0xf2>
 8008594:	f104 0e14 	add.w	lr, r4, #20
 8008598:	46a9      	mov	r9, r5
 800859a:	f04f 0c00 	mov.w	ip, #0
 800859e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80085a2:	f8d9 1000 	ldr.w	r1, [r9]
 80085a6:	fa1f fb82 	uxth.w	fp, r2
 80085aa:	b289      	uxth	r1, r1
 80085ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80085b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80085b4:	f8d9 2000 	ldr.w	r2, [r9]
 80085b8:	4461      	add	r1, ip
 80085ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085be:	fb0a c20b 	mla	r2, sl, fp, ip
 80085c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80085c6:	b289      	uxth	r1, r1
 80085c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085cc:	4577      	cmp	r7, lr
 80085ce:	f849 1b04 	str.w	r1, [r9], #4
 80085d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085d6:	d8e2      	bhi.n	800859e <__multiply+0xb2>
 80085d8:	9a01      	ldr	r2, [sp, #4]
 80085da:	f845 c002 	str.w	ip, [r5, r2]
 80085de:	9a03      	ldr	r2, [sp, #12]
 80085e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80085e4:	3304      	adds	r3, #4
 80085e6:	f1b9 0f00 	cmp.w	r9, #0
 80085ea:	d020      	beq.n	800862e <__multiply+0x142>
 80085ec:	6829      	ldr	r1, [r5, #0]
 80085ee:	f104 0c14 	add.w	ip, r4, #20
 80085f2:	46ae      	mov	lr, r5
 80085f4:	f04f 0a00 	mov.w	sl, #0
 80085f8:	f8bc b000 	ldrh.w	fp, [ip]
 80085fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008600:	fb09 220b 	mla	r2, r9, fp, r2
 8008604:	4492      	add	sl, r2
 8008606:	b289      	uxth	r1, r1
 8008608:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800860c:	f84e 1b04 	str.w	r1, [lr], #4
 8008610:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008614:	f8be 1000 	ldrh.w	r1, [lr]
 8008618:	0c12      	lsrs	r2, r2, #16
 800861a:	fb09 1102 	mla	r1, r9, r2, r1
 800861e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008622:	4567      	cmp	r7, ip
 8008624:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008628:	d8e6      	bhi.n	80085f8 <__multiply+0x10c>
 800862a:	9a01      	ldr	r2, [sp, #4]
 800862c:	50a9      	str	r1, [r5, r2]
 800862e:	3504      	adds	r5, #4
 8008630:	e79a      	b.n	8008568 <__multiply+0x7c>
 8008632:	3e01      	subs	r6, #1
 8008634:	e79c      	b.n	8008570 <__multiply+0x84>
 8008636:	bf00      	nop
 8008638:	08009b67 	.word	0x08009b67
 800863c:	08009bd8 	.word	0x08009bd8

08008640 <__pow5mult>:
 8008640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008644:	4615      	mov	r5, r2
 8008646:	f012 0203 	ands.w	r2, r2, #3
 800864a:	4606      	mov	r6, r0
 800864c:	460f      	mov	r7, r1
 800864e:	d007      	beq.n	8008660 <__pow5mult+0x20>
 8008650:	4c25      	ldr	r4, [pc, #148]	; (80086e8 <__pow5mult+0xa8>)
 8008652:	3a01      	subs	r2, #1
 8008654:	2300      	movs	r3, #0
 8008656:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800865a:	f7ff fe9b 	bl	8008394 <__multadd>
 800865e:	4607      	mov	r7, r0
 8008660:	10ad      	asrs	r5, r5, #2
 8008662:	d03d      	beq.n	80086e0 <__pow5mult+0xa0>
 8008664:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008666:	b97c      	cbnz	r4, 8008688 <__pow5mult+0x48>
 8008668:	2010      	movs	r0, #16
 800866a:	f7ff fe1b 	bl	80082a4 <malloc>
 800866e:	4602      	mov	r2, r0
 8008670:	6270      	str	r0, [r6, #36]	; 0x24
 8008672:	b928      	cbnz	r0, 8008680 <__pow5mult+0x40>
 8008674:	4b1d      	ldr	r3, [pc, #116]	; (80086ec <__pow5mult+0xac>)
 8008676:	481e      	ldr	r0, [pc, #120]	; (80086f0 <__pow5mult+0xb0>)
 8008678:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800867c:	f000 fc62 	bl	8008f44 <__assert_func>
 8008680:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008684:	6004      	str	r4, [r0, #0]
 8008686:	60c4      	str	r4, [r0, #12]
 8008688:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800868c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008690:	b94c      	cbnz	r4, 80086a6 <__pow5mult+0x66>
 8008692:	f240 2171 	movw	r1, #625	; 0x271
 8008696:	4630      	mov	r0, r6
 8008698:	f7ff ff12 	bl	80084c0 <__i2b>
 800869c:	2300      	movs	r3, #0
 800869e:	f8c8 0008 	str.w	r0, [r8, #8]
 80086a2:	4604      	mov	r4, r0
 80086a4:	6003      	str	r3, [r0, #0]
 80086a6:	f04f 0900 	mov.w	r9, #0
 80086aa:	07eb      	lsls	r3, r5, #31
 80086ac:	d50a      	bpl.n	80086c4 <__pow5mult+0x84>
 80086ae:	4639      	mov	r1, r7
 80086b0:	4622      	mov	r2, r4
 80086b2:	4630      	mov	r0, r6
 80086b4:	f7ff ff1a 	bl	80084ec <__multiply>
 80086b8:	4639      	mov	r1, r7
 80086ba:	4680      	mov	r8, r0
 80086bc:	4630      	mov	r0, r6
 80086be:	f7ff fe47 	bl	8008350 <_Bfree>
 80086c2:	4647      	mov	r7, r8
 80086c4:	106d      	asrs	r5, r5, #1
 80086c6:	d00b      	beq.n	80086e0 <__pow5mult+0xa0>
 80086c8:	6820      	ldr	r0, [r4, #0]
 80086ca:	b938      	cbnz	r0, 80086dc <__pow5mult+0x9c>
 80086cc:	4622      	mov	r2, r4
 80086ce:	4621      	mov	r1, r4
 80086d0:	4630      	mov	r0, r6
 80086d2:	f7ff ff0b 	bl	80084ec <__multiply>
 80086d6:	6020      	str	r0, [r4, #0]
 80086d8:	f8c0 9000 	str.w	r9, [r0]
 80086dc:	4604      	mov	r4, r0
 80086de:	e7e4      	b.n	80086aa <__pow5mult+0x6a>
 80086e0:	4638      	mov	r0, r7
 80086e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086e6:	bf00      	nop
 80086e8:	08009d28 	.word	0x08009d28
 80086ec:	08009af5 	.word	0x08009af5
 80086f0:	08009bd8 	.word	0x08009bd8

080086f4 <__lshift>:
 80086f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f8:	460c      	mov	r4, r1
 80086fa:	6849      	ldr	r1, [r1, #4]
 80086fc:	6923      	ldr	r3, [r4, #16]
 80086fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008702:	68a3      	ldr	r3, [r4, #8]
 8008704:	4607      	mov	r7, r0
 8008706:	4691      	mov	r9, r2
 8008708:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800870c:	f108 0601 	add.w	r6, r8, #1
 8008710:	42b3      	cmp	r3, r6
 8008712:	db0b      	blt.n	800872c <__lshift+0x38>
 8008714:	4638      	mov	r0, r7
 8008716:	f7ff fddb 	bl	80082d0 <_Balloc>
 800871a:	4605      	mov	r5, r0
 800871c:	b948      	cbnz	r0, 8008732 <__lshift+0x3e>
 800871e:	4602      	mov	r2, r0
 8008720:	4b2a      	ldr	r3, [pc, #168]	; (80087cc <__lshift+0xd8>)
 8008722:	482b      	ldr	r0, [pc, #172]	; (80087d0 <__lshift+0xdc>)
 8008724:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008728:	f000 fc0c 	bl	8008f44 <__assert_func>
 800872c:	3101      	adds	r1, #1
 800872e:	005b      	lsls	r3, r3, #1
 8008730:	e7ee      	b.n	8008710 <__lshift+0x1c>
 8008732:	2300      	movs	r3, #0
 8008734:	f100 0114 	add.w	r1, r0, #20
 8008738:	f100 0210 	add.w	r2, r0, #16
 800873c:	4618      	mov	r0, r3
 800873e:	4553      	cmp	r3, sl
 8008740:	db37      	blt.n	80087b2 <__lshift+0xbe>
 8008742:	6920      	ldr	r0, [r4, #16]
 8008744:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008748:	f104 0314 	add.w	r3, r4, #20
 800874c:	f019 091f 	ands.w	r9, r9, #31
 8008750:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008754:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008758:	d02f      	beq.n	80087ba <__lshift+0xc6>
 800875a:	f1c9 0e20 	rsb	lr, r9, #32
 800875e:	468a      	mov	sl, r1
 8008760:	f04f 0c00 	mov.w	ip, #0
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	fa02 f209 	lsl.w	r2, r2, r9
 800876a:	ea42 020c 	orr.w	r2, r2, ip
 800876e:	f84a 2b04 	str.w	r2, [sl], #4
 8008772:	f853 2b04 	ldr.w	r2, [r3], #4
 8008776:	4298      	cmp	r0, r3
 8008778:	fa22 fc0e 	lsr.w	ip, r2, lr
 800877c:	d8f2      	bhi.n	8008764 <__lshift+0x70>
 800877e:	1b03      	subs	r3, r0, r4
 8008780:	3b15      	subs	r3, #21
 8008782:	f023 0303 	bic.w	r3, r3, #3
 8008786:	3304      	adds	r3, #4
 8008788:	f104 0215 	add.w	r2, r4, #21
 800878c:	4290      	cmp	r0, r2
 800878e:	bf38      	it	cc
 8008790:	2304      	movcc	r3, #4
 8008792:	f841 c003 	str.w	ip, [r1, r3]
 8008796:	f1bc 0f00 	cmp.w	ip, #0
 800879a:	d001      	beq.n	80087a0 <__lshift+0xac>
 800879c:	f108 0602 	add.w	r6, r8, #2
 80087a0:	3e01      	subs	r6, #1
 80087a2:	4638      	mov	r0, r7
 80087a4:	612e      	str	r6, [r5, #16]
 80087a6:	4621      	mov	r1, r4
 80087a8:	f7ff fdd2 	bl	8008350 <_Bfree>
 80087ac:	4628      	mov	r0, r5
 80087ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80087b6:	3301      	adds	r3, #1
 80087b8:	e7c1      	b.n	800873e <__lshift+0x4a>
 80087ba:	3904      	subs	r1, #4
 80087bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80087c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80087c4:	4298      	cmp	r0, r3
 80087c6:	d8f9      	bhi.n	80087bc <__lshift+0xc8>
 80087c8:	e7ea      	b.n	80087a0 <__lshift+0xac>
 80087ca:	bf00      	nop
 80087cc:	08009b67 	.word	0x08009b67
 80087d0:	08009bd8 	.word	0x08009bd8

080087d4 <__mcmp>:
 80087d4:	b530      	push	{r4, r5, lr}
 80087d6:	6902      	ldr	r2, [r0, #16]
 80087d8:	690c      	ldr	r4, [r1, #16]
 80087da:	1b12      	subs	r2, r2, r4
 80087dc:	d10e      	bne.n	80087fc <__mcmp+0x28>
 80087de:	f100 0314 	add.w	r3, r0, #20
 80087e2:	3114      	adds	r1, #20
 80087e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80087e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80087ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80087f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80087f4:	42a5      	cmp	r5, r4
 80087f6:	d003      	beq.n	8008800 <__mcmp+0x2c>
 80087f8:	d305      	bcc.n	8008806 <__mcmp+0x32>
 80087fa:	2201      	movs	r2, #1
 80087fc:	4610      	mov	r0, r2
 80087fe:	bd30      	pop	{r4, r5, pc}
 8008800:	4283      	cmp	r3, r0
 8008802:	d3f3      	bcc.n	80087ec <__mcmp+0x18>
 8008804:	e7fa      	b.n	80087fc <__mcmp+0x28>
 8008806:	f04f 32ff 	mov.w	r2, #4294967295
 800880a:	e7f7      	b.n	80087fc <__mcmp+0x28>

0800880c <__mdiff>:
 800880c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008810:	460c      	mov	r4, r1
 8008812:	4606      	mov	r6, r0
 8008814:	4611      	mov	r1, r2
 8008816:	4620      	mov	r0, r4
 8008818:	4690      	mov	r8, r2
 800881a:	f7ff ffdb 	bl	80087d4 <__mcmp>
 800881e:	1e05      	subs	r5, r0, #0
 8008820:	d110      	bne.n	8008844 <__mdiff+0x38>
 8008822:	4629      	mov	r1, r5
 8008824:	4630      	mov	r0, r6
 8008826:	f7ff fd53 	bl	80082d0 <_Balloc>
 800882a:	b930      	cbnz	r0, 800883a <__mdiff+0x2e>
 800882c:	4b3a      	ldr	r3, [pc, #232]	; (8008918 <__mdiff+0x10c>)
 800882e:	4602      	mov	r2, r0
 8008830:	f240 2132 	movw	r1, #562	; 0x232
 8008834:	4839      	ldr	r0, [pc, #228]	; (800891c <__mdiff+0x110>)
 8008836:	f000 fb85 	bl	8008f44 <__assert_func>
 800883a:	2301      	movs	r3, #1
 800883c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008840:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008844:	bfa4      	itt	ge
 8008846:	4643      	movge	r3, r8
 8008848:	46a0      	movge	r8, r4
 800884a:	4630      	mov	r0, r6
 800884c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008850:	bfa6      	itte	ge
 8008852:	461c      	movge	r4, r3
 8008854:	2500      	movge	r5, #0
 8008856:	2501      	movlt	r5, #1
 8008858:	f7ff fd3a 	bl	80082d0 <_Balloc>
 800885c:	b920      	cbnz	r0, 8008868 <__mdiff+0x5c>
 800885e:	4b2e      	ldr	r3, [pc, #184]	; (8008918 <__mdiff+0x10c>)
 8008860:	4602      	mov	r2, r0
 8008862:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008866:	e7e5      	b.n	8008834 <__mdiff+0x28>
 8008868:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800886c:	6926      	ldr	r6, [r4, #16]
 800886e:	60c5      	str	r5, [r0, #12]
 8008870:	f104 0914 	add.w	r9, r4, #20
 8008874:	f108 0514 	add.w	r5, r8, #20
 8008878:	f100 0e14 	add.w	lr, r0, #20
 800887c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008880:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008884:	f108 0210 	add.w	r2, r8, #16
 8008888:	46f2      	mov	sl, lr
 800888a:	2100      	movs	r1, #0
 800888c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008890:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008894:	fa1f f883 	uxth.w	r8, r3
 8008898:	fa11 f18b 	uxtah	r1, r1, fp
 800889c:	0c1b      	lsrs	r3, r3, #16
 800889e:	eba1 0808 	sub.w	r8, r1, r8
 80088a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80088a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80088aa:	fa1f f888 	uxth.w	r8, r8
 80088ae:	1419      	asrs	r1, r3, #16
 80088b0:	454e      	cmp	r6, r9
 80088b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80088b6:	f84a 3b04 	str.w	r3, [sl], #4
 80088ba:	d8e7      	bhi.n	800888c <__mdiff+0x80>
 80088bc:	1b33      	subs	r3, r6, r4
 80088be:	3b15      	subs	r3, #21
 80088c0:	f023 0303 	bic.w	r3, r3, #3
 80088c4:	3304      	adds	r3, #4
 80088c6:	3415      	adds	r4, #21
 80088c8:	42a6      	cmp	r6, r4
 80088ca:	bf38      	it	cc
 80088cc:	2304      	movcc	r3, #4
 80088ce:	441d      	add	r5, r3
 80088d0:	4473      	add	r3, lr
 80088d2:	469e      	mov	lr, r3
 80088d4:	462e      	mov	r6, r5
 80088d6:	4566      	cmp	r6, ip
 80088d8:	d30e      	bcc.n	80088f8 <__mdiff+0xec>
 80088da:	f10c 0203 	add.w	r2, ip, #3
 80088de:	1b52      	subs	r2, r2, r5
 80088e0:	f022 0203 	bic.w	r2, r2, #3
 80088e4:	3d03      	subs	r5, #3
 80088e6:	45ac      	cmp	ip, r5
 80088e8:	bf38      	it	cc
 80088ea:	2200      	movcc	r2, #0
 80088ec:	441a      	add	r2, r3
 80088ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80088f2:	b17b      	cbz	r3, 8008914 <__mdiff+0x108>
 80088f4:	6107      	str	r7, [r0, #16]
 80088f6:	e7a3      	b.n	8008840 <__mdiff+0x34>
 80088f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80088fc:	fa11 f288 	uxtah	r2, r1, r8
 8008900:	1414      	asrs	r4, r2, #16
 8008902:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008906:	b292      	uxth	r2, r2
 8008908:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800890c:	f84e 2b04 	str.w	r2, [lr], #4
 8008910:	1421      	asrs	r1, r4, #16
 8008912:	e7e0      	b.n	80088d6 <__mdiff+0xca>
 8008914:	3f01      	subs	r7, #1
 8008916:	e7ea      	b.n	80088ee <__mdiff+0xe2>
 8008918:	08009b67 	.word	0x08009b67
 800891c:	08009bd8 	.word	0x08009bd8

08008920 <__d2b>:
 8008920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008924:	4689      	mov	r9, r1
 8008926:	2101      	movs	r1, #1
 8008928:	ec57 6b10 	vmov	r6, r7, d0
 800892c:	4690      	mov	r8, r2
 800892e:	f7ff fccf 	bl	80082d0 <_Balloc>
 8008932:	4604      	mov	r4, r0
 8008934:	b930      	cbnz	r0, 8008944 <__d2b+0x24>
 8008936:	4602      	mov	r2, r0
 8008938:	4b25      	ldr	r3, [pc, #148]	; (80089d0 <__d2b+0xb0>)
 800893a:	4826      	ldr	r0, [pc, #152]	; (80089d4 <__d2b+0xb4>)
 800893c:	f240 310a 	movw	r1, #778	; 0x30a
 8008940:	f000 fb00 	bl	8008f44 <__assert_func>
 8008944:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008948:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800894c:	bb35      	cbnz	r5, 800899c <__d2b+0x7c>
 800894e:	2e00      	cmp	r6, #0
 8008950:	9301      	str	r3, [sp, #4]
 8008952:	d028      	beq.n	80089a6 <__d2b+0x86>
 8008954:	4668      	mov	r0, sp
 8008956:	9600      	str	r6, [sp, #0]
 8008958:	f7ff fd82 	bl	8008460 <__lo0bits>
 800895c:	9900      	ldr	r1, [sp, #0]
 800895e:	b300      	cbz	r0, 80089a2 <__d2b+0x82>
 8008960:	9a01      	ldr	r2, [sp, #4]
 8008962:	f1c0 0320 	rsb	r3, r0, #32
 8008966:	fa02 f303 	lsl.w	r3, r2, r3
 800896a:	430b      	orrs	r3, r1
 800896c:	40c2      	lsrs	r2, r0
 800896e:	6163      	str	r3, [r4, #20]
 8008970:	9201      	str	r2, [sp, #4]
 8008972:	9b01      	ldr	r3, [sp, #4]
 8008974:	61a3      	str	r3, [r4, #24]
 8008976:	2b00      	cmp	r3, #0
 8008978:	bf14      	ite	ne
 800897a:	2202      	movne	r2, #2
 800897c:	2201      	moveq	r2, #1
 800897e:	6122      	str	r2, [r4, #16]
 8008980:	b1d5      	cbz	r5, 80089b8 <__d2b+0x98>
 8008982:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008986:	4405      	add	r5, r0
 8008988:	f8c9 5000 	str.w	r5, [r9]
 800898c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008990:	f8c8 0000 	str.w	r0, [r8]
 8008994:	4620      	mov	r0, r4
 8008996:	b003      	add	sp, #12
 8008998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800899c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089a0:	e7d5      	b.n	800894e <__d2b+0x2e>
 80089a2:	6161      	str	r1, [r4, #20]
 80089a4:	e7e5      	b.n	8008972 <__d2b+0x52>
 80089a6:	a801      	add	r0, sp, #4
 80089a8:	f7ff fd5a 	bl	8008460 <__lo0bits>
 80089ac:	9b01      	ldr	r3, [sp, #4]
 80089ae:	6163      	str	r3, [r4, #20]
 80089b0:	2201      	movs	r2, #1
 80089b2:	6122      	str	r2, [r4, #16]
 80089b4:	3020      	adds	r0, #32
 80089b6:	e7e3      	b.n	8008980 <__d2b+0x60>
 80089b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80089c0:	f8c9 0000 	str.w	r0, [r9]
 80089c4:	6918      	ldr	r0, [r3, #16]
 80089c6:	f7ff fd2b 	bl	8008420 <__hi0bits>
 80089ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089ce:	e7df      	b.n	8008990 <__d2b+0x70>
 80089d0:	08009b67 	.word	0x08009b67
 80089d4:	08009bd8 	.word	0x08009bd8

080089d8 <_calloc_r>:
 80089d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089da:	fba1 2402 	umull	r2, r4, r1, r2
 80089de:	b94c      	cbnz	r4, 80089f4 <_calloc_r+0x1c>
 80089e0:	4611      	mov	r1, r2
 80089e2:	9201      	str	r2, [sp, #4]
 80089e4:	f000 f87a 	bl	8008adc <_malloc_r>
 80089e8:	9a01      	ldr	r2, [sp, #4]
 80089ea:	4605      	mov	r5, r0
 80089ec:	b930      	cbnz	r0, 80089fc <_calloc_r+0x24>
 80089ee:	4628      	mov	r0, r5
 80089f0:	b003      	add	sp, #12
 80089f2:	bd30      	pop	{r4, r5, pc}
 80089f4:	220c      	movs	r2, #12
 80089f6:	6002      	str	r2, [r0, #0]
 80089f8:	2500      	movs	r5, #0
 80089fa:	e7f8      	b.n	80089ee <_calloc_r+0x16>
 80089fc:	4621      	mov	r1, r4
 80089fe:	f7fd fdf3 	bl	80065e8 <memset>
 8008a02:	e7f4      	b.n	80089ee <_calloc_r+0x16>

08008a04 <_free_r>:
 8008a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a06:	2900      	cmp	r1, #0
 8008a08:	d044      	beq.n	8008a94 <_free_r+0x90>
 8008a0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a0e:	9001      	str	r0, [sp, #4]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f1a1 0404 	sub.w	r4, r1, #4
 8008a16:	bfb8      	it	lt
 8008a18:	18e4      	addlt	r4, r4, r3
 8008a1a:	f000 fb19 	bl	8009050 <__malloc_lock>
 8008a1e:	4a1e      	ldr	r2, [pc, #120]	; (8008a98 <_free_r+0x94>)
 8008a20:	9801      	ldr	r0, [sp, #4]
 8008a22:	6813      	ldr	r3, [r2, #0]
 8008a24:	b933      	cbnz	r3, 8008a34 <_free_r+0x30>
 8008a26:	6063      	str	r3, [r4, #4]
 8008a28:	6014      	str	r4, [r2, #0]
 8008a2a:	b003      	add	sp, #12
 8008a2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a30:	f000 bb14 	b.w	800905c <__malloc_unlock>
 8008a34:	42a3      	cmp	r3, r4
 8008a36:	d908      	bls.n	8008a4a <_free_r+0x46>
 8008a38:	6825      	ldr	r5, [r4, #0]
 8008a3a:	1961      	adds	r1, r4, r5
 8008a3c:	428b      	cmp	r3, r1
 8008a3e:	bf01      	itttt	eq
 8008a40:	6819      	ldreq	r1, [r3, #0]
 8008a42:	685b      	ldreq	r3, [r3, #4]
 8008a44:	1949      	addeq	r1, r1, r5
 8008a46:	6021      	streq	r1, [r4, #0]
 8008a48:	e7ed      	b.n	8008a26 <_free_r+0x22>
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	b10b      	cbz	r3, 8008a54 <_free_r+0x50>
 8008a50:	42a3      	cmp	r3, r4
 8008a52:	d9fa      	bls.n	8008a4a <_free_r+0x46>
 8008a54:	6811      	ldr	r1, [r2, #0]
 8008a56:	1855      	adds	r5, r2, r1
 8008a58:	42a5      	cmp	r5, r4
 8008a5a:	d10b      	bne.n	8008a74 <_free_r+0x70>
 8008a5c:	6824      	ldr	r4, [r4, #0]
 8008a5e:	4421      	add	r1, r4
 8008a60:	1854      	adds	r4, r2, r1
 8008a62:	42a3      	cmp	r3, r4
 8008a64:	6011      	str	r1, [r2, #0]
 8008a66:	d1e0      	bne.n	8008a2a <_free_r+0x26>
 8008a68:	681c      	ldr	r4, [r3, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	6053      	str	r3, [r2, #4]
 8008a6e:	4421      	add	r1, r4
 8008a70:	6011      	str	r1, [r2, #0]
 8008a72:	e7da      	b.n	8008a2a <_free_r+0x26>
 8008a74:	d902      	bls.n	8008a7c <_free_r+0x78>
 8008a76:	230c      	movs	r3, #12
 8008a78:	6003      	str	r3, [r0, #0]
 8008a7a:	e7d6      	b.n	8008a2a <_free_r+0x26>
 8008a7c:	6825      	ldr	r5, [r4, #0]
 8008a7e:	1961      	adds	r1, r4, r5
 8008a80:	428b      	cmp	r3, r1
 8008a82:	bf04      	itt	eq
 8008a84:	6819      	ldreq	r1, [r3, #0]
 8008a86:	685b      	ldreq	r3, [r3, #4]
 8008a88:	6063      	str	r3, [r4, #4]
 8008a8a:	bf04      	itt	eq
 8008a8c:	1949      	addeq	r1, r1, r5
 8008a8e:	6021      	streq	r1, [r4, #0]
 8008a90:	6054      	str	r4, [r2, #4]
 8008a92:	e7ca      	b.n	8008a2a <_free_r+0x26>
 8008a94:	b003      	add	sp, #12
 8008a96:	bd30      	pop	{r4, r5, pc}
 8008a98:	2000045c 	.word	0x2000045c

08008a9c <sbrk_aligned>:
 8008a9c:	b570      	push	{r4, r5, r6, lr}
 8008a9e:	4e0e      	ldr	r6, [pc, #56]	; (8008ad8 <sbrk_aligned+0x3c>)
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	6831      	ldr	r1, [r6, #0]
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	b911      	cbnz	r1, 8008aae <sbrk_aligned+0x12>
 8008aa8:	f000 f9e6 	bl	8008e78 <_sbrk_r>
 8008aac:	6030      	str	r0, [r6, #0]
 8008aae:	4621      	mov	r1, r4
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	f000 f9e1 	bl	8008e78 <_sbrk_r>
 8008ab6:	1c43      	adds	r3, r0, #1
 8008ab8:	d00a      	beq.n	8008ad0 <sbrk_aligned+0x34>
 8008aba:	1cc4      	adds	r4, r0, #3
 8008abc:	f024 0403 	bic.w	r4, r4, #3
 8008ac0:	42a0      	cmp	r0, r4
 8008ac2:	d007      	beq.n	8008ad4 <sbrk_aligned+0x38>
 8008ac4:	1a21      	subs	r1, r4, r0
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	f000 f9d6 	bl	8008e78 <_sbrk_r>
 8008acc:	3001      	adds	r0, #1
 8008ace:	d101      	bne.n	8008ad4 <sbrk_aligned+0x38>
 8008ad0:	f04f 34ff 	mov.w	r4, #4294967295
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	bd70      	pop	{r4, r5, r6, pc}
 8008ad8:	20000460 	.word	0x20000460

08008adc <_malloc_r>:
 8008adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae0:	1ccd      	adds	r5, r1, #3
 8008ae2:	f025 0503 	bic.w	r5, r5, #3
 8008ae6:	3508      	adds	r5, #8
 8008ae8:	2d0c      	cmp	r5, #12
 8008aea:	bf38      	it	cc
 8008aec:	250c      	movcc	r5, #12
 8008aee:	2d00      	cmp	r5, #0
 8008af0:	4607      	mov	r7, r0
 8008af2:	db01      	blt.n	8008af8 <_malloc_r+0x1c>
 8008af4:	42a9      	cmp	r1, r5
 8008af6:	d905      	bls.n	8008b04 <_malloc_r+0x28>
 8008af8:	230c      	movs	r3, #12
 8008afa:	603b      	str	r3, [r7, #0]
 8008afc:	2600      	movs	r6, #0
 8008afe:	4630      	mov	r0, r6
 8008b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b04:	4e2e      	ldr	r6, [pc, #184]	; (8008bc0 <_malloc_r+0xe4>)
 8008b06:	f000 faa3 	bl	8009050 <__malloc_lock>
 8008b0a:	6833      	ldr	r3, [r6, #0]
 8008b0c:	461c      	mov	r4, r3
 8008b0e:	bb34      	cbnz	r4, 8008b5e <_malloc_r+0x82>
 8008b10:	4629      	mov	r1, r5
 8008b12:	4638      	mov	r0, r7
 8008b14:	f7ff ffc2 	bl	8008a9c <sbrk_aligned>
 8008b18:	1c43      	adds	r3, r0, #1
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	d14d      	bne.n	8008bba <_malloc_r+0xde>
 8008b1e:	6834      	ldr	r4, [r6, #0]
 8008b20:	4626      	mov	r6, r4
 8008b22:	2e00      	cmp	r6, #0
 8008b24:	d140      	bne.n	8008ba8 <_malloc_r+0xcc>
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	4631      	mov	r1, r6
 8008b2a:	4638      	mov	r0, r7
 8008b2c:	eb04 0803 	add.w	r8, r4, r3
 8008b30:	f000 f9a2 	bl	8008e78 <_sbrk_r>
 8008b34:	4580      	cmp	r8, r0
 8008b36:	d13a      	bne.n	8008bae <_malloc_r+0xd2>
 8008b38:	6821      	ldr	r1, [r4, #0]
 8008b3a:	3503      	adds	r5, #3
 8008b3c:	1a6d      	subs	r5, r5, r1
 8008b3e:	f025 0503 	bic.w	r5, r5, #3
 8008b42:	3508      	adds	r5, #8
 8008b44:	2d0c      	cmp	r5, #12
 8008b46:	bf38      	it	cc
 8008b48:	250c      	movcc	r5, #12
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	f7ff ffa5 	bl	8008a9c <sbrk_aligned>
 8008b52:	3001      	adds	r0, #1
 8008b54:	d02b      	beq.n	8008bae <_malloc_r+0xd2>
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	442b      	add	r3, r5
 8008b5a:	6023      	str	r3, [r4, #0]
 8008b5c:	e00e      	b.n	8008b7c <_malloc_r+0xa0>
 8008b5e:	6822      	ldr	r2, [r4, #0]
 8008b60:	1b52      	subs	r2, r2, r5
 8008b62:	d41e      	bmi.n	8008ba2 <_malloc_r+0xc6>
 8008b64:	2a0b      	cmp	r2, #11
 8008b66:	d916      	bls.n	8008b96 <_malloc_r+0xba>
 8008b68:	1961      	adds	r1, r4, r5
 8008b6a:	42a3      	cmp	r3, r4
 8008b6c:	6025      	str	r5, [r4, #0]
 8008b6e:	bf18      	it	ne
 8008b70:	6059      	strne	r1, [r3, #4]
 8008b72:	6863      	ldr	r3, [r4, #4]
 8008b74:	bf08      	it	eq
 8008b76:	6031      	streq	r1, [r6, #0]
 8008b78:	5162      	str	r2, [r4, r5]
 8008b7a:	604b      	str	r3, [r1, #4]
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	f104 060b 	add.w	r6, r4, #11
 8008b82:	f000 fa6b 	bl	800905c <__malloc_unlock>
 8008b86:	f026 0607 	bic.w	r6, r6, #7
 8008b8a:	1d23      	adds	r3, r4, #4
 8008b8c:	1af2      	subs	r2, r6, r3
 8008b8e:	d0b6      	beq.n	8008afe <_malloc_r+0x22>
 8008b90:	1b9b      	subs	r3, r3, r6
 8008b92:	50a3      	str	r3, [r4, r2]
 8008b94:	e7b3      	b.n	8008afe <_malloc_r+0x22>
 8008b96:	6862      	ldr	r2, [r4, #4]
 8008b98:	42a3      	cmp	r3, r4
 8008b9a:	bf0c      	ite	eq
 8008b9c:	6032      	streq	r2, [r6, #0]
 8008b9e:	605a      	strne	r2, [r3, #4]
 8008ba0:	e7ec      	b.n	8008b7c <_malloc_r+0xa0>
 8008ba2:	4623      	mov	r3, r4
 8008ba4:	6864      	ldr	r4, [r4, #4]
 8008ba6:	e7b2      	b.n	8008b0e <_malloc_r+0x32>
 8008ba8:	4634      	mov	r4, r6
 8008baa:	6876      	ldr	r6, [r6, #4]
 8008bac:	e7b9      	b.n	8008b22 <_malloc_r+0x46>
 8008bae:	230c      	movs	r3, #12
 8008bb0:	603b      	str	r3, [r7, #0]
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	f000 fa52 	bl	800905c <__malloc_unlock>
 8008bb8:	e7a1      	b.n	8008afe <_malloc_r+0x22>
 8008bba:	6025      	str	r5, [r4, #0]
 8008bbc:	e7de      	b.n	8008b7c <_malloc_r+0xa0>
 8008bbe:	bf00      	nop
 8008bc0:	2000045c 	.word	0x2000045c

08008bc4 <__sfputc_r>:
 8008bc4:	6893      	ldr	r3, [r2, #8]
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	b410      	push	{r4}
 8008bcc:	6093      	str	r3, [r2, #8]
 8008bce:	da08      	bge.n	8008be2 <__sfputc_r+0x1e>
 8008bd0:	6994      	ldr	r4, [r2, #24]
 8008bd2:	42a3      	cmp	r3, r4
 8008bd4:	db01      	blt.n	8008bda <__sfputc_r+0x16>
 8008bd6:	290a      	cmp	r1, #10
 8008bd8:	d103      	bne.n	8008be2 <__sfputc_r+0x1e>
 8008bda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bde:	f7fe ba03 	b.w	8006fe8 <__swbuf_r>
 8008be2:	6813      	ldr	r3, [r2, #0]
 8008be4:	1c58      	adds	r0, r3, #1
 8008be6:	6010      	str	r0, [r2, #0]
 8008be8:	7019      	strb	r1, [r3, #0]
 8008bea:	4608      	mov	r0, r1
 8008bec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <__sfputs_r>:
 8008bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf4:	4606      	mov	r6, r0
 8008bf6:	460f      	mov	r7, r1
 8008bf8:	4614      	mov	r4, r2
 8008bfa:	18d5      	adds	r5, r2, r3
 8008bfc:	42ac      	cmp	r4, r5
 8008bfe:	d101      	bne.n	8008c04 <__sfputs_r+0x12>
 8008c00:	2000      	movs	r0, #0
 8008c02:	e007      	b.n	8008c14 <__sfputs_r+0x22>
 8008c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c08:	463a      	mov	r2, r7
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	f7ff ffda 	bl	8008bc4 <__sfputc_r>
 8008c10:	1c43      	adds	r3, r0, #1
 8008c12:	d1f3      	bne.n	8008bfc <__sfputs_r+0xa>
 8008c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c18 <_vfiprintf_r>:
 8008c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1c:	460d      	mov	r5, r1
 8008c1e:	b09d      	sub	sp, #116	; 0x74
 8008c20:	4614      	mov	r4, r2
 8008c22:	4698      	mov	r8, r3
 8008c24:	4606      	mov	r6, r0
 8008c26:	b118      	cbz	r0, 8008c30 <_vfiprintf_r+0x18>
 8008c28:	6983      	ldr	r3, [r0, #24]
 8008c2a:	b90b      	cbnz	r3, 8008c30 <_vfiprintf_r+0x18>
 8008c2c:	f7ff fa30 	bl	8008090 <__sinit>
 8008c30:	4b89      	ldr	r3, [pc, #548]	; (8008e58 <_vfiprintf_r+0x240>)
 8008c32:	429d      	cmp	r5, r3
 8008c34:	d11b      	bne.n	8008c6e <_vfiprintf_r+0x56>
 8008c36:	6875      	ldr	r5, [r6, #4]
 8008c38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c3a:	07d9      	lsls	r1, r3, #31
 8008c3c:	d405      	bmi.n	8008c4a <_vfiprintf_r+0x32>
 8008c3e:	89ab      	ldrh	r3, [r5, #12]
 8008c40:	059a      	lsls	r2, r3, #22
 8008c42:	d402      	bmi.n	8008c4a <_vfiprintf_r+0x32>
 8008c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c46:	f7ff fac6 	bl	80081d6 <__retarget_lock_acquire_recursive>
 8008c4a:	89ab      	ldrh	r3, [r5, #12]
 8008c4c:	071b      	lsls	r3, r3, #28
 8008c4e:	d501      	bpl.n	8008c54 <_vfiprintf_r+0x3c>
 8008c50:	692b      	ldr	r3, [r5, #16]
 8008c52:	b9eb      	cbnz	r3, 8008c90 <_vfiprintf_r+0x78>
 8008c54:	4629      	mov	r1, r5
 8008c56:	4630      	mov	r0, r6
 8008c58:	f7fe fa18 	bl	800708c <__swsetup_r>
 8008c5c:	b1c0      	cbz	r0, 8008c90 <_vfiprintf_r+0x78>
 8008c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c60:	07dc      	lsls	r4, r3, #31
 8008c62:	d50e      	bpl.n	8008c82 <_vfiprintf_r+0x6a>
 8008c64:	f04f 30ff 	mov.w	r0, #4294967295
 8008c68:	b01d      	add	sp, #116	; 0x74
 8008c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c6e:	4b7b      	ldr	r3, [pc, #492]	; (8008e5c <_vfiprintf_r+0x244>)
 8008c70:	429d      	cmp	r5, r3
 8008c72:	d101      	bne.n	8008c78 <_vfiprintf_r+0x60>
 8008c74:	68b5      	ldr	r5, [r6, #8]
 8008c76:	e7df      	b.n	8008c38 <_vfiprintf_r+0x20>
 8008c78:	4b79      	ldr	r3, [pc, #484]	; (8008e60 <_vfiprintf_r+0x248>)
 8008c7a:	429d      	cmp	r5, r3
 8008c7c:	bf08      	it	eq
 8008c7e:	68f5      	ldreq	r5, [r6, #12]
 8008c80:	e7da      	b.n	8008c38 <_vfiprintf_r+0x20>
 8008c82:	89ab      	ldrh	r3, [r5, #12]
 8008c84:	0598      	lsls	r0, r3, #22
 8008c86:	d4ed      	bmi.n	8008c64 <_vfiprintf_r+0x4c>
 8008c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c8a:	f7ff faa5 	bl	80081d8 <__retarget_lock_release_recursive>
 8008c8e:	e7e9      	b.n	8008c64 <_vfiprintf_r+0x4c>
 8008c90:	2300      	movs	r3, #0
 8008c92:	9309      	str	r3, [sp, #36]	; 0x24
 8008c94:	2320      	movs	r3, #32
 8008c96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c9e:	2330      	movs	r3, #48	; 0x30
 8008ca0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008e64 <_vfiprintf_r+0x24c>
 8008ca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ca8:	f04f 0901 	mov.w	r9, #1
 8008cac:	4623      	mov	r3, r4
 8008cae:	469a      	mov	sl, r3
 8008cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cb4:	b10a      	cbz	r2, 8008cba <_vfiprintf_r+0xa2>
 8008cb6:	2a25      	cmp	r2, #37	; 0x25
 8008cb8:	d1f9      	bne.n	8008cae <_vfiprintf_r+0x96>
 8008cba:	ebba 0b04 	subs.w	fp, sl, r4
 8008cbe:	d00b      	beq.n	8008cd8 <_vfiprintf_r+0xc0>
 8008cc0:	465b      	mov	r3, fp
 8008cc2:	4622      	mov	r2, r4
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	f7ff ff93 	bl	8008bf2 <__sfputs_r>
 8008ccc:	3001      	adds	r0, #1
 8008cce:	f000 80aa 	beq.w	8008e26 <_vfiprintf_r+0x20e>
 8008cd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cd4:	445a      	add	r2, fp
 8008cd6:	9209      	str	r2, [sp, #36]	; 0x24
 8008cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f000 80a2 	beq.w	8008e26 <_vfiprintf_r+0x20e>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cec:	f10a 0a01 	add.w	sl, sl, #1
 8008cf0:	9304      	str	r3, [sp, #16]
 8008cf2:	9307      	str	r3, [sp, #28]
 8008cf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cf8:	931a      	str	r3, [sp, #104]	; 0x68
 8008cfa:	4654      	mov	r4, sl
 8008cfc:	2205      	movs	r2, #5
 8008cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d02:	4858      	ldr	r0, [pc, #352]	; (8008e64 <_vfiprintf_r+0x24c>)
 8008d04:	f7f7 fa84 	bl	8000210 <memchr>
 8008d08:	9a04      	ldr	r2, [sp, #16]
 8008d0a:	b9d8      	cbnz	r0, 8008d44 <_vfiprintf_r+0x12c>
 8008d0c:	06d1      	lsls	r1, r2, #27
 8008d0e:	bf44      	itt	mi
 8008d10:	2320      	movmi	r3, #32
 8008d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d16:	0713      	lsls	r3, r2, #28
 8008d18:	bf44      	itt	mi
 8008d1a:	232b      	movmi	r3, #43	; 0x2b
 8008d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d20:	f89a 3000 	ldrb.w	r3, [sl]
 8008d24:	2b2a      	cmp	r3, #42	; 0x2a
 8008d26:	d015      	beq.n	8008d54 <_vfiprintf_r+0x13c>
 8008d28:	9a07      	ldr	r2, [sp, #28]
 8008d2a:	4654      	mov	r4, sl
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	f04f 0c0a 	mov.w	ip, #10
 8008d32:	4621      	mov	r1, r4
 8008d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d38:	3b30      	subs	r3, #48	; 0x30
 8008d3a:	2b09      	cmp	r3, #9
 8008d3c:	d94e      	bls.n	8008ddc <_vfiprintf_r+0x1c4>
 8008d3e:	b1b0      	cbz	r0, 8008d6e <_vfiprintf_r+0x156>
 8008d40:	9207      	str	r2, [sp, #28]
 8008d42:	e014      	b.n	8008d6e <_vfiprintf_r+0x156>
 8008d44:	eba0 0308 	sub.w	r3, r0, r8
 8008d48:	fa09 f303 	lsl.w	r3, r9, r3
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	9304      	str	r3, [sp, #16]
 8008d50:	46a2      	mov	sl, r4
 8008d52:	e7d2      	b.n	8008cfa <_vfiprintf_r+0xe2>
 8008d54:	9b03      	ldr	r3, [sp, #12]
 8008d56:	1d19      	adds	r1, r3, #4
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	9103      	str	r1, [sp, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	bfbb      	ittet	lt
 8008d60:	425b      	neglt	r3, r3
 8008d62:	f042 0202 	orrlt.w	r2, r2, #2
 8008d66:	9307      	strge	r3, [sp, #28]
 8008d68:	9307      	strlt	r3, [sp, #28]
 8008d6a:	bfb8      	it	lt
 8008d6c:	9204      	strlt	r2, [sp, #16]
 8008d6e:	7823      	ldrb	r3, [r4, #0]
 8008d70:	2b2e      	cmp	r3, #46	; 0x2e
 8008d72:	d10c      	bne.n	8008d8e <_vfiprintf_r+0x176>
 8008d74:	7863      	ldrb	r3, [r4, #1]
 8008d76:	2b2a      	cmp	r3, #42	; 0x2a
 8008d78:	d135      	bne.n	8008de6 <_vfiprintf_r+0x1ce>
 8008d7a:	9b03      	ldr	r3, [sp, #12]
 8008d7c:	1d1a      	adds	r2, r3, #4
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	9203      	str	r2, [sp, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	bfb8      	it	lt
 8008d86:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d8a:	3402      	adds	r4, #2
 8008d8c:	9305      	str	r3, [sp, #20]
 8008d8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e74 <_vfiprintf_r+0x25c>
 8008d92:	7821      	ldrb	r1, [r4, #0]
 8008d94:	2203      	movs	r2, #3
 8008d96:	4650      	mov	r0, sl
 8008d98:	f7f7 fa3a 	bl	8000210 <memchr>
 8008d9c:	b140      	cbz	r0, 8008db0 <_vfiprintf_r+0x198>
 8008d9e:	2340      	movs	r3, #64	; 0x40
 8008da0:	eba0 000a 	sub.w	r0, r0, sl
 8008da4:	fa03 f000 	lsl.w	r0, r3, r0
 8008da8:	9b04      	ldr	r3, [sp, #16]
 8008daa:	4303      	orrs	r3, r0
 8008dac:	3401      	adds	r4, #1
 8008dae:	9304      	str	r3, [sp, #16]
 8008db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db4:	482c      	ldr	r0, [pc, #176]	; (8008e68 <_vfiprintf_r+0x250>)
 8008db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dba:	2206      	movs	r2, #6
 8008dbc:	f7f7 fa28 	bl	8000210 <memchr>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	d03f      	beq.n	8008e44 <_vfiprintf_r+0x22c>
 8008dc4:	4b29      	ldr	r3, [pc, #164]	; (8008e6c <_vfiprintf_r+0x254>)
 8008dc6:	bb1b      	cbnz	r3, 8008e10 <_vfiprintf_r+0x1f8>
 8008dc8:	9b03      	ldr	r3, [sp, #12]
 8008dca:	3307      	adds	r3, #7
 8008dcc:	f023 0307 	bic.w	r3, r3, #7
 8008dd0:	3308      	adds	r3, #8
 8008dd2:	9303      	str	r3, [sp, #12]
 8008dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd6:	443b      	add	r3, r7
 8008dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dda:	e767      	b.n	8008cac <_vfiprintf_r+0x94>
 8008ddc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008de0:	460c      	mov	r4, r1
 8008de2:	2001      	movs	r0, #1
 8008de4:	e7a5      	b.n	8008d32 <_vfiprintf_r+0x11a>
 8008de6:	2300      	movs	r3, #0
 8008de8:	3401      	adds	r4, #1
 8008dea:	9305      	str	r3, [sp, #20]
 8008dec:	4619      	mov	r1, r3
 8008dee:	f04f 0c0a 	mov.w	ip, #10
 8008df2:	4620      	mov	r0, r4
 8008df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008df8:	3a30      	subs	r2, #48	; 0x30
 8008dfa:	2a09      	cmp	r2, #9
 8008dfc:	d903      	bls.n	8008e06 <_vfiprintf_r+0x1ee>
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d0c5      	beq.n	8008d8e <_vfiprintf_r+0x176>
 8008e02:	9105      	str	r1, [sp, #20]
 8008e04:	e7c3      	b.n	8008d8e <_vfiprintf_r+0x176>
 8008e06:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e7f0      	b.n	8008df2 <_vfiprintf_r+0x1da>
 8008e10:	ab03      	add	r3, sp, #12
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	462a      	mov	r2, r5
 8008e16:	4b16      	ldr	r3, [pc, #88]	; (8008e70 <_vfiprintf_r+0x258>)
 8008e18:	a904      	add	r1, sp, #16
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	f7fd fc8c 	bl	8006738 <_printf_float>
 8008e20:	4607      	mov	r7, r0
 8008e22:	1c78      	adds	r0, r7, #1
 8008e24:	d1d6      	bne.n	8008dd4 <_vfiprintf_r+0x1bc>
 8008e26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e28:	07d9      	lsls	r1, r3, #31
 8008e2a:	d405      	bmi.n	8008e38 <_vfiprintf_r+0x220>
 8008e2c:	89ab      	ldrh	r3, [r5, #12]
 8008e2e:	059a      	lsls	r2, r3, #22
 8008e30:	d402      	bmi.n	8008e38 <_vfiprintf_r+0x220>
 8008e32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e34:	f7ff f9d0 	bl	80081d8 <__retarget_lock_release_recursive>
 8008e38:	89ab      	ldrh	r3, [r5, #12]
 8008e3a:	065b      	lsls	r3, r3, #25
 8008e3c:	f53f af12 	bmi.w	8008c64 <_vfiprintf_r+0x4c>
 8008e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e42:	e711      	b.n	8008c68 <_vfiprintf_r+0x50>
 8008e44:	ab03      	add	r3, sp, #12
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	462a      	mov	r2, r5
 8008e4a:	4b09      	ldr	r3, [pc, #36]	; (8008e70 <_vfiprintf_r+0x258>)
 8008e4c:	a904      	add	r1, sp, #16
 8008e4e:	4630      	mov	r0, r6
 8008e50:	f7fd ff16 	bl	8006c80 <_printf_i>
 8008e54:	e7e4      	b.n	8008e20 <_vfiprintf_r+0x208>
 8008e56:	bf00      	nop
 8008e58:	08009b98 	.word	0x08009b98
 8008e5c:	08009bb8 	.word	0x08009bb8
 8008e60:	08009b78 	.word	0x08009b78
 8008e64:	08009d34 	.word	0x08009d34
 8008e68:	08009d3e 	.word	0x08009d3e
 8008e6c:	08006739 	.word	0x08006739
 8008e70:	08008bf3 	.word	0x08008bf3
 8008e74:	08009d3a 	.word	0x08009d3a

08008e78 <_sbrk_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4d06      	ldr	r5, [pc, #24]	; (8008e94 <_sbrk_r+0x1c>)
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	4604      	mov	r4, r0
 8008e80:	4608      	mov	r0, r1
 8008e82:	602b      	str	r3, [r5, #0]
 8008e84:	f7fd face 	bl	8006424 <_sbrk>
 8008e88:	1c43      	adds	r3, r0, #1
 8008e8a:	d102      	bne.n	8008e92 <_sbrk_r+0x1a>
 8008e8c:	682b      	ldr	r3, [r5, #0]
 8008e8e:	b103      	cbz	r3, 8008e92 <_sbrk_r+0x1a>
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	bd38      	pop	{r3, r4, r5, pc}
 8008e94:	20000464 	.word	0x20000464

08008e98 <__sread>:
 8008e98:	b510      	push	{r4, lr}
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ea0:	f000 f8e2 	bl	8009068 <_read_r>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	bfab      	itete	ge
 8008ea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008eaa:	89a3      	ldrhlt	r3, [r4, #12]
 8008eac:	181b      	addge	r3, r3, r0
 8008eae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008eb2:	bfac      	ite	ge
 8008eb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008eb6:	81a3      	strhlt	r3, [r4, #12]
 8008eb8:	bd10      	pop	{r4, pc}

08008eba <__swrite>:
 8008eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ebe:	461f      	mov	r7, r3
 8008ec0:	898b      	ldrh	r3, [r1, #12]
 8008ec2:	05db      	lsls	r3, r3, #23
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	4616      	mov	r6, r2
 8008eca:	d505      	bpl.n	8008ed8 <__swrite+0x1e>
 8008ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f000 f898 	bl	8009008 <_lseek_r>
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ee2:	81a3      	strh	r3, [r4, #12]
 8008ee4:	4632      	mov	r2, r6
 8008ee6:	463b      	mov	r3, r7
 8008ee8:	4628      	mov	r0, r5
 8008eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eee:	f000 b817 	b.w	8008f20 <_write_r>

08008ef2 <__sseek>:
 8008ef2:	b510      	push	{r4, lr}
 8008ef4:	460c      	mov	r4, r1
 8008ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008efa:	f000 f885 	bl	8009008 <_lseek_r>
 8008efe:	1c43      	adds	r3, r0, #1
 8008f00:	89a3      	ldrh	r3, [r4, #12]
 8008f02:	bf15      	itete	ne
 8008f04:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f0e:	81a3      	strheq	r3, [r4, #12]
 8008f10:	bf18      	it	ne
 8008f12:	81a3      	strhne	r3, [r4, #12]
 8008f14:	bd10      	pop	{r4, pc}

08008f16 <__sclose>:
 8008f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f1a:	f000 b831 	b.w	8008f80 <_close_r>
	...

08008f20 <_write_r>:
 8008f20:	b538      	push	{r3, r4, r5, lr}
 8008f22:	4d07      	ldr	r5, [pc, #28]	; (8008f40 <_write_r+0x20>)
 8008f24:	4604      	mov	r4, r0
 8008f26:	4608      	mov	r0, r1
 8008f28:	4611      	mov	r1, r2
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	602a      	str	r2, [r5, #0]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	f7fd f8a2 	bl	8006078 <_write>
 8008f34:	1c43      	adds	r3, r0, #1
 8008f36:	d102      	bne.n	8008f3e <_write_r+0x1e>
 8008f38:	682b      	ldr	r3, [r5, #0]
 8008f3a:	b103      	cbz	r3, 8008f3e <_write_r+0x1e>
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	bd38      	pop	{r3, r4, r5, pc}
 8008f40:	20000464 	.word	0x20000464

08008f44 <__assert_func>:
 8008f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f46:	4614      	mov	r4, r2
 8008f48:	461a      	mov	r2, r3
 8008f4a:	4b09      	ldr	r3, [pc, #36]	; (8008f70 <__assert_func+0x2c>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4605      	mov	r5, r0
 8008f50:	68d8      	ldr	r0, [r3, #12]
 8008f52:	b14c      	cbz	r4, 8008f68 <__assert_func+0x24>
 8008f54:	4b07      	ldr	r3, [pc, #28]	; (8008f74 <__assert_func+0x30>)
 8008f56:	9100      	str	r1, [sp, #0]
 8008f58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f5c:	4906      	ldr	r1, [pc, #24]	; (8008f78 <__assert_func+0x34>)
 8008f5e:	462b      	mov	r3, r5
 8008f60:	f000 f81e 	bl	8008fa0 <fiprintf>
 8008f64:	f000 f89f 	bl	80090a6 <abort>
 8008f68:	4b04      	ldr	r3, [pc, #16]	; (8008f7c <__assert_func+0x38>)
 8008f6a:	461c      	mov	r4, r3
 8008f6c:	e7f3      	b.n	8008f56 <__assert_func+0x12>
 8008f6e:	bf00      	nop
 8008f70:	2000000c 	.word	0x2000000c
 8008f74:	08009d45 	.word	0x08009d45
 8008f78:	08009d52 	.word	0x08009d52
 8008f7c:	08009d80 	.word	0x08009d80

08008f80 <_close_r>:
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	4d06      	ldr	r5, [pc, #24]	; (8008f9c <_close_r+0x1c>)
 8008f84:	2300      	movs	r3, #0
 8008f86:	4604      	mov	r4, r0
 8008f88:	4608      	mov	r0, r1
 8008f8a:	602b      	str	r3, [r5, #0]
 8008f8c:	f7fd fa15 	bl	80063ba <_close>
 8008f90:	1c43      	adds	r3, r0, #1
 8008f92:	d102      	bne.n	8008f9a <_close_r+0x1a>
 8008f94:	682b      	ldr	r3, [r5, #0]
 8008f96:	b103      	cbz	r3, 8008f9a <_close_r+0x1a>
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	bd38      	pop	{r3, r4, r5, pc}
 8008f9c:	20000464 	.word	0x20000464

08008fa0 <fiprintf>:
 8008fa0:	b40e      	push	{r1, r2, r3}
 8008fa2:	b503      	push	{r0, r1, lr}
 8008fa4:	4601      	mov	r1, r0
 8008fa6:	ab03      	add	r3, sp, #12
 8008fa8:	4805      	ldr	r0, [pc, #20]	; (8008fc0 <fiprintf+0x20>)
 8008faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fae:	6800      	ldr	r0, [r0, #0]
 8008fb0:	9301      	str	r3, [sp, #4]
 8008fb2:	f7ff fe31 	bl	8008c18 <_vfiprintf_r>
 8008fb6:	b002      	add	sp, #8
 8008fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fbc:	b003      	add	sp, #12
 8008fbe:	4770      	bx	lr
 8008fc0:	2000000c 	.word	0x2000000c

08008fc4 <_fstat_r>:
 8008fc4:	b538      	push	{r3, r4, r5, lr}
 8008fc6:	4d07      	ldr	r5, [pc, #28]	; (8008fe4 <_fstat_r+0x20>)
 8008fc8:	2300      	movs	r3, #0
 8008fca:	4604      	mov	r4, r0
 8008fcc:	4608      	mov	r0, r1
 8008fce:	4611      	mov	r1, r2
 8008fd0:	602b      	str	r3, [r5, #0]
 8008fd2:	f7fd f9fe 	bl	80063d2 <_fstat>
 8008fd6:	1c43      	adds	r3, r0, #1
 8008fd8:	d102      	bne.n	8008fe0 <_fstat_r+0x1c>
 8008fda:	682b      	ldr	r3, [r5, #0]
 8008fdc:	b103      	cbz	r3, 8008fe0 <_fstat_r+0x1c>
 8008fde:	6023      	str	r3, [r4, #0]
 8008fe0:	bd38      	pop	{r3, r4, r5, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20000464 	.word	0x20000464

08008fe8 <_isatty_r>:
 8008fe8:	b538      	push	{r3, r4, r5, lr}
 8008fea:	4d06      	ldr	r5, [pc, #24]	; (8009004 <_isatty_r+0x1c>)
 8008fec:	2300      	movs	r3, #0
 8008fee:	4604      	mov	r4, r0
 8008ff0:	4608      	mov	r0, r1
 8008ff2:	602b      	str	r3, [r5, #0]
 8008ff4:	f7fd f9fd 	bl	80063f2 <_isatty>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	d102      	bne.n	8009002 <_isatty_r+0x1a>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	b103      	cbz	r3, 8009002 <_isatty_r+0x1a>
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	20000464 	.word	0x20000464

08009008 <_lseek_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	4d07      	ldr	r5, [pc, #28]	; (8009028 <_lseek_r+0x20>)
 800900c:	4604      	mov	r4, r0
 800900e:	4608      	mov	r0, r1
 8009010:	4611      	mov	r1, r2
 8009012:	2200      	movs	r2, #0
 8009014:	602a      	str	r2, [r5, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	f7fd f9f6 	bl	8006408 <_lseek>
 800901c:	1c43      	adds	r3, r0, #1
 800901e:	d102      	bne.n	8009026 <_lseek_r+0x1e>
 8009020:	682b      	ldr	r3, [r5, #0]
 8009022:	b103      	cbz	r3, 8009026 <_lseek_r+0x1e>
 8009024:	6023      	str	r3, [r4, #0]
 8009026:	bd38      	pop	{r3, r4, r5, pc}
 8009028:	20000464 	.word	0x20000464

0800902c <__ascii_mbtowc>:
 800902c:	b082      	sub	sp, #8
 800902e:	b901      	cbnz	r1, 8009032 <__ascii_mbtowc+0x6>
 8009030:	a901      	add	r1, sp, #4
 8009032:	b142      	cbz	r2, 8009046 <__ascii_mbtowc+0x1a>
 8009034:	b14b      	cbz	r3, 800904a <__ascii_mbtowc+0x1e>
 8009036:	7813      	ldrb	r3, [r2, #0]
 8009038:	600b      	str	r3, [r1, #0]
 800903a:	7812      	ldrb	r2, [r2, #0]
 800903c:	1e10      	subs	r0, r2, #0
 800903e:	bf18      	it	ne
 8009040:	2001      	movne	r0, #1
 8009042:	b002      	add	sp, #8
 8009044:	4770      	bx	lr
 8009046:	4610      	mov	r0, r2
 8009048:	e7fb      	b.n	8009042 <__ascii_mbtowc+0x16>
 800904a:	f06f 0001 	mvn.w	r0, #1
 800904e:	e7f8      	b.n	8009042 <__ascii_mbtowc+0x16>

08009050 <__malloc_lock>:
 8009050:	4801      	ldr	r0, [pc, #4]	; (8009058 <__malloc_lock+0x8>)
 8009052:	f7ff b8c0 	b.w	80081d6 <__retarget_lock_acquire_recursive>
 8009056:	bf00      	nop
 8009058:	20000458 	.word	0x20000458

0800905c <__malloc_unlock>:
 800905c:	4801      	ldr	r0, [pc, #4]	; (8009064 <__malloc_unlock+0x8>)
 800905e:	f7ff b8bb 	b.w	80081d8 <__retarget_lock_release_recursive>
 8009062:	bf00      	nop
 8009064:	20000458 	.word	0x20000458

08009068 <_read_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	4d07      	ldr	r5, [pc, #28]	; (8009088 <_read_r+0x20>)
 800906c:	4604      	mov	r4, r0
 800906e:	4608      	mov	r0, r1
 8009070:	4611      	mov	r1, r2
 8009072:	2200      	movs	r2, #0
 8009074:	602a      	str	r2, [r5, #0]
 8009076:	461a      	mov	r2, r3
 8009078:	f7fd f982 	bl	8006380 <_read>
 800907c:	1c43      	adds	r3, r0, #1
 800907e:	d102      	bne.n	8009086 <_read_r+0x1e>
 8009080:	682b      	ldr	r3, [r5, #0]
 8009082:	b103      	cbz	r3, 8009086 <_read_r+0x1e>
 8009084:	6023      	str	r3, [r4, #0]
 8009086:	bd38      	pop	{r3, r4, r5, pc}
 8009088:	20000464 	.word	0x20000464

0800908c <__ascii_wctomb>:
 800908c:	b149      	cbz	r1, 80090a2 <__ascii_wctomb+0x16>
 800908e:	2aff      	cmp	r2, #255	; 0xff
 8009090:	bf85      	ittet	hi
 8009092:	238a      	movhi	r3, #138	; 0x8a
 8009094:	6003      	strhi	r3, [r0, #0]
 8009096:	700a      	strbls	r2, [r1, #0]
 8009098:	f04f 30ff 	movhi.w	r0, #4294967295
 800909c:	bf98      	it	ls
 800909e:	2001      	movls	r0, #1
 80090a0:	4770      	bx	lr
 80090a2:	4608      	mov	r0, r1
 80090a4:	4770      	bx	lr

080090a6 <abort>:
 80090a6:	b508      	push	{r3, lr}
 80090a8:	2006      	movs	r0, #6
 80090aa:	f000 f82b 	bl	8009104 <raise>
 80090ae:	2001      	movs	r0, #1
 80090b0:	f7fd f95c 	bl	800636c <_exit>

080090b4 <_raise_r>:
 80090b4:	291f      	cmp	r1, #31
 80090b6:	b538      	push	{r3, r4, r5, lr}
 80090b8:	4604      	mov	r4, r0
 80090ba:	460d      	mov	r5, r1
 80090bc:	d904      	bls.n	80090c8 <_raise_r+0x14>
 80090be:	2316      	movs	r3, #22
 80090c0:	6003      	str	r3, [r0, #0]
 80090c2:	f04f 30ff 	mov.w	r0, #4294967295
 80090c6:	bd38      	pop	{r3, r4, r5, pc}
 80090c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090ca:	b112      	cbz	r2, 80090d2 <_raise_r+0x1e>
 80090cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090d0:	b94b      	cbnz	r3, 80090e6 <_raise_r+0x32>
 80090d2:	4620      	mov	r0, r4
 80090d4:	f000 f830 	bl	8009138 <_getpid_r>
 80090d8:	462a      	mov	r2, r5
 80090da:	4601      	mov	r1, r0
 80090dc:	4620      	mov	r0, r4
 80090de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090e2:	f000 b817 	b.w	8009114 <_kill_r>
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d00a      	beq.n	8009100 <_raise_r+0x4c>
 80090ea:	1c59      	adds	r1, r3, #1
 80090ec:	d103      	bne.n	80090f6 <_raise_r+0x42>
 80090ee:	2316      	movs	r3, #22
 80090f0:	6003      	str	r3, [r0, #0]
 80090f2:	2001      	movs	r0, #1
 80090f4:	e7e7      	b.n	80090c6 <_raise_r+0x12>
 80090f6:	2400      	movs	r4, #0
 80090f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090fc:	4628      	mov	r0, r5
 80090fe:	4798      	blx	r3
 8009100:	2000      	movs	r0, #0
 8009102:	e7e0      	b.n	80090c6 <_raise_r+0x12>

08009104 <raise>:
 8009104:	4b02      	ldr	r3, [pc, #8]	; (8009110 <raise+0xc>)
 8009106:	4601      	mov	r1, r0
 8009108:	6818      	ldr	r0, [r3, #0]
 800910a:	f7ff bfd3 	b.w	80090b4 <_raise_r>
 800910e:	bf00      	nop
 8009110:	2000000c 	.word	0x2000000c

08009114 <_kill_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4d07      	ldr	r5, [pc, #28]	; (8009134 <_kill_r+0x20>)
 8009118:	2300      	movs	r3, #0
 800911a:	4604      	mov	r4, r0
 800911c:	4608      	mov	r0, r1
 800911e:	4611      	mov	r1, r2
 8009120:	602b      	str	r3, [r5, #0]
 8009122:	f7fd f913 	bl	800634c <_kill>
 8009126:	1c43      	adds	r3, r0, #1
 8009128:	d102      	bne.n	8009130 <_kill_r+0x1c>
 800912a:	682b      	ldr	r3, [r5, #0]
 800912c:	b103      	cbz	r3, 8009130 <_kill_r+0x1c>
 800912e:	6023      	str	r3, [r4, #0]
 8009130:	bd38      	pop	{r3, r4, r5, pc}
 8009132:	bf00      	nop
 8009134:	20000464 	.word	0x20000464

08009138 <_getpid_r>:
 8009138:	f7fd b900 	b.w	800633c <_getpid>

0800913c <_init>:
 800913c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913e:	bf00      	nop
 8009140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009142:	bc08      	pop	{r3}
 8009144:	469e      	mov	lr, r3
 8009146:	4770      	bx	lr

08009148 <_fini>:
 8009148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800914a:	bf00      	nop
 800914c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914e:	bc08      	pop	{r3}
 8009150:	469e      	mov	lr, r3
 8009152:	4770      	bx	lr
