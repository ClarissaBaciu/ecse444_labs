
lab_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae60  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800b020  0800b020  0001b020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b56c  0800b56c  000202a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b56c  0800b56c  0001b56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b574  0800b574  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b574  0800b574  0001b574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b578  0800b578  0001b578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  20000000  0800b57c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  200002a0  0800b81c  000202a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  0800b81c  00020580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f1b1  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f3c  00000000  00000000  0003f481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  000433c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001878  00000000  00000000  00044e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ebb1  00000000  00000000  00046688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002093c  00000000  00000000  00075239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00127489  00000000  00000000  00095b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bcffe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e94  00000000  00000000  001bd050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200002a0 	.word	0x200002a0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b008 	.word	0x0800b008

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200002a4 	.word	0x200002a4
 80001fc:	0800b008 	.word	0x0800b008

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2120      	movs	r1, #32
 8000eec:	4618      	mov	r0, r3
 8000eee:	f006 fdfb 	bl	8007ae8 <SENSOR_IO_Read>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	f023 0304 	bic.w	r3, r3, #4
 8000efc:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	f023 0303 	bic.w	r3, r3, #3
 8000f0c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f1c:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	2120      	movs	r1, #32
 8000f26:	4618      	mov	r0, r3
 8000f28:	f006 fdc4 	bl	8007ab4 <SENSOR_IO_Write>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8000f42:	f006 fdad 	bl	8007aa0 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f006 fdcb 	bl	8007ae8 <SENSOR_IO_Read>
 8000f52:	4603      	mov	r3, r0
 8000f54:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	b2d8      	uxtb	r0, r3
 8000f6e:	f107 020c 	add.w	r2, r7, #12
 8000f72:	2302      	movs	r3, #2
 8000f74:	21b0      	movs	r1, #176	; 0xb0
 8000f76:	f006 fdd5 	bl	8007b24 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8000f7a:	7b3b      	ldrb	r3, [r7, #12]
 8000f7c:	085b      	lsrs	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8000f82:	7b7b      	ldrb	r3, [r7, #13]
 8000f84:	085b      	lsrs	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	b2d8      	uxtb	r0, r3
 8000f8e:	f107 020c 	add.w	r2, r7, #12
 8000f92:	2302      	movs	r3, #2
 8000f94:	21b6      	movs	r1, #182	; 0xb6
 8000f96:	f006 fdc5 	bl	8007b24 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000f9a:	7b7b      	ldrb	r3, [r7, #13]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	b21a      	sxth	r2, r3
 8000fa0:	7b3b      	ldrb	r3, [r7, #12]
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	b2d8      	uxtb	r0, r3
 8000fac:	f107 020c 	add.w	r2, r7, #12
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	21ba      	movs	r1, #186	; 0xba
 8000fb4:	f006 fdb6 	bl	8007b24 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000fb8:	7b7b      	ldrb	r3, [r7, #13]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	7b3b      	ldrb	r3, [r7, #12]
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	b2d8      	uxtb	r0, r3
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2302      	movs	r3, #2
 8000fd0:	21a8      	movs	r1, #168	; 0xa8
 8000fd2:	f006 fda7 	bl	8007b24 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000fd6:	7b7b      	ldrb	r3, [r7, #13]
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	7b3b      	ldrb	r3, [r7, #12]
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8000fe4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000fe8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	ee07 3a90 	vmov	s15, r3
 8000ff2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000ffa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	ee07 3a90 	vmov	s15, r3
 8001004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001008:	ee67 6a27 	vmul.f32	s13, s14, s15
 800100c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001010:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001022:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001032:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001036:	edd7 7a04 	vldr	s15, [r7, #16]
 800103a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800103e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001042:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001046:	edd7 7a04 	vldr	s15, [r7, #16]
 800104a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001090 <HTS221_H_ReadHumidity+0x130>
 800104e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001056:	dd01      	ble.n	800105c <HTS221_H_ReadHumidity+0xfc>
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HTS221_H_ReadHumidity+0x134>)
 800105a:	e00a      	b.n	8001072 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 800105c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001060:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	d502      	bpl.n	8001070 <HTS221_H_ReadHumidity+0x110>
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	e000      	b.n	8001072 <HTS221_H_ReadHumidity+0x112>
 8001070:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001072:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001074:	edd7 7a04 	vldr	s15, [r7, #16]
 8001078:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800107c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001080:	eef0 7a66 	vmov.f32	s15, s13
}
 8001084:	eeb0 0a67 	vmov.f32	s0, s15
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	447a0000 	.word	0x447a0000
 8001094:	447a0000 	.word	0x447a0000

08001098 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80010a4:	88fb      	ldrh	r3, [r7, #6]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2120      	movs	r1, #32
 80010aa:	4618      	mov	r0, r3
 80010ac:	f006 fd1c 	bl	8007ae8 <SENSOR_IO_Read>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	f023 0304 	bic.w	r3, r3, #4
 80010ba:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	f023 0303 	bic.w	r3, r3, #3
 80010ca:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010da:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	2120      	movs	r1, #32
 80010e4:	4618      	mov	r0, r3
 80010e6:	f006 fce5 	bl	8007ab4 <SENSOR_IO_Write>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b088      	sub	sp, #32
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	b2d8      	uxtb	r0, r3
 8001100:	f107 0208 	add.w	r2, r7, #8
 8001104:	2302      	movs	r3, #2
 8001106:	21b2      	movs	r1, #178	; 0xb2
 8001108:	f006 fd0c 	bl	8007b24 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2135      	movs	r1, #53	; 0x35
 8001112:	4618      	mov	r0, r3
 8001114:	f006 fce8 	bl	8007ae8 <SENSOR_IO_Read>
 8001118:	4603      	mov	r3, r0
 800111a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800111c:	7ffb      	ldrb	r3, [r7, #31]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21b      	sxth	r3, r3
 8001122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001126:	b21a      	sxth	r2, r3
 8001128:	7a3b      	ldrb	r3, [r7, #8]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001130:	7ffb      	ldrb	r3, [r7, #31]
 8001132:	019b      	lsls	r3, r3, #6
 8001134:	b21b      	sxth	r3, r3
 8001136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800113a:	b21a      	sxth	r2, r3
 800113c:	7a7b      	ldrb	r3, [r7, #9]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001144:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001148:	10db      	asrs	r3, r3, #3
 800114a:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800114c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001150:	10db      	asrs	r3, r3, #3
 8001152:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	b2d8      	uxtb	r0, r3
 8001158:	f107 0208 	add.w	r2, r7, #8
 800115c:	2304      	movs	r3, #4
 800115e:	21bc      	movs	r1, #188	; 0xbc
 8001160:	f006 fce0 	bl	8007b24 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001164:	7a7b      	ldrb	r3, [r7, #9]
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	b21a      	sxth	r2, r3
 800116a:	7a3b      	ldrb	r3, [r7, #8]
 800116c:	b21b      	sxth	r3, r3
 800116e:	4313      	orrs	r3, r2
 8001170:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001172:	7afb      	ldrb	r3, [r7, #11]
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	b21a      	sxth	r2, r3
 8001178:	7abb      	ldrb	r3, [r7, #10]
 800117a:	b21b      	sxth	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	b2d8      	uxtb	r0, r3
 8001184:	f107 0208 	add.w	r2, r7, #8
 8001188:	2302      	movs	r3, #2
 800118a:	21aa      	movs	r1, #170	; 0xaa
 800118c:	f006 fcca 	bl	8007b24 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001190:	7a7b      	ldrb	r3, [r7, #9]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b21a      	sxth	r2, r3
 8001196:	7a3b      	ldrb	r3, [r7, #8]
 8001198:	b21b      	sxth	r3, r3
 800119a:	4313      	orrs	r3, r2
 800119c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800119e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80011a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80011b4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80011c6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80011ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	ee07 3a90 	vmov	s15, r3
 80011d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011dc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	ee07 3a90 	vmov	s15, r3
}
 80011f6:	eeb0 0a67 	vmov.f32	s0, s15
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	463b      	mov	r3, r7
 8001208:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 800120c:	783b      	ldrb	r3, [r7, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	2120      	movs	r1, #32
 8001212:	203c      	movs	r0, #60	; 0x3c
 8001214:	f006 fc4e 	bl	8007ab4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001218:	787b      	ldrb	r3, [r7, #1]
 800121a:	461a      	mov	r2, r3
 800121c:	2121      	movs	r1, #33	; 0x21
 800121e:	203c      	movs	r0, #60	; 0x3c
 8001220:	f006 fc48 	bl	8007ab4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001224:	78bb      	ldrb	r3, [r7, #2]
 8001226:	461a      	mov	r2, r3
 8001228:	2122      	movs	r1, #34	; 0x22
 800122a:	203c      	movs	r0, #60	; 0x3c
 800122c:	f006 fc42 	bl	8007ab4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	461a      	mov	r2, r3
 8001234:	2123      	movs	r1, #35	; 0x23
 8001236:	203c      	movs	r0, #60	; 0x3c
 8001238:	f006 fc3c 	bl	8007ab4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 800123c:	793b      	ldrb	r3, [r7, #4]
 800123e:	461a      	mov	r2, r3
 8001240:	2124      	movs	r1, #36	; 0x24
 8001242:	203c      	movs	r0, #60	; 0x3c
 8001244:	f006 fc36 	bl	8007ab4 <SENSOR_IO_Write>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001256:	2300      	movs	r3, #0
 8001258:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800125a:	2122      	movs	r1, #34	; 0x22
 800125c:	203c      	movs	r0, #60	; 0x3c
 800125e:	f006 fc43 	bl	8007ae8 <SENSOR_IO_Read>
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f023 0303 	bic.w	r3, r3, #3
 800126c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f043 0303 	orr.w	r3, r3, #3
 8001274:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	461a      	mov	r2, r3
 800127a:	2122      	movs	r1, #34	; 0x22
 800127c:	203c      	movs	r0, #60	; 0x3c
 800127e:	f006 fc19 	bl	8007ab4 <SENSOR_IO_Write>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800128e:	f006 fc07 	bl	8007aa0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8001292:	210f      	movs	r1, #15
 8001294:	203c      	movs	r0, #60	; 0x3c
 8001296:	f006 fc27 	bl	8007ae8 <SENSOR_IO_Read>
 800129a:	4603      	mov	r3, r0
}
 800129c:	4618      	mov	r0, r3
 800129e:	bd80      	pop	{r7, pc}

080012a0 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80012ae:	2122      	movs	r1, #34	; 0x22
 80012b0:	203c      	movs	r0, #60	; 0x3c
 80012b2:	f006 fc19 	bl	8007ae8 <SENSOR_IO_Read>
 80012b6:	4603      	mov	r3, r0
 80012b8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	f023 0320 	bic.w	r3, r3, #32
 80012c0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	f043 0320 	orr.w	r3, r3, #32
 80012ce:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	461a      	mov	r2, r3
 80012d4:	2122      	movs	r1, #34	; 0x22
 80012d6:	203c      	movs	r0, #60	; 0x3c
 80012d8:	f006 fbec 	bl	8007ab4 <SENSOR_IO_Write>
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80012fa:	2121      	movs	r1, #33	; 0x21
 80012fc:	203c      	movs	r0, #60	; 0x3c
 80012fe:	f006 fbf3 	bl	8007ae8 <SENSOR_IO_Read>
 8001302:	4603      	mov	r3, r0
 8001304:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001306:	f107 0208 	add.w	r2, r7, #8
 800130a:	2306      	movs	r3, #6
 800130c:	21a8      	movs	r1, #168	; 0xa8
 800130e:	203c      	movs	r0, #60	; 0x3c
 8001310:	f006 fc08 	bl	8007b24 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001314:	2300      	movs	r3, #0
 8001316:	77fb      	strb	r3, [r7, #31]
 8001318:	e01c      	b.n	8001354 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800131a:	7ffb      	ldrb	r3, [r7, #31]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	3301      	adds	r3, #1
 8001320:	3320      	adds	r3, #32
 8001322:	443b      	add	r3, r7
 8001324:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001328:	b29b      	uxth	r3, r3
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b29a      	uxth	r2, r3
 800132e:	7ffb      	ldrb	r3, [r7, #31]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	3320      	adds	r3, #32
 8001334:	443b      	add	r3, r7
 8001336:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800133a:	b29b      	uxth	r3, r3
 800133c:	4413      	add	r3, r2
 800133e:	b29a      	uxth	r2, r3
 8001340:	7ffb      	ldrb	r3, [r7, #31]
 8001342:	b212      	sxth	r2, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	3320      	adds	r3, #32
 8001348:	443b      	add	r3, r7
 800134a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800134e:	7ffb      	ldrb	r3, [r7, #31]
 8001350:	3301      	adds	r3, #1
 8001352:	77fb      	strb	r3, [r7, #31]
 8001354:	7ffb      	ldrb	r3, [r7, #31]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d9df      	bls.n	800131a <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 800135a:	7dfb      	ldrb	r3, [r7, #23]
 800135c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001360:	2b60      	cmp	r3, #96	; 0x60
 8001362:	d013      	beq.n	800138c <LIS3MDL_MagReadXYZ+0xa8>
 8001364:	2b60      	cmp	r3, #96	; 0x60
 8001366:	dc14      	bgt.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
 8001368:	2b40      	cmp	r3, #64	; 0x40
 800136a:	d00c      	beq.n	8001386 <LIS3MDL_MagReadXYZ+0xa2>
 800136c:	2b40      	cmp	r3, #64	; 0x40
 800136e:	dc10      	bgt.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <LIS3MDL_MagReadXYZ+0x96>
 8001374:	2b20      	cmp	r3, #32
 8001376:	d003      	beq.n	8001380 <LIS3MDL_MagReadXYZ+0x9c>
 8001378:	e00b      	b.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <LIS3MDL_MagReadXYZ+0xfc>)
 800137c:	61bb      	str	r3, [r7, #24]
    break;
 800137e:	e008      	b.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <LIS3MDL_MagReadXYZ+0x100>)
 8001382:	61bb      	str	r3, [r7, #24]
    break;
 8001384:	e005      	b.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <LIS3MDL_MagReadXYZ+0x104>)
 8001388:	61bb      	str	r3, [r7, #24]
    break;
 800138a:	e002      	b.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <LIS3MDL_MagReadXYZ+0x108>)
 800138e:	61bb      	str	r3, [r7, #24]
    break;    
 8001390:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8001392:	2300      	movs	r3, #0
 8001394:	77fb      	strb	r3, [r7, #31]
 8001396:	e01a      	b.n	80013ce <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001398:	7ffb      	ldrb	r3, [r7, #31]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	3320      	adds	r3, #32
 800139e:	443b      	add	r3, r7
 80013a0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80013b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b4:	7ffb      	ldrb	r3, [r7, #31]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c0:	ee17 2a90 	vmov	r2, s15
 80013c4:	b212      	sxth	r2, r2
 80013c6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80013c8:	7ffb      	ldrb	r3, [r7, #31]
 80013ca:	3301      	adds	r3, #1
 80013cc:	77fb      	strb	r3, [r7, #31]
 80013ce:	7ffb      	ldrb	r3, [r7, #31]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d9e1      	bls.n	8001398 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3720      	adds	r7, #32
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	3e0f5c29 	.word	0x3e0f5c29
 80013e4:	3e947ae1 	.word	0x3e947ae1
 80013e8:	3edc28f6 	.word	0x3edc28f6
 80013ec:	3f147ae1 	.word	0x3f147ae1

080013f0 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 f879 	bl	80014f4 <LPS22HB_Init>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001418:	f006 fb42 	bl	8007aa0 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	210f      	movs	r1, #15
 8001422:	4618      	mov	r0, r3
 8001424:	f006 fb60 	bl	8007ae8 <SENSOR_IO_Read>
 8001428:	4603      	mov	r3, r0
 800142a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800142c:	7bfb      	ldrb	r3, [r7, #15]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8001446:	2300      	movs	r3, #0
 8001448:	74fb      	strb	r3, [r7, #19]
 800144a:	e013      	b.n	8001474 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	7cfb      	ldrb	r3, [r7, #19]
 8001452:	3328      	adds	r3, #40	; 0x28
 8001454:	b2db      	uxtb	r3, r3
 8001456:	7cfc      	ldrb	r4, [r7, #19]
 8001458:	4619      	mov	r1, r3
 800145a:	4610      	mov	r0, r2
 800145c:	f006 fb44 	bl	8007ae8 <SENSOR_IO_Read>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	f104 0318 	add.w	r3, r4, #24
 8001468:	443b      	add	r3, r7
 800146a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800146e:	7cfb      	ldrb	r3, [r7, #19]
 8001470:	3301      	adds	r3, #1
 8001472:	74fb      	strb	r3, [r7, #19]
 8001474:	7cfb      	ldrb	r3, [r7, #19]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d9e8      	bls.n	800144c <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800147a:	2300      	movs	r3, #0
 800147c:	74fb      	strb	r3, [r7, #19]
 800147e:	e00f      	b.n	80014a0 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8001480:	7cfb      	ldrb	r3, [r7, #19]
 8001482:	3318      	adds	r3, #24
 8001484:	443b      	add	r3, r7
 8001486:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800148a:	461a      	mov	r2, r3
 800148c:	7cfb      	ldrb	r3, [r7, #19]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	4313      	orrs	r3, r2
 8001498:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800149a:	7cfb      	ldrb	r3, [r7, #19]
 800149c:	3301      	adds	r3, #1
 800149e:	74fb      	strb	r3, [r7, #19]
 80014a0:	7cfb      	ldrb	r3, [r7, #19]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d9ec      	bls.n	8001480 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80014b6:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2264      	movs	r2, #100	; 0x64
 80014c0:	fb02 f303 	mul.w	r3, r2, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	da01      	bge.n	80014cc <LPS22HB_P_ReadPressure+0x94>
 80014c8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80014cc:	131b      	asrs	r3, r3, #12
 80014ce:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014da:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014f0 <LPS22HB_P_ReadPressure+0xb8>
 80014de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014e2:	eef0 7a66 	vmov.f32	s15, s13
}
 80014e6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ea:	371c      	adds	r7, #28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd90      	pop	{r4, r7, pc}
 80014f0:	42c80000 	.word	0x42c80000

080014f4 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	211a      	movs	r1, #26
 8001504:	4618      	mov	r0, r3
 8001506:	f006 faef 	bl	8007ae8 <SENSOR_IO_Read>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	211a      	movs	r1, #26
 8001526:	4618      	mov	r0, r3
 8001528:	f006 fac4 	bl	8007ab4 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2110      	movs	r1, #16
 8001532:	4618      	mov	r0, r3
 8001534:	f006 fad8 	bl	8007ae8 <SENSOR_IO_Read>
 8001538:	4603      	mov	r3, r0
 800153a:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001542:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800154a:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	f023 0302 	bic.w	r3, r3, #2
 8001552:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	2110      	movs	r1, #16
 8001564:	4618      	mov	r0, r3
 8001566:	f006 faa5 	bl	8007ab4 <SENSOR_IO_Write>
}  
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001580:	2110      	movs	r1, #16
 8001582:	20d4      	movs	r0, #212	; 0xd4
 8001584:	f006 fab0 	bl	8007ae8 <SENSOR_IO_Read>
 8001588:	4603      	mov	r3, r0
 800158a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001590:	7bbb      	ldrb	r3, [r7, #14]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001598:	7bba      	ldrb	r2, [r7, #14]
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	4313      	orrs	r3, r2
 800159e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80015a0:	7bbb      	ldrb	r3, [r7, #14]
 80015a2:	461a      	mov	r2, r3
 80015a4:	2110      	movs	r1, #16
 80015a6:	20d4      	movs	r0, #212	; 0xd4
 80015a8:	f006 fa84 	bl	8007ab4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80015ac:	2112      	movs	r1, #18
 80015ae:	20d4      	movs	r0, #212	; 0xd4
 80015b0:	f006 fa9a 	bl	8007ae8 <SENSOR_IO_Read>
 80015b4:	4603      	mov	r3, r0
 80015b6:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	b29b      	uxth	r3, r3
 80015be:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80015c0:	7bbb      	ldrb	r3, [r7, #14]
 80015c2:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80015c6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80015c8:	7bba      	ldrb	r2, [r7, #14]
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80015d0:	7bbb      	ldrb	r3, [r7, #14]
 80015d2:	461a      	mov	r2, r3
 80015d4:	2112      	movs	r1, #18
 80015d6:	20d4      	movs	r0, #212	; 0xd4
 80015d8:	f006 fa6c 	bl	8007ab4 <SENSOR_IO_Write>
}
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80015ea:	2300      	movs	r3, #0
 80015ec:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80015ee:	2110      	movs	r1, #16
 80015f0:	20d4      	movs	r0, #212	; 0xd4
 80015f2:	f006 fa79 	bl	8007ae8 <SENSOR_IO_Read>
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 030f 	and.w	r3, r3, #15
 8001600:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	461a      	mov	r2, r3
 8001606:	2110      	movs	r1, #16
 8001608:	20d4      	movs	r0, #212	; 0xd4
 800160a:	f006 fa53 	bl	8007ab4 <SENSOR_IO_Write>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001616:	b580      	push	{r7, lr}
 8001618:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800161a:	f006 fa41 	bl	8007aa0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800161e:	210f      	movs	r1, #15
 8001620:	20d4      	movs	r0, #212	; 0xd4
 8001622:	f006 fa61 	bl	8007ae8 <SENSOR_IO_Read>
 8001626:	4603      	mov	r3, r0
}
 8001628:	4618      	mov	r0, r3
 800162a:	bd80      	pop	{r7, pc}

0800162c <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001636:	2300      	movs	r3, #0
 8001638:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800163a:	2115      	movs	r1, #21
 800163c:	20d4      	movs	r0, #212	; 0xd4
 800163e:	f006 fa53 	bl	8007ae8 <SENSOR_IO_Read>
 8001642:	4603      	mov	r3, r0
 8001644:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	f023 0310 	bic.w	r3, r3, #16
 800164c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	f043 0310 	orr.w	r3, r3, #16
 800165a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	461a      	mov	r2, r3
 8001660:	2115      	movs	r1, #21
 8001662:	20d4      	movs	r0, #212	; 0xd4
 8001664:	f006 fa26 	bl	8007ab4 <SENSOR_IO_Write>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001678:	2300      	movs	r3, #0
 800167a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001686:	2110      	movs	r1, #16
 8001688:	20d4      	movs	r0, #212	; 0xd4
 800168a:	f006 fa2d 	bl	8007ae8 <SENSOR_IO_Read>
 800168e:	4603      	mov	r3, r0
 8001690:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001692:	f107 0208 	add.w	r2, r7, #8
 8001696:	2306      	movs	r3, #6
 8001698:	2128      	movs	r1, #40	; 0x28
 800169a:	20d4      	movs	r0, #212	; 0xd4
 800169c:	f006 fa42 	bl	8007b24 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	77fb      	strb	r3, [r7, #31]
 80016a4:	e01c      	b.n	80016e0 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80016a6:	7ffb      	ldrb	r3, [r7, #31]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	3301      	adds	r3, #1
 80016ac:	3320      	adds	r3, #32
 80016ae:	443b      	add	r3, r7
 80016b0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	7ffb      	ldrb	r3, [r7, #31]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	3320      	adds	r3, #32
 80016c0:	443b      	add	r3, r7
 80016c2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4413      	add	r3, r2
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	7ffb      	ldrb	r3, [r7, #31]
 80016ce:	b212      	sxth	r2, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	3320      	adds	r3, #32
 80016d4:	443b      	add	r3, r7
 80016d6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80016da:	7ffb      	ldrb	r3, [r7, #31]
 80016dc:	3301      	adds	r3, #1
 80016de:	77fb      	strb	r3, [r7, #31]
 80016e0:	7ffb      	ldrb	r3, [r7, #31]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d9df      	bls.n	80016a6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80016e6:	7dfb      	ldrb	r3, [r7, #23]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b0c      	cmp	r3, #12
 80016ee:	d829      	bhi.n	8001744 <LSM6DSL_AccReadXYZ+0xd4>
 80016f0:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <LSM6DSL_AccReadXYZ+0x88>)
 80016f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f6:	bf00      	nop
 80016f8:	0800172d 	.word	0x0800172d
 80016fc:	08001745 	.word	0x08001745
 8001700:	08001745 	.word	0x08001745
 8001704:	08001745 	.word	0x08001745
 8001708:	0800173f 	.word	0x0800173f
 800170c:	08001745 	.word	0x08001745
 8001710:	08001745 	.word	0x08001745
 8001714:	08001745 	.word	0x08001745
 8001718:	08001733 	.word	0x08001733
 800171c:	08001745 	.word	0x08001745
 8001720:	08001745 	.word	0x08001745
 8001724:	08001745 	.word	0x08001745
 8001728:	08001739 	.word	0x08001739
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <LSM6DSL_AccReadXYZ+0x120>)
 800172e:	61bb      	str	r3, [r7, #24]
    break;
 8001730:	e008      	b.n	8001744 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <LSM6DSL_AccReadXYZ+0x124>)
 8001734:	61bb      	str	r3, [r7, #24]
    break;
 8001736:	e005      	b.n	8001744 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001738:	4b17      	ldr	r3, [pc, #92]	; (8001798 <LSM6DSL_AccReadXYZ+0x128>)
 800173a:	61bb      	str	r3, [r7, #24]
    break;
 800173c:	e002      	b.n	8001744 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <LSM6DSL_AccReadXYZ+0x12c>)
 8001740:	61bb      	str	r3, [r7, #24]
    break;    
 8001742:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001744:	2300      	movs	r3, #0
 8001746:	77fb      	strb	r3, [r7, #31]
 8001748:	e01a      	b.n	8001780 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800174a:	7ffb      	ldrb	r3, [r7, #31]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	3320      	adds	r3, #32
 8001750:	443b      	add	r3, r7
 8001752:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800175e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001766:	7ffb      	ldrb	r3, [r7, #31]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001772:	ee17 2a90 	vmov	r2, s15
 8001776:	b212      	sxth	r2, r2
 8001778:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800177a:	7ffb      	ldrb	r3, [r7, #31]
 800177c:	3301      	adds	r3, #1
 800177e:	77fb      	strb	r3, [r7, #31]
 8001780:	7ffb      	ldrb	r3, [r7, #31]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d9e1      	bls.n	800174a <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8001786:	bf00      	nop
 8001788:	bf00      	nop
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	3d79db23 	.word	0x3d79db23
 8001794:	3df9db23 	.word	0x3df9db23
 8001798:	3e79db23 	.word	0x3e79db23
 800179c:	3ef9db23 	.word	0x3ef9db23

080017a0 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80017aa:	2300      	movs	r3, #0
 80017ac:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80017ae:	2111      	movs	r1, #17
 80017b0:	20d4      	movs	r0, #212	; 0xd4
 80017b2:	f006 f999 	bl	8007ae8 <SENSOR_IO_Read>
 80017b6:	4603      	mov	r3, r0
 80017b8:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80017be:	7bbb      	ldrb	r3, [r7, #14]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80017c6:	7bba      	ldrb	r2, [r7, #14]
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80017ce:	7bbb      	ldrb	r3, [r7, #14]
 80017d0:	461a      	mov	r2, r3
 80017d2:	2111      	movs	r1, #17
 80017d4:	20d4      	movs	r0, #212	; 0xd4
 80017d6:	f006 f96d 	bl	8007ab4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80017da:	2112      	movs	r1, #18
 80017dc:	20d4      	movs	r0, #212	; 0xd4
 80017de:	f006 f983 	bl	8007ae8 <SENSOR_IO_Read>
 80017e2:	4603      	mov	r3, r0
 80017e4:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80017ee:	7bbb      	ldrb	r3, [r7, #14]
 80017f0:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80017f4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80017f6:	7bba      	ldrb	r2, [r7, #14]
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80017fe:	7bbb      	ldrb	r3, [r7, #14]
 8001800:	461a      	mov	r2, r3
 8001802:	2112      	movs	r1, #18
 8001804:	20d4      	movs	r0, #212	; 0xd4
 8001806:	f006 f955 	bl	8007ab4 <SENSOR_IO_Write>
}
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001818:	2300      	movs	r3, #0
 800181a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800181c:	2111      	movs	r1, #17
 800181e:	20d4      	movs	r0, #212	; 0xd4
 8001820:	f006 f962 	bl	8007ae8 <SENSOR_IO_Read>
 8001824:	4603      	mov	r3, r0
 8001826:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	461a      	mov	r2, r3
 8001834:	2111      	movs	r1, #17
 8001836:	20d4      	movs	r0, #212	; 0xd4
 8001838:	f006 f93c 	bl	8007ab4 <SENSOR_IO_Write>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001848:	f006 f92a 	bl	8007aa0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 800184c:	210f      	movs	r1, #15
 800184e:	20d4      	movs	r0, #212	; 0xd4
 8001850:	f006 f94a 	bl	8007ae8 <SENSOR_IO_Read>
 8001854:	4603      	mov	r3, r0
}
 8001856:	4618      	mov	r0, r3
 8001858:	bd80      	pop	{r7, pc}

0800185a <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8001868:	2116      	movs	r1, #22
 800186a:	20d4      	movs	r0, #212	; 0xd4
 800186c:	f006 f93c 	bl	8007ae8 <SENSOR_IO_Read>
 8001870:	4603      	mov	r3, r0
 8001872:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800187a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001888:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	461a      	mov	r2, r3
 800188e:	2116      	movs	r1, #22
 8001890:	20d4      	movs	r0, #212	; 0xd4
 8001892:	f006 f90f 	bl	8007ab4 <SENSOR_IO_Write>
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80018b6:	2111      	movs	r1, #17
 80018b8:	20d4      	movs	r0, #212	; 0xd4
 80018ba:	f006 f915 	bl	8007ae8 <SENSOR_IO_Read>
 80018be:	4603      	mov	r3, r0
 80018c0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80018c2:	f107 0208 	add.w	r2, r7, #8
 80018c6:	2306      	movs	r3, #6
 80018c8:	2122      	movs	r1, #34	; 0x22
 80018ca:	20d4      	movs	r0, #212	; 0xd4
 80018cc:	f006 f92a 	bl	8007b24 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80018d0:	2300      	movs	r3, #0
 80018d2:	77fb      	strb	r3, [r7, #31]
 80018d4:	e01c      	b.n	8001910 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80018d6:	7ffb      	ldrb	r3, [r7, #31]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	3301      	adds	r3, #1
 80018dc:	3320      	adds	r3, #32
 80018de:	443b      	add	r3, r7
 80018e0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	7ffb      	ldrb	r3, [r7, #31]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	3320      	adds	r3, #32
 80018f0:	443b      	add	r3, r7
 80018f2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	7ffb      	ldrb	r3, [r7, #31]
 80018fe:	b212      	sxth	r2, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	3320      	adds	r3, #32
 8001904:	443b      	add	r3, r7
 8001906:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800190a:	7ffb      	ldrb	r3, [r7, #31]
 800190c:	3301      	adds	r3, #1
 800190e:	77fb      	strb	r3, [r7, #31]
 8001910:	7ffb      	ldrb	r3, [r7, #31]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d9df      	bls.n	80018d6 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8001916:	7dfb      	ldrb	r3, [r7, #23]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	2b0c      	cmp	r3, #12
 800191e:	d829      	bhi.n	8001974 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8001920:	a201      	add	r2, pc, #4	; (adr r2, 8001928 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8001922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001926:	bf00      	nop
 8001928:	0800195d 	.word	0x0800195d
 800192c:	08001975 	.word	0x08001975
 8001930:	08001975 	.word	0x08001975
 8001934:	08001975 	.word	0x08001975
 8001938:	08001963 	.word	0x08001963
 800193c:	08001975 	.word	0x08001975
 8001940:	08001975 	.word	0x08001975
 8001944:	08001975 	.word	0x08001975
 8001948:	08001969 	.word	0x08001969
 800194c:	08001975 	.word	0x08001975
 8001950:	08001975 	.word	0x08001975
 8001954:	08001975 	.word	0x08001975
 8001958:	0800196f 	.word	0x0800196f
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 800195c:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 800195e:	61bb      	str	r3, [r7, #24]
    break;
 8001960:	e008      	b.n	8001974 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8001964:	61bb      	str	r3, [r7, #24]
    break;
 8001966:	e005      	b.n	8001974 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 800196a:	61bb      	str	r3, [r7, #24]
    break;
 800196c:	e002      	b.n	8001974 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8001970:	61bb      	str	r3, [r7, #24]
    break;    
 8001972:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001974:	2300      	movs	r3, #0
 8001976:	77fb      	strb	r3, [r7, #31]
 8001978:	e016      	b.n	80019a8 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800197a:	7ffb      	ldrb	r3, [r7, #31]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	3320      	adds	r3, #32
 8001980:	443b      	add	r3, r7
 8001982:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800198e:	7ffb      	ldrb	r3, [r7, #31]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	edd7 7a06 	vldr	s15, [r7, #24]
 800199a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199e:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80019a2:	7ffb      	ldrb	r3, [r7, #31]
 80019a4:	3301      	adds	r3, #1
 80019a6:	77fb      	strb	r3, [r7, #31]
 80019a8:	7ffb      	ldrb	r3, [r7, #31]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d9e5      	bls.n	800197a <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 80019ae:	bf00      	nop
 80019b0:	bf00      	nop
 80019b2:	3720      	adds	r7, #32
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	410c0000 	.word	0x410c0000
 80019bc:	418c0000 	.word	0x418c0000
 80019c0:	420c0000 	.word	0x420c0000
 80019c4:	428c0000 	.word	0x428c0000

080019c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d2:	2003      	movs	r0, #3
 80019d4:	f001 f848 	bl	8002a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019d8:	2000      	movs	r0, #0
 80019da:	f000 f80d 	bl	80019f8 <HAL_InitTick>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	e001      	b.n	80019ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019ea:	f006 fa33 	bl	8007e54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019ee:	79fb      	ldrb	r3, [r7, #7]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <HAL_InitTick+0x6c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d023      	beq.n	8001a54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a0c:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <HAL_InitTick+0x70>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <HAL_InitTick+0x6c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a22:	4618      	mov	r0, r3
 8001a24:	f001 f855 	bl	8002ad2 <HAL_SYSTICK_Config>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10f      	bne.n	8001a4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b0f      	cmp	r3, #15
 8001a32:	d809      	bhi.n	8001a48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a34:	2200      	movs	r2, #0
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	f001 f81f 	bl	8002a7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a40:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <HAL_InitTick+0x74>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e007      	b.n	8001a58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
 8001a4c:	e004      	b.n	8001a58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	73fb      	strb	r3, [r7, #15]
 8001a52:	e001      	b.n	8001a58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200000c8 	.word	0x200000c8
 8001a68:	200000cc 	.word	0x200000cc
 8001a6c:	200000c4 	.word	0x200000c4

08001a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_IncTick+0x20>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_IncTick+0x24>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <HAL_IncTick+0x24>)
 8001a82:	6013      	str	r3, [r2, #0]
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	200000c8 	.word	0x200000c8
 8001a94:	200002bc 	.word	0x200002bc

08001a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <HAL_GetTick+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	200002bc 	.word	0x200002bc

08001ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab8:	f7ff ffee 	bl	8001a98 <HAL_GetTick>
 8001abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac8:	d005      	beq.n	8001ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_Delay+0x44>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad6:	bf00      	nop
 8001ad8:	f7ff ffde 	bl	8001a98 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d8f7      	bhi.n	8001ad8 <HAL_Delay+0x28>
  {
  }
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200000c8 	.word	0x200000c8

08001af8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	609a      	str	r2, [r3, #8]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	609a      	str	r2, [r3, #8]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3360      	adds	r3, #96	; 0x60
 8001b72:	461a      	mov	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <LL_ADC_SetOffset+0x44>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b98:	bf00      	nop
 8001b9a:	371c      	adds	r7, #28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	03fff000 	.word	0x03fff000

08001ba8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3360      	adds	r3, #96	; 0x60
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	3360      	adds	r3, #96	; 0x60
 8001be4:	461a      	mov	r2, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bfe:	bf00      	nop
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	615a      	str	r2, [r3, #20]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b087      	sub	sp, #28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	3330      	adds	r3, #48	; 0x30
 8001c40:	461a      	mov	r2, r3
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	f003 030c 	and.w	r3, r3, #12
 8001c4c:	4413      	add	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	211f      	movs	r1, #31
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	401a      	ands	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	0e9b      	lsrs	r3, r3, #26
 8001c68:	f003 011f 	and.w	r1, r3, #31
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	431a      	orrs	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c7c:	bf00      	nop
 8001c7e:	371c      	adds	r7, #28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3314      	adds	r3, #20
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	0e5b      	lsrs	r3, r3, #25
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	4413      	add	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	0d1b      	lsrs	r3, r3, #20
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	2107      	movs	r1, #7
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	0d1b      	lsrs	r3, r3, #20
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cd2:	bf00      	nop
 8001cd4:	371c      	adds	r7, #28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0318 	and.w	r3, r3, #24
 8001d02:	4908      	ldr	r1, [pc, #32]	; (8001d24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d04:	40d9      	lsrs	r1, r3
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	400b      	ands	r3, r1
 8001d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	0007ffff 	.word	0x0007ffff

08001d28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6093      	str	r3, [r2, #8]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d60:	d101      	bne.n	8001d66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001db0:	d101      	bne.n	8001db6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <LL_ADC_IsEnabled+0x18>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <LL_ADC_IsEnabled+0x1a>
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d101      	bne.n	8001e02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d101      	bne.n	8001e28 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e12f      	b.n	80020b2 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f006 f81b 	bl	8007e9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff67 	bl	8001d4c <LL_ADC_IsDeepPowerDownEnabled>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d004      	beq.n	8001e8e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff4d 	bl	8001d28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff82 	bl	8001d9c <LL_ADC_IsInternalRegulatorEnabled>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d115      	bne.n	8001eca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ff66 	bl	8001d74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ea8:	4b84      	ldr	r3, [pc, #528]	; (80020bc <HAL_ADC_Init+0x284>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	099b      	lsrs	r3, r3, #6
 8001eae:	4a84      	ldr	r2, [pc, #528]	; (80020c0 <HAL_ADC_Init+0x288>)
 8001eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb4:	099b      	lsrs	r3, r3, #6
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ebc:	e002      	b.n	8001ec4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f9      	bne.n	8001ebe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff ff64 	bl	8001d9c <LL_ADC_IsInternalRegulatorEnabled>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10d      	bne.n	8001ef6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ede:	f043 0210 	orr.w	r2, r3, #16
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eea:	f043 0201 	orr.w	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff ff75 	bl	8001dea <LL_ADC_REG_IsConversionOngoing>
 8001f00:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f040 80c8 	bne.w	80020a0 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f040 80c4 	bne.w	80020a0 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f20:	f043 0202 	orr.w	r2, r3, #2
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff49 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10b      	bne.n	8001f50 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f38:	4862      	ldr	r0, [pc, #392]	; (80020c4 <HAL_ADC_Init+0x28c>)
 8001f3a:	f7ff ff43 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d105      	bne.n	8001f50 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	485f      	ldr	r0, [pc, #380]	; (80020c8 <HAL_ADC_Init+0x290>)
 8001f4c:	f7ff fdd4 	bl	8001af8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	7e5b      	ldrb	r3, [r3, #25]
 8001f54:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f5a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001f60:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001f66:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f6e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d106      	bne.n	8001f8c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	3b01      	subs	r3, #1
 8001f84:	045b      	lsls	r3, r3, #17
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d009      	beq.n	8001fa8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	4b47      	ldr	r3, [pc, #284]	; (80020cc <HAL_ADC_Init+0x294>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	69b9      	ldr	r1, [r7, #24]
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff12 	bl	8001dea <LL_ADC_REG_IsConversionOngoing>
 8001fc6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff1f 	bl	8001e10 <LL_ADC_INJ_IsConversionOngoing>
 8001fd2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d140      	bne.n	800205c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d13d      	bne.n	800205c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7e1b      	ldrb	r3, [r3, #24]
 8001fe8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fea:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ff2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002002:	f023 0306 	bic.w	r3, r3, #6
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	69b9      	ldr	r1, [r7, #24]
 800200c:	430b      	orrs	r3, r1
 800200e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002016:	2b01      	cmp	r3, #1
 8002018:	d118      	bne.n	800204c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002024:	f023 0304 	bic.w	r3, r3, #4
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002030:	4311      	orrs	r1, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002036:	4311      	orrs	r1, r2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800203c:	430a      	orrs	r2, r1
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 0201 	orr.w	r2, r2, #1
 8002048:	611a      	str	r2, [r3, #16]
 800204a:	e007      	b.n	800205c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0201 	bic.w	r2, r2, #1
 800205a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d10c      	bne.n	800207e <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f023 010f 	bic.w	r1, r3, #15
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	1e5a      	subs	r2, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
 800207c:	e007      	b.n	800208e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 020f 	bic.w	r2, r2, #15
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	659a      	str	r2, [r3, #88]	; 0x58
 800209e:	e007      	b.n	80020b0 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	f043 0210 	orr.w	r2, r3, #16
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3720      	adds	r7, #32
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200000cc 	.word	0x200000cc
 80020c0:	053e2d63 	.word	0x053e2d63
 80020c4:	50040000 	.word	0x50040000
 80020c8:	50040300 	.word	0x50040300
 80020cc:	fff0c007 	.word	0xfff0c007

080020d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b0b6      	sub	sp, #216	; 0xd8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x22>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e3d5      	b.n	800289e <HAL_ADC_ConfigChannel+0x7ce>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fe73 	bl	8001dea <LL_ADC_REG_IsConversionOngoing>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 83ba 	bne.w	8002880 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b05      	cmp	r3, #5
 8002112:	d824      	bhi.n	800215e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	3b02      	subs	r3, #2
 800211a:	2b03      	cmp	r3, #3
 800211c:	d81b      	bhi.n	8002156 <HAL_ADC_ConfigChannel+0x86>
 800211e:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <HAL_ADC_ConfigChannel+0x54>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	08002135 	.word	0x08002135
 8002128:	0800213d 	.word	0x0800213d
 800212c:	08002145 	.word	0x08002145
 8002130:	0800214d 	.word	0x0800214d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	220c      	movs	r2, #12
 8002138:	605a      	str	r2, [r3, #4]
          break;
 800213a:	e011      	b.n	8002160 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2212      	movs	r2, #18
 8002140:	605a      	str	r2, [r3, #4]
          break;
 8002142:	e00d      	b.n	8002160 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2218      	movs	r2, #24
 8002148:	605a      	str	r2, [r3, #4]
          break;
 800214a:	e009      	b.n	8002160 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002152:	605a      	str	r2, [r3, #4]
          break;
 8002154:	e004      	b.n	8002160 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2206      	movs	r2, #6
 800215a:	605a      	str	r2, [r3, #4]
          break;
 800215c:	e000      	b.n	8002160 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800215e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	f7ff fd5f 	bl	8001c30 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fe37 	bl	8001dea <LL_ADC_REG_IsConversionOngoing>
 800217c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fe43 	bl	8001e10 <LL_ADC_INJ_IsConversionOngoing>
 800218a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800218e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 81c1 	bne.w	800251a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002198:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800219c:	2b00      	cmp	r3, #0
 800219e:	f040 81bc 	bne.w	800251a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021aa:	d10f      	bne.n	80021cc <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2200      	movs	r2, #0
 80021b6:	4619      	mov	r1, r3
 80021b8:	f7ff fd66 	bl	8001c88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fd20 	bl	8001c0a <LL_ADC_SetSamplingTimeCommonConfig>
 80021ca:	e00e      	b.n	80021ea <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	461a      	mov	r2, r3
 80021da:	f7ff fd55 	bl	8001c88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fd10 	bl	8001c0a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	08db      	lsrs	r3, r3, #3
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	2b04      	cmp	r3, #4
 800220a:	d00a      	beq.n	8002222 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	6919      	ldr	r1, [r3, #16]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800221c:	f7ff fca0 	bl	8001b60 <LL_ADC_SetOffset>
 8002220:	e17b      	b.n	800251a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fcbd 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <HAL_ADC_ConfigChannel+0x17e>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fcb2 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002244:	4603      	mov	r3, r0
 8002246:	0e9b      	lsrs	r3, r3, #26
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	e01e      	b.n	800228c <HAL_ADC_ConfigChannel+0x1bc>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fca7 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 800225a:	4603      	mov	r3, r0
 800225c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800226c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002270:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002274:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800227c:	2320      	movs	r3, #32
 800227e:	e004      	b.n	800228a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002280:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002284:	fab3 f383 	clz	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002294:	2b00      	cmp	r3, #0
 8002296:	d105      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1d4>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0e9b      	lsrs	r3, r3, #26
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	e018      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x206>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80022b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80022c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80022c8:	2320      	movs	r3, #32
 80022ca:	e004      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80022cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022d0:	fab3 f383 	clz	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d106      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2200      	movs	r2, #0
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fc76 	bl	8001bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2101      	movs	r1, #1
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fc5a 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 80022f4:	4603      	mov	r3, r0
 80022f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10a      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x244>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2101      	movs	r1, #1
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fc4f 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 800230a:	4603      	mov	r3, r0
 800230c:	0e9b      	lsrs	r3, r3, #26
 800230e:	f003 021f 	and.w	r2, r3, #31
 8002312:	e01e      	b.n	8002352 <HAL_ADC_ConfigChannel+0x282>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2101      	movs	r1, #1
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fc44 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002320:	4603      	mov	r3, r0
 8002322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002336:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800233a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002342:	2320      	movs	r3, #32
 8002344:	e004      	b.n	8002350 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002346:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <HAL_ADC_ConfigChannel+0x29a>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	0e9b      	lsrs	r3, r3, #26
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	e018      	b.n	800239c <HAL_ADC_ConfigChannel+0x2cc>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800237e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002382:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002386:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800238e:	2320      	movs	r3, #32
 8002390:	e004      	b.n	800239c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002392:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800239c:	429a      	cmp	r2, r3
 800239e:	d106      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2200      	movs	r2, #0
 80023a6:	2101      	movs	r1, #1
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fc13 	bl	8001bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2102      	movs	r1, #2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fbf7 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10a      	bne.n	80023da <HAL_ADC_ConfigChannel+0x30a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2102      	movs	r1, #2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fbec 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	0e9b      	lsrs	r3, r3, #26
 80023d4:	f003 021f 	and.w	r2, r3, #31
 80023d8:	e01e      	b.n	8002418 <HAL_ADC_ConfigChannel+0x348>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2102      	movs	r1, #2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fbe1 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80023f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002400:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002408:	2320      	movs	r3, #32
 800240a:	e004      	b.n	8002416 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800240c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002410:	fab3 f383 	clz	r3, r3
 8002414:	b2db      	uxtb	r3, r3
 8002416:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002420:	2b00      	cmp	r3, #0
 8002422:	d105      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x360>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0e9b      	lsrs	r3, r3, #26
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	e016      	b.n	800245e <HAL_ADC_ConfigChannel+0x38e>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002442:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002444:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002448:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002450:	2320      	movs	r3, #32
 8002452:	e004      	b.n	800245e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002454:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002458:	fab3 f383 	clz	r3, r3
 800245c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800245e:	429a      	cmp	r2, r3
 8002460:	d106      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2200      	movs	r2, #0
 8002468:	2102      	movs	r1, #2
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fbb2 	bl	8001bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2103      	movs	r1, #3
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fb96 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 800247c:	4603      	mov	r3, r0
 800247e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10a      	bne.n	800249c <HAL_ADC_ConfigChannel+0x3cc>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2103      	movs	r1, #3
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fb8b 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002492:	4603      	mov	r3, r0
 8002494:	0e9b      	lsrs	r3, r3, #26
 8002496:	f003 021f 	and.w	r2, r3, #31
 800249a:	e017      	b.n	80024cc <HAL_ADC_ConfigChannel+0x3fc>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2103      	movs	r1, #3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fb80 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 80024a8:	4603      	mov	r3, r0
 80024aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80024b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024b6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80024b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80024be:	2320      	movs	r3, #32
 80024c0:	e003      	b.n	80024ca <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80024c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024c4:	fab3 f383 	clz	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d105      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x414>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	0e9b      	lsrs	r3, r3, #26
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	e011      	b.n	8002508 <HAL_ADC_ConfigChannel+0x438>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80024f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80024f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80024fc:	2320      	movs	r3, #32
 80024fe:	e003      	b.n	8002508 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002508:	429a      	cmp	r2, r3
 800250a:	d106      	bne.n	800251a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2200      	movs	r2, #0
 8002512:	2103      	movs	r1, #3
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fb5d 	bl	8001bd4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fc50 	bl	8001dc4 <LL_ADC_IsEnabled>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	f040 8140 	bne.w	80027ac <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	6819      	ldr	r1, [r3, #0]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	461a      	mov	r2, r3
 800253a:	f7ff fbd1 	bl	8001ce0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	4a8f      	ldr	r2, [pc, #572]	; (8002780 <HAL_ADC_ConfigChannel+0x6b0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	f040 8131 	bne.w	80027ac <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10b      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x4a2>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	0e9b      	lsrs	r3, r3, #26
 8002560:	3301      	adds	r3, #1
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	2b09      	cmp	r3, #9
 8002568:	bf94      	ite	ls
 800256a:	2301      	movls	r3, #1
 800256c:	2300      	movhi	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	e019      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x4d6>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002582:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800258a:	2320      	movs	r3, #32
 800258c:	e003      	b.n	8002596 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800258e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002590:	fab3 f383 	clz	r3, r3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	3301      	adds	r3, #1
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	2b09      	cmp	r3, #9
 800259e:	bf94      	ite	ls
 80025a0:	2301      	movls	r3, #1
 80025a2:	2300      	movhi	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d079      	beq.n	800269e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d107      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x4f6>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	0e9b      	lsrs	r3, r3, #26
 80025bc:	3301      	adds	r3, #1
 80025be:	069b      	lsls	r3, r3, #26
 80025c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025c4:	e015      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x522>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80025d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80025de:	2320      	movs	r3, #32
 80025e0:	e003      	b.n	80025ea <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80025e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e4:	fab3 f383 	clz	r3, r3
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	3301      	adds	r3, #1
 80025ec:	069b      	lsls	r3, r3, #26
 80025ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x542>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	0e9b      	lsrs	r3, r3, #26
 8002604:	3301      	adds	r3, #1
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	2101      	movs	r1, #1
 800260c:	fa01 f303 	lsl.w	r3, r1, r3
 8002610:	e017      	b.n	8002642 <HAL_ADC_ConfigChannel+0x572>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002622:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800262a:	2320      	movs	r3, #32
 800262c:	e003      	b.n	8002636 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800262e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	3301      	adds	r3, #1
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	2101      	movs	r1, #1
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	ea42 0103 	orr.w	r1, r2, r3
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10a      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x598>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	0e9b      	lsrs	r3, r3, #26
 8002658:	3301      	adds	r3, #1
 800265a:	f003 021f 	and.w	r2, r3, #31
 800265e:	4613      	mov	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4413      	add	r3, r2
 8002664:	051b      	lsls	r3, r3, #20
 8002666:	e018      	b.n	800269a <HAL_ADC_ConfigChannel+0x5ca>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002678:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800267a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002680:	2320      	movs	r3, #32
 8002682:	e003      	b.n	800268c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	3301      	adds	r3, #1
 800268e:	f003 021f 	and.w	r2, r3, #31
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800269a:	430b      	orrs	r3, r1
 800269c:	e081      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d107      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x5ea>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	0e9b      	lsrs	r3, r3, #26
 80026b0:	3301      	adds	r3, #1
 80026b2:	069b      	lsls	r3, r3, #26
 80026b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026b8:	e015      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x616>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ca:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80026cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80026d2:	2320      	movs	r3, #32
 80026d4:	e003      	b.n	80026de <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	fab3 f383 	clz	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	3301      	adds	r3, #1
 80026e0:	069b      	lsls	r3, r3, #26
 80026e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x636>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	0e9b      	lsrs	r3, r3, #26
 80026f8:	3301      	adds	r3, #1
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	2101      	movs	r1, #1
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	e017      	b.n	8002736 <HAL_ADC_ConfigChannel+0x666>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	61fb      	str	r3, [r7, #28]
  return result;
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800271e:	2320      	movs	r3, #32
 8002720:	e003      	b.n	800272a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	fab3 f383 	clz	r3, r3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	3301      	adds	r3, #1
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	2101      	movs	r1, #1
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	ea42 0103 	orr.w	r1, r2, r3
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10d      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x692>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	0e9b      	lsrs	r3, r3, #26
 800274c:	3301      	adds	r3, #1
 800274e:	f003 021f 	and.w	r2, r3, #31
 8002752:	4613      	mov	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4413      	add	r3, r2
 8002758:	3b1e      	subs	r3, #30
 800275a:	051b      	lsls	r3, r3, #20
 800275c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002760:	e01e      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x6d0>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	613b      	str	r3, [r7, #16]
  return result;
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d104      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800277a:	2320      	movs	r3, #32
 800277c:	e006      	b.n	800278c <HAL_ADC_ConfigChannel+0x6bc>
 800277e:	bf00      	nop
 8002780:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	fab3 f383 	clz	r3, r3
 800278a:	b2db      	uxtb	r3, r3
 800278c:	3301      	adds	r3, #1
 800278e:	f003 021f 	and.w	r2, r3, #31
 8002792:	4613      	mov	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	3b1e      	subs	r3, #30
 800279a:	051b      	lsls	r3, r3, #20
 800279c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027a0:	430b      	orrs	r3, r1
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	6892      	ldr	r2, [r2, #8]
 80027a6:	4619      	mov	r1, r3
 80027a8:	f7ff fa6e 	bl	8001c88 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4b3d      	ldr	r3, [pc, #244]	; (80028a8 <HAL_ADC_ConfigChannel+0x7d8>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d06c      	beq.n	8002892 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027b8:	483c      	ldr	r0, [pc, #240]	; (80028ac <HAL_ADC_ConfigChannel+0x7dc>)
 80027ba:	f7ff f9c3 	bl	8001b44 <LL_ADC_GetCommonPathInternalCh>
 80027be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a3a      	ldr	r2, [pc, #232]	; (80028b0 <HAL_ADC_ConfigChannel+0x7e0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d127      	bne.n	800281c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d121      	bne.n	800281c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a35      	ldr	r2, [pc, #212]	; (80028b4 <HAL_ADC_ConfigChannel+0x7e4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d157      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027ea:	4619      	mov	r1, r3
 80027ec:	482f      	ldr	r0, [pc, #188]	; (80028ac <HAL_ADC_ConfigChannel+0x7dc>)
 80027ee:	f7ff f996 	bl	8001b1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027f2:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <HAL_ADC_ConfigChannel+0x7e8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	099b      	lsrs	r3, r3, #6
 80027f8:	4a30      	ldr	r2, [pc, #192]	; (80028bc <HAL_ADC_ConfigChannel+0x7ec>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	099b      	lsrs	r3, r3, #6
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800280c:	e002      	b.n	8002814 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	3b01      	subs	r3, #1
 8002812:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f9      	bne.n	800280e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800281a:	e03a      	b.n	8002892 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a27      	ldr	r2, [pc, #156]	; (80028c0 <HAL_ADC_ConfigChannel+0x7f0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d113      	bne.n	800284e <HAL_ADC_ConfigChannel+0x77e>
 8002826:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800282a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10d      	bne.n	800284e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1f      	ldr	r2, [pc, #124]	; (80028b4 <HAL_ADC_ConfigChannel+0x7e4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d12a      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800283c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002840:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002844:	4619      	mov	r1, r3
 8002846:	4819      	ldr	r0, [pc, #100]	; (80028ac <HAL_ADC_ConfigChannel+0x7dc>)
 8002848:	f7ff f969 	bl	8001b1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800284c:	e021      	b.n	8002892 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a1c      	ldr	r2, [pc, #112]	; (80028c4 <HAL_ADC_ConfigChannel+0x7f4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d11c      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002858:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800285c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d116      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a12      	ldr	r2, [pc, #72]	; (80028b4 <HAL_ADC_ConfigChannel+0x7e4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d111      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800286e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002872:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002876:	4619      	mov	r1, r3
 8002878:	480c      	ldr	r0, [pc, #48]	; (80028ac <HAL_ADC_ConfigChannel+0x7dc>)
 800287a:	f7ff f950 	bl	8001b1e <LL_ADC_SetCommonPathInternalCh>
 800287e:	e008      	b.n	8002892 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002884:	f043 0220 	orr.w	r2, r3, #32
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800289a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800289e:	4618      	mov	r0, r3
 80028a0:	37d8      	adds	r7, #216	; 0xd8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	80080000 	.word	0x80080000
 80028ac:	50040300 	.word	0x50040300
 80028b0:	c7520000 	.word	0xc7520000
 80028b4:	50040000 	.word	0x50040000
 80028b8:	200000cc 	.word	0x200000cc
 80028bc:	053e2d63 	.word	0x053e2d63
 80028c0:	cb840000 	.word	0xcb840000
 80028c4:	80000001 	.word	0x80000001

080028c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e4:	4013      	ands	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fa:	4a04      	ldr	r2, [pc, #16]	; (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60d3      	str	r3, [r2, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <__NVIC_GetPriorityGrouping+0x18>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0307 	and.w	r3, r3, #7
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	2b00      	cmp	r3, #0
 800293c:	db0b      	blt.n	8002956 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	4907      	ldr	r1, [pc, #28]	; (8002964 <__NVIC_EnableIRQ+0x38>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2001      	movs	r0, #1
 800294e:	fa00 f202 	lsl.w	r2, r0, r2
 8002952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000e100 	.word	0xe000e100

08002968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	6039      	str	r1, [r7, #0]
 8002972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	2b00      	cmp	r3, #0
 800297a:	db0a      	blt.n	8002992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	b2da      	uxtb	r2, r3
 8002980:	490c      	ldr	r1, [pc, #48]	; (80029b4 <__NVIC_SetPriority+0x4c>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	0112      	lsls	r2, r2, #4
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	440b      	add	r3, r1
 800298c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002990:	e00a      	b.n	80029a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4908      	ldr	r1, [pc, #32]	; (80029b8 <__NVIC_SetPriority+0x50>)
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	3b04      	subs	r3, #4
 80029a0:	0112      	lsls	r2, r2, #4
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	440b      	add	r3, r1
 80029a6:	761a      	strb	r2, [r3, #24]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000e100 	.word	0xe000e100
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b089      	sub	sp, #36	; 0x24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f1c3 0307 	rsb	r3, r3, #7
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	bf28      	it	cs
 80029da:	2304      	movcs	r3, #4
 80029dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3304      	adds	r3, #4
 80029e2:	2b06      	cmp	r3, #6
 80029e4:	d902      	bls.n	80029ec <NVIC_EncodePriority+0x30>
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3b03      	subs	r3, #3
 80029ea:	e000      	b.n	80029ee <NVIC_EncodePriority+0x32>
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	f04f 32ff 	mov.w	r2, #4294967295
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43da      	mvns	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	401a      	ands	r2, r3
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a04:	f04f 31ff 	mov.w	r1, #4294967295
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0e:	43d9      	mvns	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a14:	4313      	orrs	r3, r2
         );
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3724      	adds	r7, #36	; 0x24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a34:	d301      	bcc.n	8002a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a36:	2301      	movs	r3, #1
 8002a38:	e00f      	b.n	8002a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <SysTick_Config+0x40>)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a42:	210f      	movs	r1, #15
 8002a44:	f04f 30ff 	mov.w	r0, #4294967295
 8002a48:	f7ff ff8e 	bl	8002968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <SysTick_Config+0x40>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <SysTick_Config+0x40>)
 8002a54:	2207      	movs	r2, #7
 8002a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	e000e010 	.word	0xe000e010

08002a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ff29 	bl	80028c8 <__NVIC_SetPriorityGrouping>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a90:	f7ff ff3e 	bl	8002910 <__NVIC_GetPriorityGrouping>
 8002a94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	6978      	ldr	r0, [r7, #20]
 8002a9c:	f7ff ff8e 	bl	80029bc <NVIC_EncodePriority>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff5d 	bl	8002968 <__NVIC_SetPriority>
}
 8002aae:	bf00      	nop
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4603      	mov	r3, r0
 8002abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff31 	bl	800292c <__NVIC_EnableIRQ>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ffa2 	bl	8002a24 <SysTick_Config>
 8002ae0:	4603      	mov	r3, r0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e014      	b.n	8002b26 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	791b      	ldrb	r3, [r3, #4]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d105      	bne.n	8002b12 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f005 fa09 	bl	8007f24 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2202      	movs	r2, #2
 8002b16:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	795b      	ldrb	r3, [r3, #5]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_DAC_ConfigChannel+0x1c>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e12a      	b.n	8002da2 <HAL_DAC_ConfigChannel+0x272>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2202      	movs	r2, #2
 8002b56:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d174      	bne.n	8002c4a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002b60:	f7fe ff9a 	bl	8001a98 <HAL_GetTick>
 8002b64:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d134      	bne.n	8002bd6 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b6c:	e011      	b.n	8002b92 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b6e:	f7fe ff93 	bl	8001a98 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d90a      	bls.n	8002b92 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f043 0208 	orr.w	r2, r3, #8
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e107      	b.n	8002da2 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1e6      	bne.n	8002b6e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	f7fe ff85 	bl	8001ab0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	69d2      	ldr	r2, [r2, #28]
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40
 8002bb0:	e01e      	b.n	8002bf0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002bb2:	f7fe ff71 	bl	8001a98 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d90a      	bls.n	8002bd6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f043 0208 	orr.w	r2, r3, #8
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2203      	movs	r2, #3
 8002bd0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e0e5      	b.n	8002da2 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	dbe8      	blt.n	8002bb2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002be0:	2001      	movs	r0, #1
 8002be2:	f7fe ff65 	bl	8001ab0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	69d2      	ldr	r2, [r2, #28]
 8002bee:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	ea02 0103 	and.w	r1, r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	6a1a      	ldr	r2, [r3, #32]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	409a      	lsls	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	21ff      	movs	r1, #255	; 0xff
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	ea02 0103 	and.w	r1, r2, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	409a      	lsls	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d11d      	bne.n	8002c8e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c58:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	221f      	movs	r2, #31
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c94:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69fa      	ldr	r2, [r7, #28]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69fa      	ldr	r2, [r7, #28]
 8002cd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6819      	ldr	r1, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43da      	mvns	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	400a      	ands	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d32:	d104      	bne.n	8002d3e <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d3a:	61fb      	str	r3, [r7, #28]
 8002d3c:	e018      	b.n	8002d70 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d104      	bne.n	8002d50 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	e00f      	b.n	8002d70 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002d50:	f002 f984 	bl	800505c <HAL_RCC_GetHCLKFreq>
 8002d54:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4a14      	ldr	r2, [pc, #80]	; (8002dac <HAL_DAC_ConfigChannel+0x27c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d904      	bls.n	8002d68 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	e003      	b.n	8002d70 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d6e:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6819      	ldr	r1, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	22c0      	movs	r2, #192	; 0xc0
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43da      	mvns	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	400a      	ands	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3720      	adds	r7, #32
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	04c4b400 	.word	0x04c4b400

08002db0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e08d      	b.n	8002ede <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_DMA_Init+0x138>)
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d80f      	bhi.n	8002dee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4b45      	ldr	r3, [pc, #276]	; (8002eec <HAL_DMA_Init+0x13c>)
 8002dd6:	4413      	add	r3, r2
 8002dd8:	4a45      	ldr	r2, [pc, #276]	; (8002ef0 <HAL_DMA_Init+0x140>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	009a      	lsls	r2, r3, #2
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a42      	ldr	r2, [pc, #264]	; (8002ef4 <HAL_DMA_Init+0x144>)
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40
 8002dec:	e00e      	b.n	8002e0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	4b40      	ldr	r3, [pc, #256]	; (8002ef8 <HAL_DMA_Init+0x148>)
 8002df6:	4413      	add	r3, r2
 8002df8:	4a3d      	ldr	r2, [pc, #244]	; (8002ef0 <HAL_DMA_Init+0x140>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	009a      	lsls	r2, r3, #2
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a3c      	ldr	r2, [pc, #240]	; (8002efc <HAL_DMA_Init+0x14c>)
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f8fe 	bl	8003060 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e6c:	d102      	bne.n	8002e74 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e88:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d010      	beq.n	8002eb4 <HAL_DMA_Init+0x104>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d80c      	bhi.n	8002eb4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f91e 	bl	80030dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	e008      	b.n	8002ec6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40020407 	.word	0x40020407
 8002eec:	bffdfff8 	.word	0xbffdfff8
 8002ef0:	cccccccd 	.word	0xcccccccd
 8002ef4:	40020000 	.word	0x40020000
 8002ef8:	bffdfbf8 	.word	0xbffdfbf8
 8002efc:	40020400 	.word	0x40020400

08002f00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1c:	f003 031c 	and.w	r3, r3, #28
 8002f20:	2204      	movs	r2, #4
 8002f22:	409a      	lsls	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d026      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x7a>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d021      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d107      	bne.n	8002f54 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0204 	bic.w	r2, r2, #4
 8002f52:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f58:	f003 021c 	and.w	r2, r3, #28
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	2104      	movs	r1, #4
 8002f62:	fa01 f202 	lsl.w	r2, r1, r2
 8002f66:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d071      	beq.n	8003054 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002f78:	e06c      	b.n	8003054 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	f003 031c 	and.w	r3, r3, #28
 8002f82:	2202      	movs	r2, #2
 8002f84:	409a      	lsls	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d02e      	beq.n	8002fec <HAL_DMA_IRQHandler+0xec>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d029      	beq.n	8002fec <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10b      	bne.n	8002fbe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 020a 	bic.w	r2, r2, #10
 8002fb4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	f003 021c 	and.w	r2, r3, #28
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	2102      	movs	r1, #2
 8002fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d038      	beq.n	8003054 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002fea:	e033      	b.n	8003054 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff0:	f003 031c 	and.w	r3, r3, #28
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d02a      	beq.n	8003056 <HAL_DMA_IRQHandler+0x156>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d025      	beq.n	8003056 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 020e 	bic.w	r2, r2, #14
 8003018:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f003 021c 	and.w	r2, r3, #28
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	2101      	movs	r1, #1
 8003028:	fa01 f202 	lsl.w	r2, r1, r2
 800302c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003048:	2b00      	cmp	r3, #0
 800304a:	d004      	beq.n	8003056 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003054:	bf00      	nop
 8003056:	bf00      	nop
}
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	4b17      	ldr	r3, [pc, #92]	; (80030cc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003070:	429a      	cmp	r2, r3
 8003072:	d80a      	bhi.n	800308a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003078:	089b      	lsrs	r3, r3, #2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003080:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6493      	str	r3, [r2, #72]	; 0x48
 8003088:	e007      	b.n	800309a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	009a      	lsls	r2, r3, #2
 8003092:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003094:	4413      	add	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	3b08      	subs	r3, #8
 80030a2:	4a0c      	ldr	r2, [pc, #48]	; (80030d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80030b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	2201      	movs	r2, #1
 80030ba:	409a      	lsls	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	40020407 	.word	0x40020407
 80030d0:	4002081c 	.word	0x4002081c
 80030d4:	cccccccd 	.word	0xcccccccd
 80030d8:	40020880 	.word	0x40020880

080030dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4b0b      	ldr	r3, [pc, #44]	; (800311c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	461a      	mov	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a08      	ldr	r2, [pc, #32]	; (8003120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80030fe:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3b01      	subs	r3, #1
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2201      	movs	r2, #1
 800310a:	409a      	lsls	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	1000823f 	.word	0x1000823f
 8003120:	40020940 	.word	0x40020940

08003124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003132:	e166      	b.n	8003402 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	2101      	movs	r1, #1
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	fa01 f303 	lsl.w	r3, r1, r3
 8003140:	4013      	ands	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8158 	beq.w	80033fc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	2b01      	cmp	r3, #1
 8003156:	d005      	beq.n	8003164 <HAL_GPIO_Init+0x40>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d130      	bne.n	80031c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	2203      	movs	r2, #3
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4013      	ands	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800319a:	2201      	movs	r2, #1
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	f003 0201 	and.w	r2, r3, #1
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d017      	beq.n	8003202 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	2203      	movs	r2, #3
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4013      	ands	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d123      	bne.n	8003256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	08da      	lsrs	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3208      	adds	r2, #8
 8003216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800321a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	220f      	movs	r2, #15
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	08da      	lsrs	r2, r3, #3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3208      	adds	r2, #8
 8003250:	6939      	ldr	r1, [r7, #16]
 8003252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	2203      	movs	r2, #3
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 0203 	and.w	r2, r3, #3
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80b2 	beq.w	80033fc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003298:	4b61      	ldr	r3, [pc, #388]	; (8003420 <HAL_GPIO_Init+0x2fc>)
 800329a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329c:	4a60      	ldr	r2, [pc, #384]	; (8003420 <HAL_GPIO_Init+0x2fc>)
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	6613      	str	r3, [r2, #96]	; 0x60
 80032a4:	4b5e      	ldr	r3, [pc, #376]	; (8003420 <HAL_GPIO_Init+0x2fc>)
 80032a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032b0:	4a5c      	ldr	r2, [pc, #368]	; (8003424 <HAL_GPIO_Init+0x300>)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	3302      	adds	r3, #2
 80032b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	220f      	movs	r2, #15
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032da:	d02b      	beq.n	8003334 <HAL_GPIO_Init+0x210>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a52      	ldr	r2, [pc, #328]	; (8003428 <HAL_GPIO_Init+0x304>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d025      	beq.n	8003330 <HAL_GPIO_Init+0x20c>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a51      	ldr	r2, [pc, #324]	; (800342c <HAL_GPIO_Init+0x308>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d01f      	beq.n	800332c <HAL_GPIO_Init+0x208>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a50      	ldr	r2, [pc, #320]	; (8003430 <HAL_GPIO_Init+0x30c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d019      	beq.n	8003328 <HAL_GPIO_Init+0x204>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a4f      	ldr	r2, [pc, #316]	; (8003434 <HAL_GPIO_Init+0x310>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d013      	beq.n	8003324 <HAL_GPIO_Init+0x200>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a4e      	ldr	r2, [pc, #312]	; (8003438 <HAL_GPIO_Init+0x314>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d00d      	beq.n	8003320 <HAL_GPIO_Init+0x1fc>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a4d      	ldr	r2, [pc, #308]	; (800343c <HAL_GPIO_Init+0x318>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d007      	beq.n	800331c <HAL_GPIO_Init+0x1f8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a4c      	ldr	r2, [pc, #304]	; (8003440 <HAL_GPIO_Init+0x31c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d101      	bne.n	8003318 <HAL_GPIO_Init+0x1f4>
 8003314:	2307      	movs	r3, #7
 8003316:	e00e      	b.n	8003336 <HAL_GPIO_Init+0x212>
 8003318:	2308      	movs	r3, #8
 800331a:	e00c      	b.n	8003336 <HAL_GPIO_Init+0x212>
 800331c:	2306      	movs	r3, #6
 800331e:	e00a      	b.n	8003336 <HAL_GPIO_Init+0x212>
 8003320:	2305      	movs	r3, #5
 8003322:	e008      	b.n	8003336 <HAL_GPIO_Init+0x212>
 8003324:	2304      	movs	r3, #4
 8003326:	e006      	b.n	8003336 <HAL_GPIO_Init+0x212>
 8003328:	2303      	movs	r3, #3
 800332a:	e004      	b.n	8003336 <HAL_GPIO_Init+0x212>
 800332c:	2302      	movs	r3, #2
 800332e:	e002      	b.n	8003336 <HAL_GPIO_Init+0x212>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_GPIO_Init+0x212>
 8003334:	2300      	movs	r3, #0
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	f002 0203 	and.w	r2, r2, #3
 800333c:	0092      	lsls	r2, r2, #2
 800333e:	4093      	lsls	r3, r2
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003346:	4937      	ldr	r1, [pc, #220]	; (8003424 <HAL_GPIO_Init+0x300>)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	3302      	adds	r3, #2
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003354:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <HAL_GPIO_Init+0x320>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	43db      	mvns	r3, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003378:	4a32      	ldr	r2, [pc, #200]	; (8003444 <HAL_GPIO_Init+0x320>)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800337e:	4b31      	ldr	r3, [pc, #196]	; (8003444 <HAL_GPIO_Init+0x320>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	43db      	mvns	r3, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4013      	ands	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033a2:	4a28      	ldr	r2, [pc, #160]	; (8003444 <HAL_GPIO_Init+0x320>)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80033a8:	4b26      	ldr	r3, [pc, #152]	; (8003444 <HAL_GPIO_Init+0x320>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	43db      	mvns	r3, r3
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033cc:	4a1d      	ldr	r2, [pc, #116]	; (8003444 <HAL_GPIO_Init+0x320>)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033d2:	4b1c      	ldr	r3, [pc, #112]	; (8003444 <HAL_GPIO_Init+0x320>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	43db      	mvns	r3, r3
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4013      	ands	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033f6:	4a13      	ldr	r2, [pc, #76]	; (8003444 <HAL_GPIO_Init+0x320>)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	3301      	adds	r3, #1
 8003400:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	fa22 f303 	lsr.w	r3, r2, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	f47f ae91 	bne.w	8003134 <HAL_GPIO_Init+0x10>
  }
}
 8003412:	bf00      	nop
 8003414:	bf00      	nop
 8003416:	371c      	adds	r7, #28
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	40021000 	.word	0x40021000
 8003424:	40010000 	.word	0x40010000
 8003428:	48000400 	.word	0x48000400
 800342c:	48000800 	.word	0x48000800
 8003430:	48000c00 	.word	0x48000c00
 8003434:	48001000 	.word	0x48001000
 8003438:	48001400 	.word	0x48001400
 800343c:	48001800 	.word	0x48001800
 8003440:	48001c00 	.word	0x48001c00
 8003444:	40010400 	.word	0x40010400

08003448 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003456:	e0c9      	b.n	80035ec <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003458:	2201      	movs	r2, #1
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	4013      	ands	r3, r2
 8003464:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 80bc 	beq.w	80035e6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800346e:	4a66      	ldr	r2, [pc, #408]	; (8003608 <HAL_GPIO_DeInit+0x1c0>)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	3302      	adds	r3, #2
 8003476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	220f      	movs	r2, #15
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4013      	ands	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003496:	d02b      	beq.n	80034f0 <HAL_GPIO_DeInit+0xa8>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a5c      	ldr	r2, [pc, #368]	; (800360c <HAL_GPIO_DeInit+0x1c4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d025      	beq.n	80034ec <HAL_GPIO_DeInit+0xa4>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a5b      	ldr	r2, [pc, #364]	; (8003610 <HAL_GPIO_DeInit+0x1c8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d01f      	beq.n	80034e8 <HAL_GPIO_DeInit+0xa0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a5a      	ldr	r2, [pc, #360]	; (8003614 <HAL_GPIO_DeInit+0x1cc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d019      	beq.n	80034e4 <HAL_GPIO_DeInit+0x9c>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a59      	ldr	r2, [pc, #356]	; (8003618 <HAL_GPIO_DeInit+0x1d0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d013      	beq.n	80034e0 <HAL_GPIO_DeInit+0x98>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a58      	ldr	r2, [pc, #352]	; (800361c <HAL_GPIO_DeInit+0x1d4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00d      	beq.n	80034dc <HAL_GPIO_DeInit+0x94>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a57      	ldr	r2, [pc, #348]	; (8003620 <HAL_GPIO_DeInit+0x1d8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d007      	beq.n	80034d8 <HAL_GPIO_DeInit+0x90>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a56      	ldr	r2, [pc, #344]	; (8003624 <HAL_GPIO_DeInit+0x1dc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d101      	bne.n	80034d4 <HAL_GPIO_DeInit+0x8c>
 80034d0:	2307      	movs	r3, #7
 80034d2:	e00e      	b.n	80034f2 <HAL_GPIO_DeInit+0xaa>
 80034d4:	2308      	movs	r3, #8
 80034d6:	e00c      	b.n	80034f2 <HAL_GPIO_DeInit+0xaa>
 80034d8:	2306      	movs	r3, #6
 80034da:	e00a      	b.n	80034f2 <HAL_GPIO_DeInit+0xaa>
 80034dc:	2305      	movs	r3, #5
 80034de:	e008      	b.n	80034f2 <HAL_GPIO_DeInit+0xaa>
 80034e0:	2304      	movs	r3, #4
 80034e2:	e006      	b.n	80034f2 <HAL_GPIO_DeInit+0xaa>
 80034e4:	2303      	movs	r3, #3
 80034e6:	e004      	b.n	80034f2 <HAL_GPIO_DeInit+0xaa>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e002      	b.n	80034f2 <HAL_GPIO_DeInit+0xaa>
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <HAL_GPIO_DeInit+0xaa>
 80034f0:	2300      	movs	r3, #0
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	f002 0203 	and.w	r2, r2, #3
 80034f8:	0092      	lsls	r2, r2, #2
 80034fa:	4093      	lsls	r3, r2
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d132      	bne.n	8003568 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003502:	4b49      	ldr	r3, [pc, #292]	; (8003628 <HAL_GPIO_DeInit+0x1e0>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	43db      	mvns	r3, r3
 800350a:	4947      	ldr	r1, [pc, #284]	; (8003628 <HAL_GPIO_DeInit+0x1e0>)
 800350c:	4013      	ands	r3, r2
 800350e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003510:	4b45      	ldr	r3, [pc, #276]	; (8003628 <HAL_GPIO_DeInit+0x1e0>)
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	43db      	mvns	r3, r3
 8003518:	4943      	ldr	r1, [pc, #268]	; (8003628 <HAL_GPIO_DeInit+0x1e0>)
 800351a:	4013      	ands	r3, r2
 800351c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800351e:	4b42      	ldr	r3, [pc, #264]	; (8003628 <HAL_GPIO_DeInit+0x1e0>)
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	43db      	mvns	r3, r3
 8003526:	4940      	ldr	r1, [pc, #256]	; (8003628 <HAL_GPIO_DeInit+0x1e0>)
 8003528:	4013      	ands	r3, r2
 800352a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800352c:	4b3e      	ldr	r3, [pc, #248]	; (8003628 <HAL_GPIO_DeInit+0x1e0>)
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	43db      	mvns	r3, r3
 8003534:	493c      	ldr	r1, [pc, #240]	; (8003628 <HAL_GPIO_DeInit+0x1e0>)
 8003536:	4013      	ands	r3, r2
 8003538:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	220f      	movs	r2, #15
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800354a:	4a2f      	ldr	r2, [pc, #188]	; (8003608 <HAL_GPIO_DeInit+0x1c0>)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	089b      	lsrs	r3, r3, #2
 8003550:	3302      	adds	r3, #2
 8003552:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	43da      	mvns	r2, r3
 800355a:	482b      	ldr	r0, [pc, #172]	; (8003608 <HAL_GPIO_DeInit+0x1c0>)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	089b      	lsrs	r3, r3, #2
 8003560:	400a      	ands	r2, r1
 8003562:	3302      	adds	r3, #2
 8003564:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	2103      	movs	r1, #3
 8003572:	fa01 f303 	lsl.w	r3, r1, r3
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	08da      	lsrs	r2, r3, #3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3208      	adds	r2, #8
 8003584:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	220f      	movs	r2, #15
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43db      	mvns	r3, r3
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	08d2      	lsrs	r2, r2, #3
 800359c:	4019      	ands	r1, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3208      	adds	r2, #8
 80035a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	2103      	movs	r1, #3
 80035b0:	fa01 f303 	lsl.w	r3, r1, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	401a      	ands	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	2101      	movs	r1, #1
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	fa01 f303 	lsl.w	r3, r1, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	401a      	ands	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	2103      	movs	r1, #3
 80035da:	fa01 f303 	lsl.w	r3, r1, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	401a      	ands	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	3301      	adds	r3, #1
 80035ea:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f47f af2f 	bne.w	8003458 <HAL_GPIO_DeInit+0x10>
  }
}
 80035fa:	bf00      	nop
 80035fc:	bf00      	nop
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	40010000 	.word	0x40010000
 800360c:	48000400 	.word	0x48000400
 8003610:	48000800 	.word	0x48000800
 8003614:	48000c00 	.word	0x48000c00
 8003618:	48001000 	.word	0x48001000
 800361c:	48001400 	.word	0x48001400
 8003620:	48001800 	.word	0x48001800
 8003624:	48001c00 	.word	0x48001c00
 8003628:	40010400 	.word	0x40010400

0800362c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	807b      	strh	r3, [r7, #2]
 8003638:	4613      	mov	r3, r2
 800363a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800363c:	787b      	ldrb	r3, [r7, #1]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003642:	887a      	ldrh	r2, [r7, #2]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003648:	e002      	b.n	8003650 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800364a:	887a      	ldrh	r2, [r7, #2]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800366e:	887a      	ldrh	r2, [r7, #2]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4013      	ands	r3, r2
 8003674:	041a      	lsls	r2, r3, #16
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	43d9      	mvns	r1, r3
 800367a:	887b      	ldrh	r3, [r7, #2]
 800367c:	400b      	ands	r3, r1
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	619a      	str	r2, [r3, #24]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800369a:	4b08      	ldr	r3, [pc, #32]	; (80036bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d006      	beq.n	80036b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036a6:	4a05      	ldr	r2, [pc, #20]	; (80036bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a8:	88fb      	ldrh	r3, [r7, #6]
 80036aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f003 ffe0 	bl	8007674 <HAL_GPIO_EXTI_Callback>
  }
}
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40010400 	.word	0x40010400

080036c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e081      	b.n	80037d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f004 fc8a 	bl	8008000 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2224      	movs	r2, #36	; 0x24
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003710:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003720:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d107      	bne.n	800373a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	e006      	b.n	8003748 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003746:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d104      	bne.n	800375a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003758:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800377c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69d9      	ldr	r1, [r3, #28]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1a      	ldr	r2, [r3, #32]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e021      	b.n	8003834 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2224      	movs	r2, #36	; 0x24
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0201 	bic.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f004 fc57 	bl	80080bc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	4608      	mov	r0, r1
 8003846:	4611      	mov	r1, r2
 8003848:	461a      	mov	r2, r3
 800384a:	4603      	mov	r3, r0
 800384c:	817b      	strh	r3, [r7, #10]
 800384e:	460b      	mov	r3, r1
 8003850:	813b      	strh	r3, [r7, #8]
 8003852:	4613      	mov	r3, r2
 8003854:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b20      	cmp	r3, #32
 8003860:	f040 80f9 	bne.w	8003a56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_I2C_Mem_Write+0x34>
 800386a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800386c:	2b00      	cmp	r3, #0
 800386e:	d105      	bne.n	800387c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003876:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0ed      	b.n	8003a58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_I2C_Mem_Write+0x4e>
 8003886:	2302      	movs	r3, #2
 8003888:	e0e6      	b.n	8003a58 <HAL_I2C_Mem_Write+0x21c>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003892:	f7fe f901 	bl	8001a98 <HAL_GetTick>
 8003896:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	2319      	movs	r3, #25
 800389e:	2201      	movs	r2, #1
 80038a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 fac3 	bl	8003e30 <I2C_WaitOnFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0d1      	b.n	8003a58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2221      	movs	r2, #33	; 0x21
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2240      	movs	r2, #64	; 0x40
 80038c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a3a      	ldr	r2, [r7, #32]
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038dc:	88f8      	ldrh	r0, [r7, #6]
 80038de:	893a      	ldrh	r2, [r7, #8]
 80038e0:	8979      	ldrh	r1, [r7, #10]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	9301      	str	r3, [sp, #4]
 80038e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	4603      	mov	r3, r0
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f9d3 	bl	8003c98 <I2C_RequestMemoryWrite>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0a9      	b.n	8003a58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003908:	b29b      	uxth	r3, r3
 800390a:	2bff      	cmp	r3, #255	; 0xff
 800390c:	d90e      	bls.n	800392c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	22ff      	movs	r2, #255	; 0xff
 8003912:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003918:	b2da      	uxtb	r2, r3
 800391a:	8979      	ldrh	r1, [r7, #10]
 800391c:	2300      	movs	r3, #0
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 fc2b 	bl	8004180 <I2C_TransferConfig>
 800392a:	e00f      	b.n	800394c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393a:	b2da      	uxtb	r2, r3
 800393c:	8979      	ldrh	r1, [r7, #10]
 800393e:	2300      	movs	r3, #0
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 fc1a 	bl	8004180 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 faad 	bl	8003eb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e07b      	b.n	8003a58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	781a      	ldrb	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d034      	beq.n	8003a04 <HAL_I2C_Mem_Write+0x1c8>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d130      	bne.n	8003a04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a8:	2200      	movs	r2, #0
 80039aa:	2180      	movs	r1, #128	; 0x80
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 fa3f 	bl	8003e30 <I2C_WaitOnFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e04d      	b.n	8003a58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2bff      	cmp	r3, #255	; 0xff
 80039c4:	d90e      	bls.n	80039e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	22ff      	movs	r2, #255	; 0xff
 80039ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	8979      	ldrh	r1, [r7, #10]
 80039d4:	2300      	movs	r3, #0
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fbcf 	bl	8004180 <I2C_TransferConfig>
 80039e2:	e00f      	b.n	8003a04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	8979      	ldrh	r1, [r7, #10]
 80039f6:	2300      	movs	r3, #0
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 fbbe 	bl	8004180 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d19e      	bne.n	800394c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 fa8c 	bl	8003f30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e01a      	b.n	8003a58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2220      	movs	r2, #32
 8003a28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <HAL_I2C_Mem_Write+0x224>)
 8003a36:	400b      	ands	r3, r1
 8003a38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	e000      	b.n	8003a58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003a56:	2302      	movs	r3, #2
  }
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	fe00e800 	.word	0xfe00e800

08003a64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	4608      	mov	r0, r1
 8003a6e:	4611      	mov	r1, r2
 8003a70:	461a      	mov	r2, r3
 8003a72:	4603      	mov	r3, r0
 8003a74:	817b      	strh	r3, [r7, #10]
 8003a76:	460b      	mov	r3, r1
 8003a78:	813b      	strh	r3, [r7, #8]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b20      	cmp	r3, #32
 8003a88:	f040 80fd 	bne.w	8003c86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_I2C_Mem_Read+0x34>
 8003a92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d105      	bne.n	8003aa4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0f1      	b.n	8003c88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_I2C_Mem_Read+0x4e>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e0ea      	b.n	8003c88 <HAL_I2C_Mem_Read+0x224>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003aba:	f7fd ffed 	bl	8001a98 <HAL_GetTick>
 8003abe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	2319      	movs	r3, #25
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f9af 	bl	8003e30 <I2C_WaitOnFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0d5      	b.n	8003c88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2222      	movs	r2, #34	; 0x22
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2240      	movs	r2, #64	; 0x40
 8003ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a3a      	ldr	r2, [r7, #32]
 8003af6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003afc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b04:	88f8      	ldrh	r0, [r7, #6]
 8003b06:	893a      	ldrh	r2, [r7, #8]
 8003b08:	8979      	ldrh	r1, [r7, #10]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	9301      	str	r3, [sp, #4]
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	4603      	mov	r3, r0
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f913 	bl	8003d40 <I2C_RequestMemoryRead>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0ad      	b.n	8003c88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2bff      	cmp	r3, #255	; 0xff
 8003b34:	d90e      	bls.n	8003b54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	22ff      	movs	r2, #255	; 0xff
 8003b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	8979      	ldrh	r1, [r7, #10]
 8003b44:	4b52      	ldr	r3, [pc, #328]	; (8003c90 <HAL_I2C_Mem_Read+0x22c>)
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 fb17 	bl	8004180 <I2C_TransferConfig>
 8003b52:	e00f      	b.n	8003b74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	8979      	ldrh	r1, [r7, #10]
 8003b66:	4b4a      	ldr	r3, [pc, #296]	; (8003c90 <HAL_I2C_Mem_Read+0x22c>)
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fb06 	bl	8004180 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	2104      	movs	r1, #4
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 f956 	bl	8003e30 <I2C_WaitOnFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e07c      	b.n	8003c88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d034      	beq.n	8003c34 <HAL_I2C_Mem_Read+0x1d0>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d130      	bne.n	8003c34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2180      	movs	r1, #128	; 0x80
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 f927 	bl	8003e30 <I2C_WaitOnFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e04d      	b.n	8003c88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2bff      	cmp	r3, #255	; 0xff
 8003bf4:	d90e      	bls.n	8003c14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	22ff      	movs	r2, #255	; 0xff
 8003bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	8979      	ldrh	r1, [r7, #10]
 8003c04:	2300      	movs	r3, #0
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 fab7 	bl	8004180 <I2C_TransferConfig>
 8003c12:	e00f      	b.n	8003c34 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	8979      	ldrh	r1, [r7, #10]
 8003c26:	2300      	movs	r3, #0
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 faa6 	bl	8004180 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d19a      	bne.n	8003b74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f974 	bl	8003f30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e01a      	b.n	8003c88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2220      	movs	r2, #32
 8003c58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6859      	ldr	r1, [r3, #4]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_I2C_Mem_Read+0x230>)
 8003c66:	400b      	ands	r3, r1
 8003c68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	e000      	b.n	8003c88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003c86:	2302      	movs	r3, #2
  }
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	80002400 	.word	0x80002400
 8003c94:	fe00e800 	.word	0xfe00e800

08003c98 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	817b      	strh	r3, [r7, #10]
 8003caa:	460b      	mov	r3, r1
 8003cac:	813b      	strh	r3, [r7, #8]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003cb2:	88fb      	ldrh	r3, [r7, #6]
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	8979      	ldrh	r1, [r7, #10]
 8003cb8:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <I2C_RequestMemoryWrite+0xa4>)
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 fa5d 	bl	8004180 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc6:	69fa      	ldr	r2, [r7, #28]
 8003cc8:	69b9      	ldr	r1, [r7, #24]
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f8f0 	bl	8003eb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e02c      	b.n	8003d34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cda:	88fb      	ldrh	r3, [r7, #6]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d105      	bne.n	8003cec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ce0:	893b      	ldrh	r3, [r7, #8]
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	629a      	str	r2, [r3, #40]	; 0x28
 8003cea:	e015      	b.n	8003d18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cec:	893b      	ldrh	r3, [r7, #8]
 8003cee:	0a1b      	lsrs	r3, r3, #8
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	69b9      	ldr	r1, [r7, #24]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f8d6 	bl	8003eb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e012      	b.n	8003d34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d0e:	893b      	ldrh	r3, [r7, #8]
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2180      	movs	r1, #128	; 0x80
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 f884 	bl	8003e30 <I2C_WaitOnFlagUntilTimeout>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e000      	b.n	8003d34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	80002000 	.word	0x80002000

08003d40 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	4608      	mov	r0, r1
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4603      	mov	r3, r0
 8003d50:	817b      	strh	r3, [r7, #10]
 8003d52:	460b      	mov	r3, r1
 8003d54:	813b      	strh	r3, [r7, #8]
 8003d56:	4613      	mov	r3, r2
 8003d58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	8979      	ldrh	r1, [r7, #10]
 8003d60:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <I2C_RequestMemoryRead+0xa4>)
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	2300      	movs	r3, #0
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 fa0a 	bl	8004180 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	69b9      	ldr	r1, [r7, #24]
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f89d 	bl	8003eb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e02c      	b.n	8003dda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d80:	88fb      	ldrh	r3, [r7, #6]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d105      	bne.n	8003d92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d86:	893b      	ldrh	r3, [r7, #8]
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	629a      	str	r2, [r3, #40]	; 0x28
 8003d90:	e015      	b.n	8003dbe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d92:	893b      	ldrh	r3, [r7, #8]
 8003d94:	0a1b      	lsrs	r3, r3, #8
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da0:	69fa      	ldr	r2, [r7, #28]
 8003da2:	69b9      	ldr	r1, [r7, #24]
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f883 	bl	8003eb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e012      	b.n	8003dda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003db4:	893b      	ldrh	r3, [r7, #8]
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2140      	movs	r1, #64	; 0x40
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f831 	bl	8003e30 <I2C_WaitOnFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	80002000 	.word	0x80002000

08003de8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d103      	bne.n	8003e06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2200      	movs	r2, #0
 8003e04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d007      	beq.n	8003e24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	619a      	str	r2, [r3, #24]
  }
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e40:	e022      	b.n	8003e88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d01e      	beq.n	8003e88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4a:	f7fd fe25 	bl	8001a98 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d302      	bcc.n	8003e60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d113      	bne.n	8003e88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e64:	f043 0220 	orr.w	r2, r3, #32
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e00f      	b.n	8003ea8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4013      	ands	r3, r2
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d0cd      	beq.n	8003e42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ebc:	e02c      	b.n	8003f18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f870 	bl	8003fa8 <I2C_IsErrorOccurred>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e02a      	b.n	8003f28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d01e      	beq.n	8003f18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eda:	f7fd fddd 	bl	8001a98 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d302      	bcc.n	8003ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d113      	bne.n	8003f18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef4:	f043 0220 	orr.w	r2, r3, #32
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e007      	b.n	8003f28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d1cb      	bne.n	8003ebe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f3c:	e028      	b.n	8003f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f830 	bl	8003fa8 <I2C_IsErrorOccurred>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e026      	b.n	8003fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f52:	f7fd fda1 	bl	8001a98 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d302      	bcc.n	8003f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d113      	bne.n	8003f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6c:	f043 0220 	orr.w	r2, r3, #32
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e007      	b.n	8003fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b20      	cmp	r3, #32
 8003f9c:	d1cf      	bne.n	8003f3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08a      	sub	sp, #40	; 0x28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d075      	beq.n	80040c0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2210      	movs	r2, #16
 8003fda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fdc:	e056      	b.n	800408c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe4:	d052      	beq.n	800408c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fe6:	f7fd fd57 	bl	8001a98 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d302      	bcc.n	8003ffc <I2C_IsErrorOccurred+0x54>
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d147      	bne.n	800408c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004006:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800400e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800401a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800401e:	d12e      	bne.n	800407e <I2C_IsErrorOccurred+0xd6>
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004026:	d02a      	beq.n	800407e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004028:	7cfb      	ldrb	r3, [r7, #19]
 800402a:	2b20      	cmp	r3, #32
 800402c:	d027      	beq.n	800407e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800403c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800403e:	f7fd fd2b 	bl	8001a98 <HAL_GetTick>
 8004042:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004044:	e01b      	b.n	800407e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004046:	f7fd fd27 	bl	8001a98 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b19      	cmp	r3, #25
 8004052:	d914      	bls.n	800407e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004058:	f043 0220 	orr.w	r2, r3, #32
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b20      	cmp	r3, #32
 800408a:	d1dc      	bne.n	8004046 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b20      	cmp	r3, #32
 8004098:	d003      	beq.n	80040a2 <I2C_IsErrorOccurred+0xfa>
 800409a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d09d      	beq.n	8003fde <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80040a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d103      	bne.n	80040b2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2220      	movs	r2, #32
 80040b0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	f043 0304 	orr.w	r3, r3, #4
 80040b8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00b      	beq.n	80040ea <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00b      	beq.n	800410c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	f043 0308 	orr.w	r3, r3, #8
 80040fa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004104:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00b      	beq.n	800412e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	f043 0302 	orr.w	r3, r3, #2
 800411c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004126:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800412e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01c      	beq.n	8004170 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f7ff fe56 	bl	8003de8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6859      	ldr	r1, [r3, #4]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4b0d      	ldr	r3, [pc, #52]	; (800417c <I2C_IsErrorOccurred+0x1d4>)
 8004148:	400b      	ands	r3, r1
 800414a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	431a      	orrs	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004174:	4618      	mov	r0, r3
 8004176:	3728      	adds	r7, #40	; 0x28
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	fe00e800 	.word	0xfe00e800

08004180 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	607b      	str	r3, [r7, #4]
 800418a:	460b      	mov	r3, r1
 800418c:	817b      	strh	r3, [r7, #10]
 800418e:	4613      	mov	r3, r2
 8004190:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004192:	897b      	ldrh	r3, [r7, #10]
 8004194:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004198:	7a7b      	ldrb	r3, [r7, #9]
 800419a:	041b      	lsls	r3, r3, #16
 800419c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	0d5b      	lsrs	r3, r3, #21
 80041ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80041be:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <I2C_TransferConfig+0x60>)
 80041c0:	430b      	orrs	r3, r1
 80041c2:	43db      	mvns	r3, r3
 80041c4:	ea02 0103 	and.w	r1, r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80041d2:	bf00      	nop
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	03ff63ff 	.word	0x03ff63ff

080041e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	d138      	bne.n	800426c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004204:	2302      	movs	r3, #2
 8004206:	e032      	b.n	800426e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2224      	movs	r2, #36	; 0x24
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004236:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6819      	ldr	r1, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	e000      	b.n	800426e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800426c:	2302      	movs	r3, #2
  }
}
 800426e:	4618      	mov	r0, r3
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800427a:	b480      	push	{r7}
 800427c:	b085      	sub	sp, #20
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b20      	cmp	r3, #32
 800428e:	d139      	bne.n	8004304 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800429a:	2302      	movs	r3, #2
 800429c:	e033      	b.n	8004306 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2224      	movs	r2, #36	; 0x24
 80042aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0201 	bic.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	021b      	lsls	r3, r3, #8
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	e000      	b.n	8004306 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004304:	2302      	movs	r3, #2
  }
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004318:	4b0d      	ldr	r3, [pc, #52]	; (8004350 <HAL_PWREx_GetVoltageRange+0x3c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004324:	d102      	bne.n	800432c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800432a:	e00b      	b.n	8004344 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800432c:	4b08      	ldr	r3, [pc, #32]	; (8004350 <HAL_PWREx_GetVoltageRange+0x3c>)
 800432e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800433a:	d102      	bne.n	8004342 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800433c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004340:	e000      	b.n	8004344 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004342:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004344:	4618      	mov	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40007000 	.word	0x40007000

08004354 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d141      	bne.n	80043e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004362:	4b4b      	ldr	r3, [pc, #300]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800436a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800436e:	d131      	bne.n	80043d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004370:	4b47      	ldr	r3, [pc, #284]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004376:	4a46      	ldr	r2, [pc, #280]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800437c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004380:	4b43      	ldr	r3, [pc, #268]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004388:	4a41      	ldr	r2, [pc, #260]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800438a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800438e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004390:	4b40      	ldr	r3, [pc, #256]	; (8004494 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2232      	movs	r2, #50	; 0x32
 8004396:	fb02 f303 	mul.w	r3, r2, r3
 800439a:	4a3f      	ldr	r2, [pc, #252]	; (8004498 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800439c:	fba2 2303 	umull	r2, r3, r2, r3
 80043a0:	0c9b      	lsrs	r3, r3, #18
 80043a2:	3301      	adds	r3, #1
 80043a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043a6:	e002      	b.n	80043ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043ae:	4b38      	ldr	r3, [pc, #224]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ba:	d102      	bne.n	80043c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f2      	bne.n	80043a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043c2:	4b33      	ldr	r3, [pc, #204]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ce:	d158      	bne.n	8004482 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e057      	b.n	8004484 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043d4:	4b2e      	ldr	r3, [pc, #184]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043da:	4a2d      	ldr	r2, [pc, #180]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043e4:	e04d      	b.n	8004482 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ec:	d141      	bne.n	8004472 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043ee:	4b28      	ldr	r3, [pc, #160]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043fa:	d131      	bne.n	8004460 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043fc:	4b24      	ldr	r3, [pc, #144]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004402:	4a23      	ldr	r2, [pc, #140]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004408:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800440c:	4b20      	ldr	r3, [pc, #128]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004414:	4a1e      	ldr	r2, [pc, #120]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800441a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800441c:	4b1d      	ldr	r3, [pc, #116]	; (8004494 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2232      	movs	r2, #50	; 0x32
 8004422:	fb02 f303 	mul.w	r3, r2, r3
 8004426:	4a1c      	ldr	r2, [pc, #112]	; (8004498 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004428:	fba2 2303 	umull	r2, r3, r2, r3
 800442c:	0c9b      	lsrs	r3, r3, #18
 800442e:	3301      	adds	r3, #1
 8004430:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004432:	e002      	b.n	800443a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3b01      	subs	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800443a:	4b15      	ldr	r3, [pc, #84]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004446:	d102      	bne.n	800444e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f2      	bne.n	8004434 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800444e:	4b10      	ldr	r3, [pc, #64]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445a:	d112      	bne.n	8004482 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e011      	b.n	8004484 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004460:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004466:	4a0a      	ldr	r2, [pc, #40]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800446c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004470:	e007      	b.n	8004482 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004472:	4b07      	ldr	r3, [pc, #28]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800447a:	4a05      	ldr	r2, [pc, #20]	; (8004490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800447c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004480:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	40007000 	.word	0x40007000
 8004494:	200000cc 	.word	0x200000cc
 8004498:	431bde83 	.word	0x431bde83

0800449c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d102      	bne.n	80044b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	f000 bc08 	b.w	8004cc0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044b0:	4b96      	ldr	r3, [pc, #600]	; (800470c <HAL_RCC_OscConfig+0x270>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 030c 	and.w	r3, r3, #12
 80044b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044ba:	4b94      	ldr	r3, [pc, #592]	; (800470c <HAL_RCC_OscConfig+0x270>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 80e4 	beq.w	800469a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d007      	beq.n	80044e8 <HAL_RCC_OscConfig+0x4c>
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	2b0c      	cmp	r3, #12
 80044dc:	f040 808b 	bne.w	80045f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	f040 8087 	bne.w	80045f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044e8:	4b88      	ldr	r3, [pc, #544]	; (800470c <HAL_RCC_OscConfig+0x270>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_RCC_OscConfig+0x64>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e3df      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1a      	ldr	r2, [r3, #32]
 8004504:	4b81      	ldr	r3, [pc, #516]	; (800470c <HAL_RCC_OscConfig+0x270>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d004      	beq.n	800451a <HAL_RCC_OscConfig+0x7e>
 8004510:	4b7e      	ldr	r3, [pc, #504]	; (800470c <HAL_RCC_OscConfig+0x270>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004518:	e005      	b.n	8004526 <HAL_RCC_OscConfig+0x8a>
 800451a:	4b7c      	ldr	r3, [pc, #496]	; (800470c <HAL_RCC_OscConfig+0x270>)
 800451c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004526:	4293      	cmp	r3, r2
 8004528:	d223      	bcs.n	8004572 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fdcc 	bl	80050cc <RCC_SetFlashLatencyFromMSIRange>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e3c0      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800453e:	4b73      	ldr	r3, [pc, #460]	; (800470c <HAL_RCC_OscConfig+0x270>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a72      	ldr	r2, [pc, #456]	; (800470c <HAL_RCC_OscConfig+0x270>)
 8004544:	f043 0308 	orr.w	r3, r3, #8
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	4b70      	ldr	r3, [pc, #448]	; (800470c <HAL_RCC_OscConfig+0x270>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	496d      	ldr	r1, [pc, #436]	; (800470c <HAL_RCC_OscConfig+0x270>)
 8004558:	4313      	orrs	r3, r2
 800455a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800455c:	4b6b      	ldr	r3, [pc, #428]	; (800470c <HAL_RCC_OscConfig+0x270>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	021b      	lsls	r3, r3, #8
 800456a:	4968      	ldr	r1, [pc, #416]	; (800470c <HAL_RCC_OscConfig+0x270>)
 800456c:	4313      	orrs	r3, r2
 800456e:	604b      	str	r3, [r1, #4]
 8004570:	e025      	b.n	80045be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004572:	4b66      	ldr	r3, [pc, #408]	; (800470c <HAL_RCC_OscConfig+0x270>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a65      	ldr	r2, [pc, #404]	; (800470c <HAL_RCC_OscConfig+0x270>)
 8004578:	f043 0308 	orr.w	r3, r3, #8
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	4b63      	ldr	r3, [pc, #396]	; (800470c <HAL_RCC_OscConfig+0x270>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	4960      	ldr	r1, [pc, #384]	; (800470c <HAL_RCC_OscConfig+0x270>)
 800458c:	4313      	orrs	r3, r2
 800458e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004590:	4b5e      	ldr	r3, [pc, #376]	; (800470c <HAL_RCC_OscConfig+0x270>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	021b      	lsls	r3, r3, #8
 800459e:	495b      	ldr	r1, [pc, #364]	; (800470c <HAL_RCC_OscConfig+0x270>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d109      	bne.n	80045be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fd8c 	bl	80050cc <RCC_SetFlashLatencyFromMSIRange>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e380      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045be:	f000 fcc1 	bl	8004f44 <HAL_RCC_GetSysClockFreq>
 80045c2:	4602      	mov	r2, r0
 80045c4:	4b51      	ldr	r3, [pc, #324]	; (800470c <HAL_RCC_OscConfig+0x270>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	091b      	lsrs	r3, r3, #4
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	4950      	ldr	r1, [pc, #320]	; (8004710 <HAL_RCC_OscConfig+0x274>)
 80045d0:	5ccb      	ldrb	r3, [r1, r3]
 80045d2:	f003 031f 	and.w	r3, r3, #31
 80045d6:	fa22 f303 	lsr.w	r3, r2, r3
 80045da:	4a4e      	ldr	r2, [pc, #312]	; (8004714 <HAL_RCC_OscConfig+0x278>)
 80045dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045de:	4b4e      	ldr	r3, [pc, #312]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fd fa08 	bl	80019f8 <HAL_InitTick>
 80045e8:	4603      	mov	r3, r0
 80045ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d052      	beq.n	8004698 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	e364      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d032      	beq.n	8004664 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045fe:	4b43      	ldr	r3, [pc, #268]	; (800470c <HAL_RCC_OscConfig+0x270>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a42      	ldr	r2, [pc, #264]	; (800470c <HAL_RCC_OscConfig+0x270>)
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800460a:	f7fd fa45 	bl	8001a98 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004612:	f7fd fa41 	bl	8001a98 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e34d      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004624:	4b39      	ldr	r3, [pc, #228]	; (800470c <HAL_RCC_OscConfig+0x270>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0f0      	beq.n	8004612 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004630:	4b36      	ldr	r3, [pc, #216]	; (800470c <HAL_RCC_OscConfig+0x270>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a35      	ldr	r2, [pc, #212]	; (800470c <HAL_RCC_OscConfig+0x270>)
 8004636:	f043 0308 	orr.w	r3, r3, #8
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	4b33      	ldr	r3, [pc, #204]	; (800470c <HAL_RCC_OscConfig+0x270>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	4930      	ldr	r1, [pc, #192]	; (800470c <HAL_RCC_OscConfig+0x270>)
 800464a:	4313      	orrs	r3, r2
 800464c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800464e:	4b2f      	ldr	r3, [pc, #188]	; (800470c <HAL_RCC_OscConfig+0x270>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	021b      	lsls	r3, r3, #8
 800465c:	492b      	ldr	r1, [pc, #172]	; (800470c <HAL_RCC_OscConfig+0x270>)
 800465e:	4313      	orrs	r3, r2
 8004660:	604b      	str	r3, [r1, #4]
 8004662:	e01a      	b.n	800469a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004664:	4b29      	ldr	r3, [pc, #164]	; (800470c <HAL_RCC_OscConfig+0x270>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a28      	ldr	r2, [pc, #160]	; (800470c <HAL_RCC_OscConfig+0x270>)
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004670:	f7fd fa12 	bl	8001a98 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004678:	f7fd fa0e 	bl	8001a98 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e31a      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800468a:	4b20      	ldr	r3, [pc, #128]	; (800470c <HAL_RCC_OscConfig+0x270>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <HAL_RCC_OscConfig+0x1dc>
 8004696:	e000      	b.n	800469a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004698:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d073      	beq.n	800478e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d005      	beq.n	80046b8 <HAL_RCC_OscConfig+0x21c>
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	2b0c      	cmp	r3, #12
 80046b0:	d10e      	bne.n	80046d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d10b      	bne.n	80046d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b8:	4b14      	ldr	r3, [pc, #80]	; (800470c <HAL_RCC_OscConfig+0x270>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d063      	beq.n	800478c <HAL_RCC_OscConfig+0x2f0>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d15f      	bne.n	800478c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e2f7      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d8:	d106      	bne.n	80046e8 <HAL_RCC_OscConfig+0x24c>
 80046da:	4b0c      	ldr	r3, [pc, #48]	; (800470c <HAL_RCC_OscConfig+0x270>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a0b      	ldr	r2, [pc, #44]	; (800470c <HAL_RCC_OscConfig+0x270>)
 80046e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	e025      	b.n	8004734 <HAL_RCC_OscConfig+0x298>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046f0:	d114      	bne.n	800471c <HAL_RCC_OscConfig+0x280>
 80046f2:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_RCC_OscConfig+0x270>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a05      	ldr	r2, [pc, #20]	; (800470c <HAL_RCC_OscConfig+0x270>)
 80046f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	4b03      	ldr	r3, [pc, #12]	; (800470c <HAL_RCC_OscConfig+0x270>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a02      	ldr	r2, [pc, #8]	; (800470c <HAL_RCC_OscConfig+0x270>)
 8004704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	e013      	b.n	8004734 <HAL_RCC_OscConfig+0x298>
 800470c:	40021000 	.word	0x40021000
 8004710:	0800b14c 	.word	0x0800b14c
 8004714:	200000cc 	.word	0x200000cc
 8004718:	200000c4 	.word	0x200000c4
 800471c:	4ba0      	ldr	r3, [pc, #640]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a9f      	ldr	r2, [pc, #636]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 8004722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	4b9d      	ldr	r3, [pc, #628]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a9c      	ldr	r2, [pc, #624]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 800472e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d013      	beq.n	8004764 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473c:	f7fd f9ac 	bl	8001a98 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004744:	f7fd f9a8 	bl	8001a98 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b64      	cmp	r3, #100	; 0x64
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e2b4      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004756:	4b92      	ldr	r3, [pc, #584]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f0      	beq.n	8004744 <HAL_RCC_OscConfig+0x2a8>
 8004762:	e014      	b.n	800478e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fd f998 	bl	8001a98 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800476c:	f7fd f994 	bl	8001a98 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b64      	cmp	r3, #100	; 0x64
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e2a0      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800477e:	4b88      	ldr	r3, [pc, #544]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f0      	bne.n	800476c <HAL_RCC_OscConfig+0x2d0>
 800478a:	e000      	b.n	800478e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800478c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d060      	beq.n	800485c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2b04      	cmp	r3, #4
 800479e:	d005      	beq.n	80047ac <HAL_RCC_OscConfig+0x310>
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	2b0c      	cmp	r3, #12
 80047a4:	d119      	bne.n	80047da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d116      	bne.n	80047da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047ac:	4b7c      	ldr	r3, [pc, #496]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <HAL_RCC_OscConfig+0x328>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e27d      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c4:	4b76      	ldr	r3, [pc, #472]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	061b      	lsls	r3, r3, #24
 80047d2:	4973      	ldr	r1, [pc, #460]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047d8:	e040      	b.n	800485c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d023      	beq.n	800482a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047e2:	4b6f      	ldr	r3, [pc, #444]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a6e      	ldr	r2, [pc, #440]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 80047e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ee:	f7fd f953 	bl	8001a98 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f6:	f7fd f94f 	bl	8001a98 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e25b      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004808:	4b65      	ldr	r3, [pc, #404]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004814:	4b62      	ldr	r3, [pc, #392]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	061b      	lsls	r3, r3, #24
 8004822:	495f      	ldr	r1, [pc, #380]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 8004824:	4313      	orrs	r3, r2
 8004826:	604b      	str	r3, [r1, #4]
 8004828:	e018      	b.n	800485c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800482a:	4b5d      	ldr	r3, [pc, #372]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a5c      	ldr	r2, [pc, #368]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 8004830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004836:	f7fd f92f 	bl	8001a98 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800483e:	f7fd f92b 	bl	8001a98 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e237      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004850:	4b53      	ldr	r3, [pc, #332]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1f0      	bne.n	800483e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	d03c      	beq.n	80048e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01c      	beq.n	80048aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004870:	4b4b      	ldr	r3, [pc, #300]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 8004872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004876:	4a4a      	ldr	r2, [pc, #296]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004880:	f7fd f90a 	bl	8001a98 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004888:	f7fd f906 	bl	8001a98 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e212      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800489a:	4b41      	ldr	r3, [pc, #260]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 800489c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0ef      	beq.n	8004888 <HAL_RCC_OscConfig+0x3ec>
 80048a8:	e01b      	b.n	80048e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048aa:	4b3d      	ldr	r3, [pc, #244]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 80048ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048b0:	4a3b      	ldr	r2, [pc, #236]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 80048b2:	f023 0301 	bic.w	r3, r3, #1
 80048b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ba:	f7fd f8ed 	bl	8001a98 <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c2:	f7fd f8e9 	bl	8001a98 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e1f5      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048d4:	4b32      	ldr	r3, [pc, #200]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 80048d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1ef      	bne.n	80048c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80a6 	beq.w	8004a3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f0:	2300      	movs	r3, #0
 80048f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048f4:	4b2a      	ldr	r3, [pc, #168]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 80048f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10d      	bne.n	800491c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004900:	4b27      	ldr	r3, [pc, #156]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 8004902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004904:	4a26      	ldr	r2, [pc, #152]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 8004906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800490a:	6593      	str	r3, [r2, #88]	; 0x58
 800490c:	4b24      	ldr	r3, [pc, #144]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 800490e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004918:	2301      	movs	r3, #1
 800491a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800491c:	4b21      	ldr	r3, [pc, #132]	; (80049a4 <HAL_RCC_OscConfig+0x508>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004924:	2b00      	cmp	r3, #0
 8004926:	d118      	bne.n	800495a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004928:	4b1e      	ldr	r3, [pc, #120]	; (80049a4 <HAL_RCC_OscConfig+0x508>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1d      	ldr	r2, [pc, #116]	; (80049a4 <HAL_RCC_OscConfig+0x508>)
 800492e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004932:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004934:	f7fd f8b0 	bl	8001a98 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800493c:	f7fd f8ac 	bl	8001a98 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e1b8      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800494e:	4b15      	ldr	r3, [pc, #84]	; (80049a4 <HAL_RCC_OscConfig+0x508>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d108      	bne.n	8004974 <HAL_RCC_OscConfig+0x4d8>
 8004962:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 8004964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004968:	4a0d      	ldr	r2, [pc, #52]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 800496a:	f043 0301 	orr.w	r3, r3, #1
 800496e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004972:	e029      	b.n	80049c8 <HAL_RCC_OscConfig+0x52c>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	2b05      	cmp	r3, #5
 800497a:	d115      	bne.n	80049a8 <HAL_RCC_OscConfig+0x50c>
 800497c:	4b08      	ldr	r3, [pc, #32]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004982:	4a07      	ldr	r2, [pc, #28]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 8004984:	f043 0304 	orr.w	r3, r3, #4
 8004988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800498c:	4b04      	ldr	r3, [pc, #16]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004992:	4a03      	ldr	r2, [pc, #12]	; (80049a0 <HAL_RCC_OscConfig+0x504>)
 8004994:	f043 0301 	orr.w	r3, r3, #1
 8004998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800499c:	e014      	b.n	80049c8 <HAL_RCC_OscConfig+0x52c>
 800499e:	bf00      	nop
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40007000 	.word	0x40007000
 80049a8:	4b9d      	ldr	r3, [pc, #628]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ae:	4a9c      	ldr	r2, [pc, #624]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 80049b0:	f023 0301 	bic.w	r3, r3, #1
 80049b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049b8:	4b99      	ldr	r3, [pc, #612]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 80049ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049be:	4a98      	ldr	r2, [pc, #608]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 80049c0:	f023 0304 	bic.w	r3, r3, #4
 80049c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d016      	beq.n	80049fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d0:	f7fd f862 	bl	8001a98 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049d6:	e00a      	b.n	80049ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d8:	f7fd f85e 	bl	8001a98 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e168      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ee:	4b8c      	ldr	r3, [pc, #560]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 80049f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0ed      	beq.n	80049d8 <HAL_RCC_OscConfig+0x53c>
 80049fc:	e015      	b.n	8004a2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fe:	f7fd f84b 	bl	8001a98 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a04:	e00a      	b.n	8004a1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a06:	f7fd f847 	bl	8001a98 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e151      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a1c:	4b80      	ldr	r3, [pc, #512]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1ed      	bne.n	8004a06 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a2a:	7ffb      	ldrb	r3, [r7, #31]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d105      	bne.n	8004a3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a30:	4b7b      	ldr	r3, [pc, #492]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a34:	4a7a      	ldr	r2, [pc, #488]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0320 	and.w	r3, r3, #32
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d03c      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d01c      	beq.n	8004a8a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a50:	4b73      	ldr	r3, [pc, #460]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a56:	4a72      	ldr	r2, [pc, #456]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004a58:	f043 0301 	orr.w	r3, r3, #1
 8004a5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a60:	f7fd f81a 	bl	8001a98 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a68:	f7fd f816 	bl	8001a98 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e122      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a7a:	4b69      	ldr	r3, [pc, #420]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0ef      	beq.n	8004a68 <HAL_RCC_OscConfig+0x5cc>
 8004a88:	e01b      	b.n	8004ac2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a8a:	4b65      	ldr	r3, [pc, #404]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004a8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a90:	4a63      	ldr	r2, [pc, #396]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9a:	f7fc fffd 	bl	8001a98 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aa2:	f7fc fff9 	bl	8001a98 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e105      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ab4:	4b5a      	ldr	r3, [pc, #360]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1ef      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 80f9 	beq.w	8004cbe <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	f040 80cf 	bne.w	8004c74 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ad6:	4b52      	ldr	r3, [pc, #328]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f003 0203 	and.w	r2, r3, #3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d12c      	bne.n	8004b44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	3b01      	subs	r3, #1
 8004af6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d123      	bne.n	8004b44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b06:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d11b      	bne.n	8004b44 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d113      	bne.n	8004b44 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b26:	085b      	lsrs	r3, r3, #1
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d109      	bne.n	8004b44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	085b      	lsrs	r3, r3, #1
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d071      	beq.n	8004c28 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	2b0c      	cmp	r3, #12
 8004b48:	d068      	beq.n	8004c1c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b4a:	4b35      	ldr	r3, [pc, #212]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d105      	bne.n	8004b62 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b56:	4b32      	ldr	r3, [pc, #200]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e0ac      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b66:	4b2e      	ldr	r3, [pc, #184]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a2d      	ldr	r2, [pc, #180]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004b6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b70:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b72:	f7fc ff91 	bl	8001a98 <HAL_GetTick>
 8004b76:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b78:	e008      	b.n	8004b8c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b7a:	f7fc ff8d 	bl	8001a98 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e099      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b8c:	4b24      	ldr	r3, [pc, #144]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1f0      	bne.n	8004b7a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b98:	4b21      	ldr	r3, [pc, #132]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	4b21      	ldr	r3, [pc, #132]	; (8004c24 <HAL_RCC_OscConfig+0x788>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ba8:	3a01      	subs	r2, #1
 8004baa:	0112      	lsls	r2, r2, #4
 8004bac:	4311      	orrs	r1, r2
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bb2:	0212      	lsls	r2, r2, #8
 8004bb4:	4311      	orrs	r1, r2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004bba:	0852      	lsrs	r2, r2, #1
 8004bbc:	3a01      	subs	r2, #1
 8004bbe:	0552      	lsls	r2, r2, #21
 8004bc0:	4311      	orrs	r1, r2
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004bc6:	0852      	lsrs	r2, r2, #1
 8004bc8:	3a01      	subs	r2, #1
 8004bca:	0652      	lsls	r2, r2, #25
 8004bcc:	4311      	orrs	r1, r2
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bd2:	06d2      	lsls	r2, r2, #27
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	4912      	ldr	r1, [pc, #72]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004bdc:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a0f      	ldr	r2, [pc, #60]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004be6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004be8:	4b0d      	ldr	r3, [pc, #52]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	4a0c      	ldr	r2, [pc, #48]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bf2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bf4:	f7fc ff50 	bl	8001a98 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfc:	f7fc ff4c 	bl	8001a98 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e058      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0e:	4b04      	ldr	r3, [pc, #16]	; (8004c20 <HAL_RCC_OscConfig+0x784>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0f0      	beq.n	8004bfc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c1a:	e050      	b.n	8004cbe <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e04f      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
 8004c20:	40021000 	.word	0x40021000
 8004c24:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c28:	4b27      	ldr	r3, [pc, #156]	; (8004cc8 <HAL_RCC_OscConfig+0x82c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d144      	bne.n	8004cbe <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c34:	4b24      	ldr	r3, [pc, #144]	; (8004cc8 <HAL_RCC_OscConfig+0x82c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a23      	ldr	r2, [pc, #140]	; (8004cc8 <HAL_RCC_OscConfig+0x82c>)
 8004c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c40:	4b21      	ldr	r3, [pc, #132]	; (8004cc8 <HAL_RCC_OscConfig+0x82c>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4a20      	ldr	r2, [pc, #128]	; (8004cc8 <HAL_RCC_OscConfig+0x82c>)
 8004c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c4c:	f7fc ff24 	bl	8001a98 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c54:	f7fc ff20 	bl	8001a98 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e02c      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c66:	4b18      	ldr	r3, [pc, #96]	; (8004cc8 <HAL_RCC_OscConfig+0x82c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCC_OscConfig+0x7b8>
 8004c72:	e024      	b.n	8004cbe <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	2b0c      	cmp	r3, #12
 8004c78:	d01f      	beq.n	8004cba <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c7a:	4b13      	ldr	r3, [pc, #76]	; (8004cc8 <HAL_RCC_OscConfig+0x82c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a12      	ldr	r2, [pc, #72]	; (8004cc8 <HAL_RCC_OscConfig+0x82c>)
 8004c80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c86:	f7fc ff07 	bl	8001a98 <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c8e:	f7fc ff03 	bl	8001a98 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e00f      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ca0:	4b09      	ldr	r3, [pc, #36]	; (8004cc8 <HAL_RCC_OscConfig+0x82c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1f0      	bne.n	8004c8e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004cac:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <HAL_RCC_OscConfig+0x82c>)
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	4905      	ldr	r1, [pc, #20]	; (8004cc8 <HAL_RCC_OscConfig+0x82c>)
 8004cb2:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <HAL_RCC_OscConfig+0x830>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	60cb      	str	r3, [r1, #12]
 8004cb8:	e001      	b.n	8004cbe <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3720      	adds	r7, #32
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	feeefffc 	.word	0xfeeefffc

08004cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e11d      	b.n	8004f24 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce8:	4b90      	ldr	r3, [pc, #576]	; (8004f2c <HAL_RCC_ClockConfig+0x25c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 030f 	and.w	r3, r3, #15
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d910      	bls.n	8004d18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf6:	4b8d      	ldr	r3, [pc, #564]	; (8004f2c <HAL_RCC_ClockConfig+0x25c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f023 020f 	bic.w	r2, r3, #15
 8004cfe:	498b      	ldr	r1, [pc, #556]	; (8004f2c <HAL_RCC_ClockConfig+0x25c>)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d06:	4b89      	ldr	r3, [pc, #548]	; (8004f2c <HAL_RCC_ClockConfig+0x25c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d001      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e105      	b.n	8004f24 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d010      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	4b81      	ldr	r3, [pc, #516]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d908      	bls.n	8004d46 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d34:	4b7e      	ldr	r3, [pc, #504]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	497b      	ldr	r1, [pc, #492]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d079      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d11e      	bne.n	8004d98 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d5a:	4b75      	ldr	r3, [pc, #468]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e0dc      	b.n	8004f24 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004d6a:	f000 fa09 	bl	8005180 <RCC_GetSysClockFreqFromPLLSource>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	4a70      	ldr	r2, [pc, #448]	; (8004f34 <HAL_RCC_ClockConfig+0x264>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d946      	bls.n	8004e04 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004d76:	4b6e      	ldr	r3, [pc, #440]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d140      	bne.n	8004e04 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d82:	4b6b      	ldr	r3, [pc, #428]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d8a:	4a69      	ldr	r2, [pc, #420]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d92:	2380      	movs	r3, #128	; 0x80
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	e035      	b.n	8004e04 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d107      	bne.n	8004db0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004da0:	4b63      	ldr	r3, [pc, #396]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d115      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0b9      	b.n	8004f24 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d107      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004db8:	4b5d      	ldr	r3, [pc, #372]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d109      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0ad      	b.n	8004f24 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dc8:	4b59      	ldr	r3, [pc, #356]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0a5      	b.n	8004f24 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004dd8:	f000 f8b4 	bl	8004f44 <HAL_RCC_GetSysClockFreq>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	4a55      	ldr	r2, [pc, #340]	; (8004f34 <HAL_RCC_ClockConfig+0x264>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d90f      	bls.n	8004e04 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004de4:	4b52      	ldr	r3, [pc, #328]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d109      	bne.n	8004e04 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004df0:	4b4f      	ldr	r3, [pc, #316]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004df8:	4a4d      	ldr	r2, [pc, #308]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dfe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e00:	2380      	movs	r3, #128	; 0x80
 8004e02:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e04:	4b4a      	ldr	r3, [pc, #296]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f023 0203 	bic.w	r2, r3, #3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	4947      	ldr	r1, [pc, #284]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e16:	f7fc fe3f 	bl	8001a98 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e1c:	e00a      	b.n	8004e34 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e1e:	f7fc fe3b 	bl	8001a98 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e077      	b.n	8004f24 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e34:	4b3e      	ldr	r3, [pc, #248]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 020c 	and.w	r2, r3, #12
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d1eb      	bne.n	8004e1e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	2b80      	cmp	r3, #128	; 0x80
 8004e4a:	d105      	bne.n	8004e58 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e4c:	4b38      	ldr	r3, [pc, #224]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	4a37      	ldr	r2, [pc, #220]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004e52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e56:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d010      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d208      	bcs.n	8004e86 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e74:	4b2e      	ldr	r3, [pc, #184]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	492b      	ldr	r1, [pc, #172]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e86:	4b29      	ldr	r3, [pc, #164]	; (8004f2c <HAL_RCC_ClockConfig+0x25c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 030f 	and.w	r3, r3, #15
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d210      	bcs.n	8004eb6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e94:	4b25      	ldr	r3, [pc, #148]	; (8004f2c <HAL_RCC_ClockConfig+0x25c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f023 020f 	bic.w	r2, r3, #15
 8004e9c:	4923      	ldr	r1, [pc, #140]	; (8004f2c <HAL_RCC_ClockConfig+0x25c>)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea4:	4b21      	ldr	r3, [pc, #132]	; (8004f2c <HAL_RCC_ClockConfig+0x25c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 030f 	and.w	r3, r3, #15
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d001      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e036      	b.n	8004f24 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0304 	and.w	r3, r3, #4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d008      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ec2:	4b1b      	ldr	r3, [pc, #108]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	4918      	ldr	r1, [pc, #96]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d009      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ee0:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	4910      	ldr	r1, [pc, #64]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ef4:	f000 f826 	bl	8004f44 <HAL_RCC_GetSysClockFreq>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <HAL_RCC_ClockConfig+0x260>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	091b      	lsrs	r3, r3, #4
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	490c      	ldr	r1, [pc, #48]	; (8004f38 <HAL_RCC_ClockConfig+0x268>)
 8004f06:	5ccb      	ldrb	r3, [r1, r3]
 8004f08:	f003 031f 	and.w	r3, r3, #31
 8004f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f10:	4a0a      	ldr	r2, [pc, #40]	; (8004f3c <HAL_RCC_ClockConfig+0x26c>)
 8004f12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f14:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <HAL_RCC_ClockConfig+0x270>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fc fd6d 	bl	80019f8 <HAL_InitTick>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	73fb      	strb	r3, [r7, #15]

  return status;
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40022000 	.word	0x40022000
 8004f30:	40021000 	.word	0x40021000
 8004f34:	04c4b400 	.word	0x04c4b400
 8004f38:	0800b14c 	.word	0x0800b14c
 8004f3c:	200000cc 	.word	0x200000cc
 8004f40:	200000c4 	.word	0x200000c4

08004f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b089      	sub	sp, #36	; 0x24
 8004f48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f52:	4b3e      	ldr	r3, [pc, #248]	; (800504c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
 8004f5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f5c:	4b3b      	ldr	r3, [pc, #236]	; (800504c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f003 0303 	and.w	r3, r3, #3
 8004f64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <HAL_RCC_GetSysClockFreq+0x34>
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	2b0c      	cmp	r3, #12
 8004f70:	d121      	bne.n	8004fb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d11e      	bne.n	8004fb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f78:	4b34      	ldr	r3, [pc, #208]	; (800504c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d107      	bne.n	8004f94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f84:	4b31      	ldr	r3, [pc, #196]	; (800504c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f8a:	0a1b      	lsrs	r3, r3, #8
 8004f8c:	f003 030f 	and.w	r3, r3, #15
 8004f90:	61fb      	str	r3, [r7, #28]
 8004f92:	e005      	b.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f94:	4b2d      	ldr	r3, [pc, #180]	; (800504c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	091b      	lsrs	r3, r3, #4
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004fa0:	4a2b      	ldr	r2, [pc, #172]	; (8005050 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10d      	bne.n	8004fcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fb4:	e00a      	b.n	8004fcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d102      	bne.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fbc:	4b25      	ldr	r3, [pc, #148]	; (8005054 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fbe:	61bb      	str	r3, [r7, #24]
 8004fc0:	e004      	b.n	8004fcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d101      	bne.n	8004fcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fc8:	4b23      	ldr	r3, [pc, #140]	; (8005058 <HAL_RCC_GetSysClockFreq+0x114>)
 8004fca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b0c      	cmp	r3, #12
 8004fd0:	d134      	bne.n	800503c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fd2:	4b1e      	ldr	r3, [pc, #120]	; (800504c <HAL_RCC_GetSysClockFreq+0x108>)
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d003      	beq.n	8004fea <HAL_RCC_GetSysClockFreq+0xa6>
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	d003      	beq.n	8004ff0 <HAL_RCC_GetSysClockFreq+0xac>
 8004fe8:	e005      	b.n	8004ff6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004fea:	4b1a      	ldr	r3, [pc, #104]	; (8005054 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fec:	617b      	str	r3, [r7, #20]
      break;
 8004fee:	e005      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ff0:	4b19      	ldr	r3, [pc, #100]	; (8005058 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ff2:	617b      	str	r3, [r7, #20]
      break;
 8004ff4:	e002      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	617b      	str	r3, [r7, #20]
      break;
 8004ffa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ffc:	4b13      	ldr	r3, [pc, #76]	; (800504c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	091b      	lsrs	r3, r3, #4
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	3301      	adds	r3, #1
 8005008:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800500a:	4b10      	ldr	r3, [pc, #64]	; (800504c <HAL_RCC_GetSysClockFreq+0x108>)
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	0a1b      	lsrs	r3, r3, #8
 8005010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	fb03 f202 	mul.w	r2, r3, r2
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005020:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005022:	4b0a      	ldr	r3, [pc, #40]	; (800504c <HAL_RCC_GetSysClockFreq+0x108>)
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	0e5b      	lsrs	r3, r3, #25
 8005028:	f003 0303 	and.w	r3, r3, #3
 800502c:	3301      	adds	r3, #1
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	fbb2 f3f3 	udiv	r3, r2, r3
 800503a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800503c:	69bb      	ldr	r3, [r7, #24]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3724      	adds	r7, #36	; 0x24
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40021000 	.word	0x40021000
 8005050:	0800b164 	.word	0x0800b164
 8005054:	00f42400 	.word	0x00f42400
 8005058:	007a1200 	.word	0x007a1200

0800505c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005060:	4b03      	ldr	r3, [pc, #12]	; (8005070 <HAL_RCC_GetHCLKFreq+0x14>)
 8005062:	681b      	ldr	r3, [r3, #0]
}
 8005064:	4618      	mov	r0, r3
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	200000cc 	.word	0x200000cc

08005074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005078:	f7ff fff0 	bl	800505c <HAL_RCC_GetHCLKFreq>
 800507c:	4602      	mov	r2, r0
 800507e:	4b06      	ldr	r3, [pc, #24]	; (8005098 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	0a1b      	lsrs	r3, r3, #8
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	4904      	ldr	r1, [pc, #16]	; (800509c <HAL_RCC_GetPCLK1Freq+0x28>)
 800508a:	5ccb      	ldrb	r3, [r1, r3]
 800508c:	f003 031f 	and.w	r3, r3, #31
 8005090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005094:	4618      	mov	r0, r3
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40021000 	.word	0x40021000
 800509c:	0800b15c 	.word	0x0800b15c

080050a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80050a4:	f7ff ffda 	bl	800505c <HAL_RCC_GetHCLKFreq>
 80050a8:	4602      	mov	r2, r0
 80050aa:	4b06      	ldr	r3, [pc, #24]	; (80050c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	0adb      	lsrs	r3, r3, #11
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	4904      	ldr	r1, [pc, #16]	; (80050c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80050b6:	5ccb      	ldrb	r3, [r1, r3]
 80050b8:	f003 031f 	and.w	r3, r3, #31
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40021000 	.word	0x40021000
 80050c8:	0800b15c 	.word	0x0800b15c

080050cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80050d4:	2300      	movs	r3, #0
 80050d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050d8:	4b27      	ldr	r3, [pc, #156]	; (8005178 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050e4:	f7ff f916 	bl	8004314 <HAL_PWREx_GetVoltageRange>
 80050e8:	6178      	str	r0, [r7, #20]
 80050ea:	e014      	b.n	8005116 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050ec:	4b22      	ldr	r3, [pc, #136]	; (8005178 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f0:	4a21      	ldr	r2, [pc, #132]	; (8005178 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f6:	6593      	str	r3, [r2, #88]	; 0x58
 80050f8:	4b1f      	ldr	r3, [pc, #124]	; (8005178 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005104:	f7ff f906 	bl	8004314 <HAL_PWREx_GetVoltageRange>
 8005108:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800510a:	4b1b      	ldr	r3, [pc, #108]	; (8005178 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800510c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510e:	4a1a      	ldr	r2, [pc, #104]	; (8005178 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005114:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800511c:	d10b      	bne.n	8005136 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b80      	cmp	r3, #128	; 0x80
 8005122:	d913      	bls.n	800514c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2ba0      	cmp	r3, #160	; 0xa0
 8005128:	d902      	bls.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800512a:	2302      	movs	r3, #2
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	e00d      	b.n	800514c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005130:	2301      	movs	r3, #1
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	e00a      	b.n	800514c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b7f      	cmp	r3, #127	; 0x7f
 800513a:	d902      	bls.n	8005142 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800513c:	2302      	movs	r3, #2
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	e004      	b.n	800514c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b70      	cmp	r3, #112	; 0x70
 8005146:	d101      	bne.n	800514c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005148:	2301      	movs	r3, #1
 800514a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800514c:	4b0b      	ldr	r3, [pc, #44]	; (800517c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f023 020f 	bic.w	r2, r3, #15
 8005154:	4909      	ldr	r1, [pc, #36]	; (800517c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800515c:	4b07      	ldr	r3, [pc, #28]	; (800517c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 030f 	and.w	r3, r3, #15
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	429a      	cmp	r2, r3
 8005168:	d001      	beq.n	800516e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40021000 	.word	0x40021000
 800517c:	40022000 	.word	0x40022000

08005180 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005186:	4b2d      	ldr	r3, [pc, #180]	; (800523c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b03      	cmp	r3, #3
 8005194:	d00b      	beq.n	80051ae <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b03      	cmp	r3, #3
 800519a:	d825      	bhi.n	80051e8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d008      	beq.n	80051b4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d11f      	bne.n	80051e8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80051a8:	4b25      	ldr	r3, [pc, #148]	; (8005240 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80051aa:	613b      	str	r3, [r7, #16]
    break;
 80051ac:	e01f      	b.n	80051ee <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80051ae:	4b25      	ldr	r3, [pc, #148]	; (8005244 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80051b0:	613b      	str	r3, [r7, #16]
    break;
 80051b2:	e01c      	b.n	80051ee <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051b4:	4b21      	ldr	r3, [pc, #132]	; (800523c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0308 	and.w	r3, r3, #8
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d107      	bne.n	80051d0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051c0:	4b1e      	ldr	r3, [pc, #120]	; (800523c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80051c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051c6:	0a1b      	lsrs	r3, r3, #8
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	e005      	b.n	80051dc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051d0:	4b1a      	ldr	r3, [pc, #104]	; (800523c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	091b      	lsrs	r3, r3, #4
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80051dc:	4a1a      	ldr	r2, [pc, #104]	; (8005248 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e4:	613b      	str	r3, [r7, #16]
    break;
 80051e6:	e002      	b.n	80051ee <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	613b      	str	r3, [r7, #16]
    break;
 80051ec:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051ee:	4b13      	ldr	r3, [pc, #76]	; (800523c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	091b      	lsrs	r3, r3, #4
 80051f4:	f003 030f 	and.w	r3, r3, #15
 80051f8:	3301      	adds	r3, #1
 80051fa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051fc:	4b0f      	ldr	r3, [pc, #60]	; (800523c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	0a1b      	lsrs	r3, r3, #8
 8005202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	fb03 f202 	mul.w	r2, r3, r2
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005212:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005214:	4b09      	ldr	r3, [pc, #36]	; (800523c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	0e5b      	lsrs	r3, r3, #25
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	3301      	adds	r3, #1
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	fbb2 f3f3 	udiv	r3, r2, r3
 800522c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800522e:	683b      	ldr	r3, [r7, #0]
}
 8005230:	4618      	mov	r0, r3
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	40021000 	.word	0x40021000
 8005240:	00f42400 	.word	0x00f42400
 8005244:	007a1200 	.word	0x007a1200
 8005248:	0800b164 	.word	0x0800b164

0800524c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005254:	2300      	movs	r3, #0
 8005256:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005258:	2300      	movs	r3, #0
 800525a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005264:	2b00      	cmp	r3, #0
 8005266:	d040      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800526c:	2b80      	cmp	r3, #128	; 0x80
 800526e:	d02a      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005270:	2b80      	cmp	r3, #128	; 0x80
 8005272:	d825      	bhi.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005274:	2b60      	cmp	r3, #96	; 0x60
 8005276:	d026      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005278:	2b60      	cmp	r3, #96	; 0x60
 800527a:	d821      	bhi.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800527c:	2b40      	cmp	r3, #64	; 0x40
 800527e:	d006      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005280:	2b40      	cmp	r3, #64	; 0x40
 8005282:	d81d      	bhi.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005288:	2b20      	cmp	r3, #32
 800528a:	d010      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x62>
 800528c:	e018      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800528e:	4b89      	ldr	r3, [pc, #548]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	4a88      	ldr	r2, [pc, #544]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005298:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800529a:	e015      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3304      	adds	r3, #4
 80052a0:	2100      	movs	r1, #0
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 fb02 	bl	80058ac <RCCEx_PLLSAI1_Config>
 80052a8:	4603      	mov	r3, r0
 80052aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052ac:	e00c      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3320      	adds	r3, #32
 80052b2:	2100      	movs	r1, #0
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 fbed 	bl	8005a94 <RCCEx_PLLSAI2_Config>
 80052ba:	4603      	mov	r3, r0
 80052bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052be:	e003      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	74fb      	strb	r3, [r7, #19]
      break;
 80052c4:	e000      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80052c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052c8:	7cfb      	ldrb	r3, [r7, #19]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052ce:	4b79      	ldr	r3, [pc, #484]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052d4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052dc:	4975      	ldr	r1, [pc, #468]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80052e4:	e001      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e6:	7cfb      	ldrb	r3, [r7, #19]
 80052e8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d047      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052fe:	d030      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005304:	d82a      	bhi.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800530a:	d02a      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800530c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005310:	d824      	bhi.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005316:	d008      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800531c:	d81e      	bhi.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005326:	d010      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005328:	e018      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800532a:	4b62      	ldr	r3, [pc, #392]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	4a61      	ldr	r2, [pc, #388]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005334:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005336:	e015      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3304      	adds	r3, #4
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fab4 	bl	80058ac <RCCEx_PLLSAI1_Config>
 8005344:	4603      	mov	r3, r0
 8005346:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005348:	e00c      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3320      	adds	r3, #32
 800534e:	2100      	movs	r1, #0
 8005350:	4618      	mov	r0, r3
 8005352:	f000 fb9f 	bl	8005a94 <RCCEx_PLLSAI2_Config>
 8005356:	4603      	mov	r3, r0
 8005358:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800535a:	e003      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	74fb      	strb	r3, [r7, #19]
      break;
 8005360:	e000      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005362:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005364:	7cfb      	ldrb	r3, [r7, #19]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10b      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800536a:	4b52      	ldr	r3, [pc, #328]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800536c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005370:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005378:	494e      	ldr	r1, [pc, #312]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005380:	e001      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005382:	7cfb      	ldrb	r3, [r7, #19]
 8005384:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 809f 	beq.w	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005394:	2300      	movs	r3, #0
 8005396:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005398:	4b46      	ldr	r3, [pc, #280]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800539a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80053a8:	2300      	movs	r3, #0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00d      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ae:	4b41      	ldr	r3, [pc, #260]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b2:	4a40      	ldr	r2, [pc, #256]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b8:	6593      	str	r3, [r2, #88]	; 0x58
 80053ba:	4b3e      	ldr	r3, [pc, #248]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c2:	60bb      	str	r3, [r7, #8]
 80053c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053c6:	2301      	movs	r3, #1
 80053c8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053ca:	4b3b      	ldr	r3, [pc, #236]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a3a      	ldr	r2, [pc, #232]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80053d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053d6:	f7fc fb5f 	bl	8001a98 <HAL_GetTick>
 80053da:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053dc:	e009      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053de:	f7fc fb5b 	bl	8001a98 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d902      	bls.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	74fb      	strb	r3, [r7, #19]
        break;
 80053f0:	e005      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053f2:	4b31      	ldr	r3, [pc, #196]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0ef      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80053fe:	7cfb      	ldrb	r3, [r7, #19]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d15b      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005404:	4b2b      	ldr	r3, [pc, #172]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d01f      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	429a      	cmp	r2, r3
 8005420:	d019      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005422:	4b24      	ldr	r3, [pc, #144]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800542c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800542e:	4b21      	ldr	r3, [pc, #132]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005434:	4a1f      	ldr	r2, [pc, #124]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800543a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800543e:	4b1d      	ldr	r3, [pc, #116]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005444:	4a1b      	ldr	r2, [pc, #108]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800544a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800544e:	4a19      	ldr	r2, [pc, #100]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	d016      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005460:	f7fc fb1a 	bl	8001a98 <HAL_GetTick>
 8005464:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005466:	e00b      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005468:	f7fc fb16 	bl	8001a98 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	f241 3288 	movw	r2, #5000	; 0x1388
 8005476:	4293      	cmp	r3, r2
 8005478:	d902      	bls.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	74fb      	strb	r3, [r7, #19]
            break;
 800547e:	e006      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005480:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0ec      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800548e:	7cfb      	ldrb	r3, [r7, #19]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10c      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005494:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a4:	4903      	ldr	r1, [pc, #12]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80054ac:	e008      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054ae:	7cfb      	ldrb	r3, [r7, #19]
 80054b0:	74bb      	strb	r3, [r7, #18]
 80054b2:	e005      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80054b4:	40021000 	.word	0x40021000
 80054b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054bc:	7cfb      	ldrb	r3, [r7, #19]
 80054be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054c0:	7c7b      	ldrb	r3, [r7, #17]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d105      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054c6:	4ba0      	ldr	r3, [pc, #640]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ca:	4a9f      	ldr	r2, [pc, #636]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054de:	4b9a      	ldr	r3, [pc, #616]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e4:	f023 0203 	bic.w	r2, r3, #3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ec:	4996      	ldr	r1, [pc, #600]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005500:	4b91      	ldr	r3, [pc, #580]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005506:	f023 020c 	bic.w	r2, r3, #12
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	498e      	ldr	r1, [pc, #568]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005522:	4b89      	ldr	r3, [pc, #548]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005528:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005530:	4985      	ldr	r1, [pc, #532]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005544:	4b80      	ldr	r3, [pc, #512]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005552:	497d      	ldr	r1, [pc, #500]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005554:	4313      	orrs	r3, r2
 8005556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0310 	and.w	r3, r3, #16
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005566:	4b78      	ldr	r3, [pc, #480]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005574:	4974      	ldr	r1, [pc, #464]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0320 	and.w	r3, r3, #32
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00a      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005588:	4b6f      	ldr	r3, [pc, #444]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005596:	496c      	ldr	r1, [pc, #432]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005598:	4313      	orrs	r3, r2
 800559a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055aa:	4b67      	ldr	r3, [pc, #412]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055b8:	4963      	ldr	r1, [pc, #396]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055cc:	4b5e      	ldr	r3, [pc, #376]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055da:	495b      	ldr	r1, [pc, #364]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00a      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055ee:	4b56      	ldr	r3, [pc, #344]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fc:	4952      	ldr	r1, [pc, #328]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00a      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005610:	4b4d      	ldr	r3, [pc, #308]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005616:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561e:	494a      	ldr	r1, [pc, #296]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005632:	4b45      	ldr	r3, [pc, #276]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005638:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005640:	4941      	ldr	r1, [pc, #260]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005642:	4313      	orrs	r3, r2
 8005644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005654:	4b3c      	ldr	r3, [pc, #240]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005656:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800565a:	f023 0203 	bic.w	r2, r3, #3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005662:	4939      	ldr	r1, [pc, #228]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005664:	4313      	orrs	r3, r2
 8005666:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d028      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005676:	4b34      	ldr	r3, [pc, #208]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005684:	4930      	ldr	r1, [pc, #192]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005694:	d106      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005696:	4b2c      	ldr	r3, [pc, #176]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	4a2b      	ldr	r2, [pc, #172]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800569c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056a0:	60d3      	str	r3, [r2, #12]
 80056a2:	e011      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056ac:	d10c      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	3304      	adds	r3, #4
 80056b2:	2101      	movs	r1, #1
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 f8f9 	bl	80058ac <RCCEx_PLLSAI1_Config>
 80056ba:	4603      	mov	r3, r0
 80056bc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80056be:	7cfb      	ldrb	r3, [r7, #19]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80056c4:	7cfb      	ldrb	r3, [r7, #19]
 80056c6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d04d      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056dc:	d108      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80056de:	4b1a      	ldr	r3, [pc, #104]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056e4:	4a18      	ldr	r2, [pc, #96]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056ea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80056ee:	e012      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80056f0:	4b15      	ldr	r3, [pc, #84]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056f6:	4a14      	ldr	r2, [pc, #80]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056fc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005700:	4b11      	ldr	r3, [pc, #68]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005706:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800570e:	490e      	ldr	r1, [pc, #56]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800571a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800571e:	d106      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005720:	4b09      	ldr	r3, [pc, #36]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	4a08      	ldr	r2, [pc, #32]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800572a:	60d3      	str	r3, [r2, #12]
 800572c:	e020      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005732:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005736:	d109      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005738:	4b03      	ldr	r3, [pc, #12]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	4a02      	ldr	r2, [pc, #8]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800573e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005742:	60d3      	str	r3, [r2, #12]
 8005744:	e014      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005746:	bf00      	nop
 8005748:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005750:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005754:	d10c      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	3304      	adds	r3, #4
 800575a:	2101      	movs	r1, #1
 800575c:	4618      	mov	r0, r3
 800575e:	f000 f8a5 	bl	80058ac <RCCEx_PLLSAI1_Config>
 8005762:	4603      	mov	r3, r0
 8005764:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005766:	7cfb      	ldrb	r3, [r7, #19]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800576c:	7cfb      	ldrb	r3, [r7, #19]
 800576e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d028      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800577c:	4b4a      	ldr	r3, [pc, #296]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800577e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005782:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800578a:	4947      	ldr	r1, [pc, #284]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800578c:	4313      	orrs	r3, r2
 800578e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005796:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800579a:	d106      	bne.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800579c:	4b42      	ldr	r3, [pc, #264]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	4a41      	ldr	r2, [pc, #260]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057a6:	60d3      	str	r3, [r2, #12]
 80057a8:	e011      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057b2:	d10c      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3304      	adds	r3, #4
 80057b8:	2101      	movs	r1, #1
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 f876 	bl	80058ac <RCCEx_PLLSAI1_Config>
 80057c0:	4603      	mov	r3, r0
 80057c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057c4:	7cfb      	ldrb	r3, [r7, #19]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80057ca:	7cfb      	ldrb	r3, [r7, #19]
 80057cc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d01e      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057da:	4b33      	ldr	r3, [pc, #204]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ea:	492f      	ldr	r1, [pc, #188]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057fc:	d10c      	bne.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3304      	adds	r3, #4
 8005802:	2102      	movs	r1, #2
 8005804:	4618      	mov	r0, r3
 8005806:	f000 f851 	bl	80058ac <RCCEx_PLLSAI1_Config>
 800580a:	4603      	mov	r3, r0
 800580c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800580e:	7cfb      	ldrb	r3, [r7, #19]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005814:	7cfb      	ldrb	r3, [r7, #19]
 8005816:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00b      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005824:	4b20      	ldr	r3, [pc, #128]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005826:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800582a:	f023 0204 	bic.w	r2, r3, #4
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005834:	491c      	ldr	r1, [pc, #112]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00b      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005848:	4b17      	ldr	r3, [pc, #92]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800584a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800584e:	f023 0218 	bic.w	r2, r3, #24
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005858:	4913      	ldr	r1, [pc, #76]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800585a:	4313      	orrs	r3, r2
 800585c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d017      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800586c:	4b0e      	ldr	r3, [pc, #56]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800586e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005872:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800587c:	490a      	ldr	r1, [pc, #40]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800588a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800588e:	d105      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	4a04      	ldr	r2, [pc, #16]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800589a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800589c:	7cbb      	ldrb	r3, [r7, #18]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40021000 	.word	0x40021000

080058ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058ba:	4b72      	ldr	r3, [pc, #456]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00e      	beq.n	80058e4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058c6:	4b6f      	ldr	r3, [pc, #444]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f003 0203 	and.w	r2, r3, #3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d103      	bne.n	80058de <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
       ||
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d142      	bne.n	8005964 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	73fb      	strb	r3, [r7, #15]
 80058e2:	e03f      	b.n	8005964 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d018      	beq.n	800591e <RCCEx_PLLSAI1_Config+0x72>
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	d825      	bhi.n	800593c <RCCEx_PLLSAI1_Config+0x90>
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d002      	beq.n	80058fa <RCCEx_PLLSAI1_Config+0x4e>
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d009      	beq.n	800590c <RCCEx_PLLSAI1_Config+0x60>
 80058f8:	e020      	b.n	800593c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058fa:	4b62      	ldr	r3, [pc, #392]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d11d      	bne.n	8005942 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800590a:	e01a      	b.n	8005942 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800590c:	4b5d      	ldr	r3, [pc, #372]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005914:	2b00      	cmp	r3, #0
 8005916:	d116      	bne.n	8005946 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800591c:	e013      	b.n	8005946 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800591e:	4b59      	ldr	r3, [pc, #356]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10f      	bne.n	800594a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800592a:	4b56      	ldr	r3, [pc, #344]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d109      	bne.n	800594a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800593a:	e006      	b.n	800594a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	73fb      	strb	r3, [r7, #15]
      break;
 8005940:	e004      	b.n	800594c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005942:	bf00      	nop
 8005944:	e002      	b.n	800594c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005946:	bf00      	nop
 8005948:	e000      	b.n	800594c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800594a:	bf00      	nop
    }

    if(status == HAL_OK)
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d108      	bne.n	8005964 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005952:	4b4c      	ldr	r3, [pc, #304]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f023 0203 	bic.w	r2, r3, #3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4949      	ldr	r1, [pc, #292]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005960:	4313      	orrs	r3, r2
 8005962:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	2b00      	cmp	r3, #0
 8005968:	f040 8086 	bne.w	8005a78 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800596c:	4b45      	ldr	r3, [pc, #276]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a44      	ldr	r2, [pc, #272]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005972:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005978:	f7fc f88e 	bl	8001a98 <HAL_GetTick>
 800597c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800597e:	e009      	b.n	8005994 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005980:	f7fc f88a 	bl	8001a98 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d902      	bls.n	8005994 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	73fb      	strb	r3, [r7, #15]
        break;
 8005992:	e005      	b.n	80059a0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005994:	4b3b      	ldr	r3, [pc, #236]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1ef      	bne.n	8005980 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d168      	bne.n	8005a78 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d113      	bne.n	80059d4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059ac:	4b35      	ldr	r3, [pc, #212]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	4b35      	ldr	r3, [pc, #212]	; (8005a88 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6892      	ldr	r2, [r2, #8]
 80059b8:	0211      	lsls	r1, r2, #8
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	68d2      	ldr	r2, [r2, #12]
 80059be:	06d2      	lsls	r2, r2, #27
 80059c0:	4311      	orrs	r1, r2
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	6852      	ldr	r2, [r2, #4]
 80059c6:	3a01      	subs	r2, #1
 80059c8:	0112      	lsls	r2, r2, #4
 80059ca:	430a      	orrs	r2, r1
 80059cc:	492d      	ldr	r1, [pc, #180]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	610b      	str	r3, [r1, #16]
 80059d2:	e02d      	b.n	8005a30 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d115      	bne.n	8005a06 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059da:	4b2a      	ldr	r3, [pc, #168]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	4b2b      	ldr	r3, [pc, #172]	; (8005a8c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6892      	ldr	r2, [r2, #8]
 80059e6:	0211      	lsls	r1, r2, #8
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6912      	ldr	r2, [r2, #16]
 80059ec:	0852      	lsrs	r2, r2, #1
 80059ee:	3a01      	subs	r2, #1
 80059f0:	0552      	lsls	r2, r2, #21
 80059f2:	4311      	orrs	r1, r2
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6852      	ldr	r2, [r2, #4]
 80059f8:	3a01      	subs	r2, #1
 80059fa:	0112      	lsls	r2, r2, #4
 80059fc:	430a      	orrs	r2, r1
 80059fe:	4921      	ldr	r1, [pc, #132]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	610b      	str	r3, [r1, #16]
 8005a04:	e014      	b.n	8005a30 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a06:	4b1f      	ldr	r3, [pc, #124]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a08:	691a      	ldr	r2, [r3, #16]
 8005a0a:	4b21      	ldr	r3, [pc, #132]	; (8005a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6892      	ldr	r2, [r2, #8]
 8005a12:	0211      	lsls	r1, r2, #8
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6952      	ldr	r2, [r2, #20]
 8005a18:	0852      	lsrs	r2, r2, #1
 8005a1a:	3a01      	subs	r2, #1
 8005a1c:	0652      	lsls	r2, r2, #25
 8005a1e:	4311      	orrs	r1, r2
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6852      	ldr	r2, [r2, #4]
 8005a24:	3a01      	subs	r2, #1
 8005a26:	0112      	lsls	r2, r2, #4
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	4916      	ldr	r1, [pc, #88]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a30:	4b14      	ldr	r3, [pc, #80]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a13      	ldr	r2, [pc, #76]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a3c:	f7fc f82c 	bl	8001a98 <HAL_GetTick>
 8005a40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a42:	e009      	b.n	8005a58 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a44:	f7fc f828 	bl	8001a98 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d902      	bls.n	8005a58 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	73fb      	strb	r3, [r7, #15]
          break;
 8005a56:	e005      	b.n	8005a64 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a58:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0ef      	beq.n	8005a44 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a6a:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a6c:	691a      	ldr	r2, [r3, #16]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	4904      	ldr	r1, [pc, #16]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	40021000 	.word	0x40021000
 8005a88:	07ff800f 	.word	0x07ff800f
 8005a8c:	ff9f800f 	.word	0xff9f800f
 8005a90:	f9ff800f 	.word	0xf9ff800f

08005a94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005aa2:	4b72      	ldr	r3, [pc, #456]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00e      	beq.n	8005acc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005aae:	4b6f      	ldr	r3, [pc, #444]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f003 0203 	and.w	r2, r3, #3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d103      	bne.n	8005ac6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
       ||
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d142      	bne.n	8005b4c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	73fb      	strb	r3, [r7, #15]
 8005aca:	e03f      	b.n	8005b4c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d018      	beq.n	8005b06 <RCCEx_PLLSAI2_Config+0x72>
 8005ad4:	2b03      	cmp	r3, #3
 8005ad6:	d825      	bhi.n	8005b24 <RCCEx_PLLSAI2_Config+0x90>
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d002      	beq.n	8005ae2 <RCCEx_PLLSAI2_Config+0x4e>
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d009      	beq.n	8005af4 <RCCEx_PLLSAI2_Config+0x60>
 8005ae0:	e020      	b.n	8005b24 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ae2:	4b62      	ldr	r3, [pc, #392]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d11d      	bne.n	8005b2a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005af2:	e01a      	b.n	8005b2a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005af4:	4b5d      	ldr	r3, [pc, #372]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d116      	bne.n	8005b2e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b04:	e013      	b.n	8005b2e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b06:	4b59      	ldr	r3, [pc, #356]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10f      	bne.n	8005b32 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b12:	4b56      	ldr	r3, [pc, #344]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d109      	bne.n	8005b32 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b22:	e006      	b.n	8005b32 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	73fb      	strb	r3, [r7, #15]
      break;
 8005b28:	e004      	b.n	8005b34 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005b2a:	bf00      	nop
 8005b2c:	e002      	b.n	8005b34 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005b2e:	bf00      	nop
 8005b30:	e000      	b.n	8005b34 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005b32:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d108      	bne.n	8005b4c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005b3a:	4b4c      	ldr	r3, [pc, #304]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f023 0203 	bic.w	r2, r3, #3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4949      	ldr	r1, [pc, #292]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f040 8086 	bne.w	8005c60 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b54:	4b45      	ldr	r3, [pc, #276]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a44      	ldr	r2, [pc, #272]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b60:	f7fb ff9a 	bl	8001a98 <HAL_GetTick>
 8005b64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b66:	e009      	b.n	8005b7c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b68:	f7fb ff96 	bl	8001a98 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d902      	bls.n	8005b7c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	73fb      	strb	r3, [r7, #15]
        break;
 8005b7a:	e005      	b.n	8005b88 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b7c:	4b3b      	ldr	r3, [pc, #236]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1ef      	bne.n	8005b68 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d168      	bne.n	8005c60 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d113      	bne.n	8005bbc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b94:	4b35      	ldr	r3, [pc, #212]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b96:	695a      	ldr	r2, [r3, #20]
 8005b98:	4b35      	ldr	r3, [pc, #212]	; (8005c70 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6892      	ldr	r2, [r2, #8]
 8005ba0:	0211      	lsls	r1, r2, #8
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	68d2      	ldr	r2, [r2, #12]
 8005ba6:	06d2      	lsls	r2, r2, #27
 8005ba8:	4311      	orrs	r1, r2
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6852      	ldr	r2, [r2, #4]
 8005bae:	3a01      	subs	r2, #1
 8005bb0:	0112      	lsls	r2, r2, #4
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	492d      	ldr	r1, [pc, #180]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	614b      	str	r3, [r1, #20]
 8005bba:	e02d      	b.n	8005c18 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d115      	bne.n	8005bee <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bc2:	4b2a      	ldr	r3, [pc, #168]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bc4:	695a      	ldr	r2, [r3, #20]
 8005bc6:	4b2b      	ldr	r3, [pc, #172]	; (8005c74 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6892      	ldr	r2, [r2, #8]
 8005bce:	0211      	lsls	r1, r2, #8
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6912      	ldr	r2, [r2, #16]
 8005bd4:	0852      	lsrs	r2, r2, #1
 8005bd6:	3a01      	subs	r2, #1
 8005bd8:	0552      	lsls	r2, r2, #21
 8005bda:	4311      	orrs	r1, r2
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6852      	ldr	r2, [r2, #4]
 8005be0:	3a01      	subs	r2, #1
 8005be2:	0112      	lsls	r2, r2, #4
 8005be4:	430a      	orrs	r2, r1
 8005be6:	4921      	ldr	r1, [pc, #132]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	614b      	str	r3, [r1, #20]
 8005bec:	e014      	b.n	8005c18 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bee:	4b1f      	ldr	r3, [pc, #124]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bf0:	695a      	ldr	r2, [r3, #20]
 8005bf2:	4b21      	ldr	r3, [pc, #132]	; (8005c78 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6892      	ldr	r2, [r2, #8]
 8005bfa:	0211      	lsls	r1, r2, #8
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6952      	ldr	r2, [r2, #20]
 8005c00:	0852      	lsrs	r2, r2, #1
 8005c02:	3a01      	subs	r2, #1
 8005c04:	0652      	lsls	r2, r2, #25
 8005c06:	4311      	orrs	r1, r2
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6852      	ldr	r2, [r2, #4]
 8005c0c:	3a01      	subs	r2, #1
 8005c0e:	0112      	lsls	r2, r2, #4
 8005c10:	430a      	orrs	r2, r1
 8005c12:	4916      	ldr	r1, [pc, #88]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c18:	4b14      	ldr	r3, [pc, #80]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a13      	ldr	r2, [pc, #76]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c24:	f7fb ff38 	bl	8001a98 <HAL_GetTick>
 8005c28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c2a:	e009      	b.n	8005c40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c2c:	f7fb ff34 	bl	8001a98 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d902      	bls.n	8005c40 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	73fb      	strb	r3, [r7, #15]
          break;
 8005c3e:	e005      	b.n	8005c4c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c40:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0ef      	beq.n	8005c2c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d106      	bne.n	8005c60 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c52:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c54:	695a      	ldr	r2, [r3, #20]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	4904      	ldr	r1, [pc, #16]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	40021000 	.word	0x40021000
 8005c70:	07ff800f 	.word	0x07ff800f
 8005c74:	ff9f800f 	.word	0xff9f800f
 8005c78:	f9ff800f 	.word	0xf9ff800f

08005c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e049      	b.n	8005d22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d106      	bne.n	8005ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f002 fa2e 	bl	8008104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4610      	mov	r0, r2
 8005cbc:	f000 fa50 	bl	8006160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d122      	bne.n	8005d86 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d11b      	bne.n	8005d86 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f06f 0202 	mvn.w	r2, #2
 8005d56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	f003 0303 	and.w	r3, r3, #3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f9d8 	bl	8006122 <HAL_TIM_IC_CaptureCallback>
 8005d72:	e005      	b.n	8005d80 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f9ca 	bl	800610e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f9db 	bl	8006136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	d122      	bne.n	8005dda <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f003 0304 	and.w	r3, r3, #4
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d11b      	bne.n	8005dda <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f06f 0204 	mvn.w	r2, #4
 8005daa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f9ae 	bl	8006122 <HAL_TIM_IC_CaptureCallback>
 8005dc6:	e005      	b.n	8005dd4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f9a0 	bl	800610e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f9b1 	bl	8006136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	f003 0308 	and.w	r3, r3, #8
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d122      	bne.n	8005e2e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f003 0308 	and.w	r3, r3, #8
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	d11b      	bne.n	8005e2e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f06f 0208 	mvn.w	r2, #8
 8005dfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2204      	movs	r2, #4
 8005e04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	f003 0303 	and.w	r3, r3, #3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f984 	bl	8006122 <HAL_TIM_IC_CaptureCallback>
 8005e1a:	e005      	b.n	8005e28 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f976 	bl	800610e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f987 	bl	8006136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	f003 0310 	and.w	r3, r3, #16
 8005e38:	2b10      	cmp	r3, #16
 8005e3a:	d122      	bne.n	8005e82 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f003 0310 	and.w	r3, r3, #16
 8005e46:	2b10      	cmp	r3, #16
 8005e48:	d11b      	bne.n	8005e82 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f06f 0210 	mvn.w	r2, #16
 8005e52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2208      	movs	r2, #8
 8005e58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f95a 	bl	8006122 <HAL_TIM_IC_CaptureCallback>
 8005e6e:	e005      	b.n	8005e7c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f94c 	bl	800610e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f95d 	bl	8006136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d10e      	bne.n	8005eae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d107      	bne.n	8005eae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f06f 0201 	mvn.w	r2, #1
 8005ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f926 	bl	80060fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb8:	2b80      	cmp	r3, #128	; 0x80
 8005eba:	d10e      	bne.n	8005eda <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec6:	2b80      	cmp	r3, #128	; 0x80
 8005ec8:	d107      	bne.n	8005eda <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fb09 	bl	80064ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee8:	d10e      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef4:	2b80      	cmp	r3, #128	; 0x80
 8005ef6:	d107      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fafc 	bl	8006500 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f12:	2b40      	cmp	r3, #64	; 0x40
 8005f14:	d10e      	bne.n	8005f34 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f20:	2b40      	cmp	r3, #64	; 0x40
 8005f22:	d107      	bne.n	8005f34 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f90b 	bl	800614a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	d10e      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f003 0320 	and.w	r3, r3, #32
 8005f4c:	2b20      	cmp	r3, #32
 8005f4e:	d107      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f06f 0220 	mvn.w	r2, #32
 8005f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fabc 	bl	80064d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_TIM_ConfigClockSource+0x1c>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e0b6      	b.n	80060f2 <HAL_TIM_ConfigClockSource+0x18a>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc0:	d03e      	beq.n	8006040 <HAL_TIM_ConfigClockSource+0xd8>
 8005fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc6:	f200 8087 	bhi.w	80060d8 <HAL_TIM_ConfigClockSource+0x170>
 8005fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fce:	f000 8086 	beq.w	80060de <HAL_TIM_ConfigClockSource+0x176>
 8005fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd6:	d87f      	bhi.n	80060d8 <HAL_TIM_ConfigClockSource+0x170>
 8005fd8:	2b70      	cmp	r3, #112	; 0x70
 8005fda:	d01a      	beq.n	8006012 <HAL_TIM_ConfigClockSource+0xaa>
 8005fdc:	2b70      	cmp	r3, #112	; 0x70
 8005fde:	d87b      	bhi.n	80060d8 <HAL_TIM_ConfigClockSource+0x170>
 8005fe0:	2b60      	cmp	r3, #96	; 0x60
 8005fe2:	d050      	beq.n	8006086 <HAL_TIM_ConfigClockSource+0x11e>
 8005fe4:	2b60      	cmp	r3, #96	; 0x60
 8005fe6:	d877      	bhi.n	80060d8 <HAL_TIM_ConfigClockSource+0x170>
 8005fe8:	2b50      	cmp	r3, #80	; 0x50
 8005fea:	d03c      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0xfe>
 8005fec:	2b50      	cmp	r3, #80	; 0x50
 8005fee:	d873      	bhi.n	80060d8 <HAL_TIM_ConfigClockSource+0x170>
 8005ff0:	2b40      	cmp	r3, #64	; 0x40
 8005ff2:	d058      	beq.n	80060a6 <HAL_TIM_ConfigClockSource+0x13e>
 8005ff4:	2b40      	cmp	r3, #64	; 0x40
 8005ff6:	d86f      	bhi.n	80060d8 <HAL_TIM_ConfigClockSource+0x170>
 8005ff8:	2b30      	cmp	r3, #48	; 0x30
 8005ffa:	d064      	beq.n	80060c6 <HAL_TIM_ConfigClockSource+0x15e>
 8005ffc:	2b30      	cmp	r3, #48	; 0x30
 8005ffe:	d86b      	bhi.n	80060d8 <HAL_TIM_ConfigClockSource+0x170>
 8006000:	2b20      	cmp	r3, #32
 8006002:	d060      	beq.n	80060c6 <HAL_TIM_ConfigClockSource+0x15e>
 8006004:	2b20      	cmp	r3, #32
 8006006:	d867      	bhi.n	80060d8 <HAL_TIM_ConfigClockSource+0x170>
 8006008:	2b00      	cmp	r3, #0
 800600a:	d05c      	beq.n	80060c6 <HAL_TIM_ConfigClockSource+0x15e>
 800600c:	2b10      	cmp	r3, #16
 800600e:	d05a      	beq.n	80060c6 <HAL_TIM_ConfigClockSource+0x15e>
 8006010:	e062      	b.n	80060d8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6818      	ldr	r0, [r3, #0]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	6899      	ldr	r1, [r3, #8]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	f000 f9b1 	bl	8006388 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006034:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	609a      	str	r2, [r3, #8]
      break;
 800603e:	e04f      	b.n	80060e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6818      	ldr	r0, [r3, #0]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	6899      	ldr	r1, [r3, #8]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f000 f99a 	bl	8006388 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006062:	609a      	str	r2, [r3, #8]
      break;
 8006064:	e03c      	b.n	80060e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6818      	ldr	r0, [r3, #0]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	6859      	ldr	r1, [r3, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	461a      	mov	r2, r3
 8006074:	f000 f90e 	bl	8006294 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2150      	movs	r1, #80	; 0x50
 800607e:	4618      	mov	r0, r3
 8006080:	f000 f967 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 8006084:	e02c      	b.n	80060e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6818      	ldr	r0, [r3, #0]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	6859      	ldr	r1, [r3, #4]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	461a      	mov	r2, r3
 8006094:	f000 f92d 	bl	80062f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2160      	movs	r1, #96	; 0x60
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 f957 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 80060a4:	e01c      	b.n	80060e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	6859      	ldr	r1, [r3, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	461a      	mov	r2, r3
 80060b4:	f000 f8ee 	bl	8006294 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2140      	movs	r1, #64	; 0x40
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 f947 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 80060c4:	e00c      	b.n	80060e0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4619      	mov	r1, r3
 80060d0:	4610      	mov	r0, r2
 80060d2:	f000 f93e 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 80060d6:	e003      	b.n	80060e0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	73fb      	strb	r3, [r7, #15]
      break;
 80060dc:	e000      	b.n	80060e0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80060de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006116:	bf00      	nop
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800612a:	bf00      	nop
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
	...

08006160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a40      	ldr	r2, [pc, #256]	; (8006274 <TIM_Base_SetConfig+0x114>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d013      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617e:	d00f      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a3d      	ldr	r2, [pc, #244]	; (8006278 <TIM_Base_SetConfig+0x118>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00b      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a3c      	ldr	r2, [pc, #240]	; (800627c <TIM_Base_SetConfig+0x11c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d007      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a3b      	ldr	r2, [pc, #236]	; (8006280 <TIM_Base_SetConfig+0x120>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d003      	beq.n	80061a0 <TIM_Base_SetConfig+0x40>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a3a      	ldr	r2, [pc, #232]	; (8006284 <TIM_Base_SetConfig+0x124>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d108      	bne.n	80061b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a2f      	ldr	r2, [pc, #188]	; (8006274 <TIM_Base_SetConfig+0x114>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d01f      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c0:	d01b      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a2c      	ldr	r2, [pc, #176]	; (8006278 <TIM_Base_SetConfig+0x118>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d017      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a2b      	ldr	r2, [pc, #172]	; (800627c <TIM_Base_SetConfig+0x11c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d013      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a2a      	ldr	r2, [pc, #168]	; (8006280 <TIM_Base_SetConfig+0x120>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00f      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a29      	ldr	r2, [pc, #164]	; (8006284 <TIM_Base_SetConfig+0x124>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00b      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a28      	ldr	r2, [pc, #160]	; (8006288 <TIM_Base_SetConfig+0x128>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d007      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a27      	ldr	r2, [pc, #156]	; (800628c <TIM_Base_SetConfig+0x12c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d003      	beq.n	80061fa <TIM_Base_SetConfig+0x9a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a26      	ldr	r2, [pc, #152]	; (8006290 <TIM_Base_SetConfig+0x130>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d108      	bne.n	800620c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	4313      	orrs	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a10      	ldr	r2, [pc, #64]	; (8006274 <TIM_Base_SetConfig+0x114>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00f      	beq.n	8006258 <TIM_Base_SetConfig+0xf8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a12      	ldr	r2, [pc, #72]	; (8006284 <TIM_Base_SetConfig+0x124>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00b      	beq.n	8006258 <TIM_Base_SetConfig+0xf8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a11      	ldr	r2, [pc, #68]	; (8006288 <TIM_Base_SetConfig+0x128>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d007      	beq.n	8006258 <TIM_Base_SetConfig+0xf8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a10      	ldr	r2, [pc, #64]	; (800628c <TIM_Base_SetConfig+0x12c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_Base_SetConfig+0xf8>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a0f      	ldr	r2, [pc, #60]	; (8006290 <TIM_Base_SetConfig+0x130>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d103      	bne.n	8006260 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	615a      	str	r2, [r3, #20]
}
 8006266:	bf00      	nop
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40012c00 	.word	0x40012c00
 8006278:	40000400 	.word	0x40000400
 800627c:	40000800 	.word	0x40000800
 8006280:	40000c00 	.word	0x40000c00
 8006284:	40013400 	.word	0x40013400
 8006288:	40014000 	.word	0x40014000
 800628c:	40014400 	.word	0x40014400
 8006290:	40014800 	.word	0x40014800

08006294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f023 0201 	bic.w	r2, r3, #1
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f023 030a 	bic.w	r3, r3, #10
 80062d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	621a      	str	r2, [r3, #32]
}
 80062e6:	bf00      	nop
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b087      	sub	sp, #28
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	f023 0210 	bic.w	r2, r3, #16
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800631c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	031b      	lsls	r3, r3, #12
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800632e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	621a      	str	r2, [r3, #32]
}
 8006346:	bf00      	nop
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006352:	b480      	push	{r7}
 8006354:	b085      	sub	sp, #20
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	f043 0307 	orr.w	r3, r3, #7
 8006374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	609a      	str	r2, [r3, #8]
}
 800637c:	bf00      	nop
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
 8006394:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	021a      	lsls	r2, r3, #8
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	431a      	orrs	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	609a      	str	r2, [r3, #8]
}
 80063bc:	bf00      	nop
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063dc:	2302      	movs	r3, #2
 80063de:	e068      	b.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a2e      	ldr	r2, [pc, #184]	; (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d004      	beq.n	8006414 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a2d      	ldr	r2, [pc, #180]	; (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d108      	bne.n	8006426 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800641a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a1e      	ldr	r2, [pc, #120]	; (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d01d      	beq.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006452:	d018      	beq.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a1b      	ldr	r2, [pc, #108]	; (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d013      	beq.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a1a      	ldr	r2, [pc, #104]	; (80064cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00e      	beq.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a18      	ldr	r2, [pc, #96]	; (80064d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d009      	beq.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a13      	ldr	r2, [pc, #76]	; (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d004      	beq.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a14      	ldr	r2, [pc, #80]	; (80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d10c      	bne.n	80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800648c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	4313      	orrs	r3, r2
 8006496:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	40012c00 	.word	0x40012c00
 80064c4:	40013400 	.word	0x40013400
 80064c8:	40000400 	.word	0x40000400
 80064cc:	40000800 	.word	0x40000800
 80064d0:	40000c00 	.word	0x40000c00
 80064d4:	40014000 	.word	0x40014000

080064d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e042      	b.n	80065ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800652c:	2b00      	cmp	r3, #0
 800652e:	d106      	bne.n	800653e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 fe07 	bl	800814c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2224      	movs	r2, #36	; 0x24
 8006542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0201 	bic.w	r2, r2, #1
 8006554:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f82c 	bl	80065b4 <UART_SetConfig>
 800655c:	4603      	mov	r3, r0
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e022      	b.n	80065ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fb1c 	bl	8006bac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006582:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006592:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 0201 	orr.w	r2, r2, #1
 80065a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fba3 	bl	8006cf0 <UART_CheckIdleState>
 80065aa:	4603      	mov	r3, r0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065b8:	b08c      	sub	sp, #48	; 0x30
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	431a      	orrs	r2, r3
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	431a      	orrs	r2, r3
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	4313      	orrs	r3, r2
 80065da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	4baa      	ldr	r3, [pc, #680]	; (800688c <UART_SetConfig+0x2d8>)
 80065e4:	4013      	ands	r3, r2
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	6812      	ldr	r2, [r2, #0]
 80065ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065ec:	430b      	orrs	r3, r1
 80065ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a9f      	ldr	r2, [pc, #636]	; (8006890 <UART_SetConfig+0x2dc>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d004      	beq.n	8006620 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800661c:	4313      	orrs	r3, r2
 800661e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800662a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	6812      	ldr	r2, [r2, #0]
 8006632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006634:	430b      	orrs	r3, r1
 8006636:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663e:	f023 010f 	bic.w	r1, r3, #15
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a90      	ldr	r2, [pc, #576]	; (8006894 <UART_SetConfig+0x2e0>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d125      	bne.n	80066a4 <UART_SetConfig+0xf0>
 8006658:	4b8f      	ldr	r3, [pc, #572]	; (8006898 <UART_SetConfig+0x2e4>)
 800665a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665e:	f003 0303 	and.w	r3, r3, #3
 8006662:	2b03      	cmp	r3, #3
 8006664:	d81a      	bhi.n	800669c <UART_SetConfig+0xe8>
 8006666:	a201      	add	r2, pc, #4	; (adr r2, 800666c <UART_SetConfig+0xb8>)
 8006668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666c:	0800667d 	.word	0x0800667d
 8006670:	0800668d 	.word	0x0800668d
 8006674:	08006685 	.word	0x08006685
 8006678:	08006695 	.word	0x08006695
 800667c:	2301      	movs	r3, #1
 800667e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006682:	e116      	b.n	80068b2 <UART_SetConfig+0x2fe>
 8006684:	2302      	movs	r3, #2
 8006686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800668a:	e112      	b.n	80068b2 <UART_SetConfig+0x2fe>
 800668c:	2304      	movs	r3, #4
 800668e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006692:	e10e      	b.n	80068b2 <UART_SetConfig+0x2fe>
 8006694:	2308      	movs	r3, #8
 8006696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800669a:	e10a      	b.n	80068b2 <UART_SetConfig+0x2fe>
 800669c:	2310      	movs	r3, #16
 800669e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066a2:	e106      	b.n	80068b2 <UART_SetConfig+0x2fe>
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a7c      	ldr	r2, [pc, #496]	; (800689c <UART_SetConfig+0x2e8>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d138      	bne.n	8006720 <UART_SetConfig+0x16c>
 80066ae:	4b7a      	ldr	r3, [pc, #488]	; (8006898 <UART_SetConfig+0x2e4>)
 80066b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b4:	f003 030c 	and.w	r3, r3, #12
 80066b8:	2b0c      	cmp	r3, #12
 80066ba:	d82d      	bhi.n	8006718 <UART_SetConfig+0x164>
 80066bc:	a201      	add	r2, pc, #4	; (adr r2, 80066c4 <UART_SetConfig+0x110>)
 80066be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c2:	bf00      	nop
 80066c4:	080066f9 	.word	0x080066f9
 80066c8:	08006719 	.word	0x08006719
 80066cc:	08006719 	.word	0x08006719
 80066d0:	08006719 	.word	0x08006719
 80066d4:	08006709 	.word	0x08006709
 80066d8:	08006719 	.word	0x08006719
 80066dc:	08006719 	.word	0x08006719
 80066e0:	08006719 	.word	0x08006719
 80066e4:	08006701 	.word	0x08006701
 80066e8:	08006719 	.word	0x08006719
 80066ec:	08006719 	.word	0x08006719
 80066f0:	08006719 	.word	0x08006719
 80066f4:	08006711 	.word	0x08006711
 80066f8:	2300      	movs	r3, #0
 80066fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066fe:	e0d8      	b.n	80068b2 <UART_SetConfig+0x2fe>
 8006700:	2302      	movs	r3, #2
 8006702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006706:	e0d4      	b.n	80068b2 <UART_SetConfig+0x2fe>
 8006708:	2304      	movs	r3, #4
 800670a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800670e:	e0d0      	b.n	80068b2 <UART_SetConfig+0x2fe>
 8006710:	2308      	movs	r3, #8
 8006712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006716:	e0cc      	b.n	80068b2 <UART_SetConfig+0x2fe>
 8006718:	2310      	movs	r3, #16
 800671a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800671e:	e0c8      	b.n	80068b2 <UART_SetConfig+0x2fe>
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a5e      	ldr	r2, [pc, #376]	; (80068a0 <UART_SetConfig+0x2ec>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d125      	bne.n	8006776 <UART_SetConfig+0x1c2>
 800672a:	4b5b      	ldr	r3, [pc, #364]	; (8006898 <UART_SetConfig+0x2e4>)
 800672c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006730:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006734:	2b30      	cmp	r3, #48	; 0x30
 8006736:	d016      	beq.n	8006766 <UART_SetConfig+0x1b2>
 8006738:	2b30      	cmp	r3, #48	; 0x30
 800673a:	d818      	bhi.n	800676e <UART_SetConfig+0x1ba>
 800673c:	2b20      	cmp	r3, #32
 800673e:	d00a      	beq.n	8006756 <UART_SetConfig+0x1a2>
 8006740:	2b20      	cmp	r3, #32
 8006742:	d814      	bhi.n	800676e <UART_SetConfig+0x1ba>
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <UART_SetConfig+0x19a>
 8006748:	2b10      	cmp	r3, #16
 800674a:	d008      	beq.n	800675e <UART_SetConfig+0x1aa>
 800674c:	e00f      	b.n	800676e <UART_SetConfig+0x1ba>
 800674e:	2300      	movs	r3, #0
 8006750:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006754:	e0ad      	b.n	80068b2 <UART_SetConfig+0x2fe>
 8006756:	2302      	movs	r3, #2
 8006758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800675c:	e0a9      	b.n	80068b2 <UART_SetConfig+0x2fe>
 800675e:	2304      	movs	r3, #4
 8006760:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006764:	e0a5      	b.n	80068b2 <UART_SetConfig+0x2fe>
 8006766:	2308      	movs	r3, #8
 8006768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800676c:	e0a1      	b.n	80068b2 <UART_SetConfig+0x2fe>
 800676e:	2310      	movs	r3, #16
 8006770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006774:	e09d      	b.n	80068b2 <UART_SetConfig+0x2fe>
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a4a      	ldr	r2, [pc, #296]	; (80068a4 <UART_SetConfig+0x2f0>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d125      	bne.n	80067cc <UART_SetConfig+0x218>
 8006780:	4b45      	ldr	r3, [pc, #276]	; (8006898 <UART_SetConfig+0x2e4>)
 8006782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006786:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800678a:	2bc0      	cmp	r3, #192	; 0xc0
 800678c:	d016      	beq.n	80067bc <UART_SetConfig+0x208>
 800678e:	2bc0      	cmp	r3, #192	; 0xc0
 8006790:	d818      	bhi.n	80067c4 <UART_SetConfig+0x210>
 8006792:	2b80      	cmp	r3, #128	; 0x80
 8006794:	d00a      	beq.n	80067ac <UART_SetConfig+0x1f8>
 8006796:	2b80      	cmp	r3, #128	; 0x80
 8006798:	d814      	bhi.n	80067c4 <UART_SetConfig+0x210>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d002      	beq.n	80067a4 <UART_SetConfig+0x1f0>
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d008      	beq.n	80067b4 <UART_SetConfig+0x200>
 80067a2:	e00f      	b.n	80067c4 <UART_SetConfig+0x210>
 80067a4:	2300      	movs	r3, #0
 80067a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067aa:	e082      	b.n	80068b2 <UART_SetConfig+0x2fe>
 80067ac:	2302      	movs	r3, #2
 80067ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067b2:	e07e      	b.n	80068b2 <UART_SetConfig+0x2fe>
 80067b4:	2304      	movs	r3, #4
 80067b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ba:	e07a      	b.n	80068b2 <UART_SetConfig+0x2fe>
 80067bc:	2308      	movs	r3, #8
 80067be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067c2:	e076      	b.n	80068b2 <UART_SetConfig+0x2fe>
 80067c4:	2310      	movs	r3, #16
 80067c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ca:	e072      	b.n	80068b2 <UART_SetConfig+0x2fe>
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a35      	ldr	r2, [pc, #212]	; (80068a8 <UART_SetConfig+0x2f4>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d12a      	bne.n	800682c <UART_SetConfig+0x278>
 80067d6:	4b30      	ldr	r3, [pc, #192]	; (8006898 <UART_SetConfig+0x2e4>)
 80067d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067e4:	d01a      	beq.n	800681c <UART_SetConfig+0x268>
 80067e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067ea:	d81b      	bhi.n	8006824 <UART_SetConfig+0x270>
 80067ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067f0:	d00c      	beq.n	800680c <UART_SetConfig+0x258>
 80067f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067f6:	d815      	bhi.n	8006824 <UART_SetConfig+0x270>
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <UART_SetConfig+0x250>
 80067fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006800:	d008      	beq.n	8006814 <UART_SetConfig+0x260>
 8006802:	e00f      	b.n	8006824 <UART_SetConfig+0x270>
 8006804:	2300      	movs	r3, #0
 8006806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800680a:	e052      	b.n	80068b2 <UART_SetConfig+0x2fe>
 800680c:	2302      	movs	r3, #2
 800680e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006812:	e04e      	b.n	80068b2 <UART_SetConfig+0x2fe>
 8006814:	2304      	movs	r3, #4
 8006816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800681a:	e04a      	b.n	80068b2 <UART_SetConfig+0x2fe>
 800681c:	2308      	movs	r3, #8
 800681e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006822:	e046      	b.n	80068b2 <UART_SetConfig+0x2fe>
 8006824:	2310      	movs	r3, #16
 8006826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800682a:	e042      	b.n	80068b2 <UART_SetConfig+0x2fe>
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a17      	ldr	r2, [pc, #92]	; (8006890 <UART_SetConfig+0x2dc>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d13a      	bne.n	80068ac <UART_SetConfig+0x2f8>
 8006836:	4b18      	ldr	r3, [pc, #96]	; (8006898 <UART_SetConfig+0x2e4>)
 8006838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006840:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006844:	d01a      	beq.n	800687c <UART_SetConfig+0x2c8>
 8006846:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800684a:	d81b      	bhi.n	8006884 <UART_SetConfig+0x2d0>
 800684c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006850:	d00c      	beq.n	800686c <UART_SetConfig+0x2b8>
 8006852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006856:	d815      	bhi.n	8006884 <UART_SetConfig+0x2d0>
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <UART_SetConfig+0x2b0>
 800685c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006860:	d008      	beq.n	8006874 <UART_SetConfig+0x2c0>
 8006862:	e00f      	b.n	8006884 <UART_SetConfig+0x2d0>
 8006864:	2300      	movs	r3, #0
 8006866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800686a:	e022      	b.n	80068b2 <UART_SetConfig+0x2fe>
 800686c:	2302      	movs	r3, #2
 800686e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006872:	e01e      	b.n	80068b2 <UART_SetConfig+0x2fe>
 8006874:	2304      	movs	r3, #4
 8006876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800687a:	e01a      	b.n	80068b2 <UART_SetConfig+0x2fe>
 800687c:	2308      	movs	r3, #8
 800687e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006882:	e016      	b.n	80068b2 <UART_SetConfig+0x2fe>
 8006884:	2310      	movs	r3, #16
 8006886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800688a:	e012      	b.n	80068b2 <UART_SetConfig+0x2fe>
 800688c:	cfff69f3 	.word	0xcfff69f3
 8006890:	40008000 	.word	0x40008000
 8006894:	40013800 	.word	0x40013800
 8006898:	40021000 	.word	0x40021000
 800689c:	40004400 	.word	0x40004400
 80068a0:	40004800 	.word	0x40004800
 80068a4:	40004c00 	.word	0x40004c00
 80068a8:	40005000 	.word	0x40005000
 80068ac:	2310      	movs	r3, #16
 80068ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4aae      	ldr	r2, [pc, #696]	; (8006b70 <UART_SetConfig+0x5bc>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	f040 8097 	bne.w	80069ec <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068c2:	2b08      	cmp	r3, #8
 80068c4:	d823      	bhi.n	800690e <UART_SetConfig+0x35a>
 80068c6:	a201      	add	r2, pc, #4	; (adr r2, 80068cc <UART_SetConfig+0x318>)
 80068c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068cc:	080068f1 	.word	0x080068f1
 80068d0:	0800690f 	.word	0x0800690f
 80068d4:	080068f9 	.word	0x080068f9
 80068d8:	0800690f 	.word	0x0800690f
 80068dc:	080068ff 	.word	0x080068ff
 80068e0:	0800690f 	.word	0x0800690f
 80068e4:	0800690f 	.word	0x0800690f
 80068e8:	0800690f 	.word	0x0800690f
 80068ec:	08006907 	.word	0x08006907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068f0:	f7fe fbc0 	bl	8005074 <HAL_RCC_GetPCLK1Freq>
 80068f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068f6:	e010      	b.n	800691a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068f8:	4b9e      	ldr	r3, [pc, #632]	; (8006b74 <UART_SetConfig+0x5c0>)
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068fc:	e00d      	b.n	800691a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068fe:	f7fe fb21 	bl	8004f44 <HAL_RCC_GetSysClockFreq>
 8006902:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006904:	e009      	b.n	800691a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800690a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800690c:	e005      	b.n	800691a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006918:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 8130 	beq.w	8006b82 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	4a94      	ldr	r2, [pc, #592]	; (8006b78 <UART_SetConfig+0x5c4>)
 8006928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800692c:	461a      	mov	r2, r3
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	fbb3 f3f2 	udiv	r3, r3, r2
 8006934:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	4613      	mov	r3, r2
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	4413      	add	r3, r2
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	429a      	cmp	r2, r3
 8006944:	d305      	bcc.n	8006952 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	429a      	cmp	r2, r3
 8006950:	d903      	bls.n	800695a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006958:	e113      	b.n	8006b82 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	2200      	movs	r2, #0
 800695e:	60bb      	str	r3, [r7, #8]
 8006960:	60fa      	str	r2, [r7, #12]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	4a84      	ldr	r2, [pc, #528]	; (8006b78 <UART_SetConfig+0x5c4>)
 8006968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800696c:	b29b      	uxth	r3, r3
 800696e:	2200      	movs	r2, #0
 8006970:	603b      	str	r3, [r7, #0]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006978:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800697c:	f7fa f92c 	bl	8000bd8 <__aeabi_uldivmod>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	4610      	mov	r0, r2
 8006986:	4619      	mov	r1, r3
 8006988:	f04f 0200 	mov.w	r2, #0
 800698c:	f04f 0300 	mov.w	r3, #0
 8006990:	020b      	lsls	r3, r1, #8
 8006992:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006996:	0202      	lsls	r2, r0, #8
 8006998:	6979      	ldr	r1, [r7, #20]
 800699a:	6849      	ldr	r1, [r1, #4]
 800699c:	0849      	lsrs	r1, r1, #1
 800699e:	2000      	movs	r0, #0
 80069a0:	460c      	mov	r4, r1
 80069a2:	4605      	mov	r5, r0
 80069a4:	eb12 0804 	adds.w	r8, r2, r4
 80069a8:	eb43 0905 	adc.w	r9, r3, r5
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	469a      	mov	sl, r3
 80069b4:	4693      	mov	fp, r2
 80069b6:	4652      	mov	r2, sl
 80069b8:	465b      	mov	r3, fp
 80069ba:	4640      	mov	r0, r8
 80069bc:	4649      	mov	r1, r9
 80069be:	f7fa f90b 	bl	8000bd8 <__aeabi_uldivmod>
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	4613      	mov	r3, r2
 80069c8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069d0:	d308      	bcc.n	80069e4 <UART_SetConfig+0x430>
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069d8:	d204      	bcs.n	80069e4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6a3a      	ldr	r2, [r7, #32]
 80069e0:	60da      	str	r2, [r3, #12]
 80069e2:	e0ce      	b.n	8006b82 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80069ea:	e0ca      	b.n	8006b82 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069f4:	d166      	bne.n	8006ac4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80069f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069fa:	2b08      	cmp	r3, #8
 80069fc:	d827      	bhi.n	8006a4e <UART_SetConfig+0x49a>
 80069fe:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <UART_SetConfig+0x450>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a29 	.word	0x08006a29
 8006a08:	08006a31 	.word	0x08006a31
 8006a0c:	08006a39 	.word	0x08006a39
 8006a10:	08006a4f 	.word	0x08006a4f
 8006a14:	08006a3f 	.word	0x08006a3f
 8006a18:	08006a4f 	.word	0x08006a4f
 8006a1c:	08006a4f 	.word	0x08006a4f
 8006a20:	08006a4f 	.word	0x08006a4f
 8006a24:	08006a47 	.word	0x08006a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a28:	f7fe fb24 	bl	8005074 <HAL_RCC_GetPCLK1Freq>
 8006a2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a2e:	e014      	b.n	8006a5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a30:	f7fe fb36 	bl	80050a0 <HAL_RCC_GetPCLK2Freq>
 8006a34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a36:	e010      	b.n	8006a5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a38:	4b4e      	ldr	r3, [pc, #312]	; (8006b74 <UART_SetConfig+0x5c0>)
 8006a3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a3c:	e00d      	b.n	8006a5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a3e:	f7fe fa81 	bl	8004f44 <HAL_RCC_GetSysClockFreq>
 8006a42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a44:	e009      	b.n	8006a5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a4c:	e005      	b.n	8006a5a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 8090 	beq.w	8006b82 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	4a44      	ldr	r2, [pc, #272]	; (8006b78 <UART_SetConfig+0x5c4>)
 8006a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a74:	005a      	lsls	r2, r3, #1
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	085b      	lsrs	r3, r3, #1
 8006a7c:	441a      	add	r2, r3
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a86:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	2b0f      	cmp	r3, #15
 8006a8c:	d916      	bls.n	8006abc <UART_SetConfig+0x508>
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a94:	d212      	bcs.n	8006abc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	f023 030f 	bic.w	r3, r3, #15
 8006a9e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	085b      	lsrs	r3, r3, #1
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	f003 0307 	and.w	r3, r3, #7
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	8bfb      	ldrh	r3, [r7, #30]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	8bfa      	ldrh	r2, [r7, #30]
 8006ab8:	60da      	str	r2, [r3, #12]
 8006aba:	e062      	b.n	8006b82 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ac2:	e05e      	b.n	8006b82 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ac4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d828      	bhi.n	8006b1e <UART_SetConfig+0x56a>
 8006acc:	a201      	add	r2, pc, #4	; (adr r2, 8006ad4 <UART_SetConfig+0x520>)
 8006ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad2:	bf00      	nop
 8006ad4:	08006af9 	.word	0x08006af9
 8006ad8:	08006b01 	.word	0x08006b01
 8006adc:	08006b09 	.word	0x08006b09
 8006ae0:	08006b1f 	.word	0x08006b1f
 8006ae4:	08006b0f 	.word	0x08006b0f
 8006ae8:	08006b1f 	.word	0x08006b1f
 8006aec:	08006b1f 	.word	0x08006b1f
 8006af0:	08006b1f 	.word	0x08006b1f
 8006af4:	08006b17 	.word	0x08006b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006af8:	f7fe fabc 	bl	8005074 <HAL_RCC_GetPCLK1Freq>
 8006afc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006afe:	e014      	b.n	8006b2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b00:	f7fe face 	bl	80050a0 <HAL_RCC_GetPCLK2Freq>
 8006b04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b06:	e010      	b.n	8006b2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b08:	4b1a      	ldr	r3, [pc, #104]	; (8006b74 <UART_SetConfig+0x5c0>)
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b0c:	e00d      	b.n	8006b2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b0e:	f7fe fa19 	bl	8004f44 <HAL_RCC_GetSysClockFreq>
 8006b12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b14:	e009      	b.n	8006b2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b1c:	e005      	b.n	8006b2a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006b28:	bf00      	nop
    }

    if (pclk != 0U)
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d028      	beq.n	8006b82 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	4a10      	ldr	r2, [pc, #64]	; (8006b78 <UART_SetConfig+0x5c4>)
 8006b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	085b      	lsrs	r3, r3, #1
 8006b48:	441a      	add	r2, r3
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b52:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	2b0f      	cmp	r3, #15
 8006b58:	d910      	bls.n	8006b7c <UART_SetConfig+0x5c8>
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b60:	d20c      	bcs.n	8006b7c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60da      	str	r2, [r3, #12]
 8006b6c:	e009      	b.n	8006b82 <UART_SetConfig+0x5ce>
 8006b6e:	bf00      	nop
 8006b70:	40008000 	.word	0x40008000
 8006b74:	00f42400 	.word	0x00f42400
 8006b78:	0800b124 	.word	0x0800b124
      }
      else
      {
        ret = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2200      	movs	r2, #0
 8006b96:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006b9e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3730      	adds	r7, #48	; 0x30
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006bac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00a      	beq.n	8006bd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00a      	beq.n	8006bf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00a      	beq.n	8006c1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1e:	f003 0308 	and.w	r3, r3, #8
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00a      	beq.n	8006c3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c40:	f003 0310 	and.w	r3, r3, #16
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00a      	beq.n	8006c5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c62:	f003 0320 	and.w	r3, r3, #32
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00a      	beq.n	8006c80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d01a      	beq.n	8006cc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006caa:	d10a      	bne.n	8006cc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	605a      	str	r2, [r3, #4]
  }
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af02      	add	r7, sp, #8
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d00:	f7fa feca 	bl	8001a98 <HAL_GetTick>
 8006d04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0308 	and.w	r3, r3, #8
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d10e      	bne.n	8006d32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f82f 	bl	8006d86 <UART_WaitOnFlagUntilTimeout>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e025      	b.n	8006d7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	2b04      	cmp	r3, #4
 8006d3e:	d10e      	bne.n	8006d5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f819 	bl	8006d86 <UART_WaitOnFlagUntilTimeout>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e00f      	b.n	8006d7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2220      	movs	r2, #32
 8006d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b09c      	sub	sp, #112	; 0x70
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	60f8      	str	r0, [r7, #12]
 8006d8e:	60b9      	str	r1, [r7, #8]
 8006d90:	603b      	str	r3, [r7, #0]
 8006d92:	4613      	mov	r3, r2
 8006d94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d96:	e0a9      	b.n	8006eec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9e:	f000 80a5 	beq.w	8006eec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006da2:	f7fa fe79 	bl	8001a98 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d302      	bcc.n	8006db8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006db2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d140      	bne.n	8006e3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc0:	e853 3f00 	ldrex	r3, [r3]
 8006dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dcc:	667b      	str	r3, [r7, #100]	; 0x64
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dd8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ddc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006dde:	e841 2300 	strex	r3, r2, [r1]
 8006de2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1e6      	bne.n	8006db8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3308      	adds	r3, #8
 8006df0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df4:	e853 3f00 	ldrex	r3, [r3]
 8006df8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfc:	f023 0301 	bic.w	r3, r3, #1
 8006e00:	663b      	str	r3, [r7, #96]	; 0x60
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	3308      	adds	r3, #8
 8006e08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e5      	bne.n	8006dea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e069      	b.n	8006f0e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d051      	beq.n	8006eec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e56:	d149      	bne.n	8006eec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e80:	637b      	str	r3, [r7, #52]	; 0x34
 8006e82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e6      	bne.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3308      	adds	r3, #8
 8006e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	e853 3f00 	ldrex	r3, [r3]
 8006ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	f023 0301 	bic.w	r3, r3, #1
 8006eaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3308      	adds	r3, #8
 8006eb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006eb4:	623a      	str	r2, [r7, #32]
 8006eb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb8:	69f9      	ldr	r1, [r7, #28]
 8006eba:	6a3a      	ldr	r2, [r7, #32]
 8006ebc:	e841 2300 	strex	r3, r2, [r1]
 8006ec0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1e5      	bne.n	8006e94 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2220      	movs	r2, #32
 8006edc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e010      	b.n	8006f0e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	69da      	ldr	r2, [r3, #28]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	bf0c      	ite	eq
 8006efc:	2301      	moveq	r3, #1
 8006efe:	2300      	movne	r3, #0
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	461a      	mov	r2, r3
 8006f04:	79fb      	ldrb	r3, [r7, #7]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	f43f af46 	beq.w	8006d98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3770      	adds	r7, #112	; 0x70
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b085      	sub	sp, #20
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d101      	bne.n	8006f2c <HAL_UARTEx_DisableFifoMode+0x16>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	e027      	b.n	8006f7c <HAL_UARTEx_DisableFifoMode+0x66>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2224      	movs	r2, #36	; 0x24
 8006f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 0201 	bic.w	r2, r2, #1
 8006f52:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d101      	bne.n	8006fa0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e02d      	b.n	8006ffc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2224      	movs	r2, #36	; 0x24
 8006fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0201 	bic.w	r2, r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f84f 	bl	8007080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007014:	2b01      	cmp	r3, #1
 8007016:	d101      	bne.n	800701c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007018:	2302      	movs	r3, #2
 800701a:	e02d      	b.n	8007078 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2224      	movs	r2, #36	; 0x24
 8007028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0201 	bic.w	r2, r2, #1
 8007042:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f811 	bl	8007080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2220      	movs	r2, #32
 800706a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800708c:	2b00      	cmp	r3, #0
 800708e:	d108      	bne.n	80070a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070a0:	e031      	b.n	8007106 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070a2:	2308      	movs	r3, #8
 80070a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070a6:	2308      	movs	r3, #8
 80070a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	0e5b      	lsrs	r3, r3, #25
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	f003 0307 	and.w	r3, r3, #7
 80070b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	0f5b      	lsrs	r3, r3, #29
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	f003 0307 	and.w	r3, r3, #7
 80070c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070ca:	7bbb      	ldrb	r3, [r7, #14]
 80070cc:	7b3a      	ldrb	r2, [r7, #12]
 80070ce:	4911      	ldr	r1, [pc, #68]	; (8007114 <UARTEx_SetNbDataToProcess+0x94>)
 80070d0:	5c8a      	ldrb	r2, [r1, r2]
 80070d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070d6:	7b3a      	ldrb	r2, [r7, #12]
 80070d8:	490f      	ldr	r1, [pc, #60]	; (8007118 <UARTEx_SetNbDataToProcess+0x98>)
 80070da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
 80070ea:	7b7a      	ldrb	r2, [r7, #13]
 80070ec:	4909      	ldr	r1, [pc, #36]	; (8007114 <UARTEx_SetNbDataToProcess+0x94>)
 80070ee:	5c8a      	ldrb	r2, [r1, r2]
 80070f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80070f4:	7b7a      	ldrb	r2, [r7, #13]
 80070f6:	4908      	ldr	r1, [pc, #32]	; (8007118 <UARTEx_SetNbDataToProcess+0x98>)
 80070f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80070fe:	b29a      	uxth	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007106:	bf00      	nop
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	0800b13c 	.word	0x0800b13c
 8007118:	0800b144 	.word	0x0800b144

0800711c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007124:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007128:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b00      	cmp	r3, #0
 8007132:	d013      	beq.n	800715c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007134:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007138:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800713c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00b      	beq.n	800715c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007144:	e000      	b.n	8007148 <ITM_SendChar+0x2c>
    {
      __NOP();
 8007146:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8007148:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0f9      	beq.n	8007146 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007152:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	b2d2      	uxtb	r2, r2
 800715a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800715c:	687b      	ldr	r3, [r7, #4]
}
 800715e:	4618      	mov	r0, r3
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
	...

0800716c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007170:	f7fa fc2a 	bl	80019c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007174:	f000 f820 	bl	80071b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007178:	f000 fa18 	bl	80075ac <MX_GPIO_Init>
  MX_DMA_Init();
 800717c:	f000 f9ec 	bl	8007558 <MX_DMA_Init>
  MX_ADC1_Init();
 8007180:	f000 f86c 	bl	800725c <MX_ADC1_Init>
  MX_DAC1_Init();
 8007184:	f000 f8d0 	bl	8007328 <MX_DAC1_Init>
  MX_TIM2_Init();
 8007188:	f000 f94e 	bl	8007428 <MX_TIM2_Init>
  MX_I2C2_Init();
 800718c:	f000 f90c 	bl	80073a8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8007190:	f000 f996 	bl	80074c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  selector = 0; //initialize selector
 8007194:	4b07      	ldr	r3, [pc, #28]	; (80071b4 <main+0x48>)
 8007196:	2200      	movs	r2, #0
 8007198:	601a      	str	r2, [r3, #0]

  //initialize sensors
  BSP_TSENSOR_Init();
 800719a:	f000 fe31 	bl	8007e00 <BSP_TSENSOR_Init>
  BSP_HSENSOR_Init();
 800719e:	f000 fd8f 	bl	8007cc0 <BSP_HSENSOR_Init>
  BSP_MAGNETO_Init();
 80071a2:	f000 fdbb 	bl	8007d1c <BSP_MAGNETO_Init>
  BSP_ACCELERO_Init();
 80071a6:	f000 fcdb 	bl	8007b60 <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 80071aa:	f000 fd2f 	bl	8007c0c <BSP_GYRO_Init>
  BSP_PSENSOR_Init();
 80071ae:	f000 fdf9 	bl	8007da4 <BSP_PSENSOR_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 80071b2:	e7fe      	b.n	80071b2 <main+0x46>
 80071b4:	200004cc 	.word	0x200004cc

080071b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b096      	sub	sp, #88	; 0x58
 80071bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80071be:	f107 0314 	add.w	r3, r7, #20
 80071c2:	2244      	movs	r2, #68	; 0x44
 80071c4:	2100      	movs	r1, #0
 80071c6:	4618      	mov	r0, r3
 80071c8:	f001 f982 	bl	80084d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80071cc:	463b      	mov	r3, r7
 80071ce:	2200      	movs	r2, #0
 80071d0:	601a      	str	r2, [r3, #0]
 80071d2:	605a      	str	r2, [r3, #4]
 80071d4:	609a      	str	r2, [r3, #8]
 80071d6:	60da      	str	r2, [r3, #12]
 80071d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80071da:	2000      	movs	r0, #0
 80071dc:	f7fd f8ba 	bl	8004354 <HAL_PWREx_ControlVoltageScaling>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <SystemClock_Config+0x32>
  {
    Error_Handler();
 80071e6:	f000 fb65 	bl	80078b4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80071ea:	2310      	movs	r3, #16
 80071ec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80071ee:	2301      	movs	r3, #1
 80071f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80071f2:	2300      	movs	r3, #0
 80071f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80071f6:	2360      	movs	r3, #96	; 0x60
 80071f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80071fa:	2302      	movs	r3, #2
 80071fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80071fe:	2301      	movs	r3, #1
 8007200:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007202:	2301      	movs	r3, #1
 8007204:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8007206:	233c      	movs	r3, #60	; 0x3c
 8007208:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800720a:	2302      	movs	r3, #2
 800720c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800720e:	2302      	movs	r3, #2
 8007210:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007212:	2302      	movs	r3, #2
 8007214:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007216:	f107 0314 	add.w	r3, r7, #20
 800721a:	4618      	mov	r0, r3
 800721c:	f7fd f93e 	bl	800449c <HAL_RCC_OscConfig>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8007226:	f000 fb45 	bl	80078b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800722a:	230f      	movs	r3, #15
 800722c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800722e:	2303      	movs	r3, #3
 8007230:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007232:	2300      	movs	r3, #0
 8007234:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007236:	2300      	movs	r3, #0
 8007238:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800723a:	2300      	movs	r3, #0
 800723c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800723e:	463b      	mov	r3, r7
 8007240:	2105      	movs	r1, #5
 8007242:	4618      	mov	r0, r3
 8007244:	f7fd fd44 	bl	8004cd0 <HAL_RCC_ClockConfig>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800724e:	f000 fb31 	bl	80078b4 <Error_Handler>
  }
}
 8007252:	bf00      	nop
 8007254:	3758      	adds	r7, #88	; 0x58
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007262:	463b      	mov	r3, r7
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	605a      	str	r2, [r3, #4]
 800726a:	609a      	str	r2, [r3, #8]
 800726c:	60da      	str	r2, [r3, #12]
 800726e:	611a      	str	r2, [r3, #16]
 8007270:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007272:	4b2a      	ldr	r3, [pc, #168]	; (800731c <MX_ADC1_Init+0xc0>)
 8007274:	4a2a      	ldr	r2, [pc, #168]	; (8007320 <MX_ADC1_Init+0xc4>)
 8007276:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8007278:	4b28      	ldr	r3, [pc, #160]	; (800731c <MX_ADC1_Init+0xc0>)
 800727a:	2200      	movs	r2, #0
 800727c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800727e:	4b27      	ldr	r3, [pc, #156]	; (800731c <MX_ADC1_Init+0xc0>)
 8007280:	2200      	movs	r2, #0
 8007282:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007284:	4b25      	ldr	r3, [pc, #148]	; (800731c <MX_ADC1_Init+0xc0>)
 8007286:	2200      	movs	r2, #0
 8007288:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800728a:	4b24      	ldr	r3, [pc, #144]	; (800731c <MX_ADC1_Init+0xc0>)
 800728c:	2200      	movs	r2, #0
 800728e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007290:	4b22      	ldr	r3, [pc, #136]	; (800731c <MX_ADC1_Init+0xc0>)
 8007292:	2204      	movs	r2, #4
 8007294:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007296:	4b21      	ldr	r3, [pc, #132]	; (800731c <MX_ADC1_Init+0xc0>)
 8007298:	2200      	movs	r2, #0
 800729a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800729c:	4b1f      	ldr	r3, [pc, #124]	; (800731c <MX_ADC1_Init+0xc0>)
 800729e:	2200      	movs	r2, #0
 80072a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80072a2:	4b1e      	ldr	r3, [pc, #120]	; (800731c <MX_ADC1_Init+0xc0>)
 80072a4:	2201      	movs	r2, #1
 80072a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80072a8:	4b1c      	ldr	r3, [pc, #112]	; (800731c <MX_ADC1_Init+0xc0>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80072b0:	4b1a      	ldr	r3, [pc, #104]	; (800731c <MX_ADC1_Init+0xc0>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80072b6:	4b19      	ldr	r3, [pc, #100]	; (800731c <MX_ADC1_Init+0xc0>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80072bc:	4b17      	ldr	r3, [pc, #92]	; (800731c <MX_ADC1_Init+0xc0>)
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80072c4:	4b15      	ldr	r3, [pc, #84]	; (800731c <MX_ADC1_Init+0xc0>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80072ca:	4b14      	ldr	r3, [pc, #80]	; (800731c <MX_ADC1_Init+0xc0>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 80072d2:	4b12      	ldr	r3, [pc, #72]	; (800731c <MX_ADC1_Init+0xc0>)
 80072d4:	2204      	movs	r2, #4
 80072d6:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80072d8:	4810      	ldr	r0, [pc, #64]	; (800731c <MX_ADC1_Init+0xc0>)
 80072da:	f7fa fdad 	bl	8001e38 <HAL_ADC_Init>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80072e4:	f000 fae6 	bl	80078b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80072e8:	4b0e      	ldr	r3, [pc, #56]	; (8007324 <MX_ADC1_Init+0xc8>)
 80072ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80072ec:	2306      	movs	r3, #6
 80072ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80072f0:	2307      	movs	r3, #7
 80072f2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80072f4:	237f      	movs	r3, #127	; 0x7f
 80072f6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80072f8:	2304      	movs	r3, #4
 80072fa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80072fc:	2300      	movs	r3, #0
 80072fe:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007300:	463b      	mov	r3, r7
 8007302:	4619      	mov	r1, r3
 8007304:	4805      	ldr	r0, [pc, #20]	; (800731c <MX_ADC1_Init+0xc0>)
 8007306:	f7fa fee3 	bl	80020d0 <HAL_ADC_ConfigChannel>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8007310:	f000 fad0 	bl	80078b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007314:	bf00      	nop
 8007316:	3718      	adds	r7, #24
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	200002c0 	.word	0x200002c0
 8007320:	50040000 	.word	0x50040000
 8007324:	c7520000 	.word	0xc7520000

08007328 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b08a      	sub	sp, #40	; 0x28
 800732c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800732e:	463b      	mov	r3, r7
 8007330:	2228      	movs	r2, #40	; 0x28
 8007332:	2100      	movs	r1, #0
 8007334:	4618      	mov	r0, r3
 8007336:	f001 f8cb 	bl	80084d0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800733a:	4b19      	ldr	r3, [pc, #100]	; (80073a0 <MX_DAC1_Init+0x78>)
 800733c:	4a19      	ldr	r2, [pc, #100]	; (80073a4 <MX_DAC1_Init+0x7c>)
 800733e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8007340:	4817      	ldr	r0, [pc, #92]	; (80073a0 <MX_DAC1_Init+0x78>)
 8007342:	f7fb fbd2 	bl	8002aea <HAL_DAC_Init>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800734c:	f000 fab2 	bl	80078b4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8007350:	2300      	movs	r3, #0
 8007352:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8007354:	2300      	movs	r3, #0
 8007356:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800735c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8007362:	2300      	movs	r3, #0
 8007364:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8007366:	2300      	movs	r3, #0
 8007368:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800736a:	463b      	mov	r3, r7
 800736c:	2200      	movs	r2, #0
 800736e:	4619      	mov	r1, r3
 8007370:	480b      	ldr	r0, [pc, #44]	; (80073a0 <MX_DAC1_Init+0x78>)
 8007372:	f7fb fbdd 	bl	8002b30 <HAL_DAC_ConfigChannel>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 800737c:	f000 fa9a 	bl	80078b4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8007380:	463b      	mov	r3, r7
 8007382:	2210      	movs	r2, #16
 8007384:	4619      	mov	r1, r3
 8007386:	4806      	ldr	r0, [pc, #24]	; (80073a0 <MX_DAC1_Init+0x78>)
 8007388:	f7fb fbd2 	bl	8002b30 <HAL_DAC_ConfigChannel>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <MX_DAC1_Init+0x6e>
  {
    Error_Handler();
 8007392:	f000 fa8f 	bl	80078b4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8007396:	bf00      	nop
 8007398:	3728      	adds	r7, #40	; 0x28
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	20000328 	.word	0x20000328
 80073a4:	40007400 	.word	0x40007400

080073a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80073ac:	4b1b      	ldr	r3, [pc, #108]	; (800741c <MX_I2C2_Init+0x74>)
 80073ae:	4a1c      	ldr	r2, [pc, #112]	; (8007420 <MX_I2C2_Init+0x78>)
 80073b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80073b2:	4b1a      	ldr	r3, [pc, #104]	; (800741c <MX_I2C2_Init+0x74>)
 80073b4:	4a1b      	ldr	r2, [pc, #108]	; (8007424 <MX_I2C2_Init+0x7c>)
 80073b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80073b8:	4b18      	ldr	r3, [pc, #96]	; (800741c <MX_I2C2_Init+0x74>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80073be:	4b17      	ldr	r3, [pc, #92]	; (800741c <MX_I2C2_Init+0x74>)
 80073c0:	2201      	movs	r2, #1
 80073c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80073c4:	4b15      	ldr	r3, [pc, #84]	; (800741c <MX_I2C2_Init+0x74>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80073ca:	4b14      	ldr	r3, [pc, #80]	; (800741c <MX_I2C2_Init+0x74>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80073d0:	4b12      	ldr	r3, [pc, #72]	; (800741c <MX_I2C2_Init+0x74>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80073d6:	4b11      	ldr	r3, [pc, #68]	; (800741c <MX_I2C2_Init+0x74>)
 80073d8:	2200      	movs	r2, #0
 80073da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80073dc:	4b0f      	ldr	r3, [pc, #60]	; (800741c <MX_I2C2_Init+0x74>)
 80073de:	2200      	movs	r2, #0
 80073e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80073e2:	480e      	ldr	r0, [pc, #56]	; (800741c <MX_I2C2_Init+0x74>)
 80073e4:	f7fc f96c 	bl	80036c0 <HAL_I2C_Init>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80073ee:	f000 fa61 	bl	80078b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80073f2:	2100      	movs	r1, #0
 80073f4:	4809      	ldr	r0, [pc, #36]	; (800741c <MX_I2C2_Init+0x74>)
 80073f6:	f7fc fef5 	bl	80041e4 <HAL_I2CEx_ConfigAnalogFilter>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007400:	f000 fa58 	bl	80078b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007404:	2100      	movs	r1, #0
 8007406:	4805      	ldr	r0, [pc, #20]	; (800741c <MX_I2C2_Init+0x74>)
 8007408:	f7fc ff37 	bl	800427a <HAL_I2CEx_ConfigDigitalFilter>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8007412:	f000 fa4f 	bl	80078b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8007416:	bf00      	nop
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	2000039c 	.word	0x2000039c
 8007420:	40005800 	.word	0x40005800
 8007424:	307075b1 	.word	0x307075b1

08007428 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b088      	sub	sp, #32
 800742c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800742e:	f107 0310 	add.w	r3, r7, #16
 8007432:	2200      	movs	r2, #0
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	605a      	str	r2, [r3, #4]
 8007438:	609a      	str	r2, [r3, #8]
 800743a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800743c:	1d3b      	adds	r3, r7, #4
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	605a      	str	r2, [r3, #4]
 8007444:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007446:	4b1d      	ldr	r3, [pc, #116]	; (80074bc <MX_TIM2_Init+0x94>)
 8007448:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800744c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 120;
 800744e:	4b1b      	ldr	r3, [pc, #108]	; (80074bc <MX_TIM2_Init+0x94>)
 8007450:	2278      	movs	r2, #120	; 0x78
 8007452:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007454:	4b19      	ldr	r3, [pc, #100]	; (80074bc <MX_TIM2_Init+0x94>)
 8007456:	2200      	movs	r2, #0
 8007458:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 23;
 800745a:	4b18      	ldr	r3, [pc, #96]	; (80074bc <MX_TIM2_Init+0x94>)
 800745c:	2217      	movs	r2, #23
 800745e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007460:	4b16      	ldr	r3, [pc, #88]	; (80074bc <MX_TIM2_Init+0x94>)
 8007462:	2200      	movs	r2, #0
 8007464:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007466:	4b15      	ldr	r3, [pc, #84]	; (80074bc <MX_TIM2_Init+0x94>)
 8007468:	2200      	movs	r2, #0
 800746a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800746c:	4813      	ldr	r0, [pc, #76]	; (80074bc <MX_TIM2_Init+0x94>)
 800746e:	f7fe fc05 	bl	8005c7c <HAL_TIM_Base_Init>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007478:	f000 fa1c 	bl	80078b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800747c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007480:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007482:	f107 0310 	add.w	r3, r7, #16
 8007486:	4619      	mov	r1, r3
 8007488:	480c      	ldr	r0, [pc, #48]	; (80074bc <MX_TIM2_Init+0x94>)
 800748a:	f7fe fd6d 	bl	8005f68 <HAL_TIM_ConfigClockSource>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8007494:	f000 fa0e 	bl	80078b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007498:	2300      	movs	r3, #0
 800749a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800749c:	2300      	movs	r3, #0
 800749e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80074a0:	1d3b      	adds	r3, r7, #4
 80074a2:	4619      	mov	r1, r3
 80074a4:	4805      	ldr	r0, [pc, #20]	; (80074bc <MX_TIM2_Init+0x94>)
 80074a6:	f7fe ff8f 	bl	80063c8 <HAL_TIMEx_MasterConfigSynchronization>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80074b0:	f000 fa00 	bl	80078b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80074b4:	bf00      	nop
 80074b6:	3720      	adds	r7, #32
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	200003f0 	.word	0x200003f0

080074c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80074c4:	4b22      	ldr	r3, [pc, #136]	; (8007550 <MX_USART1_UART_Init+0x90>)
 80074c6:	4a23      	ldr	r2, [pc, #140]	; (8007554 <MX_USART1_UART_Init+0x94>)
 80074c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80074ca:	4b21      	ldr	r3, [pc, #132]	; (8007550 <MX_USART1_UART_Init+0x90>)
 80074cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80074d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80074d2:	4b1f      	ldr	r3, [pc, #124]	; (8007550 <MX_USART1_UART_Init+0x90>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80074d8:	4b1d      	ldr	r3, [pc, #116]	; (8007550 <MX_USART1_UART_Init+0x90>)
 80074da:	2200      	movs	r2, #0
 80074dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80074de:	4b1c      	ldr	r3, [pc, #112]	; (8007550 <MX_USART1_UART_Init+0x90>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80074e4:	4b1a      	ldr	r3, [pc, #104]	; (8007550 <MX_USART1_UART_Init+0x90>)
 80074e6:	220c      	movs	r2, #12
 80074e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80074ea:	4b19      	ldr	r3, [pc, #100]	; (8007550 <MX_USART1_UART_Init+0x90>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80074f0:	4b17      	ldr	r3, [pc, #92]	; (8007550 <MX_USART1_UART_Init+0x90>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80074f6:	4b16      	ldr	r3, [pc, #88]	; (8007550 <MX_USART1_UART_Init+0x90>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80074fc:	4b14      	ldr	r3, [pc, #80]	; (8007550 <MX_USART1_UART_Init+0x90>)
 80074fe:	2200      	movs	r2, #0
 8007500:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007502:	4b13      	ldr	r3, [pc, #76]	; (8007550 <MX_USART1_UART_Init+0x90>)
 8007504:	2200      	movs	r2, #0
 8007506:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007508:	4811      	ldr	r0, [pc, #68]	; (8007550 <MX_USART1_UART_Init+0x90>)
 800750a:	f7ff f803 	bl	8006514 <HAL_UART_Init>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8007514:	f000 f9ce 	bl	80078b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007518:	2100      	movs	r1, #0
 800751a:	480d      	ldr	r0, [pc, #52]	; (8007550 <MX_USART1_UART_Init+0x90>)
 800751c:	f7ff fd34 	bl	8006f88 <HAL_UARTEx_SetTxFifoThreshold>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8007526:	f000 f9c5 	bl	80078b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800752a:	2100      	movs	r1, #0
 800752c:	4808      	ldr	r0, [pc, #32]	; (8007550 <MX_USART1_UART_Init+0x90>)
 800752e:	f7ff fd69 	bl	8007004 <HAL_UARTEx_SetRxFifoThreshold>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007538:	f000 f9bc 	bl	80078b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800753c:	4804      	ldr	r0, [pc, #16]	; (8007550 <MX_USART1_UART_Init+0x90>)
 800753e:	f7ff fcea 	bl	8006f16 <HAL_UARTEx_DisableFifoMode>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d001      	beq.n	800754c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007548:	f000 f9b4 	bl	80078b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800754c:	bf00      	nop
 800754e:	bd80      	pop	{r7, pc}
 8007550:	2000043c 	.word	0x2000043c
 8007554:	40013800 	.word	0x40013800

08007558 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800755e:	4b12      	ldr	r3, [pc, #72]	; (80075a8 <MX_DMA_Init+0x50>)
 8007560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007562:	4a11      	ldr	r2, [pc, #68]	; (80075a8 <MX_DMA_Init+0x50>)
 8007564:	f043 0304 	orr.w	r3, r3, #4
 8007568:	6493      	str	r3, [r2, #72]	; 0x48
 800756a:	4b0f      	ldr	r3, [pc, #60]	; (80075a8 <MX_DMA_Init+0x50>)
 800756c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800756e:	f003 0304 	and.w	r3, r3, #4
 8007572:	607b      	str	r3, [r7, #4]
 8007574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007576:	4b0c      	ldr	r3, [pc, #48]	; (80075a8 <MX_DMA_Init+0x50>)
 8007578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800757a:	4a0b      	ldr	r2, [pc, #44]	; (80075a8 <MX_DMA_Init+0x50>)
 800757c:	f043 0301 	orr.w	r3, r3, #1
 8007580:	6493      	str	r3, [r2, #72]	; 0x48
 8007582:	4b09      	ldr	r3, [pc, #36]	; (80075a8 <MX_DMA_Init+0x50>)
 8007584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	603b      	str	r3, [r7, #0]
 800758c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800758e:	2200      	movs	r2, #0
 8007590:	2100      	movs	r1, #0
 8007592:	200c      	movs	r0, #12
 8007594:	f7fb fa73 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007598:	200c      	movs	r0, #12
 800759a:	f7fb fa8c 	bl	8002ab6 <HAL_NVIC_EnableIRQ>

}
 800759e:	bf00      	nop
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	40021000 	.word	0x40021000

080075ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075b2:	f107 030c 	add.w	r3, r7, #12
 80075b6:	2200      	movs	r2, #0
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	605a      	str	r2, [r3, #4]
 80075bc:	609a      	str	r2, [r3, #8]
 80075be:	60da      	str	r2, [r3, #12]
 80075c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80075c2:	4b29      	ldr	r3, [pc, #164]	; (8007668 <MX_GPIO_Init+0xbc>)
 80075c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c6:	4a28      	ldr	r2, [pc, #160]	; (8007668 <MX_GPIO_Init+0xbc>)
 80075c8:	f043 0304 	orr.w	r3, r3, #4
 80075cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075ce:	4b26      	ldr	r3, [pc, #152]	; (8007668 <MX_GPIO_Init+0xbc>)
 80075d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d2:	f003 0304 	and.w	r3, r3, #4
 80075d6:	60bb      	str	r3, [r7, #8]
 80075d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80075da:	4b23      	ldr	r3, [pc, #140]	; (8007668 <MX_GPIO_Init+0xbc>)
 80075dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075de:	4a22      	ldr	r2, [pc, #136]	; (8007668 <MX_GPIO_Init+0xbc>)
 80075e0:	f043 0301 	orr.w	r3, r3, #1
 80075e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075e6:	4b20      	ldr	r3, [pc, #128]	; (8007668 <MX_GPIO_Init+0xbc>)
 80075e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	607b      	str	r3, [r7, #4]
 80075f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80075f2:	4b1d      	ldr	r3, [pc, #116]	; (8007668 <MX_GPIO_Init+0xbc>)
 80075f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075f6:	4a1c      	ldr	r2, [pc, #112]	; (8007668 <MX_GPIO_Init+0xbc>)
 80075f8:	f043 0302 	orr.w	r3, r3, #2
 80075fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075fe:	4b1a      	ldr	r3, [pc, #104]	; (8007668 <MX_GPIO_Init+0xbc>)
 8007600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	603b      	str	r3, [r7, #0]
 8007608:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_RESET);
 800760a:	2200      	movs	r2, #0
 800760c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007610:	4816      	ldr	r0, [pc, #88]	; (800766c <MX_GPIO_Init+0xc0>)
 8007612:	f7fc f80b 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007616:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800761a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800761c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007622:	2300      	movs	r3, #0
 8007624:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007626:	f107 030c 	add.w	r3, r7, #12
 800762a:	4619      	mov	r1, r3
 800762c:	4810      	ldr	r0, [pc, #64]	; (8007670 <MX_GPIO_Init+0xc4>)
 800762e:	f7fb fd79 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : myLed_Pin */
  GPIO_InitStruct.Pin = myLed_Pin;
 8007632:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007638:	2301      	movs	r3, #1
 800763a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800763c:	2300      	movs	r3, #0
 800763e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007640:	2300      	movs	r3, #0
 8007642:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(myLed_GPIO_Port, &GPIO_InitStruct);
 8007644:	f107 030c 	add.w	r3, r7, #12
 8007648:	4619      	mov	r1, r3
 800764a:	4808      	ldr	r0, [pc, #32]	; (800766c <MX_GPIO_Init+0xc0>)
 800764c:	f7fb fd6a 	bl	8003124 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8007650:	2200      	movs	r2, #0
 8007652:	2100      	movs	r1, #0
 8007654:	2028      	movs	r0, #40	; 0x28
 8007656:	f7fb fa12 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800765a:	2028      	movs	r0, #40	; 0x28
 800765c:	f7fb fa2b 	bl	8002ab6 <HAL_NVIC_EnableIRQ>

}
 8007660:	bf00      	nop
 8007662:	3720      	adds	r7, #32
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	40021000 	.word	0x40021000
 800766c:	48000400 	.word	0x48000400
 8007670:	48000800 	.word	0x48000800

08007674 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//callback function for interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8007674:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007678:	b086      	sub	sp, #24
 800767a:	af04      	add	r7, sp, #16
 800767c:	4603      	mov	r3, r0
 800767e:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) { //verify pin
 8007680:	88fb      	ldrh	r3, [r7, #6]
 8007682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007686:	f040 80d1 	bne.w	800782c <HAL_GPIO_EXTI_Callback+0x1b8>
		HAL_GPIO_TogglePin (myLed_GPIO_Port, myLed_Pin);
 800768a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800768e:	486a      	ldr	r0, [pc, #424]	; (8007838 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8007690:	f7fb ffe4 	bl	800365c <HAL_GPIO_TogglePin>

		// if selector is out of range, re-initialize to 0.
		if (selector > 7) {
 8007694:	4b69      	ldr	r3, [pc, #420]	; (800783c <HAL_GPIO_EXTI_Callback+0x1c8>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b07      	cmp	r3, #7
 800769a:	dd02      	ble.n	80076a2 <HAL_GPIO_EXTI_Callback+0x2e>
			selector = 0;
 800769c:	4b67      	ldr	r3, [pc, #412]	; (800783c <HAL_GPIO_EXTI_Callback+0x1c8>)
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]
		}

		// switch between different inputs
		switch(selector) {
 80076a2:	4b66      	ldr	r3, [pc, #408]	; (800783c <HAL_GPIO_EXTI_Callback+0x1c8>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b07      	cmp	r3, #7
 80076a8:	f200 80b8 	bhi.w	800781c <HAL_GPIO_EXTI_Callback+0x1a8>
 80076ac:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <HAL_GPIO_EXTI_Callback+0x40>)
 80076ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b2:	bf00      	nop
 80076b4:	080076d5 	.word	0x080076d5
 80076b8:	080076f9 	.word	0x080076f9
 80076bc:	0800771d 	.word	0x0800771d
 80076c0:	08007741 	.word	0x08007741
 80076c4:	08007785 	.word	0x08007785
 80076c8:	080077c9 	.word	0x080077c9
 80076cc:	0800780d 	.word	0x0800780d
 80076d0:	08007815 	.word	0x08007815
		case 0:
			temp_value = BSP_TSENSOR_ReadTemp();
 80076d4:	f000 fbb0 	bl	8007e38 <BSP_TSENSOR_ReadTemp>
 80076d8:	eef0 7a40 	vmov.f32	s15, s0
 80076dc:	4b58      	ldr	r3, [pc, #352]	; (8007840 <HAL_GPIO_EXTI_Callback+0x1cc>)
 80076de:	edc3 7a00 	vstr	s15, [r3]
			printf("temperature: %f\n", temp_value);
 80076e2:	4b57      	ldr	r3, [pc, #348]	; (8007840 <HAL_GPIO_EXTI_Callback+0x1cc>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7f8 ff46 	bl	8000578 <__aeabi_f2d>
 80076ec:	4602      	mov	r2, r0
 80076ee:	460b      	mov	r3, r1
 80076f0:	4854      	ldr	r0, [pc, #336]	; (8007844 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80076f2:	f001 fb5f 	bl	8008db4 <iprintf>
			break;
 80076f6:	e094      	b.n	8007822 <HAL_GPIO_EXTI_Callback+0x1ae>
		case 1:
			hum_value = BSP_HSENSOR_ReadHumidity();
 80076f8:	f000 fb02 	bl	8007d00 <BSP_HSENSOR_ReadHumidity>
 80076fc:	eef0 7a40 	vmov.f32	s15, s0
 8007700:	4b51      	ldr	r3, [pc, #324]	; (8007848 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8007702:	edc3 7a00 	vstr	s15, [r3]
			printf("humidity: %f\n", hum_value);
 8007706:	4b50      	ldr	r3, [pc, #320]	; (8007848 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4618      	mov	r0, r3
 800770c:	f7f8 ff34 	bl	8000578 <__aeabi_f2d>
 8007710:	4602      	mov	r2, r0
 8007712:	460b      	mov	r3, r1
 8007714:	484d      	ldr	r0, [pc, #308]	; (800784c <HAL_GPIO_EXTI_Callback+0x1d8>)
 8007716:	f001 fb4d 	bl	8008db4 <iprintf>
			break;
 800771a:	e082      	b.n	8007822 <HAL_GPIO_EXTI_Callback+0x1ae>
		case 2:
			baro_value = BSP_PSENSOR_ReadPressure();
 800771c:	f000 fb62 	bl	8007de4 <BSP_PSENSOR_ReadPressure>
 8007720:	eef0 7a40 	vmov.f32	s15, s0
 8007724:	4b4a      	ldr	r3, [pc, #296]	; (8007850 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8007726:	edc3 7a00 	vstr	s15, [r3]
			printf("barometer sensor value: %f\n", baro_value);
 800772a:	4b49      	ldr	r3, [pc, #292]	; (8007850 <HAL_GPIO_EXTI_Callback+0x1dc>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4618      	mov	r0, r3
 8007730:	f7f8 ff22 	bl	8000578 <__aeabi_f2d>
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	4846      	ldr	r0, [pc, #280]	; (8007854 <HAL_GPIO_EXTI_Callback+0x1e0>)
 800773a:	f001 fb3b 	bl	8008db4 <iprintf>
			break;
 800773e:	e070      	b.n	8007822 <HAL_GPIO_EXTI_Callback+0x1ae>
		case 3:
			BSP_MAGNETO_GetXYZ(mag_xyz);
 8007740:	4845      	ldr	r0, [pc, #276]	; (8007858 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8007742:	f000 fb17 	bl	8007d74 <BSP_MAGNETO_GetXYZ>
			printf("magnetometer -> x: %f\, y: %f, z: %f\n", mag_xyz[0], mag_xyz[1], mag_xyz[2]);
 8007746:	4b44      	ldr	r3, [pc, #272]	; (8007858 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4618      	mov	r0, r3
 800774c:	f7f8 ff14 	bl	8000578 <__aeabi_f2d>
 8007750:	4680      	mov	r8, r0
 8007752:	4689      	mov	r9, r1
 8007754:	4b40      	ldr	r3, [pc, #256]	; (8007858 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	4618      	mov	r0, r3
 800775a:	f7f8 ff0d 	bl	8000578 <__aeabi_f2d>
 800775e:	4604      	mov	r4, r0
 8007760:	460d      	mov	r5, r1
 8007762:	4b3d      	ldr	r3, [pc, #244]	; (8007858 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	4618      	mov	r0, r3
 8007768:	f7f8 ff06 	bl	8000578 <__aeabi_f2d>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007774:	e9cd 4500 	strd	r4, r5, [sp]
 8007778:	4642      	mov	r2, r8
 800777a:	464b      	mov	r3, r9
 800777c:	4837      	ldr	r0, [pc, #220]	; (800785c <HAL_GPIO_EXTI_Callback+0x1e8>)
 800777e:	f001 fb19 	bl	8008db4 <iprintf>
			break;
 8007782:	e04e      	b.n	8007822 <HAL_GPIO_EXTI_Callback+0x1ae>
		case 4:
			BSP_ACCELERO_AccGetXYZ(acc_xyz);
 8007784:	4836      	ldr	r0, [pc, #216]	; (8007860 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8007786:	f000 fa29 	bl	8007bdc <BSP_ACCELERO_AccGetXYZ>
			printf("accelerometer -> x: %f\, y: %f, z: %f\n", acc_xyz[0], acc_xyz[1], acc_xyz[2]);
 800778a:	4b35      	ldr	r3, [pc, #212]	; (8007860 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4618      	mov	r0, r3
 8007790:	f7f8 fef2 	bl	8000578 <__aeabi_f2d>
 8007794:	4680      	mov	r8, r0
 8007796:	4689      	mov	r9, r1
 8007798:	4b31      	ldr	r3, [pc, #196]	; (8007860 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	4618      	mov	r0, r3
 800779e:	f7f8 feeb 	bl	8000578 <__aeabi_f2d>
 80077a2:	4604      	mov	r4, r0
 80077a4:	460d      	mov	r5, r1
 80077a6:	4b2e      	ldr	r3, [pc, #184]	; (8007860 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7f8 fee4 	bl	8000578 <__aeabi_f2d>
 80077b0:	4602      	mov	r2, r0
 80077b2:	460b      	mov	r3, r1
 80077b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077b8:	e9cd 4500 	strd	r4, r5, [sp]
 80077bc:	4642      	mov	r2, r8
 80077be:	464b      	mov	r3, r9
 80077c0:	4828      	ldr	r0, [pc, #160]	; (8007864 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80077c2:	f001 faf7 	bl	8008db4 <iprintf>
			break;
 80077c6:	e02c      	b.n	8007822 <HAL_GPIO_EXTI_Callback+0x1ae>
		case 5:
			BSP_GYRO_GetXYZ(gyro_xyz);
 80077c8:	4827      	ldr	r0, [pc, #156]	; (8007868 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80077ca:	f000 fa61 	bl	8007c90 <BSP_GYRO_GetXYZ>
			printf("gyroscope -> x: %f\, y: %f, z: %f\n", gyro_xyz[0], gyro_xyz[1], gyro_xyz[2]);
 80077ce:	4b26      	ldr	r3, [pc, #152]	; (8007868 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7f8 fed0 	bl	8000578 <__aeabi_f2d>
 80077d8:	4680      	mov	r8, r0
 80077da:	4689      	mov	r9, r1
 80077dc:	4b22      	ldr	r3, [pc, #136]	; (8007868 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7f8 fec9 	bl	8000578 <__aeabi_f2d>
 80077e6:	4604      	mov	r4, r0
 80077e8:	460d      	mov	r5, r1
 80077ea:	4b1f      	ldr	r3, [pc, #124]	; (8007868 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7f8 fec2 	bl	8000578 <__aeabi_f2d>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077fc:	e9cd 4500 	strd	r4, r5, [sp]
 8007800:	4642      	mov	r2, r8
 8007802:	464b      	mov	r3, r9
 8007804:	4819      	ldr	r0, [pc, #100]	; (800786c <HAL_GPIO_EXTI_Callback+0x1f8>)
 8007806:	f001 fad5 	bl	8008db4 <iprintf>
			break;
 800780a:	e00a      	b.n	8007822 <HAL_GPIO_EXTI_Callback+0x1ae>
		case 6:
			printf("Not yet determined 1.\n");
 800780c:	4818      	ldr	r0, [pc, #96]	; (8007870 <HAL_GPIO_EXTI_Callback+0x1fc>)
 800780e:	f001 fb57 	bl	8008ec0 <puts>
			break;
 8007812:	e006      	b.n	8007822 <HAL_GPIO_EXTI_Callback+0x1ae>
		case 7:
			printf("Not yet determined 2.\n");
 8007814:	4817      	ldr	r0, [pc, #92]	; (8007874 <HAL_GPIO_EXTI_Callback+0x200>)
 8007816:	f001 fb53 	bl	8008ec0 <puts>
			break;
 800781a:	e002      	b.n	8007822 <HAL_GPIO_EXTI_Callback+0x1ae>
		default:
			printf("Selector not in range. Error.\n");
 800781c:	4816      	ldr	r0, [pc, #88]	; (8007878 <HAL_GPIO_EXTI_Callback+0x204>)
 800781e:	f001 fb4f 	bl	8008ec0 <puts>
		}
		selector++;
 8007822:	4b06      	ldr	r3, [pc, #24]	; (800783c <HAL_GPIO_EXTI_Callback+0x1c8>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3301      	adds	r3, #1
 8007828:	4a04      	ldr	r2, [pc, #16]	; (800783c <HAL_GPIO_EXTI_Callback+0x1c8>)
 800782a:	6013      	str	r3, [r2, #0]
	}
}
 800782c:	bf00      	nop
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007836:	bf00      	nop
 8007838:	48000400 	.word	0x48000400
 800783c:	200004cc 	.word	0x200004cc
 8007840:	200004d0 	.word	0x200004d0
 8007844:	0800b020 	.word	0x0800b020
 8007848:	200004d4 	.word	0x200004d4
 800784c:	0800b034 	.word	0x0800b034
 8007850:	200004fc 	.word	0x200004fc
 8007854:	0800b044 	.word	0x0800b044
 8007858:	200004d8 	.word	0x200004d8
 800785c:	0800b060 	.word	0x0800b060
 8007860:	200004e4 	.word	0x200004e4
 8007864:	0800b088 	.word	0x0800b088
 8007868:	200004f0 	.word	0x200004f0
 800786c:	0800b0b0 	.word	0x0800b0b0
 8007870:	0800b0d4 	.word	0x0800b0d4
 8007874:	0800b0ec 	.word	0x0800b0ec
 8007878:	0800b104 	.word	0x0800b104

0800787c <_write>:


//function for printing to console (swb port 0)
int _write(int file, char *ptr, int len)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007888:	2300      	movs	r3, #0
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	e009      	b.n	80078a2 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	60ba      	str	r2, [r7, #8]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff fc40 	bl	800711c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	3301      	adds	r3, #1
 80078a0:	617b      	str	r3, [r7, #20]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	dbf1      	blt.n	800788e <_write+0x12>
  }
  return len;
 80078aa:	687b      	ldr	r3, [r7, #4]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3718      	adds	r7, #24
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80078b4:	b480      	push	{r7}
 80078b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80078b8:	b672      	cpsid	i
}
 80078ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80078bc:	e7fe      	b.n	80078bc <Error_Handler+0x8>
	...

080078c0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b08a      	sub	sp, #40	; 0x28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80078c8:	4b27      	ldr	r3, [pc, #156]	; (8007968 <I2Cx_MspInit+0xa8>)
 80078ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078cc:	4a26      	ldr	r2, [pc, #152]	; (8007968 <I2Cx_MspInit+0xa8>)
 80078ce:	f043 0302 	orr.w	r3, r3, #2
 80078d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078d4:	4b24      	ldr	r3, [pc, #144]	; (8007968 <I2Cx_MspInit+0xa8>)
 80078d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078d8:	f003 0302 	and.w	r3, r3, #2
 80078dc:	613b      	str	r3, [r7, #16]
 80078de:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80078e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80078e4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80078e6:	2312      	movs	r3, #18
 80078e8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80078ea:	2301      	movs	r3, #1
 80078ec:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078ee:	2303      	movs	r3, #3
 80078f0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80078f2:	2304      	movs	r3, #4
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80078f6:	f107 0314 	add.w	r3, r7, #20
 80078fa:	4619      	mov	r1, r3
 80078fc:	481b      	ldr	r0, [pc, #108]	; (800796c <I2Cx_MspInit+0xac>)
 80078fe:	f7fb fc11 	bl	8003124 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8007902:	f107 0314 	add.w	r3, r7, #20
 8007906:	4619      	mov	r1, r3
 8007908:	4818      	ldr	r0, [pc, #96]	; (800796c <I2Cx_MspInit+0xac>)
 800790a:	f7fb fc0b 	bl	8003124 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800790e:	4b16      	ldr	r3, [pc, #88]	; (8007968 <I2Cx_MspInit+0xa8>)
 8007910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007912:	4a15      	ldr	r2, [pc, #84]	; (8007968 <I2Cx_MspInit+0xa8>)
 8007914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007918:	6593      	str	r3, [r2, #88]	; 0x58
 800791a:	4b13      	ldr	r3, [pc, #76]	; (8007968 <I2Cx_MspInit+0xa8>)
 800791c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800791e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8007926:	4b10      	ldr	r3, [pc, #64]	; (8007968 <I2Cx_MspInit+0xa8>)
 8007928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792a:	4a0f      	ldr	r2, [pc, #60]	; (8007968 <I2Cx_MspInit+0xa8>)
 800792c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007930:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8007932:	4b0d      	ldr	r3, [pc, #52]	; (8007968 <I2Cx_MspInit+0xa8>)
 8007934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007936:	4a0c      	ldr	r2, [pc, #48]	; (8007968 <I2Cx_MspInit+0xa8>)
 8007938:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800793c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800793e:	2200      	movs	r2, #0
 8007940:	210f      	movs	r1, #15
 8007942:	2021      	movs	r0, #33	; 0x21
 8007944:	f7fb f89b 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8007948:	2021      	movs	r0, #33	; 0x21
 800794a:	f7fb f8b4 	bl	8002ab6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800794e:	2200      	movs	r2, #0
 8007950:	210f      	movs	r1, #15
 8007952:	2022      	movs	r0, #34	; 0x22
 8007954:	f7fb f893 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8007958:	2022      	movs	r0, #34	; 0x22
 800795a:	f7fb f8ac 	bl	8002ab6 <HAL_NVIC_EnableIRQ>
}
 800795e:	bf00      	nop
 8007960:	3728      	adds	r7, #40	; 0x28
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	40021000 	.word	0x40021000
 800796c:	48000400 	.word	0x48000400

08007970 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a12      	ldr	r2, [pc, #72]	; (80079c4 <I2Cx_Init+0x54>)
 800797c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a11      	ldr	r2, [pc, #68]	; (80079c8 <I2Cx_Init+0x58>)
 8007982:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7ff ff89 	bl	80078c0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7fb fe86 	bl	80036c0 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80079b4:	2100      	movs	r1, #0
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7fc fc14 	bl	80041e4 <HAL_I2CEx_ConfigAnalogFilter>
}
 80079bc:	bf00      	nop
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	40005800 	.word	0x40005800
 80079c8:	00702681 	.word	0x00702681

080079cc <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b08a      	sub	sp, #40	; 0x28
 80079d0:	af04      	add	r7, sp, #16
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	4608      	mov	r0, r1
 80079d6:	4611      	mov	r1, r2
 80079d8:	461a      	mov	r2, r3
 80079da:	4603      	mov	r3, r0
 80079dc:	72fb      	strb	r3, [r7, #11]
 80079de:	460b      	mov	r3, r1
 80079e0:	813b      	strh	r3, [r7, #8]
 80079e2:	4613      	mov	r3, r2
 80079e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80079ea:	7afb      	ldrb	r3, [r7, #11]
 80079ec:	b299      	uxth	r1, r3
 80079ee:	88f8      	ldrh	r0, [r7, #6]
 80079f0:	893a      	ldrh	r2, [r7, #8]
 80079f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80079f6:	9302      	str	r3, [sp, #8]
 80079f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079fa:	9301      	str	r3, [sp, #4]
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	4603      	mov	r3, r0
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f7fc f82e 	bl	8003a64 <HAL_I2C_Mem_Read>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8007a0c:	7dfb      	ldrb	r3, [r7, #23]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d004      	beq.n	8007a1c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8007a12:	7afb      	ldrb	r3, [r7, #11]
 8007a14:	4619      	mov	r1, r3
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 f832 	bl	8007a80 <I2Cx_Error>
  }
  return status;
 8007a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b08a      	sub	sp, #40	; 0x28
 8007a2a:	af04      	add	r7, sp, #16
 8007a2c:	60f8      	str	r0, [r7, #12]
 8007a2e:	4608      	mov	r0, r1
 8007a30:	4611      	mov	r1, r2
 8007a32:	461a      	mov	r2, r3
 8007a34:	4603      	mov	r3, r0
 8007a36:	72fb      	strb	r3, [r7, #11]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	813b      	strh	r3, [r7, #8]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8007a44:	7afb      	ldrb	r3, [r7, #11]
 8007a46:	b299      	uxth	r1, r3
 8007a48:	88f8      	ldrh	r0, [r7, #6]
 8007a4a:	893a      	ldrh	r2, [r7, #8]
 8007a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a50:	9302      	str	r3, [sp, #8]
 8007a52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a54:	9301      	str	r3, [sp, #4]
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f7fb feed 	bl	800383c <HAL_I2C_Mem_Write>
 8007a62:	4603      	mov	r3, r0
 8007a64:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d004      	beq.n	8007a76 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8007a6c:	7afb      	ldrb	r3, [r7, #11]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 f805 	bl	8007a80 <I2Cx_Error>
  }
  return status;
 8007a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3718      	adds	r7, #24
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7fb fea6 	bl	80037de <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7ff ff6c 	bl	8007970 <I2Cx_Init>
}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8007aa4:	4802      	ldr	r0, [pc, #8]	; (8007ab0 <SENSOR_IO_Init+0x10>)
 8007aa6:	f7ff ff63 	bl	8007970 <I2Cx_Init>
}
 8007aaa:	bf00      	nop
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	20000500 	.word	0x20000500

08007ab4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af02      	add	r7, sp, #8
 8007aba:	4603      	mov	r3, r0
 8007abc:	71fb      	strb	r3, [r7, #7]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	71bb      	strb	r3, [r7, #6]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8007ac6:	79bb      	ldrb	r3, [r7, #6]
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	79f9      	ldrb	r1, [r7, #7]
 8007acc:	2301      	movs	r3, #1
 8007ace:	9301      	str	r3, [sp, #4]
 8007ad0:	1d7b      	adds	r3, r7, #5
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	4803      	ldr	r0, [pc, #12]	; (8007ae4 <SENSOR_IO_Write+0x30>)
 8007ad8:	f7ff ffa5 	bl	8007a26 <I2Cx_WriteMultiple>
}
 8007adc:	bf00      	nop
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	20000500 	.word	0x20000500

08007ae8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af02      	add	r7, sp, #8
 8007aee:	4603      	mov	r3, r0
 8007af0:	460a      	mov	r2, r1
 8007af2:	71fb      	strb	r3, [r7, #7]
 8007af4:	4613      	mov	r3, r2
 8007af6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8007af8:	2300      	movs	r3, #0
 8007afa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8007afc:	79bb      	ldrb	r3, [r7, #6]
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	79f9      	ldrb	r1, [r7, #7]
 8007b02:	2301      	movs	r3, #1
 8007b04:	9301      	str	r3, [sp, #4]
 8007b06:	f107 030f 	add.w	r3, r7, #15
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	4804      	ldr	r0, [pc, #16]	; (8007b20 <SENSOR_IO_Read+0x38>)
 8007b10:	f7ff ff5c 	bl	80079cc <I2Cx_ReadMultiple>

  return read_value;
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000500 	.word	0x20000500

08007b24 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af02      	add	r7, sp, #8
 8007b2a:	603a      	str	r2, [r7, #0]
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	4603      	mov	r3, r0
 8007b30:	71fb      	strb	r3, [r7, #7]
 8007b32:	460b      	mov	r3, r1
 8007b34:	71bb      	strb	r3, [r7, #6]
 8007b36:	4613      	mov	r3, r2
 8007b38:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8007b3a:	79bb      	ldrb	r3, [r7, #6]
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	79f9      	ldrb	r1, [r7, #7]
 8007b40:	88bb      	ldrh	r3, [r7, #4]
 8007b42:	9301      	str	r3, [sp, #4]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	2301      	movs	r3, #1
 8007b4a:	4804      	ldr	r0, [pc, #16]	; (8007b5c <SENSOR_IO_ReadMultiple+0x38>)
 8007b4c:	f7ff ff3e 	bl	80079cc <I2Cx_ReadMultiple>
 8007b50:	4603      	mov	r3, r0
 8007b52:	b29b      	uxth	r3, r3
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	20000500 	.word	0x20000500

08007b60 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8007b6e:	4b19      	ldr	r3, [pc, #100]	; (8007bd4 <BSP_ACCELERO_Init+0x74>)
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	4798      	blx	r3
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b6a      	cmp	r3, #106	; 0x6a
 8007b78:	d002      	beq.n	8007b80 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	73fb      	strb	r3, [r7, #15]
 8007b7e:	e024      	b.n	8007bca <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8007b80:	4b15      	ldr	r3, [pc, #84]	; (8007bd8 <BSP_ACCELERO_Init+0x78>)
 8007b82:	4a14      	ldr	r2, [pc, #80]	; (8007bd4 <BSP_ACCELERO_Init+0x74>)
 8007b84:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8007b86:	2330      	movs	r3, #48	; 0x30
 8007b88:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8007b92:	2340      	movs	r3, #64	; 0x40
 8007b94:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8007b9e:	797a      	ldrb	r2, [r7, #5]
 8007ba0:	7abb      	ldrb	r3, [r7, #10]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8007ba8:	7a3b      	ldrb	r3, [r7, #8]
 8007baa:	f043 0304 	orr.w	r3, r3, #4
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	021b      	lsls	r3, r3, #8
 8007bb2:	b21a      	sxth	r2, r3
 8007bb4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	b21b      	sxth	r3, r3
 8007bbc:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8007bbe:	4b06      	ldr	r3, [pc, #24]	; (8007bd8 <BSP_ACCELERO_Init+0x78>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	89ba      	ldrh	r2, [r7, #12]
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	4798      	blx	r3
  }  

  return ret;
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	2000005c 	.word	0x2000005c
 8007bd8:	20000554 	.word	0x20000554

08007bdc <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8007be4:	4b08      	ldr	r3, [pc, #32]	; (8007c08 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d009      	beq.n	8007c00 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8007bec:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d004      	beq.n	8007c00 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8007bf6:	4b04      	ldr	r3, [pc, #16]	; (8007c08 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	4798      	blx	r3
    }
  }
}
 8007c00:	bf00      	nop
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	20000554 	.word	0x20000554

08007c0c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8007c16:	2300      	movs	r3, #0
 8007c18:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8007c1a:	4b1b      	ldr	r3, [pc, #108]	; (8007c88 <BSP_GYRO_Init+0x7c>)
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	4798      	blx	r3
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b6a      	cmp	r3, #106	; 0x6a
 8007c24:	d002      	beq.n	8007c2c <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	73fb      	strb	r3, [r7, #15]
 8007c2a:	e028      	b.n	8007c7e <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8007c2c:	4b17      	ldr	r3, [pc, #92]	; (8007c8c <BSP_GYRO_Init+0x80>)
 8007c2e:	4a16      	ldr	r2, [pc, #88]	; (8007c88 <BSP_GYRO_Init+0x7c>)
 8007c30:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8007c32:	2300      	movs	r3, #0
 8007c34:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8007c36:	2330      	movs	r3, #48	; 0x30
 8007c38:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8007c42:	2340      	movs	r3, #64	; 0x40
 8007c44:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8007c46:	2300      	movs	r3, #0
 8007c48:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8007c4a:	230c      	movs	r3, #12
 8007c4c:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8007c4e:	7aba      	ldrb	r2, [r7, #10]
 8007c50:	797b      	ldrb	r3, [r7, #5]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8007c58:	7a3b      	ldrb	r3, [r7, #8]
 8007c5a:	f043 0304 	orr.w	r3, r3, #4
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	021b      	lsls	r3, r3, #8
 8007c62:	b21a      	sxth	r2, r3
 8007c64:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	b21b      	sxth	r3, r3
 8007c6c:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8007c6e:	4b07      	ldr	r3, [pc, #28]	; (8007c8c <BSP_GYRO_Init+0x80>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	89ba      	ldrh	r2, [r7, #12]
 8007c76:	4610      	mov	r0, r2
 8007c78:	4798      	blx	r3
    
    ret = GYRO_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	20000090 	.word	0x20000090
 8007c8c:	20000558 	.word	0x20000558

08007c90 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8007c98:	4b08      	ldr	r3, [pc, #32]	; (8007cbc <BSP_GYRO_GetXYZ+0x2c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d009      	beq.n	8007cb4 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8007ca0:	4b06      	ldr	r3, [pc, #24]	; (8007cbc <BSP_GYRO_GetXYZ+0x2c>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d004      	beq.n	8007cb4 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8007caa:	4b04      	ldr	r3, [pc, #16]	; (8007cbc <BSP_GYRO_GetXYZ+0x2c>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	4798      	blx	r3
    }
  }
}
 8007cb4:	bf00      	nop
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	20000558 	.word	0x20000558

08007cc0 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8007cc6:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <BSP_HSENSOR_Init+0x38>)
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	20be      	movs	r0, #190	; 0xbe
 8007ccc:	4798      	blx	r3
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2bbc      	cmp	r3, #188	; 0xbc
 8007cd2:	d002      	beq.n	8007cda <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	607b      	str	r3, [r7, #4]
 8007cd8:	e009      	b.n	8007cee <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8007cda:	4b08      	ldr	r3, [pc, #32]	; (8007cfc <BSP_HSENSOR_Init+0x3c>)
 8007cdc:	4a06      	ldr	r2, [pc, #24]	; (8007cf8 <BSP_HSENSOR_Init+0x38>)
 8007cde:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8007ce0:	4b06      	ldr	r3, [pc, #24]	; (8007cfc <BSP_HSENSOR_Init+0x3c>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	20be      	movs	r0, #190	; 0xbe
 8007ce8:	4798      	blx	r3
    ret = HSENSOR_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8007cee:	687b      	ldr	r3, [r7, #4]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	20000000 	.word	0x20000000
 8007cfc:	2000055c 	.word	0x2000055c

08007d00 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8007d00:	b580      	push	{r7, lr}
 8007d02:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8007d04:	4b04      	ldr	r3, [pc, #16]	; (8007d18 <BSP_HSENSOR_ReadHumidity+0x18>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	20be      	movs	r0, #190	; 0xbe
 8007d0c:	4798      	blx	r3
 8007d0e:	eef0 7a40 	vmov.f32	s15, s0
}
 8007d12:	eeb0 0a67 	vmov.f32	s0, s15
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	2000055c 	.word	0x2000055c

08007d1c <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8007d26:	4b11      	ldr	r3, [pc, #68]	; (8007d6c <BSP_MAGNETO_Init+0x50>)
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	4798      	blx	r3
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b3d      	cmp	r3, #61	; 0x3d
 8007d30:	d002      	beq.n	8007d38 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	71fb      	strb	r3, [r7, #7]
 8007d36:	e013      	b.n	8007d60 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8007d38:	4b0d      	ldr	r3, [pc, #52]	; (8007d70 <BSP_MAGNETO_Init+0x54>)
 8007d3a:	4a0c      	ldr	r2, [pc, #48]	; (8007d6c <BSP_MAGNETO_Init+0x50>)
 8007d3c:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8007d3e:	2358      	movs	r3, #88	; 0x58
 8007d40:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8007d42:	2300      	movs	r3, #0
 8007d44:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8007d46:	2300      	movs	r3, #0
 8007d48:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8007d4a:	2308      	movs	r3, #8
 8007d4c:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8007d4e:	2340      	movs	r3, #64	; 0x40
 8007d50:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8007d52:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <BSP_MAGNETO_Init+0x54>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	463a      	mov	r2, r7
 8007d5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d5e:	4798      	blx	r3
  } 

  return ret;  
 8007d60:	79fb      	ldrb	r3, [r7, #7]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	2000001c 	.word	0x2000001c
 8007d70:	20000560 	.word	0x20000560

08007d74 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8007d7c:	4b08      	ldr	r3, [pc, #32]	; (8007da0 <BSP_MAGNETO_GetXYZ+0x2c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d009      	beq.n	8007d98 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8007d84:	4b06      	ldr	r3, [pc, #24]	; (8007da0 <BSP_MAGNETO_GetXYZ+0x2c>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d004      	beq.n	8007d98 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8007d8e:	4b04      	ldr	r3, [pc, #16]	; (8007da0 <BSP_MAGNETO_GetXYZ+0x2c>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	4798      	blx	r3
    }
  }
}
 8007d98:	bf00      	nop
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	20000560 	.word	0x20000560

08007da4 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8007daa:	4b0c      	ldr	r3, [pc, #48]	; (8007ddc <BSP_PSENSOR_Init+0x38>)
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	20ba      	movs	r0, #186	; 0xba
 8007db0:	4798      	blx	r3
 8007db2:	4603      	mov	r3, r0
 8007db4:	2bb1      	cmp	r3, #177	; 0xb1
 8007db6:	d002      	beq.n	8007dbe <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	607b      	str	r3, [r7, #4]
 8007dbc:	e009      	b.n	8007dd2 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8007dbe:	4b08      	ldr	r3, [pc, #32]	; (8007de0 <BSP_PSENSOR_Init+0x3c>)
 8007dc0:	4a06      	ldr	r2, [pc, #24]	; (8007ddc <BSP_PSENSOR_Init+0x38>)
 8007dc2:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8007dc4:	4b06      	ldr	r3, [pc, #24]	; (8007de0 <BSP_PSENSOR_Init+0x3c>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	20ba      	movs	r0, #186	; 0xba
 8007dcc:	4798      	blx	r3
    ret = PSENSOR_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8007dd2:	687b      	ldr	r3, [r7, #4]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	20000050 	.word	0x20000050
 8007de0:	20000564 	.word	0x20000564

08007de4 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8007de4:	b580      	push	{r7, lr}
 8007de6:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8007de8:	4b04      	ldr	r3, [pc, #16]	; (8007dfc <BSP_PSENSOR_ReadPressure+0x18>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	20ba      	movs	r0, #186	; 0xba
 8007df0:	4798      	blx	r3
 8007df2:	eef0 7a40 	vmov.f32	s15, s0
}
 8007df6:	eeb0 0a67 	vmov.f32	s0, s15
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	20000564 	.word	0x20000564

08007e00 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8007e0a:	4b09      	ldr	r3, [pc, #36]	; (8007e30 <BSP_TSENSOR_Init+0x30>)
 8007e0c:	4a09      	ldr	r2, [pc, #36]	; (8007e34 <BSP_TSENSOR_Init+0x34>)
 8007e0e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8007e10:	f7ff fe46 	bl	8007aa0 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8007e14:	4b06      	ldr	r3, [pc, #24]	; (8007e30 <BSP_TSENSOR_Init+0x30>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	20be      	movs	r0, #190	; 0xbe
 8007e1e:	4798      	blx	r3

  ret = TSENSOR_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8007e24:	79fb      	ldrb	r3, [r7, #7]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20000568 	.word	0x20000568
 8007e34:	2000000c 	.word	0x2000000c

08007e38 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8007e3c:	4b04      	ldr	r3, [pc, #16]	; (8007e50 <BSP_TSENSOR_ReadTemp+0x18>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	20be      	movs	r0, #190	; 0xbe
 8007e44:	4798      	blx	r3
 8007e46:	eef0 7a40 	vmov.f32	s15, s0
}
 8007e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	20000568 	.word	0x20000568

08007e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e5a:	4b0f      	ldr	r3, [pc, #60]	; (8007e98 <HAL_MspInit+0x44>)
 8007e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e5e:	4a0e      	ldr	r2, [pc, #56]	; (8007e98 <HAL_MspInit+0x44>)
 8007e60:	f043 0301 	orr.w	r3, r3, #1
 8007e64:	6613      	str	r3, [r2, #96]	; 0x60
 8007e66:	4b0c      	ldr	r3, [pc, #48]	; (8007e98 <HAL_MspInit+0x44>)
 8007e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	607b      	str	r3, [r7, #4]
 8007e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007e72:	4b09      	ldr	r3, [pc, #36]	; (8007e98 <HAL_MspInit+0x44>)
 8007e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e76:	4a08      	ldr	r2, [pc, #32]	; (8007e98 <HAL_MspInit+0x44>)
 8007e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8007e7e:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <HAL_MspInit+0x44>)
 8007e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e86:	603b      	str	r3, [r7, #0]
 8007e88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	40021000 	.word	0x40021000

08007e9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b0a8      	sub	sp, #160	; 0xa0
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007ea4:	f107 030c 	add.w	r3, r7, #12
 8007ea8:	2294      	movs	r2, #148	; 0x94
 8007eaa:	2100      	movs	r1, #0
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 fb0f 	bl	80084d0 <memset>
  if(hadc->Instance==ADC1)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a19      	ldr	r2, [pc, #100]	; (8007f1c <HAL_ADC_MspInit+0x80>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d12b      	bne.n	8007f14 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8007ebc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ec0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8007ec2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ec6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8007ed2:	2310      	movs	r3, #16
 8007ed4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007eda:	2302      	movs	r3, #2
 8007edc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007ede:	2302      	movs	r3, #2
 8007ee0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8007ee2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007ee8:	f107 030c 	add.w	r3, r7, #12
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7fd f9ad 	bl	800524c <HAL_RCCEx_PeriphCLKConfig>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8007ef8:	f7ff fcdc 	bl	80078b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8007efc:	4b08      	ldr	r3, [pc, #32]	; (8007f20 <HAL_ADC_MspInit+0x84>)
 8007efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f00:	4a07      	ldr	r2, [pc, #28]	; (8007f20 <HAL_ADC_MspInit+0x84>)
 8007f02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007f06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f08:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <HAL_ADC_MspInit+0x84>)
 8007f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f10:	60bb      	str	r3, [r7, #8]
 8007f12:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007f14:	bf00      	nop
 8007f16:	37a0      	adds	r7, #160	; 0xa0
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	50040000 	.word	0x50040000
 8007f20:	40021000 	.word	0x40021000

08007f24 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b08a      	sub	sp, #40	; 0x28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f2c:	f107 0314 	add.w	r3, r7, #20
 8007f30:	2200      	movs	r2, #0
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	605a      	str	r2, [r3, #4]
 8007f36:	609a      	str	r2, [r3, #8]
 8007f38:	60da      	str	r2, [r3, #12]
 8007f3a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a2b      	ldr	r2, [pc, #172]	; (8007ff0 <HAL_DAC_MspInit+0xcc>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d14f      	bne.n	8007fe6 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8007f46:	4b2b      	ldr	r3, [pc, #172]	; (8007ff4 <HAL_DAC_MspInit+0xd0>)
 8007f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4a:	4a2a      	ldr	r2, [pc, #168]	; (8007ff4 <HAL_DAC_MspInit+0xd0>)
 8007f4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f50:	6593      	str	r3, [r2, #88]	; 0x58
 8007f52:	4b28      	ldr	r3, [pc, #160]	; (8007ff4 <HAL_DAC_MspInit+0xd0>)
 8007f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f5a:	613b      	str	r3, [r7, #16]
 8007f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f5e:	4b25      	ldr	r3, [pc, #148]	; (8007ff4 <HAL_DAC_MspInit+0xd0>)
 8007f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f62:	4a24      	ldr	r2, [pc, #144]	; (8007ff4 <HAL_DAC_MspInit+0xd0>)
 8007f64:	f043 0301 	orr.w	r3, r3, #1
 8007f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f6a:	4b22      	ldr	r3, [pc, #136]	; (8007ff4 <HAL_DAC_MspInit+0xd0>)
 8007f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007f76:	2330      	movs	r3, #48	; 0x30
 8007f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f82:	f107 0314 	add.w	r3, r7, #20
 8007f86:	4619      	mov	r1, r3
 8007f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007f8c:	f7fb f8ca 	bl	8003124 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8007f90:	4b19      	ldr	r3, [pc, #100]	; (8007ff8 <HAL_DAC_MspInit+0xd4>)
 8007f92:	4a1a      	ldr	r2, [pc, #104]	; (8007ffc <HAL_DAC_MspInit+0xd8>)
 8007f94:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8007f96:	4b18      	ldr	r3, [pc, #96]	; (8007ff8 <HAL_DAC_MspInit+0xd4>)
 8007f98:	2206      	movs	r2, #6
 8007f9a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007f9c:	4b16      	ldr	r3, [pc, #88]	; (8007ff8 <HAL_DAC_MspInit+0xd4>)
 8007f9e:	2210      	movs	r2, #16
 8007fa0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007fa2:	4b15      	ldr	r3, [pc, #84]	; (8007ff8 <HAL_DAC_MspInit+0xd4>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007fa8:	4b13      	ldr	r3, [pc, #76]	; (8007ff8 <HAL_DAC_MspInit+0xd4>)
 8007faa:	2280      	movs	r2, #128	; 0x80
 8007fac:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007fae:	4b12      	ldr	r3, [pc, #72]	; (8007ff8 <HAL_DAC_MspInit+0xd4>)
 8007fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fb4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007fb6:	4b10      	ldr	r3, [pc, #64]	; (8007ff8 <HAL_DAC_MspInit+0xd4>)
 8007fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007fbc:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8007fbe:	4b0e      	ldr	r3, [pc, #56]	; (8007ff8 <HAL_DAC_MspInit+0xd4>)
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007fc4:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <HAL_DAC_MspInit+0xd4>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8007fca:	480b      	ldr	r0, [pc, #44]	; (8007ff8 <HAL_DAC_MspInit+0xd4>)
 8007fcc:	f7fa fef0 	bl	8002db0 <HAL_DMA_Init>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8007fd6:	f7ff fc6d 	bl	80078b4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a06      	ldr	r2, [pc, #24]	; (8007ff8 <HAL_DAC_MspInit+0xd4>)
 8007fde:	609a      	str	r2, [r3, #8]
 8007fe0:	4a05      	ldr	r2, [pc, #20]	; (8007ff8 <HAL_DAC_MspInit+0xd4>)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8007fe6:	bf00      	nop
 8007fe8:	3728      	adds	r7, #40	; 0x28
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	40007400 	.word	0x40007400
 8007ff4:	40021000 	.word	0x40021000
 8007ff8:	2000033c 	.word	0x2000033c
 8007ffc:	4002001c 	.word	0x4002001c

08008000 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b0ae      	sub	sp, #184	; 0xb8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008008:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800800c:	2200      	movs	r2, #0
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	605a      	str	r2, [r3, #4]
 8008012:	609a      	str	r2, [r3, #8]
 8008014:	60da      	str	r2, [r3, #12]
 8008016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008018:	f107 0310 	add.w	r3, r7, #16
 800801c:	2294      	movs	r2, #148	; 0x94
 800801e:	2100      	movs	r1, #0
 8008020:	4618      	mov	r0, r3
 8008022:	f000 fa55 	bl	80084d0 <memset>
  if(hi2c->Instance==I2C2)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a21      	ldr	r2, [pc, #132]	; (80080b0 <HAL_I2C_MspInit+0xb0>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d13b      	bne.n	80080a8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8008030:	2380      	movs	r3, #128	; 0x80
 8008032:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8008034:	2300      	movs	r3, #0
 8008036:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008038:	f107 0310 	add.w	r3, r7, #16
 800803c:	4618      	mov	r0, r3
 800803e:	f7fd f905 	bl	800524c <HAL_RCCEx_PeriphCLKConfig>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d001      	beq.n	800804c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8008048:	f7ff fc34 	bl	80078b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800804c:	4b19      	ldr	r3, [pc, #100]	; (80080b4 <HAL_I2C_MspInit+0xb4>)
 800804e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008050:	4a18      	ldr	r2, [pc, #96]	; (80080b4 <HAL_I2C_MspInit+0xb4>)
 8008052:	f043 0302 	orr.w	r3, r3, #2
 8008056:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008058:	4b16      	ldr	r3, [pc, #88]	; (80080b4 <HAL_I2C_MspInit+0xb4>)
 800805a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800805c:	f003 0302 	and.w	r3, r3, #2
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008064:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008068:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800806c:	2312      	movs	r3, #18
 800806e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008072:	2300      	movs	r3, #0
 8008074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008078:	2303      	movs	r3, #3
 800807a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800807e:	2304      	movs	r3, #4
 8008080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008084:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008088:	4619      	mov	r1, r3
 800808a:	480b      	ldr	r0, [pc, #44]	; (80080b8 <HAL_I2C_MspInit+0xb8>)
 800808c:	f7fb f84a 	bl	8003124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008090:	4b08      	ldr	r3, [pc, #32]	; (80080b4 <HAL_I2C_MspInit+0xb4>)
 8008092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008094:	4a07      	ldr	r2, [pc, #28]	; (80080b4 <HAL_I2C_MspInit+0xb4>)
 8008096:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800809a:	6593      	str	r3, [r2, #88]	; 0x58
 800809c:	4b05      	ldr	r3, [pc, #20]	; (80080b4 <HAL_I2C_MspInit+0xb4>)
 800809e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080a4:	60bb      	str	r3, [r7, #8]
 80080a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80080a8:	bf00      	nop
 80080aa:	37b8      	adds	r7, #184	; 0xb8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	40005800 	.word	0x40005800
 80080b4:	40021000 	.word	0x40021000
 80080b8:	48000400 	.word	0x48000400

080080bc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a0b      	ldr	r2, [pc, #44]	; (80080f8 <HAL_I2C_MspDeInit+0x3c>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d10f      	bne.n	80080ee <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80080ce:	4b0b      	ldr	r3, [pc, #44]	; (80080fc <HAL_I2C_MspDeInit+0x40>)
 80080d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d2:	4a0a      	ldr	r2, [pc, #40]	; (80080fc <HAL_I2C_MspDeInit+0x40>)
 80080d4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80080d8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80080da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80080de:	4808      	ldr	r0, [pc, #32]	; (8008100 <HAL_I2C_MspDeInit+0x44>)
 80080e0:	f7fb f9b2 	bl	8003448 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80080e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80080e8:	4805      	ldr	r0, [pc, #20]	; (8008100 <HAL_I2C_MspDeInit+0x44>)
 80080ea:	f7fb f9ad 	bl	8003448 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80080ee:	bf00      	nop
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	40005800 	.word	0x40005800
 80080fc:	40021000 	.word	0x40021000
 8008100:	48000400 	.word	0x48000400

08008104 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008114:	d113      	bne.n	800813e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008116:	4b0c      	ldr	r3, [pc, #48]	; (8008148 <HAL_TIM_Base_MspInit+0x44>)
 8008118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800811a:	4a0b      	ldr	r2, [pc, #44]	; (8008148 <HAL_TIM_Base_MspInit+0x44>)
 800811c:	f043 0301 	orr.w	r3, r3, #1
 8008120:	6593      	str	r3, [r2, #88]	; 0x58
 8008122:	4b09      	ldr	r3, [pc, #36]	; (8008148 <HAL_TIM_Base_MspInit+0x44>)
 8008124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800812e:	2200      	movs	r2, #0
 8008130:	2100      	movs	r1, #0
 8008132:	201c      	movs	r0, #28
 8008134:	f7fa fca3 	bl	8002a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008138:	201c      	movs	r0, #28
 800813a:	f7fa fcbc 	bl	8002ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800813e:	bf00      	nop
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	40021000 	.word	0x40021000

0800814c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b0ae      	sub	sp, #184	; 0xb8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008154:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008158:	2200      	movs	r2, #0
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	605a      	str	r2, [r3, #4]
 800815e:	609a      	str	r2, [r3, #8]
 8008160:	60da      	str	r2, [r3, #12]
 8008162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008164:	f107 0310 	add.w	r3, r7, #16
 8008168:	2294      	movs	r2, #148	; 0x94
 800816a:	2100      	movs	r1, #0
 800816c:	4618      	mov	r0, r3
 800816e:	f000 f9af 	bl	80084d0 <memset>
  if(huart->Instance==USART1)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a22      	ldr	r2, [pc, #136]	; (8008200 <HAL_UART_MspInit+0xb4>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d13c      	bne.n	80081f6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800817c:	2301      	movs	r3, #1
 800817e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008180:	2300      	movs	r3, #0
 8008182:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008184:	f107 0310 	add.w	r3, r7, #16
 8008188:	4618      	mov	r0, r3
 800818a:	f7fd f85f 	bl	800524c <HAL_RCCEx_PeriphCLKConfig>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8008194:	f7ff fb8e 	bl	80078b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008198:	4b1a      	ldr	r3, [pc, #104]	; (8008204 <HAL_UART_MspInit+0xb8>)
 800819a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800819c:	4a19      	ldr	r2, [pc, #100]	; (8008204 <HAL_UART_MspInit+0xb8>)
 800819e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081a2:	6613      	str	r3, [r2, #96]	; 0x60
 80081a4:	4b17      	ldr	r3, [pc, #92]	; (8008204 <HAL_UART_MspInit+0xb8>)
 80081a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081ac:	60fb      	str	r3, [r7, #12]
 80081ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081b0:	4b14      	ldr	r3, [pc, #80]	; (8008204 <HAL_UART_MspInit+0xb8>)
 80081b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b4:	4a13      	ldr	r2, [pc, #76]	; (8008204 <HAL_UART_MspInit+0xb8>)
 80081b6:	f043 0301 	orr.w	r3, r3, #1
 80081ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081bc:	4b11      	ldr	r3, [pc, #68]	; (8008204 <HAL_UART_MspInit+0xb8>)
 80081be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	60bb      	str	r3, [r7, #8]
 80081c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80081c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80081cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081d0:	2302      	movs	r3, #2
 80081d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081d6:	2300      	movs	r3, #0
 80081d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081dc:	2303      	movs	r3, #3
 80081de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80081e2:	2307      	movs	r3, #7
 80081e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80081ec:	4619      	mov	r1, r3
 80081ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80081f2:	f7fa ff97 	bl	8003124 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80081f6:	bf00      	nop
 80081f8:	37b8      	adds	r7, #184	; 0xb8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	40013800 	.word	0x40013800
 8008204:	40021000 	.word	0x40021000

08008208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008208:	b480      	push	{r7}
 800820a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800820c:	e7fe      	b.n	800820c <NMI_Handler+0x4>

0800820e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800820e:	b480      	push	{r7}
 8008210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008212:	e7fe      	b.n	8008212 <HardFault_Handler+0x4>

08008214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008214:	b480      	push	{r7}
 8008216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008218:	e7fe      	b.n	8008218 <MemManage_Handler+0x4>

0800821a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800821a:	b480      	push	{r7}
 800821c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800821e:	e7fe      	b.n	800821e <BusFault_Handler+0x4>

08008220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008220:	b480      	push	{r7}
 8008222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008224:	e7fe      	b.n	8008224 <UsageFault_Handler+0x4>

08008226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008226:	b480      	push	{r7}
 8008228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800822a:	bf00      	nop
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008234:	b480      	push	{r7}
 8008236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008238:	bf00      	nop
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008242:	b480      	push	{r7}
 8008244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008246:	bf00      	nop
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008254:	f7f9 fc0c 	bl	8001a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008258:	bf00      	nop
 800825a:	bd80      	pop	{r7, pc}

0800825c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8008260:	4802      	ldr	r0, [pc, #8]	; (800826c <DMA1_Channel2_IRQHandler+0x10>)
 8008262:	f7fa fe4d 	bl	8002f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008266:	bf00      	nop
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	2000033c 	.word	0x2000033c

08008270 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008274:	4802      	ldr	r0, [pc, #8]	; (8008280 <TIM2_IRQHandler+0x10>)
 8008276:	f7fd fd58 	bl	8005d2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800827a:	bf00      	nop
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	200003f0 	.word	0x200003f0

08008284 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8008288:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800828c:	f7fb fa00 	bl	8003690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008290:	bf00      	nop
 8008292:	bd80      	pop	{r7, pc}

08008294 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008294:	b480      	push	{r7}
 8008296:	af00      	add	r7, sp, #0
  return 1;
 8008298:	2301      	movs	r3, #1
}
 800829a:	4618      	mov	r0, r3
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <_kill>:

int _kill(int pid, int sig)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80082ae:	f000 f8d7 	bl	8008460 <__errno>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2216      	movs	r2, #22
 80082b6:	601a      	str	r2, [r3, #0]
  return -1;
 80082b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <_exit>:

void _exit (int status)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80082cc:	f04f 31ff 	mov.w	r1, #4294967295
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7ff ffe7 	bl	80082a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80082d6:	e7fe      	b.n	80082d6 <_exit+0x12>

080082d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082e4:	2300      	movs	r3, #0
 80082e6:	617b      	str	r3, [r7, #20]
 80082e8:	e00a      	b.n	8008300 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80082ea:	f3af 8000 	nop.w
 80082ee:	4601      	mov	r1, r0
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	60ba      	str	r2, [r7, #8]
 80082f6:	b2ca      	uxtb	r2, r1
 80082f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	3301      	adds	r3, #1
 80082fe:	617b      	str	r3, [r7, #20]
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	429a      	cmp	r2, r3
 8008306:	dbf0      	blt.n	80082ea <_read+0x12>
  }

  return len;
 8008308:	687b      	ldr	r3, [r7, #4]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3718      	adds	r7, #24
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <_close>:
  }
  return len;
}

int _close(int file)
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800831a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800831e:	4618      	mov	r0, r3
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800832a:	b480      	push	{r7}
 800832c:	b083      	sub	sp, #12
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800833a:	605a      	str	r2, [r3, #4]
  return 0;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <_isatty>:

int _isatty(int file)
{
 800834a:	b480      	push	{r7}
 800834c:	b083      	sub	sp, #12
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008352:	2301      	movs	r3, #1
}
 8008354:	4618      	mov	r0, r3
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
	...

0800837c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008384:	4a14      	ldr	r2, [pc, #80]	; (80083d8 <_sbrk+0x5c>)
 8008386:	4b15      	ldr	r3, [pc, #84]	; (80083dc <_sbrk+0x60>)
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008390:	4b13      	ldr	r3, [pc, #76]	; (80083e0 <_sbrk+0x64>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d102      	bne.n	800839e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008398:	4b11      	ldr	r3, [pc, #68]	; (80083e0 <_sbrk+0x64>)
 800839a:	4a12      	ldr	r2, [pc, #72]	; (80083e4 <_sbrk+0x68>)
 800839c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800839e:	4b10      	ldr	r3, [pc, #64]	; (80083e0 <_sbrk+0x64>)
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4413      	add	r3, r2
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d207      	bcs.n	80083bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80083ac:	f000 f858 	bl	8008460 <__errno>
 80083b0:	4603      	mov	r3, r0
 80083b2:	220c      	movs	r2, #12
 80083b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80083b6:	f04f 33ff 	mov.w	r3, #4294967295
 80083ba:	e009      	b.n	80083d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80083bc:	4b08      	ldr	r3, [pc, #32]	; (80083e0 <_sbrk+0x64>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80083c2:	4b07      	ldr	r3, [pc, #28]	; (80083e0 <_sbrk+0x64>)
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4413      	add	r3, r2
 80083ca:	4a05      	ldr	r2, [pc, #20]	; (80083e0 <_sbrk+0x64>)
 80083cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80083ce:	68fb      	ldr	r3, [r7, #12]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3718      	adds	r7, #24
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	200a0000 	.word	0x200a0000
 80083dc:	00000400 	.word	0x00000400
 80083e0:	2000056c 	.word	0x2000056c
 80083e4:	20000580 	.word	0x20000580

080083e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80083e8:	b480      	push	{r7}
 80083ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80083ec:	4b06      	ldr	r3, [pc, #24]	; (8008408 <SystemInit+0x20>)
 80083ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083f2:	4a05      	ldr	r2, [pc, #20]	; (8008408 <SystemInit+0x20>)
 80083f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80083f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80083fc:	bf00      	nop
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	e000ed00 	.word	0xe000ed00

0800840c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800840c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008444 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008410:	f7ff ffea 	bl	80083e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008414:	480c      	ldr	r0, [pc, #48]	; (8008448 <LoopForever+0x6>)
  ldr r1, =_edata
 8008416:	490d      	ldr	r1, [pc, #52]	; (800844c <LoopForever+0xa>)
  ldr r2, =_sidata
 8008418:	4a0d      	ldr	r2, [pc, #52]	; (8008450 <LoopForever+0xe>)
  movs r3, #0
 800841a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800841c:	e002      	b.n	8008424 <LoopCopyDataInit>

0800841e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800841e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008422:	3304      	adds	r3, #4

08008424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008428:	d3f9      	bcc.n	800841e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800842a:	4a0a      	ldr	r2, [pc, #40]	; (8008454 <LoopForever+0x12>)
  ldr r4, =_ebss
 800842c:	4c0a      	ldr	r4, [pc, #40]	; (8008458 <LoopForever+0x16>)
  movs r3, #0
 800842e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008430:	e001      	b.n	8008436 <LoopFillZerobss>

08008432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008434:	3204      	adds	r2, #4

08008436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008438:	d3fb      	bcc.n	8008432 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800843a:	f000 f817 	bl	800846c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800843e:	f7fe fe95 	bl	800716c <main>

08008442 <LoopForever>:

LoopForever:
    b LoopForever
 8008442:	e7fe      	b.n	8008442 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008444:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8008448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800844c:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 8008450:	0800b57c 	.word	0x0800b57c
  ldr r2, =_sbss
 8008454:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8008458:	20000580 	.word	0x20000580

0800845c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800845c:	e7fe      	b.n	800845c <ADC1_IRQHandler>
	...

08008460 <__errno>:
 8008460:	4b01      	ldr	r3, [pc, #4]	; (8008468 <__errno+0x8>)
 8008462:	6818      	ldr	r0, [r3, #0]
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	200000d0 	.word	0x200000d0

0800846c <__libc_init_array>:
 800846c:	b570      	push	{r4, r5, r6, lr}
 800846e:	4d0d      	ldr	r5, [pc, #52]	; (80084a4 <__libc_init_array+0x38>)
 8008470:	4c0d      	ldr	r4, [pc, #52]	; (80084a8 <__libc_init_array+0x3c>)
 8008472:	1b64      	subs	r4, r4, r5
 8008474:	10a4      	asrs	r4, r4, #2
 8008476:	2600      	movs	r6, #0
 8008478:	42a6      	cmp	r6, r4
 800847a:	d109      	bne.n	8008490 <__libc_init_array+0x24>
 800847c:	4d0b      	ldr	r5, [pc, #44]	; (80084ac <__libc_init_array+0x40>)
 800847e:	4c0c      	ldr	r4, [pc, #48]	; (80084b0 <__libc_init_array+0x44>)
 8008480:	f002 fdc2 	bl	800b008 <_init>
 8008484:	1b64      	subs	r4, r4, r5
 8008486:	10a4      	asrs	r4, r4, #2
 8008488:	2600      	movs	r6, #0
 800848a:	42a6      	cmp	r6, r4
 800848c:	d105      	bne.n	800849a <__libc_init_array+0x2e>
 800848e:	bd70      	pop	{r4, r5, r6, pc}
 8008490:	f855 3b04 	ldr.w	r3, [r5], #4
 8008494:	4798      	blx	r3
 8008496:	3601      	adds	r6, #1
 8008498:	e7ee      	b.n	8008478 <__libc_init_array+0xc>
 800849a:	f855 3b04 	ldr.w	r3, [r5], #4
 800849e:	4798      	blx	r3
 80084a0:	3601      	adds	r6, #1
 80084a2:	e7f2      	b.n	800848a <__libc_init_array+0x1e>
 80084a4:	0800b574 	.word	0x0800b574
 80084a8:	0800b574 	.word	0x0800b574
 80084ac:	0800b574 	.word	0x0800b574
 80084b0:	0800b578 	.word	0x0800b578

080084b4 <memcpy>:
 80084b4:	440a      	add	r2, r1
 80084b6:	4291      	cmp	r1, r2
 80084b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80084bc:	d100      	bne.n	80084c0 <memcpy+0xc>
 80084be:	4770      	bx	lr
 80084c0:	b510      	push	{r4, lr}
 80084c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ca:	4291      	cmp	r1, r2
 80084cc:	d1f9      	bne.n	80084c2 <memcpy+0xe>
 80084ce:	bd10      	pop	{r4, pc}

080084d0 <memset>:
 80084d0:	4402      	add	r2, r0
 80084d2:	4603      	mov	r3, r0
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d100      	bne.n	80084da <memset+0xa>
 80084d8:	4770      	bx	lr
 80084da:	f803 1b01 	strb.w	r1, [r3], #1
 80084de:	e7f9      	b.n	80084d4 <memset+0x4>

080084e0 <__cvt>:
 80084e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084e4:	ec55 4b10 	vmov	r4, r5, d0
 80084e8:	2d00      	cmp	r5, #0
 80084ea:	460e      	mov	r6, r1
 80084ec:	4619      	mov	r1, r3
 80084ee:	462b      	mov	r3, r5
 80084f0:	bfbb      	ittet	lt
 80084f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80084f6:	461d      	movlt	r5, r3
 80084f8:	2300      	movge	r3, #0
 80084fa:	232d      	movlt	r3, #45	; 0x2d
 80084fc:	700b      	strb	r3, [r1, #0]
 80084fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008500:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008504:	4691      	mov	r9, r2
 8008506:	f023 0820 	bic.w	r8, r3, #32
 800850a:	bfbc      	itt	lt
 800850c:	4622      	movlt	r2, r4
 800850e:	4614      	movlt	r4, r2
 8008510:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008514:	d005      	beq.n	8008522 <__cvt+0x42>
 8008516:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800851a:	d100      	bne.n	800851e <__cvt+0x3e>
 800851c:	3601      	adds	r6, #1
 800851e:	2102      	movs	r1, #2
 8008520:	e000      	b.n	8008524 <__cvt+0x44>
 8008522:	2103      	movs	r1, #3
 8008524:	ab03      	add	r3, sp, #12
 8008526:	9301      	str	r3, [sp, #4]
 8008528:	ab02      	add	r3, sp, #8
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	ec45 4b10 	vmov	d0, r4, r5
 8008530:	4653      	mov	r3, sl
 8008532:	4632      	mov	r2, r6
 8008534:	f000 fe18 	bl	8009168 <_dtoa_r>
 8008538:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800853c:	4607      	mov	r7, r0
 800853e:	d102      	bne.n	8008546 <__cvt+0x66>
 8008540:	f019 0f01 	tst.w	r9, #1
 8008544:	d022      	beq.n	800858c <__cvt+0xac>
 8008546:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800854a:	eb07 0906 	add.w	r9, r7, r6
 800854e:	d110      	bne.n	8008572 <__cvt+0x92>
 8008550:	783b      	ldrb	r3, [r7, #0]
 8008552:	2b30      	cmp	r3, #48	; 0x30
 8008554:	d10a      	bne.n	800856c <__cvt+0x8c>
 8008556:	2200      	movs	r2, #0
 8008558:	2300      	movs	r3, #0
 800855a:	4620      	mov	r0, r4
 800855c:	4629      	mov	r1, r5
 800855e:	f7f8 facb 	bl	8000af8 <__aeabi_dcmpeq>
 8008562:	b918      	cbnz	r0, 800856c <__cvt+0x8c>
 8008564:	f1c6 0601 	rsb	r6, r6, #1
 8008568:	f8ca 6000 	str.w	r6, [sl]
 800856c:	f8da 3000 	ldr.w	r3, [sl]
 8008570:	4499      	add	r9, r3
 8008572:	2200      	movs	r2, #0
 8008574:	2300      	movs	r3, #0
 8008576:	4620      	mov	r0, r4
 8008578:	4629      	mov	r1, r5
 800857a:	f7f8 fabd 	bl	8000af8 <__aeabi_dcmpeq>
 800857e:	b108      	cbz	r0, 8008584 <__cvt+0xa4>
 8008580:	f8cd 900c 	str.w	r9, [sp, #12]
 8008584:	2230      	movs	r2, #48	; 0x30
 8008586:	9b03      	ldr	r3, [sp, #12]
 8008588:	454b      	cmp	r3, r9
 800858a:	d307      	bcc.n	800859c <__cvt+0xbc>
 800858c:	9b03      	ldr	r3, [sp, #12]
 800858e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008590:	1bdb      	subs	r3, r3, r7
 8008592:	4638      	mov	r0, r7
 8008594:	6013      	str	r3, [r2, #0]
 8008596:	b004      	add	sp, #16
 8008598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800859c:	1c59      	adds	r1, r3, #1
 800859e:	9103      	str	r1, [sp, #12]
 80085a0:	701a      	strb	r2, [r3, #0]
 80085a2:	e7f0      	b.n	8008586 <__cvt+0xa6>

080085a4 <__exponent>:
 80085a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085a6:	4603      	mov	r3, r0
 80085a8:	2900      	cmp	r1, #0
 80085aa:	bfb8      	it	lt
 80085ac:	4249      	neglt	r1, r1
 80085ae:	f803 2b02 	strb.w	r2, [r3], #2
 80085b2:	bfb4      	ite	lt
 80085b4:	222d      	movlt	r2, #45	; 0x2d
 80085b6:	222b      	movge	r2, #43	; 0x2b
 80085b8:	2909      	cmp	r1, #9
 80085ba:	7042      	strb	r2, [r0, #1]
 80085bc:	dd2a      	ble.n	8008614 <__exponent+0x70>
 80085be:	f10d 0407 	add.w	r4, sp, #7
 80085c2:	46a4      	mov	ip, r4
 80085c4:	270a      	movs	r7, #10
 80085c6:	46a6      	mov	lr, r4
 80085c8:	460a      	mov	r2, r1
 80085ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80085ce:	fb07 1516 	mls	r5, r7, r6, r1
 80085d2:	3530      	adds	r5, #48	; 0x30
 80085d4:	2a63      	cmp	r2, #99	; 0x63
 80085d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80085da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80085de:	4631      	mov	r1, r6
 80085e0:	dcf1      	bgt.n	80085c6 <__exponent+0x22>
 80085e2:	3130      	adds	r1, #48	; 0x30
 80085e4:	f1ae 0502 	sub.w	r5, lr, #2
 80085e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80085ec:	1c44      	adds	r4, r0, #1
 80085ee:	4629      	mov	r1, r5
 80085f0:	4561      	cmp	r1, ip
 80085f2:	d30a      	bcc.n	800860a <__exponent+0x66>
 80085f4:	f10d 0209 	add.w	r2, sp, #9
 80085f8:	eba2 020e 	sub.w	r2, r2, lr
 80085fc:	4565      	cmp	r5, ip
 80085fe:	bf88      	it	hi
 8008600:	2200      	movhi	r2, #0
 8008602:	4413      	add	r3, r2
 8008604:	1a18      	subs	r0, r3, r0
 8008606:	b003      	add	sp, #12
 8008608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800860a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800860e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008612:	e7ed      	b.n	80085f0 <__exponent+0x4c>
 8008614:	2330      	movs	r3, #48	; 0x30
 8008616:	3130      	adds	r1, #48	; 0x30
 8008618:	7083      	strb	r3, [r0, #2]
 800861a:	70c1      	strb	r1, [r0, #3]
 800861c:	1d03      	adds	r3, r0, #4
 800861e:	e7f1      	b.n	8008604 <__exponent+0x60>

08008620 <_printf_float>:
 8008620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008624:	ed2d 8b02 	vpush	{d8}
 8008628:	b08d      	sub	sp, #52	; 0x34
 800862a:	460c      	mov	r4, r1
 800862c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008630:	4616      	mov	r6, r2
 8008632:	461f      	mov	r7, r3
 8008634:	4605      	mov	r5, r0
 8008636:	f001 fd3d 	bl	800a0b4 <_localeconv_r>
 800863a:	f8d0 a000 	ldr.w	sl, [r0]
 800863e:	4650      	mov	r0, sl
 8008640:	f7f7 fdde 	bl	8000200 <strlen>
 8008644:	2300      	movs	r3, #0
 8008646:	930a      	str	r3, [sp, #40]	; 0x28
 8008648:	6823      	ldr	r3, [r4, #0]
 800864a:	9305      	str	r3, [sp, #20]
 800864c:	f8d8 3000 	ldr.w	r3, [r8]
 8008650:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008654:	3307      	adds	r3, #7
 8008656:	f023 0307 	bic.w	r3, r3, #7
 800865a:	f103 0208 	add.w	r2, r3, #8
 800865e:	f8c8 2000 	str.w	r2, [r8]
 8008662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008666:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800866a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800866e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008672:	9307      	str	r3, [sp, #28]
 8008674:	f8cd 8018 	str.w	r8, [sp, #24]
 8008678:	ee08 0a10 	vmov	s16, r0
 800867c:	4b9f      	ldr	r3, [pc, #636]	; (80088fc <_printf_float+0x2dc>)
 800867e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008682:	f04f 32ff 	mov.w	r2, #4294967295
 8008686:	f7f8 fa69 	bl	8000b5c <__aeabi_dcmpun>
 800868a:	bb88      	cbnz	r0, 80086f0 <_printf_float+0xd0>
 800868c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008690:	4b9a      	ldr	r3, [pc, #616]	; (80088fc <_printf_float+0x2dc>)
 8008692:	f04f 32ff 	mov.w	r2, #4294967295
 8008696:	f7f8 fa43 	bl	8000b20 <__aeabi_dcmple>
 800869a:	bb48      	cbnz	r0, 80086f0 <_printf_float+0xd0>
 800869c:	2200      	movs	r2, #0
 800869e:	2300      	movs	r3, #0
 80086a0:	4640      	mov	r0, r8
 80086a2:	4649      	mov	r1, r9
 80086a4:	f7f8 fa32 	bl	8000b0c <__aeabi_dcmplt>
 80086a8:	b110      	cbz	r0, 80086b0 <_printf_float+0x90>
 80086aa:	232d      	movs	r3, #45	; 0x2d
 80086ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086b0:	4b93      	ldr	r3, [pc, #588]	; (8008900 <_printf_float+0x2e0>)
 80086b2:	4894      	ldr	r0, [pc, #592]	; (8008904 <_printf_float+0x2e4>)
 80086b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80086b8:	bf94      	ite	ls
 80086ba:	4698      	movls	r8, r3
 80086bc:	4680      	movhi	r8, r0
 80086be:	2303      	movs	r3, #3
 80086c0:	6123      	str	r3, [r4, #16]
 80086c2:	9b05      	ldr	r3, [sp, #20]
 80086c4:	f023 0204 	bic.w	r2, r3, #4
 80086c8:	6022      	str	r2, [r4, #0]
 80086ca:	f04f 0900 	mov.w	r9, #0
 80086ce:	9700      	str	r7, [sp, #0]
 80086d0:	4633      	mov	r3, r6
 80086d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80086d4:	4621      	mov	r1, r4
 80086d6:	4628      	mov	r0, r5
 80086d8:	f000 f9d8 	bl	8008a8c <_printf_common>
 80086dc:	3001      	adds	r0, #1
 80086de:	f040 8090 	bne.w	8008802 <_printf_float+0x1e2>
 80086e2:	f04f 30ff 	mov.w	r0, #4294967295
 80086e6:	b00d      	add	sp, #52	; 0x34
 80086e8:	ecbd 8b02 	vpop	{d8}
 80086ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f0:	4642      	mov	r2, r8
 80086f2:	464b      	mov	r3, r9
 80086f4:	4640      	mov	r0, r8
 80086f6:	4649      	mov	r1, r9
 80086f8:	f7f8 fa30 	bl	8000b5c <__aeabi_dcmpun>
 80086fc:	b140      	cbz	r0, 8008710 <_printf_float+0xf0>
 80086fe:	464b      	mov	r3, r9
 8008700:	2b00      	cmp	r3, #0
 8008702:	bfbc      	itt	lt
 8008704:	232d      	movlt	r3, #45	; 0x2d
 8008706:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800870a:	487f      	ldr	r0, [pc, #508]	; (8008908 <_printf_float+0x2e8>)
 800870c:	4b7f      	ldr	r3, [pc, #508]	; (800890c <_printf_float+0x2ec>)
 800870e:	e7d1      	b.n	80086b4 <_printf_float+0x94>
 8008710:	6863      	ldr	r3, [r4, #4]
 8008712:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008716:	9206      	str	r2, [sp, #24]
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	d13f      	bne.n	800879c <_printf_float+0x17c>
 800871c:	2306      	movs	r3, #6
 800871e:	6063      	str	r3, [r4, #4]
 8008720:	9b05      	ldr	r3, [sp, #20]
 8008722:	6861      	ldr	r1, [r4, #4]
 8008724:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008728:	2300      	movs	r3, #0
 800872a:	9303      	str	r3, [sp, #12]
 800872c:	ab0a      	add	r3, sp, #40	; 0x28
 800872e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008732:	ab09      	add	r3, sp, #36	; 0x24
 8008734:	ec49 8b10 	vmov	d0, r8, r9
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	6022      	str	r2, [r4, #0]
 800873c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008740:	4628      	mov	r0, r5
 8008742:	f7ff fecd 	bl	80084e0 <__cvt>
 8008746:	9b06      	ldr	r3, [sp, #24]
 8008748:	9909      	ldr	r1, [sp, #36]	; 0x24
 800874a:	2b47      	cmp	r3, #71	; 0x47
 800874c:	4680      	mov	r8, r0
 800874e:	d108      	bne.n	8008762 <_printf_float+0x142>
 8008750:	1cc8      	adds	r0, r1, #3
 8008752:	db02      	blt.n	800875a <_printf_float+0x13a>
 8008754:	6863      	ldr	r3, [r4, #4]
 8008756:	4299      	cmp	r1, r3
 8008758:	dd41      	ble.n	80087de <_printf_float+0x1be>
 800875a:	f1ab 0b02 	sub.w	fp, fp, #2
 800875e:	fa5f fb8b 	uxtb.w	fp, fp
 8008762:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008766:	d820      	bhi.n	80087aa <_printf_float+0x18a>
 8008768:	3901      	subs	r1, #1
 800876a:	465a      	mov	r2, fp
 800876c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008770:	9109      	str	r1, [sp, #36]	; 0x24
 8008772:	f7ff ff17 	bl	80085a4 <__exponent>
 8008776:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008778:	1813      	adds	r3, r2, r0
 800877a:	2a01      	cmp	r2, #1
 800877c:	4681      	mov	r9, r0
 800877e:	6123      	str	r3, [r4, #16]
 8008780:	dc02      	bgt.n	8008788 <_printf_float+0x168>
 8008782:	6822      	ldr	r2, [r4, #0]
 8008784:	07d2      	lsls	r2, r2, #31
 8008786:	d501      	bpl.n	800878c <_printf_float+0x16c>
 8008788:	3301      	adds	r3, #1
 800878a:	6123      	str	r3, [r4, #16]
 800878c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008790:	2b00      	cmp	r3, #0
 8008792:	d09c      	beq.n	80086ce <_printf_float+0xae>
 8008794:	232d      	movs	r3, #45	; 0x2d
 8008796:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800879a:	e798      	b.n	80086ce <_printf_float+0xae>
 800879c:	9a06      	ldr	r2, [sp, #24]
 800879e:	2a47      	cmp	r2, #71	; 0x47
 80087a0:	d1be      	bne.n	8008720 <_printf_float+0x100>
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1bc      	bne.n	8008720 <_printf_float+0x100>
 80087a6:	2301      	movs	r3, #1
 80087a8:	e7b9      	b.n	800871e <_printf_float+0xfe>
 80087aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80087ae:	d118      	bne.n	80087e2 <_printf_float+0x1c2>
 80087b0:	2900      	cmp	r1, #0
 80087b2:	6863      	ldr	r3, [r4, #4]
 80087b4:	dd0b      	ble.n	80087ce <_printf_float+0x1ae>
 80087b6:	6121      	str	r1, [r4, #16]
 80087b8:	b913      	cbnz	r3, 80087c0 <_printf_float+0x1a0>
 80087ba:	6822      	ldr	r2, [r4, #0]
 80087bc:	07d0      	lsls	r0, r2, #31
 80087be:	d502      	bpl.n	80087c6 <_printf_float+0x1a6>
 80087c0:	3301      	adds	r3, #1
 80087c2:	440b      	add	r3, r1
 80087c4:	6123      	str	r3, [r4, #16]
 80087c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80087c8:	f04f 0900 	mov.w	r9, #0
 80087cc:	e7de      	b.n	800878c <_printf_float+0x16c>
 80087ce:	b913      	cbnz	r3, 80087d6 <_printf_float+0x1b6>
 80087d0:	6822      	ldr	r2, [r4, #0]
 80087d2:	07d2      	lsls	r2, r2, #31
 80087d4:	d501      	bpl.n	80087da <_printf_float+0x1ba>
 80087d6:	3302      	adds	r3, #2
 80087d8:	e7f4      	b.n	80087c4 <_printf_float+0x1a4>
 80087da:	2301      	movs	r3, #1
 80087dc:	e7f2      	b.n	80087c4 <_printf_float+0x1a4>
 80087de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80087e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e4:	4299      	cmp	r1, r3
 80087e6:	db05      	blt.n	80087f4 <_printf_float+0x1d4>
 80087e8:	6823      	ldr	r3, [r4, #0]
 80087ea:	6121      	str	r1, [r4, #16]
 80087ec:	07d8      	lsls	r0, r3, #31
 80087ee:	d5ea      	bpl.n	80087c6 <_printf_float+0x1a6>
 80087f0:	1c4b      	adds	r3, r1, #1
 80087f2:	e7e7      	b.n	80087c4 <_printf_float+0x1a4>
 80087f4:	2900      	cmp	r1, #0
 80087f6:	bfd4      	ite	le
 80087f8:	f1c1 0202 	rsble	r2, r1, #2
 80087fc:	2201      	movgt	r2, #1
 80087fe:	4413      	add	r3, r2
 8008800:	e7e0      	b.n	80087c4 <_printf_float+0x1a4>
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	055a      	lsls	r2, r3, #21
 8008806:	d407      	bmi.n	8008818 <_printf_float+0x1f8>
 8008808:	6923      	ldr	r3, [r4, #16]
 800880a:	4642      	mov	r2, r8
 800880c:	4631      	mov	r1, r6
 800880e:	4628      	mov	r0, r5
 8008810:	47b8      	blx	r7
 8008812:	3001      	adds	r0, #1
 8008814:	d12c      	bne.n	8008870 <_printf_float+0x250>
 8008816:	e764      	b.n	80086e2 <_printf_float+0xc2>
 8008818:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800881c:	f240 80e0 	bls.w	80089e0 <_printf_float+0x3c0>
 8008820:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008824:	2200      	movs	r2, #0
 8008826:	2300      	movs	r3, #0
 8008828:	f7f8 f966 	bl	8000af8 <__aeabi_dcmpeq>
 800882c:	2800      	cmp	r0, #0
 800882e:	d034      	beq.n	800889a <_printf_float+0x27a>
 8008830:	4a37      	ldr	r2, [pc, #220]	; (8008910 <_printf_float+0x2f0>)
 8008832:	2301      	movs	r3, #1
 8008834:	4631      	mov	r1, r6
 8008836:	4628      	mov	r0, r5
 8008838:	47b8      	blx	r7
 800883a:	3001      	adds	r0, #1
 800883c:	f43f af51 	beq.w	80086e2 <_printf_float+0xc2>
 8008840:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008844:	429a      	cmp	r2, r3
 8008846:	db02      	blt.n	800884e <_printf_float+0x22e>
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	07d8      	lsls	r0, r3, #31
 800884c:	d510      	bpl.n	8008870 <_printf_float+0x250>
 800884e:	ee18 3a10 	vmov	r3, s16
 8008852:	4652      	mov	r2, sl
 8008854:	4631      	mov	r1, r6
 8008856:	4628      	mov	r0, r5
 8008858:	47b8      	blx	r7
 800885a:	3001      	adds	r0, #1
 800885c:	f43f af41 	beq.w	80086e2 <_printf_float+0xc2>
 8008860:	f04f 0800 	mov.w	r8, #0
 8008864:	f104 091a 	add.w	r9, r4, #26
 8008868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800886a:	3b01      	subs	r3, #1
 800886c:	4543      	cmp	r3, r8
 800886e:	dc09      	bgt.n	8008884 <_printf_float+0x264>
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	079b      	lsls	r3, r3, #30
 8008874:	f100 8105 	bmi.w	8008a82 <_printf_float+0x462>
 8008878:	68e0      	ldr	r0, [r4, #12]
 800887a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800887c:	4298      	cmp	r0, r3
 800887e:	bfb8      	it	lt
 8008880:	4618      	movlt	r0, r3
 8008882:	e730      	b.n	80086e6 <_printf_float+0xc6>
 8008884:	2301      	movs	r3, #1
 8008886:	464a      	mov	r2, r9
 8008888:	4631      	mov	r1, r6
 800888a:	4628      	mov	r0, r5
 800888c:	47b8      	blx	r7
 800888e:	3001      	adds	r0, #1
 8008890:	f43f af27 	beq.w	80086e2 <_printf_float+0xc2>
 8008894:	f108 0801 	add.w	r8, r8, #1
 8008898:	e7e6      	b.n	8008868 <_printf_float+0x248>
 800889a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800889c:	2b00      	cmp	r3, #0
 800889e:	dc39      	bgt.n	8008914 <_printf_float+0x2f4>
 80088a0:	4a1b      	ldr	r2, [pc, #108]	; (8008910 <_printf_float+0x2f0>)
 80088a2:	2301      	movs	r3, #1
 80088a4:	4631      	mov	r1, r6
 80088a6:	4628      	mov	r0, r5
 80088a8:	47b8      	blx	r7
 80088aa:	3001      	adds	r0, #1
 80088ac:	f43f af19 	beq.w	80086e2 <_printf_float+0xc2>
 80088b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088b4:	4313      	orrs	r3, r2
 80088b6:	d102      	bne.n	80088be <_printf_float+0x29e>
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	07d9      	lsls	r1, r3, #31
 80088bc:	d5d8      	bpl.n	8008870 <_printf_float+0x250>
 80088be:	ee18 3a10 	vmov	r3, s16
 80088c2:	4652      	mov	r2, sl
 80088c4:	4631      	mov	r1, r6
 80088c6:	4628      	mov	r0, r5
 80088c8:	47b8      	blx	r7
 80088ca:	3001      	adds	r0, #1
 80088cc:	f43f af09 	beq.w	80086e2 <_printf_float+0xc2>
 80088d0:	f04f 0900 	mov.w	r9, #0
 80088d4:	f104 0a1a 	add.w	sl, r4, #26
 80088d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088da:	425b      	negs	r3, r3
 80088dc:	454b      	cmp	r3, r9
 80088de:	dc01      	bgt.n	80088e4 <_printf_float+0x2c4>
 80088e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088e2:	e792      	b.n	800880a <_printf_float+0x1ea>
 80088e4:	2301      	movs	r3, #1
 80088e6:	4652      	mov	r2, sl
 80088e8:	4631      	mov	r1, r6
 80088ea:	4628      	mov	r0, r5
 80088ec:	47b8      	blx	r7
 80088ee:	3001      	adds	r0, #1
 80088f0:	f43f aef7 	beq.w	80086e2 <_printf_float+0xc2>
 80088f4:	f109 0901 	add.w	r9, r9, #1
 80088f8:	e7ee      	b.n	80088d8 <_printf_float+0x2b8>
 80088fa:	bf00      	nop
 80088fc:	7fefffff 	.word	0x7fefffff
 8008900:	0800b198 	.word	0x0800b198
 8008904:	0800b19c 	.word	0x0800b19c
 8008908:	0800b1a4 	.word	0x0800b1a4
 800890c:	0800b1a0 	.word	0x0800b1a0
 8008910:	0800b1a8 	.word	0x0800b1a8
 8008914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008916:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008918:	429a      	cmp	r2, r3
 800891a:	bfa8      	it	ge
 800891c:	461a      	movge	r2, r3
 800891e:	2a00      	cmp	r2, #0
 8008920:	4691      	mov	r9, r2
 8008922:	dc37      	bgt.n	8008994 <_printf_float+0x374>
 8008924:	f04f 0b00 	mov.w	fp, #0
 8008928:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800892c:	f104 021a 	add.w	r2, r4, #26
 8008930:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008932:	9305      	str	r3, [sp, #20]
 8008934:	eba3 0309 	sub.w	r3, r3, r9
 8008938:	455b      	cmp	r3, fp
 800893a:	dc33      	bgt.n	80089a4 <_printf_float+0x384>
 800893c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008940:	429a      	cmp	r2, r3
 8008942:	db3b      	blt.n	80089bc <_printf_float+0x39c>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	07da      	lsls	r2, r3, #31
 8008948:	d438      	bmi.n	80089bc <_printf_float+0x39c>
 800894a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800894c:	9a05      	ldr	r2, [sp, #20]
 800894e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008950:	1a9a      	subs	r2, r3, r2
 8008952:	eba3 0901 	sub.w	r9, r3, r1
 8008956:	4591      	cmp	r9, r2
 8008958:	bfa8      	it	ge
 800895a:	4691      	movge	r9, r2
 800895c:	f1b9 0f00 	cmp.w	r9, #0
 8008960:	dc35      	bgt.n	80089ce <_printf_float+0x3ae>
 8008962:	f04f 0800 	mov.w	r8, #0
 8008966:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800896a:	f104 0a1a 	add.w	sl, r4, #26
 800896e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008972:	1a9b      	subs	r3, r3, r2
 8008974:	eba3 0309 	sub.w	r3, r3, r9
 8008978:	4543      	cmp	r3, r8
 800897a:	f77f af79 	ble.w	8008870 <_printf_float+0x250>
 800897e:	2301      	movs	r3, #1
 8008980:	4652      	mov	r2, sl
 8008982:	4631      	mov	r1, r6
 8008984:	4628      	mov	r0, r5
 8008986:	47b8      	blx	r7
 8008988:	3001      	adds	r0, #1
 800898a:	f43f aeaa 	beq.w	80086e2 <_printf_float+0xc2>
 800898e:	f108 0801 	add.w	r8, r8, #1
 8008992:	e7ec      	b.n	800896e <_printf_float+0x34e>
 8008994:	4613      	mov	r3, r2
 8008996:	4631      	mov	r1, r6
 8008998:	4642      	mov	r2, r8
 800899a:	4628      	mov	r0, r5
 800899c:	47b8      	blx	r7
 800899e:	3001      	adds	r0, #1
 80089a0:	d1c0      	bne.n	8008924 <_printf_float+0x304>
 80089a2:	e69e      	b.n	80086e2 <_printf_float+0xc2>
 80089a4:	2301      	movs	r3, #1
 80089a6:	4631      	mov	r1, r6
 80089a8:	4628      	mov	r0, r5
 80089aa:	9205      	str	r2, [sp, #20]
 80089ac:	47b8      	blx	r7
 80089ae:	3001      	adds	r0, #1
 80089b0:	f43f ae97 	beq.w	80086e2 <_printf_float+0xc2>
 80089b4:	9a05      	ldr	r2, [sp, #20]
 80089b6:	f10b 0b01 	add.w	fp, fp, #1
 80089ba:	e7b9      	b.n	8008930 <_printf_float+0x310>
 80089bc:	ee18 3a10 	vmov	r3, s16
 80089c0:	4652      	mov	r2, sl
 80089c2:	4631      	mov	r1, r6
 80089c4:	4628      	mov	r0, r5
 80089c6:	47b8      	blx	r7
 80089c8:	3001      	adds	r0, #1
 80089ca:	d1be      	bne.n	800894a <_printf_float+0x32a>
 80089cc:	e689      	b.n	80086e2 <_printf_float+0xc2>
 80089ce:	9a05      	ldr	r2, [sp, #20]
 80089d0:	464b      	mov	r3, r9
 80089d2:	4442      	add	r2, r8
 80089d4:	4631      	mov	r1, r6
 80089d6:	4628      	mov	r0, r5
 80089d8:	47b8      	blx	r7
 80089da:	3001      	adds	r0, #1
 80089dc:	d1c1      	bne.n	8008962 <_printf_float+0x342>
 80089de:	e680      	b.n	80086e2 <_printf_float+0xc2>
 80089e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089e2:	2a01      	cmp	r2, #1
 80089e4:	dc01      	bgt.n	80089ea <_printf_float+0x3ca>
 80089e6:	07db      	lsls	r3, r3, #31
 80089e8:	d538      	bpl.n	8008a5c <_printf_float+0x43c>
 80089ea:	2301      	movs	r3, #1
 80089ec:	4642      	mov	r2, r8
 80089ee:	4631      	mov	r1, r6
 80089f0:	4628      	mov	r0, r5
 80089f2:	47b8      	blx	r7
 80089f4:	3001      	adds	r0, #1
 80089f6:	f43f ae74 	beq.w	80086e2 <_printf_float+0xc2>
 80089fa:	ee18 3a10 	vmov	r3, s16
 80089fe:	4652      	mov	r2, sl
 8008a00:	4631      	mov	r1, r6
 8008a02:	4628      	mov	r0, r5
 8008a04:	47b8      	blx	r7
 8008a06:	3001      	adds	r0, #1
 8008a08:	f43f ae6b 	beq.w	80086e2 <_printf_float+0xc2>
 8008a0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a10:	2200      	movs	r2, #0
 8008a12:	2300      	movs	r3, #0
 8008a14:	f7f8 f870 	bl	8000af8 <__aeabi_dcmpeq>
 8008a18:	b9d8      	cbnz	r0, 8008a52 <_printf_float+0x432>
 8008a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a1c:	f108 0201 	add.w	r2, r8, #1
 8008a20:	3b01      	subs	r3, #1
 8008a22:	4631      	mov	r1, r6
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b8      	blx	r7
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d10e      	bne.n	8008a4a <_printf_float+0x42a>
 8008a2c:	e659      	b.n	80086e2 <_printf_float+0xc2>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	4652      	mov	r2, sl
 8008a32:	4631      	mov	r1, r6
 8008a34:	4628      	mov	r0, r5
 8008a36:	47b8      	blx	r7
 8008a38:	3001      	adds	r0, #1
 8008a3a:	f43f ae52 	beq.w	80086e2 <_printf_float+0xc2>
 8008a3e:	f108 0801 	add.w	r8, r8, #1
 8008a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a44:	3b01      	subs	r3, #1
 8008a46:	4543      	cmp	r3, r8
 8008a48:	dcf1      	bgt.n	8008a2e <_printf_float+0x40e>
 8008a4a:	464b      	mov	r3, r9
 8008a4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a50:	e6dc      	b.n	800880c <_printf_float+0x1ec>
 8008a52:	f04f 0800 	mov.w	r8, #0
 8008a56:	f104 0a1a 	add.w	sl, r4, #26
 8008a5a:	e7f2      	b.n	8008a42 <_printf_float+0x422>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	4642      	mov	r2, r8
 8008a60:	e7df      	b.n	8008a22 <_printf_float+0x402>
 8008a62:	2301      	movs	r3, #1
 8008a64:	464a      	mov	r2, r9
 8008a66:	4631      	mov	r1, r6
 8008a68:	4628      	mov	r0, r5
 8008a6a:	47b8      	blx	r7
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	f43f ae38 	beq.w	80086e2 <_printf_float+0xc2>
 8008a72:	f108 0801 	add.w	r8, r8, #1
 8008a76:	68e3      	ldr	r3, [r4, #12]
 8008a78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a7a:	1a5b      	subs	r3, r3, r1
 8008a7c:	4543      	cmp	r3, r8
 8008a7e:	dcf0      	bgt.n	8008a62 <_printf_float+0x442>
 8008a80:	e6fa      	b.n	8008878 <_printf_float+0x258>
 8008a82:	f04f 0800 	mov.w	r8, #0
 8008a86:	f104 0919 	add.w	r9, r4, #25
 8008a8a:	e7f4      	b.n	8008a76 <_printf_float+0x456>

08008a8c <_printf_common>:
 8008a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a90:	4616      	mov	r6, r2
 8008a92:	4699      	mov	r9, r3
 8008a94:	688a      	ldr	r2, [r1, #8]
 8008a96:	690b      	ldr	r3, [r1, #16]
 8008a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	bfb8      	it	lt
 8008aa0:	4613      	movlt	r3, r2
 8008aa2:	6033      	str	r3, [r6, #0]
 8008aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008aa8:	4607      	mov	r7, r0
 8008aaa:	460c      	mov	r4, r1
 8008aac:	b10a      	cbz	r2, 8008ab2 <_printf_common+0x26>
 8008aae:	3301      	adds	r3, #1
 8008ab0:	6033      	str	r3, [r6, #0]
 8008ab2:	6823      	ldr	r3, [r4, #0]
 8008ab4:	0699      	lsls	r1, r3, #26
 8008ab6:	bf42      	ittt	mi
 8008ab8:	6833      	ldrmi	r3, [r6, #0]
 8008aba:	3302      	addmi	r3, #2
 8008abc:	6033      	strmi	r3, [r6, #0]
 8008abe:	6825      	ldr	r5, [r4, #0]
 8008ac0:	f015 0506 	ands.w	r5, r5, #6
 8008ac4:	d106      	bne.n	8008ad4 <_printf_common+0x48>
 8008ac6:	f104 0a19 	add.w	sl, r4, #25
 8008aca:	68e3      	ldr	r3, [r4, #12]
 8008acc:	6832      	ldr	r2, [r6, #0]
 8008ace:	1a9b      	subs	r3, r3, r2
 8008ad0:	42ab      	cmp	r3, r5
 8008ad2:	dc26      	bgt.n	8008b22 <_printf_common+0x96>
 8008ad4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ad8:	1e13      	subs	r3, r2, #0
 8008ada:	6822      	ldr	r2, [r4, #0]
 8008adc:	bf18      	it	ne
 8008ade:	2301      	movne	r3, #1
 8008ae0:	0692      	lsls	r2, r2, #26
 8008ae2:	d42b      	bmi.n	8008b3c <_printf_common+0xb0>
 8008ae4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ae8:	4649      	mov	r1, r9
 8008aea:	4638      	mov	r0, r7
 8008aec:	47c0      	blx	r8
 8008aee:	3001      	adds	r0, #1
 8008af0:	d01e      	beq.n	8008b30 <_printf_common+0xa4>
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	68e5      	ldr	r5, [r4, #12]
 8008af6:	6832      	ldr	r2, [r6, #0]
 8008af8:	f003 0306 	and.w	r3, r3, #6
 8008afc:	2b04      	cmp	r3, #4
 8008afe:	bf08      	it	eq
 8008b00:	1aad      	subeq	r5, r5, r2
 8008b02:	68a3      	ldr	r3, [r4, #8]
 8008b04:	6922      	ldr	r2, [r4, #16]
 8008b06:	bf0c      	ite	eq
 8008b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b0c:	2500      	movne	r5, #0
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	bfc4      	itt	gt
 8008b12:	1a9b      	subgt	r3, r3, r2
 8008b14:	18ed      	addgt	r5, r5, r3
 8008b16:	2600      	movs	r6, #0
 8008b18:	341a      	adds	r4, #26
 8008b1a:	42b5      	cmp	r5, r6
 8008b1c:	d11a      	bne.n	8008b54 <_printf_common+0xc8>
 8008b1e:	2000      	movs	r0, #0
 8008b20:	e008      	b.n	8008b34 <_printf_common+0xa8>
 8008b22:	2301      	movs	r3, #1
 8008b24:	4652      	mov	r2, sl
 8008b26:	4649      	mov	r1, r9
 8008b28:	4638      	mov	r0, r7
 8008b2a:	47c0      	blx	r8
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	d103      	bne.n	8008b38 <_printf_common+0xac>
 8008b30:	f04f 30ff 	mov.w	r0, #4294967295
 8008b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b38:	3501      	adds	r5, #1
 8008b3a:	e7c6      	b.n	8008aca <_printf_common+0x3e>
 8008b3c:	18e1      	adds	r1, r4, r3
 8008b3e:	1c5a      	adds	r2, r3, #1
 8008b40:	2030      	movs	r0, #48	; 0x30
 8008b42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b46:	4422      	add	r2, r4
 8008b48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b50:	3302      	adds	r3, #2
 8008b52:	e7c7      	b.n	8008ae4 <_printf_common+0x58>
 8008b54:	2301      	movs	r3, #1
 8008b56:	4622      	mov	r2, r4
 8008b58:	4649      	mov	r1, r9
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	47c0      	blx	r8
 8008b5e:	3001      	adds	r0, #1
 8008b60:	d0e6      	beq.n	8008b30 <_printf_common+0xa4>
 8008b62:	3601      	adds	r6, #1
 8008b64:	e7d9      	b.n	8008b1a <_printf_common+0x8e>
	...

08008b68 <_printf_i>:
 8008b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b6c:	7e0f      	ldrb	r7, [r1, #24]
 8008b6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b70:	2f78      	cmp	r7, #120	; 0x78
 8008b72:	4691      	mov	r9, r2
 8008b74:	4680      	mov	r8, r0
 8008b76:	460c      	mov	r4, r1
 8008b78:	469a      	mov	sl, r3
 8008b7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b7e:	d807      	bhi.n	8008b90 <_printf_i+0x28>
 8008b80:	2f62      	cmp	r7, #98	; 0x62
 8008b82:	d80a      	bhi.n	8008b9a <_printf_i+0x32>
 8008b84:	2f00      	cmp	r7, #0
 8008b86:	f000 80d8 	beq.w	8008d3a <_printf_i+0x1d2>
 8008b8a:	2f58      	cmp	r7, #88	; 0x58
 8008b8c:	f000 80a3 	beq.w	8008cd6 <_printf_i+0x16e>
 8008b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b98:	e03a      	b.n	8008c10 <_printf_i+0xa8>
 8008b9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b9e:	2b15      	cmp	r3, #21
 8008ba0:	d8f6      	bhi.n	8008b90 <_printf_i+0x28>
 8008ba2:	a101      	add	r1, pc, #4	; (adr r1, 8008ba8 <_printf_i+0x40>)
 8008ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ba8:	08008c01 	.word	0x08008c01
 8008bac:	08008c15 	.word	0x08008c15
 8008bb0:	08008b91 	.word	0x08008b91
 8008bb4:	08008b91 	.word	0x08008b91
 8008bb8:	08008b91 	.word	0x08008b91
 8008bbc:	08008b91 	.word	0x08008b91
 8008bc0:	08008c15 	.word	0x08008c15
 8008bc4:	08008b91 	.word	0x08008b91
 8008bc8:	08008b91 	.word	0x08008b91
 8008bcc:	08008b91 	.word	0x08008b91
 8008bd0:	08008b91 	.word	0x08008b91
 8008bd4:	08008d21 	.word	0x08008d21
 8008bd8:	08008c45 	.word	0x08008c45
 8008bdc:	08008d03 	.word	0x08008d03
 8008be0:	08008b91 	.word	0x08008b91
 8008be4:	08008b91 	.word	0x08008b91
 8008be8:	08008d43 	.word	0x08008d43
 8008bec:	08008b91 	.word	0x08008b91
 8008bf0:	08008c45 	.word	0x08008c45
 8008bf4:	08008b91 	.word	0x08008b91
 8008bf8:	08008b91 	.word	0x08008b91
 8008bfc:	08008d0b 	.word	0x08008d0b
 8008c00:	682b      	ldr	r3, [r5, #0]
 8008c02:	1d1a      	adds	r2, r3, #4
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	602a      	str	r2, [r5, #0]
 8008c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c10:	2301      	movs	r3, #1
 8008c12:	e0a3      	b.n	8008d5c <_printf_i+0x1f4>
 8008c14:	6820      	ldr	r0, [r4, #0]
 8008c16:	6829      	ldr	r1, [r5, #0]
 8008c18:	0606      	lsls	r6, r0, #24
 8008c1a:	f101 0304 	add.w	r3, r1, #4
 8008c1e:	d50a      	bpl.n	8008c36 <_printf_i+0xce>
 8008c20:	680e      	ldr	r6, [r1, #0]
 8008c22:	602b      	str	r3, [r5, #0]
 8008c24:	2e00      	cmp	r6, #0
 8008c26:	da03      	bge.n	8008c30 <_printf_i+0xc8>
 8008c28:	232d      	movs	r3, #45	; 0x2d
 8008c2a:	4276      	negs	r6, r6
 8008c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c30:	485e      	ldr	r0, [pc, #376]	; (8008dac <_printf_i+0x244>)
 8008c32:	230a      	movs	r3, #10
 8008c34:	e019      	b.n	8008c6a <_printf_i+0x102>
 8008c36:	680e      	ldr	r6, [r1, #0]
 8008c38:	602b      	str	r3, [r5, #0]
 8008c3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c3e:	bf18      	it	ne
 8008c40:	b236      	sxthne	r6, r6
 8008c42:	e7ef      	b.n	8008c24 <_printf_i+0xbc>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	6820      	ldr	r0, [r4, #0]
 8008c48:	1d19      	adds	r1, r3, #4
 8008c4a:	6029      	str	r1, [r5, #0]
 8008c4c:	0601      	lsls	r1, r0, #24
 8008c4e:	d501      	bpl.n	8008c54 <_printf_i+0xec>
 8008c50:	681e      	ldr	r6, [r3, #0]
 8008c52:	e002      	b.n	8008c5a <_printf_i+0xf2>
 8008c54:	0646      	lsls	r6, r0, #25
 8008c56:	d5fb      	bpl.n	8008c50 <_printf_i+0xe8>
 8008c58:	881e      	ldrh	r6, [r3, #0]
 8008c5a:	4854      	ldr	r0, [pc, #336]	; (8008dac <_printf_i+0x244>)
 8008c5c:	2f6f      	cmp	r7, #111	; 0x6f
 8008c5e:	bf0c      	ite	eq
 8008c60:	2308      	moveq	r3, #8
 8008c62:	230a      	movne	r3, #10
 8008c64:	2100      	movs	r1, #0
 8008c66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c6a:	6865      	ldr	r5, [r4, #4]
 8008c6c:	60a5      	str	r5, [r4, #8]
 8008c6e:	2d00      	cmp	r5, #0
 8008c70:	bfa2      	ittt	ge
 8008c72:	6821      	ldrge	r1, [r4, #0]
 8008c74:	f021 0104 	bicge.w	r1, r1, #4
 8008c78:	6021      	strge	r1, [r4, #0]
 8008c7a:	b90e      	cbnz	r6, 8008c80 <_printf_i+0x118>
 8008c7c:	2d00      	cmp	r5, #0
 8008c7e:	d04d      	beq.n	8008d1c <_printf_i+0x1b4>
 8008c80:	4615      	mov	r5, r2
 8008c82:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c86:	fb03 6711 	mls	r7, r3, r1, r6
 8008c8a:	5dc7      	ldrb	r7, [r0, r7]
 8008c8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c90:	4637      	mov	r7, r6
 8008c92:	42bb      	cmp	r3, r7
 8008c94:	460e      	mov	r6, r1
 8008c96:	d9f4      	bls.n	8008c82 <_printf_i+0x11a>
 8008c98:	2b08      	cmp	r3, #8
 8008c9a:	d10b      	bne.n	8008cb4 <_printf_i+0x14c>
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	07de      	lsls	r6, r3, #31
 8008ca0:	d508      	bpl.n	8008cb4 <_printf_i+0x14c>
 8008ca2:	6923      	ldr	r3, [r4, #16]
 8008ca4:	6861      	ldr	r1, [r4, #4]
 8008ca6:	4299      	cmp	r1, r3
 8008ca8:	bfde      	ittt	le
 8008caa:	2330      	movle	r3, #48	; 0x30
 8008cac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cb4:	1b52      	subs	r2, r2, r5
 8008cb6:	6122      	str	r2, [r4, #16]
 8008cb8:	f8cd a000 	str.w	sl, [sp]
 8008cbc:	464b      	mov	r3, r9
 8008cbe:	aa03      	add	r2, sp, #12
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	4640      	mov	r0, r8
 8008cc4:	f7ff fee2 	bl	8008a8c <_printf_common>
 8008cc8:	3001      	adds	r0, #1
 8008cca:	d14c      	bne.n	8008d66 <_printf_i+0x1fe>
 8008ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd0:	b004      	add	sp, #16
 8008cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd6:	4835      	ldr	r0, [pc, #212]	; (8008dac <_printf_i+0x244>)
 8008cd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008cdc:	6829      	ldr	r1, [r5, #0]
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ce4:	6029      	str	r1, [r5, #0]
 8008ce6:	061d      	lsls	r5, r3, #24
 8008ce8:	d514      	bpl.n	8008d14 <_printf_i+0x1ac>
 8008cea:	07df      	lsls	r7, r3, #31
 8008cec:	bf44      	itt	mi
 8008cee:	f043 0320 	orrmi.w	r3, r3, #32
 8008cf2:	6023      	strmi	r3, [r4, #0]
 8008cf4:	b91e      	cbnz	r6, 8008cfe <_printf_i+0x196>
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	f023 0320 	bic.w	r3, r3, #32
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	2310      	movs	r3, #16
 8008d00:	e7b0      	b.n	8008c64 <_printf_i+0xfc>
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	f043 0320 	orr.w	r3, r3, #32
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	2378      	movs	r3, #120	; 0x78
 8008d0c:	4828      	ldr	r0, [pc, #160]	; (8008db0 <_printf_i+0x248>)
 8008d0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d12:	e7e3      	b.n	8008cdc <_printf_i+0x174>
 8008d14:	0659      	lsls	r1, r3, #25
 8008d16:	bf48      	it	mi
 8008d18:	b2b6      	uxthmi	r6, r6
 8008d1a:	e7e6      	b.n	8008cea <_printf_i+0x182>
 8008d1c:	4615      	mov	r5, r2
 8008d1e:	e7bb      	b.n	8008c98 <_printf_i+0x130>
 8008d20:	682b      	ldr	r3, [r5, #0]
 8008d22:	6826      	ldr	r6, [r4, #0]
 8008d24:	6961      	ldr	r1, [r4, #20]
 8008d26:	1d18      	adds	r0, r3, #4
 8008d28:	6028      	str	r0, [r5, #0]
 8008d2a:	0635      	lsls	r5, r6, #24
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	d501      	bpl.n	8008d34 <_printf_i+0x1cc>
 8008d30:	6019      	str	r1, [r3, #0]
 8008d32:	e002      	b.n	8008d3a <_printf_i+0x1d2>
 8008d34:	0670      	lsls	r0, r6, #25
 8008d36:	d5fb      	bpl.n	8008d30 <_printf_i+0x1c8>
 8008d38:	8019      	strh	r1, [r3, #0]
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	6123      	str	r3, [r4, #16]
 8008d3e:	4615      	mov	r5, r2
 8008d40:	e7ba      	b.n	8008cb8 <_printf_i+0x150>
 8008d42:	682b      	ldr	r3, [r5, #0]
 8008d44:	1d1a      	adds	r2, r3, #4
 8008d46:	602a      	str	r2, [r5, #0]
 8008d48:	681d      	ldr	r5, [r3, #0]
 8008d4a:	6862      	ldr	r2, [r4, #4]
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	4628      	mov	r0, r5
 8008d50:	f7f7 fa5e 	bl	8000210 <memchr>
 8008d54:	b108      	cbz	r0, 8008d5a <_printf_i+0x1f2>
 8008d56:	1b40      	subs	r0, r0, r5
 8008d58:	6060      	str	r0, [r4, #4]
 8008d5a:	6863      	ldr	r3, [r4, #4]
 8008d5c:	6123      	str	r3, [r4, #16]
 8008d5e:	2300      	movs	r3, #0
 8008d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d64:	e7a8      	b.n	8008cb8 <_printf_i+0x150>
 8008d66:	6923      	ldr	r3, [r4, #16]
 8008d68:	462a      	mov	r2, r5
 8008d6a:	4649      	mov	r1, r9
 8008d6c:	4640      	mov	r0, r8
 8008d6e:	47d0      	blx	sl
 8008d70:	3001      	adds	r0, #1
 8008d72:	d0ab      	beq.n	8008ccc <_printf_i+0x164>
 8008d74:	6823      	ldr	r3, [r4, #0]
 8008d76:	079b      	lsls	r3, r3, #30
 8008d78:	d413      	bmi.n	8008da2 <_printf_i+0x23a>
 8008d7a:	68e0      	ldr	r0, [r4, #12]
 8008d7c:	9b03      	ldr	r3, [sp, #12]
 8008d7e:	4298      	cmp	r0, r3
 8008d80:	bfb8      	it	lt
 8008d82:	4618      	movlt	r0, r3
 8008d84:	e7a4      	b.n	8008cd0 <_printf_i+0x168>
 8008d86:	2301      	movs	r3, #1
 8008d88:	4632      	mov	r2, r6
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	4640      	mov	r0, r8
 8008d8e:	47d0      	blx	sl
 8008d90:	3001      	adds	r0, #1
 8008d92:	d09b      	beq.n	8008ccc <_printf_i+0x164>
 8008d94:	3501      	adds	r5, #1
 8008d96:	68e3      	ldr	r3, [r4, #12]
 8008d98:	9903      	ldr	r1, [sp, #12]
 8008d9a:	1a5b      	subs	r3, r3, r1
 8008d9c:	42ab      	cmp	r3, r5
 8008d9e:	dcf2      	bgt.n	8008d86 <_printf_i+0x21e>
 8008da0:	e7eb      	b.n	8008d7a <_printf_i+0x212>
 8008da2:	2500      	movs	r5, #0
 8008da4:	f104 0619 	add.w	r6, r4, #25
 8008da8:	e7f5      	b.n	8008d96 <_printf_i+0x22e>
 8008daa:	bf00      	nop
 8008dac:	0800b1aa 	.word	0x0800b1aa
 8008db0:	0800b1bb 	.word	0x0800b1bb

08008db4 <iprintf>:
 8008db4:	b40f      	push	{r0, r1, r2, r3}
 8008db6:	4b0a      	ldr	r3, [pc, #40]	; (8008de0 <iprintf+0x2c>)
 8008db8:	b513      	push	{r0, r1, r4, lr}
 8008dba:	681c      	ldr	r4, [r3, #0]
 8008dbc:	b124      	cbz	r4, 8008dc8 <iprintf+0x14>
 8008dbe:	69a3      	ldr	r3, [r4, #24]
 8008dc0:	b913      	cbnz	r3, 8008dc8 <iprintf+0x14>
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f001 f8d8 	bl	8009f78 <__sinit>
 8008dc8:	ab05      	add	r3, sp, #20
 8008dca:	9a04      	ldr	r2, [sp, #16]
 8008dcc:	68a1      	ldr	r1, [r4, #8]
 8008dce:	9301      	str	r3, [sp, #4]
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f001 fe87 	bl	800aae4 <_vfiprintf_r>
 8008dd6:	b002      	add	sp, #8
 8008dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ddc:	b004      	add	sp, #16
 8008dde:	4770      	bx	lr
 8008de0:	200000d0 	.word	0x200000d0

08008de4 <_puts_r>:
 8008de4:	b570      	push	{r4, r5, r6, lr}
 8008de6:	460e      	mov	r6, r1
 8008de8:	4605      	mov	r5, r0
 8008dea:	b118      	cbz	r0, 8008df4 <_puts_r+0x10>
 8008dec:	6983      	ldr	r3, [r0, #24]
 8008dee:	b90b      	cbnz	r3, 8008df4 <_puts_r+0x10>
 8008df0:	f001 f8c2 	bl	8009f78 <__sinit>
 8008df4:	69ab      	ldr	r3, [r5, #24]
 8008df6:	68ac      	ldr	r4, [r5, #8]
 8008df8:	b913      	cbnz	r3, 8008e00 <_puts_r+0x1c>
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	f001 f8bc 	bl	8009f78 <__sinit>
 8008e00:	4b2c      	ldr	r3, [pc, #176]	; (8008eb4 <_puts_r+0xd0>)
 8008e02:	429c      	cmp	r4, r3
 8008e04:	d120      	bne.n	8008e48 <_puts_r+0x64>
 8008e06:	686c      	ldr	r4, [r5, #4]
 8008e08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e0a:	07db      	lsls	r3, r3, #31
 8008e0c:	d405      	bmi.n	8008e1a <_puts_r+0x36>
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	0598      	lsls	r0, r3, #22
 8008e12:	d402      	bmi.n	8008e1a <_puts_r+0x36>
 8008e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e16:	f001 f952 	bl	800a0be <__retarget_lock_acquire_recursive>
 8008e1a:	89a3      	ldrh	r3, [r4, #12]
 8008e1c:	0719      	lsls	r1, r3, #28
 8008e1e:	d51d      	bpl.n	8008e5c <_puts_r+0x78>
 8008e20:	6923      	ldr	r3, [r4, #16]
 8008e22:	b1db      	cbz	r3, 8008e5c <_puts_r+0x78>
 8008e24:	3e01      	subs	r6, #1
 8008e26:	68a3      	ldr	r3, [r4, #8]
 8008e28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	60a3      	str	r3, [r4, #8]
 8008e30:	bb39      	cbnz	r1, 8008e82 <_puts_r+0x9e>
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	da38      	bge.n	8008ea8 <_puts_r+0xc4>
 8008e36:	4622      	mov	r2, r4
 8008e38:	210a      	movs	r1, #10
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	f000 f848 	bl	8008ed0 <__swbuf_r>
 8008e40:	3001      	adds	r0, #1
 8008e42:	d011      	beq.n	8008e68 <_puts_r+0x84>
 8008e44:	250a      	movs	r5, #10
 8008e46:	e011      	b.n	8008e6c <_puts_r+0x88>
 8008e48:	4b1b      	ldr	r3, [pc, #108]	; (8008eb8 <_puts_r+0xd4>)
 8008e4a:	429c      	cmp	r4, r3
 8008e4c:	d101      	bne.n	8008e52 <_puts_r+0x6e>
 8008e4e:	68ac      	ldr	r4, [r5, #8]
 8008e50:	e7da      	b.n	8008e08 <_puts_r+0x24>
 8008e52:	4b1a      	ldr	r3, [pc, #104]	; (8008ebc <_puts_r+0xd8>)
 8008e54:	429c      	cmp	r4, r3
 8008e56:	bf08      	it	eq
 8008e58:	68ec      	ldreq	r4, [r5, #12]
 8008e5a:	e7d5      	b.n	8008e08 <_puts_r+0x24>
 8008e5c:	4621      	mov	r1, r4
 8008e5e:	4628      	mov	r0, r5
 8008e60:	f000 f888 	bl	8008f74 <__swsetup_r>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d0dd      	beq.n	8008e24 <_puts_r+0x40>
 8008e68:	f04f 35ff 	mov.w	r5, #4294967295
 8008e6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e6e:	07da      	lsls	r2, r3, #31
 8008e70:	d405      	bmi.n	8008e7e <_puts_r+0x9a>
 8008e72:	89a3      	ldrh	r3, [r4, #12]
 8008e74:	059b      	lsls	r3, r3, #22
 8008e76:	d402      	bmi.n	8008e7e <_puts_r+0x9a>
 8008e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e7a:	f001 f921 	bl	800a0c0 <__retarget_lock_release_recursive>
 8008e7e:	4628      	mov	r0, r5
 8008e80:	bd70      	pop	{r4, r5, r6, pc}
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	da04      	bge.n	8008e90 <_puts_r+0xac>
 8008e86:	69a2      	ldr	r2, [r4, #24]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	dc06      	bgt.n	8008e9a <_puts_r+0xb6>
 8008e8c:	290a      	cmp	r1, #10
 8008e8e:	d004      	beq.n	8008e9a <_puts_r+0xb6>
 8008e90:	6823      	ldr	r3, [r4, #0]
 8008e92:	1c5a      	adds	r2, r3, #1
 8008e94:	6022      	str	r2, [r4, #0]
 8008e96:	7019      	strb	r1, [r3, #0]
 8008e98:	e7c5      	b.n	8008e26 <_puts_r+0x42>
 8008e9a:	4622      	mov	r2, r4
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	f000 f817 	bl	8008ed0 <__swbuf_r>
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	d1bf      	bne.n	8008e26 <_puts_r+0x42>
 8008ea6:	e7df      	b.n	8008e68 <_puts_r+0x84>
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	250a      	movs	r5, #10
 8008eac:	1c5a      	adds	r2, r3, #1
 8008eae:	6022      	str	r2, [r4, #0]
 8008eb0:	701d      	strb	r5, [r3, #0]
 8008eb2:	e7db      	b.n	8008e6c <_puts_r+0x88>
 8008eb4:	0800b27c 	.word	0x0800b27c
 8008eb8:	0800b29c 	.word	0x0800b29c
 8008ebc:	0800b25c 	.word	0x0800b25c

08008ec0 <puts>:
 8008ec0:	4b02      	ldr	r3, [pc, #8]	; (8008ecc <puts+0xc>)
 8008ec2:	4601      	mov	r1, r0
 8008ec4:	6818      	ldr	r0, [r3, #0]
 8008ec6:	f7ff bf8d 	b.w	8008de4 <_puts_r>
 8008eca:	bf00      	nop
 8008ecc:	200000d0 	.word	0x200000d0

08008ed0 <__swbuf_r>:
 8008ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed2:	460e      	mov	r6, r1
 8008ed4:	4614      	mov	r4, r2
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	b118      	cbz	r0, 8008ee2 <__swbuf_r+0x12>
 8008eda:	6983      	ldr	r3, [r0, #24]
 8008edc:	b90b      	cbnz	r3, 8008ee2 <__swbuf_r+0x12>
 8008ede:	f001 f84b 	bl	8009f78 <__sinit>
 8008ee2:	4b21      	ldr	r3, [pc, #132]	; (8008f68 <__swbuf_r+0x98>)
 8008ee4:	429c      	cmp	r4, r3
 8008ee6:	d12b      	bne.n	8008f40 <__swbuf_r+0x70>
 8008ee8:	686c      	ldr	r4, [r5, #4]
 8008eea:	69a3      	ldr	r3, [r4, #24]
 8008eec:	60a3      	str	r3, [r4, #8]
 8008eee:	89a3      	ldrh	r3, [r4, #12]
 8008ef0:	071a      	lsls	r2, r3, #28
 8008ef2:	d52f      	bpl.n	8008f54 <__swbuf_r+0x84>
 8008ef4:	6923      	ldr	r3, [r4, #16]
 8008ef6:	b36b      	cbz	r3, 8008f54 <__swbuf_r+0x84>
 8008ef8:	6923      	ldr	r3, [r4, #16]
 8008efa:	6820      	ldr	r0, [r4, #0]
 8008efc:	1ac0      	subs	r0, r0, r3
 8008efe:	6963      	ldr	r3, [r4, #20]
 8008f00:	b2f6      	uxtb	r6, r6
 8008f02:	4283      	cmp	r3, r0
 8008f04:	4637      	mov	r7, r6
 8008f06:	dc04      	bgt.n	8008f12 <__swbuf_r+0x42>
 8008f08:	4621      	mov	r1, r4
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f000 ffa0 	bl	8009e50 <_fflush_r>
 8008f10:	bb30      	cbnz	r0, 8008f60 <__swbuf_r+0x90>
 8008f12:	68a3      	ldr	r3, [r4, #8]
 8008f14:	3b01      	subs	r3, #1
 8008f16:	60a3      	str	r3, [r4, #8]
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	1c5a      	adds	r2, r3, #1
 8008f1c:	6022      	str	r2, [r4, #0]
 8008f1e:	701e      	strb	r6, [r3, #0]
 8008f20:	6963      	ldr	r3, [r4, #20]
 8008f22:	3001      	adds	r0, #1
 8008f24:	4283      	cmp	r3, r0
 8008f26:	d004      	beq.n	8008f32 <__swbuf_r+0x62>
 8008f28:	89a3      	ldrh	r3, [r4, #12]
 8008f2a:	07db      	lsls	r3, r3, #31
 8008f2c:	d506      	bpl.n	8008f3c <__swbuf_r+0x6c>
 8008f2e:	2e0a      	cmp	r6, #10
 8008f30:	d104      	bne.n	8008f3c <__swbuf_r+0x6c>
 8008f32:	4621      	mov	r1, r4
 8008f34:	4628      	mov	r0, r5
 8008f36:	f000 ff8b 	bl	8009e50 <_fflush_r>
 8008f3a:	b988      	cbnz	r0, 8008f60 <__swbuf_r+0x90>
 8008f3c:	4638      	mov	r0, r7
 8008f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f40:	4b0a      	ldr	r3, [pc, #40]	; (8008f6c <__swbuf_r+0x9c>)
 8008f42:	429c      	cmp	r4, r3
 8008f44:	d101      	bne.n	8008f4a <__swbuf_r+0x7a>
 8008f46:	68ac      	ldr	r4, [r5, #8]
 8008f48:	e7cf      	b.n	8008eea <__swbuf_r+0x1a>
 8008f4a:	4b09      	ldr	r3, [pc, #36]	; (8008f70 <__swbuf_r+0xa0>)
 8008f4c:	429c      	cmp	r4, r3
 8008f4e:	bf08      	it	eq
 8008f50:	68ec      	ldreq	r4, [r5, #12]
 8008f52:	e7ca      	b.n	8008eea <__swbuf_r+0x1a>
 8008f54:	4621      	mov	r1, r4
 8008f56:	4628      	mov	r0, r5
 8008f58:	f000 f80c 	bl	8008f74 <__swsetup_r>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d0cb      	beq.n	8008ef8 <__swbuf_r+0x28>
 8008f60:	f04f 37ff 	mov.w	r7, #4294967295
 8008f64:	e7ea      	b.n	8008f3c <__swbuf_r+0x6c>
 8008f66:	bf00      	nop
 8008f68:	0800b27c 	.word	0x0800b27c
 8008f6c:	0800b29c 	.word	0x0800b29c
 8008f70:	0800b25c 	.word	0x0800b25c

08008f74 <__swsetup_r>:
 8008f74:	4b32      	ldr	r3, [pc, #200]	; (8009040 <__swsetup_r+0xcc>)
 8008f76:	b570      	push	{r4, r5, r6, lr}
 8008f78:	681d      	ldr	r5, [r3, #0]
 8008f7a:	4606      	mov	r6, r0
 8008f7c:	460c      	mov	r4, r1
 8008f7e:	b125      	cbz	r5, 8008f8a <__swsetup_r+0x16>
 8008f80:	69ab      	ldr	r3, [r5, #24]
 8008f82:	b913      	cbnz	r3, 8008f8a <__swsetup_r+0x16>
 8008f84:	4628      	mov	r0, r5
 8008f86:	f000 fff7 	bl	8009f78 <__sinit>
 8008f8a:	4b2e      	ldr	r3, [pc, #184]	; (8009044 <__swsetup_r+0xd0>)
 8008f8c:	429c      	cmp	r4, r3
 8008f8e:	d10f      	bne.n	8008fb0 <__swsetup_r+0x3c>
 8008f90:	686c      	ldr	r4, [r5, #4]
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f98:	0719      	lsls	r1, r3, #28
 8008f9a:	d42c      	bmi.n	8008ff6 <__swsetup_r+0x82>
 8008f9c:	06dd      	lsls	r5, r3, #27
 8008f9e:	d411      	bmi.n	8008fc4 <__swsetup_r+0x50>
 8008fa0:	2309      	movs	r3, #9
 8008fa2:	6033      	str	r3, [r6, #0]
 8008fa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008fa8:	81a3      	strh	r3, [r4, #12]
 8008faa:	f04f 30ff 	mov.w	r0, #4294967295
 8008fae:	e03e      	b.n	800902e <__swsetup_r+0xba>
 8008fb0:	4b25      	ldr	r3, [pc, #148]	; (8009048 <__swsetup_r+0xd4>)
 8008fb2:	429c      	cmp	r4, r3
 8008fb4:	d101      	bne.n	8008fba <__swsetup_r+0x46>
 8008fb6:	68ac      	ldr	r4, [r5, #8]
 8008fb8:	e7eb      	b.n	8008f92 <__swsetup_r+0x1e>
 8008fba:	4b24      	ldr	r3, [pc, #144]	; (800904c <__swsetup_r+0xd8>)
 8008fbc:	429c      	cmp	r4, r3
 8008fbe:	bf08      	it	eq
 8008fc0:	68ec      	ldreq	r4, [r5, #12]
 8008fc2:	e7e6      	b.n	8008f92 <__swsetup_r+0x1e>
 8008fc4:	0758      	lsls	r0, r3, #29
 8008fc6:	d512      	bpl.n	8008fee <__swsetup_r+0x7a>
 8008fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fca:	b141      	cbz	r1, 8008fde <__swsetup_r+0x6a>
 8008fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fd0:	4299      	cmp	r1, r3
 8008fd2:	d002      	beq.n	8008fda <__swsetup_r+0x66>
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f001 fc7b 	bl	800a8d0 <_free_r>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	6363      	str	r3, [r4, #52]	; 0x34
 8008fde:	89a3      	ldrh	r3, [r4, #12]
 8008fe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008fe4:	81a3      	strh	r3, [r4, #12]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	6063      	str	r3, [r4, #4]
 8008fea:	6923      	ldr	r3, [r4, #16]
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	f043 0308 	orr.w	r3, r3, #8
 8008ff4:	81a3      	strh	r3, [r4, #12]
 8008ff6:	6923      	ldr	r3, [r4, #16]
 8008ff8:	b94b      	cbnz	r3, 800900e <__swsetup_r+0x9a>
 8008ffa:	89a3      	ldrh	r3, [r4, #12]
 8008ffc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009004:	d003      	beq.n	800900e <__swsetup_r+0x9a>
 8009006:	4621      	mov	r1, r4
 8009008:	4630      	mov	r0, r6
 800900a:	f001 f87f 	bl	800a10c <__smakebuf_r>
 800900e:	89a0      	ldrh	r0, [r4, #12]
 8009010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009014:	f010 0301 	ands.w	r3, r0, #1
 8009018:	d00a      	beq.n	8009030 <__swsetup_r+0xbc>
 800901a:	2300      	movs	r3, #0
 800901c:	60a3      	str	r3, [r4, #8]
 800901e:	6963      	ldr	r3, [r4, #20]
 8009020:	425b      	negs	r3, r3
 8009022:	61a3      	str	r3, [r4, #24]
 8009024:	6923      	ldr	r3, [r4, #16]
 8009026:	b943      	cbnz	r3, 800903a <__swsetup_r+0xc6>
 8009028:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800902c:	d1ba      	bne.n	8008fa4 <__swsetup_r+0x30>
 800902e:	bd70      	pop	{r4, r5, r6, pc}
 8009030:	0781      	lsls	r1, r0, #30
 8009032:	bf58      	it	pl
 8009034:	6963      	ldrpl	r3, [r4, #20]
 8009036:	60a3      	str	r3, [r4, #8]
 8009038:	e7f4      	b.n	8009024 <__swsetup_r+0xb0>
 800903a:	2000      	movs	r0, #0
 800903c:	e7f7      	b.n	800902e <__swsetup_r+0xba>
 800903e:	bf00      	nop
 8009040:	200000d0 	.word	0x200000d0
 8009044:	0800b27c 	.word	0x0800b27c
 8009048:	0800b29c 	.word	0x0800b29c
 800904c:	0800b25c 	.word	0x0800b25c

08009050 <quorem>:
 8009050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	6903      	ldr	r3, [r0, #16]
 8009056:	690c      	ldr	r4, [r1, #16]
 8009058:	42a3      	cmp	r3, r4
 800905a:	4607      	mov	r7, r0
 800905c:	f2c0 8081 	blt.w	8009162 <quorem+0x112>
 8009060:	3c01      	subs	r4, #1
 8009062:	f101 0814 	add.w	r8, r1, #20
 8009066:	f100 0514 	add.w	r5, r0, #20
 800906a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800906e:	9301      	str	r3, [sp, #4]
 8009070:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009074:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009078:	3301      	adds	r3, #1
 800907a:	429a      	cmp	r2, r3
 800907c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009080:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009084:	fbb2 f6f3 	udiv	r6, r2, r3
 8009088:	d331      	bcc.n	80090ee <quorem+0x9e>
 800908a:	f04f 0e00 	mov.w	lr, #0
 800908e:	4640      	mov	r0, r8
 8009090:	46ac      	mov	ip, r5
 8009092:	46f2      	mov	sl, lr
 8009094:	f850 2b04 	ldr.w	r2, [r0], #4
 8009098:	b293      	uxth	r3, r2
 800909a:	fb06 e303 	mla	r3, r6, r3, lr
 800909e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	ebaa 0303 	sub.w	r3, sl, r3
 80090a8:	f8dc a000 	ldr.w	sl, [ip]
 80090ac:	0c12      	lsrs	r2, r2, #16
 80090ae:	fa13 f38a 	uxtah	r3, r3, sl
 80090b2:	fb06 e202 	mla	r2, r6, r2, lr
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	9b00      	ldr	r3, [sp, #0]
 80090ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80090be:	b292      	uxth	r2, r2
 80090c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80090c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80090cc:	4581      	cmp	r9, r0
 80090ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090d2:	f84c 3b04 	str.w	r3, [ip], #4
 80090d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80090da:	d2db      	bcs.n	8009094 <quorem+0x44>
 80090dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80090e0:	b92b      	cbnz	r3, 80090ee <quorem+0x9e>
 80090e2:	9b01      	ldr	r3, [sp, #4]
 80090e4:	3b04      	subs	r3, #4
 80090e6:	429d      	cmp	r5, r3
 80090e8:	461a      	mov	r2, r3
 80090ea:	d32e      	bcc.n	800914a <quorem+0xfa>
 80090ec:	613c      	str	r4, [r7, #16]
 80090ee:	4638      	mov	r0, r7
 80090f0:	f001 fad6 	bl	800a6a0 <__mcmp>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	db24      	blt.n	8009142 <quorem+0xf2>
 80090f8:	3601      	adds	r6, #1
 80090fa:	4628      	mov	r0, r5
 80090fc:	f04f 0c00 	mov.w	ip, #0
 8009100:	f858 2b04 	ldr.w	r2, [r8], #4
 8009104:	f8d0 e000 	ldr.w	lr, [r0]
 8009108:	b293      	uxth	r3, r2
 800910a:	ebac 0303 	sub.w	r3, ip, r3
 800910e:	0c12      	lsrs	r2, r2, #16
 8009110:	fa13 f38e 	uxtah	r3, r3, lr
 8009114:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009118:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800911c:	b29b      	uxth	r3, r3
 800911e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009122:	45c1      	cmp	r9, r8
 8009124:	f840 3b04 	str.w	r3, [r0], #4
 8009128:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800912c:	d2e8      	bcs.n	8009100 <quorem+0xb0>
 800912e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009132:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009136:	b922      	cbnz	r2, 8009142 <quorem+0xf2>
 8009138:	3b04      	subs	r3, #4
 800913a:	429d      	cmp	r5, r3
 800913c:	461a      	mov	r2, r3
 800913e:	d30a      	bcc.n	8009156 <quorem+0x106>
 8009140:	613c      	str	r4, [r7, #16]
 8009142:	4630      	mov	r0, r6
 8009144:	b003      	add	sp, #12
 8009146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914a:	6812      	ldr	r2, [r2, #0]
 800914c:	3b04      	subs	r3, #4
 800914e:	2a00      	cmp	r2, #0
 8009150:	d1cc      	bne.n	80090ec <quorem+0x9c>
 8009152:	3c01      	subs	r4, #1
 8009154:	e7c7      	b.n	80090e6 <quorem+0x96>
 8009156:	6812      	ldr	r2, [r2, #0]
 8009158:	3b04      	subs	r3, #4
 800915a:	2a00      	cmp	r2, #0
 800915c:	d1f0      	bne.n	8009140 <quorem+0xf0>
 800915e:	3c01      	subs	r4, #1
 8009160:	e7eb      	b.n	800913a <quorem+0xea>
 8009162:	2000      	movs	r0, #0
 8009164:	e7ee      	b.n	8009144 <quorem+0xf4>
	...

08009168 <_dtoa_r>:
 8009168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916c:	ed2d 8b04 	vpush	{d8-d9}
 8009170:	ec57 6b10 	vmov	r6, r7, d0
 8009174:	b093      	sub	sp, #76	; 0x4c
 8009176:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009178:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800917c:	9106      	str	r1, [sp, #24]
 800917e:	ee10 aa10 	vmov	sl, s0
 8009182:	4604      	mov	r4, r0
 8009184:	9209      	str	r2, [sp, #36]	; 0x24
 8009186:	930c      	str	r3, [sp, #48]	; 0x30
 8009188:	46bb      	mov	fp, r7
 800918a:	b975      	cbnz	r5, 80091aa <_dtoa_r+0x42>
 800918c:	2010      	movs	r0, #16
 800918e:	f000 fffd 	bl	800a18c <malloc>
 8009192:	4602      	mov	r2, r0
 8009194:	6260      	str	r0, [r4, #36]	; 0x24
 8009196:	b920      	cbnz	r0, 80091a2 <_dtoa_r+0x3a>
 8009198:	4ba7      	ldr	r3, [pc, #668]	; (8009438 <_dtoa_r+0x2d0>)
 800919a:	21ea      	movs	r1, #234	; 0xea
 800919c:	48a7      	ldr	r0, [pc, #668]	; (800943c <_dtoa_r+0x2d4>)
 800919e:	f001 fe37 	bl	800ae10 <__assert_func>
 80091a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80091a6:	6005      	str	r5, [r0, #0]
 80091a8:	60c5      	str	r5, [r0, #12]
 80091aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091ac:	6819      	ldr	r1, [r3, #0]
 80091ae:	b151      	cbz	r1, 80091c6 <_dtoa_r+0x5e>
 80091b0:	685a      	ldr	r2, [r3, #4]
 80091b2:	604a      	str	r2, [r1, #4]
 80091b4:	2301      	movs	r3, #1
 80091b6:	4093      	lsls	r3, r2
 80091b8:	608b      	str	r3, [r1, #8]
 80091ba:	4620      	mov	r0, r4
 80091bc:	f001 f82e 	bl	800a21c <_Bfree>
 80091c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091c2:	2200      	movs	r2, #0
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	1e3b      	subs	r3, r7, #0
 80091c8:	bfaa      	itet	ge
 80091ca:	2300      	movge	r3, #0
 80091cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80091d0:	f8c8 3000 	strge.w	r3, [r8]
 80091d4:	4b9a      	ldr	r3, [pc, #616]	; (8009440 <_dtoa_r+0x2d8>)
 80091d6:	bfbc      	itt	lt
 80091d8:	2201      	movlt	r2, #1
 80091da:	f8c8 2000 	strlt.w	r2, [r8]
 80091de:	ea33 030b 	bics.w	r3, r3, fp
 80091e2:	d11b      	bne.n	800921c <_dtoa_r+0xb4>
 80091e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80091ea:	6013      	str	r3, [r2, #0]
 80091ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091f0:	4333      	orrs	r3, r6
 80091f2:	f000 8592 	beq.w	8009d1a <_dtoa_r+0xbb2>
 80091f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091f8:	b963      	cbnz	r3, 8009214 <_dtoa_r+0xac>
 80091fa:	4b92      	ldr	r3, [pc, #584]	; (8009444 <_dtoa_r+0x2dc>)
 80091fc:	e022      	b.n	8009244 <_dtoa_r+0xdc>
 80091fe:	4b92      	ldr	r3, [pc, #584]	; (8009448 <_dtoa_r+0x2e0>)
 8009200:	9301      	str	r3, [sp, #4]
 8009202:	3308      	adds	r3, #8
 8009204:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009206:	6013      	str	r3, [r2, #0]
 8009208:	9801      	ldr	r0, [sp, #4]
 800920a:	b013      	add	sp, #76	; 0x4c
 800920c:	ecbd 8b04 	vpop	{d8-d9}
 8009210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009214:	4b8b      	ldr	r3, [pc, #556]	; (8009444 <_dtoa_r+0x2dc>)
 8009216:	9301      	str	r3, [sp, #4]
 8009218:	3303      	adds	r3, #3
 800921a:	e7f3      	b.n	8009204 <_dtoa_r+0x9c>
 800921c:	2200      	movs	r2, #0
 800921e:	2300      	movs	r3, #0
 8009220:	4650      	mov	r0, sl
 8009222:	4659      	mov	r1, fp
 8009224:	f7f7 fc68 	bl	8000af8 <__aeabi_dcmpeq>
 8009228:	ec4b ab19 	vmov	d9, sl, fp
 800922c:	4680      	mov	r8, r0
 800922e:	b158      	cbz	r0, 8009248 <_dtoa_r+0xe0>
 8009230:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009232:	2301      	movs	r3, #1
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 856b 	beq.w	8009d14 <_dtoa_r+0xbac>
 800923e:	4883      	ldr	r0, [pc, #524]	; (800944c <_dtoa_r+0x2e4>)
 8009240:	6018      	str	r0, [r3, #0]
 8009242:	1e43      	subs	r3, r0, #1
 8009244:	9301      	str	r3, [sp, #4]
 8009246:	e7df      	b.n	8009208 <_dtoa_r+0xa0>
 8009248:	ec4b ab10 	vmov	d0, sl, fp
 800924c:	aa10      	add	r2, sp, #64	; 0x40
 800924e:	a911      	add	r1, sp, #68	; 0x44
 8009250:	4620      	mov	r0, r4
 8009252:	f001 facb 	bl	800a7ec <__d2b>
 8009256:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800925a:	ee08 0a10 	vmov	s16, r0
 800925e:	2d00      	cmp	r5, #0
 8009260:	f000 8084 	beq.w	800936c <_dtoa_r+0x204>
 8009264:	ee19 3a90 	vmov	r3, s19
 8009268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800926c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009270:	4656      	mov	r6, sl
 8009272:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009276:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800927a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800927e:	4b74      	ldr	r3, [pc, #464]	; (8009450 <_dtoa_r+0x2e8>)
 8009280:	2200      	movs	r2, #0
 8009282:	4630      	mov	r0, r6
 8009284:	4639      	mov	r1, r7
 8009286:	f7f7 f817 	bl	80002b8 <__aeabi_dsub>
 800928a:	a365      	add	r3, pc, #404	; (adr r3, 8009420 <_dtoa_r+0x2b8>)
 800928c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009290:	f7f7 f9ca 	bl	8000628 <__aeabi_dmul>
 8009294:	a364      	add	r3, pc, #400	; (adr r3, 8009428 <_dtoa_r+0x2c0>)
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	f7f7 f80f 	bl	80002bc <__adddf3>
 800929e:	4606      	mov	r6, r0
 80092a0:	4628      	mov	r0, r5
 80092a2:	460f      	mov	r7, r1
 80092a4:	f7f7 f956 	bl	8000554 <__aeabi_i2d>
 80092a8:	a361      	add	r3, pc, #388	; (adr r3, 8009430 <_dtoa_r+0x2c8>)
 80092aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ae:	f7f7 f9bb 	bl	8000628 <__aeabi_dmul>
 80092b2:	4602      	mov	r2, r0
 80092b4:	460b      	mov	r3, r1
 80092b6:	4630      	mov	r0, r6
 80092b8:	4639      	mov	r1, r7
 80092ba:	f7f6 ffff 	bl	80002bc <__adddf3>
 80092be:	4606      	mov	r6, r0
 80092c0:	460f      	mov	r7, r1
 80092c2:	f7f7 fc61 	bl	8000b88 <__aeabi_d2iz>
 80092c6:	2200      	movs	r2, #0
 80092c8:	9000      	str	r0, [sp, #0]
 80092ca:	2300      	movs	r3, #0
 80092cc:	4630      	mov	r0, r6
 80092ce:	4639      	mov	r1, r7
 80092d0:	f7f7 fc1c 	bl	8000b0c <__aeabi_dcmplt>
 80092d4:	b150      	cbz	r0, 80092ec <_dtoa_r+0x184>
 80092d6:	9800      	ldr	r0, [sp, #0]
 80092d8:	f7f7 f93c 	bl	8000554 <__aeabi_i2d>
 80092dc:	4632      	mov	r2, r6
 80092de:	463b      	mov	r3, r7
 80092e0:	f7f7 fc0a 	bl	8000af8 <__aeabi_dcmpeq>
 80092e4:	b910      	cbnz	r0, 80092ec <_dtoa_r+0x184>
 80092e6:	9b00      	ldr	r3, [sp, #0]
 80092e8:	3b01      	subs	r3, #1
 80092ea:	9300      	str	r3, [sp, #0]
 80092ec:	9b00      	ldr	r3, [sp, #0]
 80092ee:	2b16      	cmp	r3, #22
 80092f0:	d85a      	bhi.n	80093a8 <_dtoa_r+0x240>
 80092f2:	9a00      	ldr	r2, [sp, #0]
 80092f4:	4b57      	ldr	r3, [pc, #348]	; (8009454 <_dtoa_r+0x2ec>)
 80092f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fe:	ec51 0b19 	vmov	r0, r1, d9
 8009302:	f7f7 fc03 	bl	8000b0c <__aeabi_dcmplt>
 8009306:	2800      	cmp	r0, #0
 8009308:	d050      	beq.n	80093ac <_dtoa_r+0x244>
 800930a:	9b00      	ldr	r3, [sp, #0]
 800930c:	3b01      	subs	r3, #1
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	2300      	movs	r3, #0
 8009312:	930b      	str	r3, [sp, #44]	; 0x2c
 8009314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009316:	1b5d      	subs	r5, r3, r5
 8009318:	1e6b      	subs	r3, r5, #1
 800931a:	9305      	str	r3, [sp, #20]
 800931c:	bf45      	ittet	mi
 800931e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009322:	9304      	strmi	r3, [sp, #16]
 8009324:	2300      	movpl	r3, #0
 8009326:	2300      	movmi	r3, #0
 8009328:	bf4c      	ite	mi
 800932a:	9305      	strmi	r3, [sp, #20]
 800932c:	9304      	strpl	r3, [sp, #16]
 800932e:	9b00      	ldr	r3, [sp, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	db3d      	blt.n	80093b0 <_dtoa_r+0x248>
 8009334:	9b05      	ldr	r3, [sp, #20]
 8009336:	9a00      	ldr	r2, [sp, #0]
 8009338:	920a      	str	r2, [sp, #40]	; 0x28
 800933a:	4413      	add	r3, r2
 800933c:	9305      	str	r3, [sp, #20]
 800933e:	2300      	movs	r3, #0
 8009340:	9307      	str	r3, [sp, #28]
 8009342:	9b06      	ldr	r3, [sp, #24]
 8009344:	2b09      	cmp	r3, #9
 8009346:	f200 8089 	bhi.w	800945c <_dtoa_r+0x2f4>
 800934a:	2b05      	cmp	r3, #5
 800934c:	bfc4      	itt	gt
 800934e:	3b04      	subgt	r3, #4
 8009350:	9306      	strgt	r3, [sp, #24]
 8009352:	9b06      	ldr	r3, [sp, #24]
 8009354:	f1a3 0302 	sub.w	r3, r3, #2
 8009358:	bfcc      	ite	gt
 800935a:	2500      	movgt	r5, #0
 800935c:	2501      	movle	r5, #1
 800935e:	2b03      	cmp	r3, #3
 8009360:	f200 8087 	bhi.w	8009472 <_dtoa_r+0x30a>
 8009364:	e8df f003 	tbb	[pc, r3]
 8009368:	59383a2d 	.word	0x59383a2d
 800936c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009370:	441d      	add	r5, r3
 8009372:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009376:	2b20      	cmp	r3, #32
 8009378:	bfc1      	itttt	gt
 800937a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800937e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009382:	fa0b f303 	lslgt.w	r3, fp, r3
 8009386:	fa26 f000 	lsrgt.w	r0, r6, r0
 800938a:	bfda      	itte	le
 800938c:	f1c3 0320 	rsble	r3, r3, #32
 8009390:	fa06 f003 	lslle.w	r0, r6, r3
 8009394:	4318      	orrgt	r0, r3
 8009396:	f7f7 f8cd 	bl	8000534 <__aeabi_ui2d>
 800939a:	2301      	movs	r3, #1
 800939c:	4606      	mov	r6, r0
 800939e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80093a2:	3d01      	subs	r5, #1
 80093a4:	930e      	str	r3, [sp, #56]	; 0x38
 80093a6:	e76a      	b.n	800927e <_dtoa_r+0x116>
 80093a8:	2301      	movs	r3, #1
 80093aa:	e7b2      	b.n	8009312 <_dtoa_r+0x1aa>
 80093ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80093ae:	e7b1      	b.n	8009314 <_dtoa_r+0x1ac>
 80093b0:	9b04      	ldr	r3, [sp, #16]
 80093b2:	9a00      	ldr	r2, [sp, #0]
 80093b4:	1a9b      	subs	r3, r3, r2
 80093b6:	9304      	str	r3, [sp, #16]
 80093b8:	4253      	negs	r3, r2
 80093ba:	9307      	str	r3, [sp, #28]
 80093bc:	2300      	movs	r3, #0
 80093be:	930a      	str	r3, [sp, #40]	; 0x28
 80093c0:	e7bf      	b.n	8009342 <_dtoa_r+0x1da>
 80093c2:	2300      	movs	r3, #0
 80093c4:	9308      	str	r3, [sp, #32]
 80093c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	dc55      	bgt.n	8009478 <_dtoa_r+0x310>
 80093cc:	2301      	movs	r3, #1
 80093ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093d2:	461a      	mov	r2, r3
 80093d4:	9209      	str	r2, [sp, #36]	; 0x24
 80093d6:	e00c      	b.n	80093f2 <_dtoa_r+0x28a>
 80093d8:	2301      	movs	r3, #1
 80093da:	e7f3      	b.n	80093c4 <_dtoa_r+0x25c>
 80093dc:	2300      	movs	r3, #0
 80093de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093e0:	9308      	str	r3, [sp, #32]
 80093e2:	9b00      	ldr	r3, [sp, #0]
 80093e4:	4413      	add	r3, r2
 80093e6:	9302      	str	r3, [sp, #8]
 80093e8:	3301      	adds	r3, #1
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	9303      	str	r3, [sp, #12]
 80093ee:	bfb8      	it	lt
 80093f0:	2301      	movlt	r3, #1
 80093f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80093f4:	2200      	movs	r2, #0
 80093f6:	6042      	str	r2, [r0, #4]
 80093f8:	2204      	movs	r2, #4
 80093fa:	f102 0614 	add.w	r6, r2, #20
 80093fe:	429e      	cmp	r6, r3
 8009400:	6841      	ldr	r1, [r0, #4]
 8009402:	d93d      	bls.n	8009480 <_dtoa_r+0x318>
 8009404:	4620      	mov	r0, r4
 8009406:	f000 fec9 	bl	800a19c <_Balloc>
 800940a:	9001      	str	r0, [sp, #4]
 800940c:	2800      	cmp	r0, #0
 800940e:	d13b      	bne.n	8009488 <_dtoa_r+0x320>
 8009410:	4b11      	ldr	r3, [pc, #68]	; (8009458 <_dtoa_r+0x2f0>)
 8009412:	4602      	mov	r2, r0
 8009414:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009418:	e6c0      	b.n	800919c <_dtoa_r+0x34>
 800941a:	2301      	movs	r3, #1
 800941c:	e7df      	b.n	80093de <_dtoa_r+0x276>
 800941e:	bf00      	nop
 8009420:	636f4361 	.word	0x636f4361
 8009424:	3fd287a7 	.word	0x3fd287a7
 8009428:	8b60c8b3 	.word	0x8b60c8b3
 800942c:	3fc68a28 	.word	0x3fc68a28
 8009430:	509f79fb 	.word	0x509f79fb
 8009434:	3fd34413 	.word	0x3fd34413
 8009438:	0800b1d9 	.word	0x0800b1d9
 800943c:	0800b1f0 	.word	0x0800b1f0
 8009440:	7ff00000 	.word	0x7ff00000
 8009444:	0800b1d5 	.word	0x0800b1d5
 8009448:	0800b1cc 	.word	0x0800b1cc
 800944c:	0800b1a9 	.word	0x0800b1a9
 8009450:	3ff80000 	.word	0x3ff80000
 8009454:	0800b340 	.word	0x0800b340
 8009458:	0800b24b 	.word	0x0800b24b
 800945c:	2501      	movs	r5, #1
 800945e:	2300      	movs	r3, #0
 8009460:	9306      	str	r3, [sp, #24]
 8009462:	9508      	str	r5, [sp, #32]
 8009464:	f04f 33ff 	mov.w	r3, #4294967295
 8009468:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800946c:	2200      	movs	r2, #0
 800946e:	2312      	movs	r3, #18
 8009470:	e7b0      	b.n	80093d4 <_dtoa_r+0x26c>
 8009472:	2301      	movs	r3, #1
 8009474:	9308      	str	r3, [sp, #32]
 8009476:	e7f5      	b.n	8009464 <_dtoa_r+0x2fc>
 8009478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800947a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800947e:	e7b8      	b.n	80093f2 <_dtoa_r+0x28a>
 8009480:	3101      	adds	r1, #1
 8009482:	6041      	str	r1, [r0, #4]
 8009484:	0052      	lsls	r2, r2, #1
 8009486:	e7b8      	b.n	80093fa <_dtoa_r+0x292>
 8009488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800948a:	9a01      	ldr	r2, [sp, #4]
 800948c:	601a      	str	r2, [r3, #0]
 800948e:	9b03      	ldr	r3, [sp, #12]
 8009490:	2b0e      	cmp	r3, #14
 8009492:	f200 809d 	bhi.w	80095d0 <_dtoa_r+0x468>
 8009496:	2d00      	cmp	r5, #0
 8009498:	f000 809a 	beq.w	80095d0 <_dtoa_r+0x468>
 800949c:	9b00      	ldr	r3, [sp, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	dd32      	ble.n	8009508 <_dtoa_r+0x3a0>
 80094a2:	4ab7      	ldr	r2, [pc, #732]	; (8009780 <_dtoa_r+0x618>)
 80094a4:	f003 030f 	and.w	r3, r3, #15
 80094a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80094ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094b0:	9b00      	ldr	r3, [sp, #0]
 80094b2:	05d8      	lsls	r0, r3, #23
 80094b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80094b8:	d516      	bpl.n	80094e8 <_dtoa_r+0x380>
 80094ba:	4bb2      	ldr	r3, [pc, #712]	; (8009784 <_dtoa_r+0x61c>)
 80094bc:	ec51 0b19 	vmov	r0, r1, d9
 80094c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80094c4:	f7f7 f9da 	bl	800087c <__aeabi_ddiv>
 80094c8:	f007 070f 	and.w	r7, r7, #15
 80094cc:	4682      	mov	sl, r0
 80094ce:	468b      	mov	fp, r1
 80094d0:	2503      	movs	r5, #3
 80094d2:	4eac      	ldr	r6, [pc, #688]	; (8009784 <_dtoa_r+0x61c>)
 80094d4:	b957      	cbnz	r7, 80094ec <_dtoa_r+0x384>
 80094d6:	4642      	mov	r2, r8
 80094d8:	464b      	mov	r3, r9
 80094da:	4650      	mov	r0, sl
 80094dc:	4659      	mov	r1, fp
 80094de:	f7f7 f9cd 	bl	800087c <__aeabi_ddiv>
 80094e2:	4682      	mov	sl, r0
 80094e4:	468b      	mov	fp, r1
 80094e6:	e028      	b.n	800953a <_dtoa_r+0x3d2>
 80094e8:	2502      	movs	r5, #2
 80094ea:	e7f2      	b.n	80094d2 <_dtoa_r+0x36a>
 80094ec:	07f9      	lsls	r1, r7, #31
 80094ee:	d508      	bpl.n	8009502 <_dtoa_r+0x39a>
 80094f0:	4640      	mov	r0, r8
 80094f2:	4649      	mov	r1, r9
 80094f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80094f8:	f7f7 f896 	bl	8000628 <__aeabi_dmul>
 80094fc:	3501      	adds	r5, #1
 80094fe:	4680      	mov	r8, r0
 8009500:	4689      	mov	r9, r1
 8009502:	107f      	asrs	r7, r7, #1
 8009504:	3608      	adds	r6, #8
 8009506:	e7e5      	b.n	80094d4 <_dtoa_r+0x36c>
 8009508:	f000 809b 	beq.w	8009642 <_dtoa_r+0x4da>
 800950c:	9b00      	ldr	r3, [sp, #0]
 800950e:	4f9d      	ldr	r7, [pc, #628]	; (8009784 <_dtoa_r+0x61c>)
 8009510:	425e      	negs	r6, r3
 8009512:	4b9b      	ldr	r3, [pc, #620]	; (8009780 <_dtoa_r+0x618>)
 8009514:	f006 020f 	and.w	r2, r6, #15
 8009518:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800951c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009520:	ec51 0b19 	vmov	r0, r1, d9
 8009524:	f7f7 f880 	bl	8000628 <__aeabi_dmul>
 8009528:	1136      	asrs	r6, r6, #4
 800952a:	4682      	mov	sl, r0
 800952c:	468b      	mov	fp, r1
 800952e:	2300      	movs	r3, #0
 8009530:	2502      	movs	r5, #2
 8009532:	2e00      	cmp	r6, #0
 8009534:	d17a      	bne.n	800962c <_dtoa_r+0x4c4>
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1d3      	bne.n	80094e2 <_dtoa_r+0x37a>
 800953a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 8082 	beq.w	8009646 <_dtoa_r+0x4de>
 8009542:	4b91      	ldr	r3, [pc, #580]	; (8009788 <_dtoa_r+0x620>)
 8009544:	2200      	movs	r2, #0
 8009546:	4650      	mov	r0, sl
 8009548:	4659      	mov	r1, fp
 800954a:	f7f7 fadf 	bl	8000b0c <__aeabi_dcmplt>
 800954e:	2800      	cmp	r0, #0
 8009550:	d079      	beq.n	8009646 <_dtoa_r+0x4de>
 8009552:	9b03      	ldr	r3, [sp, #12]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d076      	beq.n	8009646 <_dtoa_r+0x4de>
 8009558:	9b02      	ldr	r3, [sp, #8]
 800955a:	2b00      	cmp	r3, #0
 800955c:	dd36      	ble.n	80095cc <_dtoa_r+0x464>
 800955e:	9b00      	ldr	r3, [sp, #0]
 8009560:	4650      	mov	r0, sl
 8009562:	4659      	mov	r1, fp
 8009564:	1e5f      	subs	r7, r3, #1
 8009566:	2200      	movs	r2, #0
 8009568:	4b88      	ldr	r3, [pc, #544]	; (800978c <_dtoa_r+0x624>)
 800956a:	f7f7 f85d 	bl	8000628 <__aeabi_dmul>
 800956e:	9e02      	ldr	r6, [sp, #8]
 8009570:	4682      	mov	sl, r0
 8009572:	468b      	mov	fp, r1
 8009574:	3501      	adds	r5, #1
 8009576:	4628      	mov	r0, r5
 8009578:	f7f6 ffec 	bl	8000554 <__aeabi_i2d>
 800957c:	4652      	mov	r2, sl
 800957e:	465b      	mov	r3, fp
 8009580:	f7f7 f852 	bl	8000628 <__aeabi_dmul>
 8009584:	4b82      	ldr	r3, [pc, #520]	; (8009790 <_dtoa_r+0x628>)
 8009586:	2200      	movs	r2, #0
 8009588:	f7f6 fe98 	bl	80002bc <__adddf3>
 800958c:	46d0      	mov	r8, sl
 800958e:	46d9      	mov	r9, fp
 8009590:	4682      	mov	sl, r0
 8009592:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009596:	2e00      	cmp	r6, #0
 8009598:	d158      	bne.n	800964c <_dtoa_r+0x4e4>
 800959a:	4b7e      	ldr	r3, [pc, #504]	; (8009794 <_dtoa_r+0x62c>)
 800959c:	2200      	movs	r2, #0
 800959e:	4640      	mov	r0, r8
 80095a0:	4649      	mov	r1, r9
 80095a2:	f7f6 fe89 	bl	80002b8 <__aeabi_dsub>
 80095a6:	4652      	mov	r2, sl
 80095a8:	465b      	mov	r3, fp
 80095aa:	4680      	mov	r8, r0
 80095ac:	4689      	mov	r9, r1
 80095ae:	f7f7 facb 	bl	8000b48 <__aeabi_dcmpgt>
 80095b2:	2800      	cmp	r0, #0
 80095b4:	f040 8295 	bne.w	8009ae2 <_dtoa_r+0x97a>
 80095b8:	4652      	mov	r2, sl
 80095ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80095be:	4640      	mov	r0, r8
 80095c0:	4649      	mov	r1, r9
 80095c2:	f7f7 faa3 	bl	8000b0c <__aeabi_dcmplt>
 80095c6:	2800      	cmp	r0, #0
 80095c8:	f040 8289 	bne.w	8009ade <_dtoa_r+0x976>
 80095cc:	ec5b ab19 	vmov	sl, fp, d9
 80095d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f2c0 8148 	blt.w	8009868 <_dtoa_r+0x700>
 80095d8:	9a00      	ldr	r2, [sp, #0]
 80095da:	2a0e      	cmp	r2, #14
 80095dc:	f300 8144 	bgt.w	8009868 <_dtoa_r+0x700>
 80095e0:	4b67      	ldr	r3, [pc, #412]	; (8009780 <_dtoa_r+0x618>)
 80095e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80095ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f280 80d5 	bge.w	800979c <_dtoa_r+0x634>
 80095f2:	9b03      	ldr	r3, [sp, #12]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f300 80d1 	bgt.w	800979c <_dtoa_r+0x634>
 80095fa:	f040 826f 	bne.w	8009adc <_dtoa_r+0x974>
 80095fe:	4b65      	ldr	r3, [pc, #404]	; (8009794 <_dtoa_r+0x62c>)
 8009600:	2200      	movs	r2, #0
 8009602:	4640      	mov	r0, r8
 8009604:	4649      	mov	r1, r9
 8009606:	f7f7 f80f 	bl	8000628 <__aeabi_dmul>
 800960a:	4652      	mov	r2, sl
 800960c:	465b      	mov	r3, fp
 800960e:	f7f7 fa91 	bl	8000b34 <__aeabi_dcmpge>
 8009612:	9e03      	ldr	r6, [sp, #12]
 8009614:	4637      	mov	r7, r6
 8009616:	2800      	cmp	r0, #0
 8009618:	f040 8245 	bne.w	8009aa6 <_dtoa_r+0x93e>
 800961c:	9d01      	ldr	r5, [sp, #4]
 800961e:	2331      	movs	r3, #49	; 0x31
 8009620:	f805 3b01 	strb.w	r3, [r5], #1
 8009624:	9b00      	ldr	r3, [sp, #0]
 8009626:	3301      	adds	r3, #1
 8009628:	9300      	str	r3, [sp, #0]
 800962a:	e240      	b.n	8009aae <_dtoa_r+0x946>
 800962c:	07f2      	lsls	r2, r6, #31
 800962e:	d505      	bpl.n	800963c <_dtoa_r+0x4d4>
 8009630:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009634:	f7f6 fff8 	bl	8000628 <__aeabi_dmul>
 8009638:	3501      	adds	r5, #1
 800963a:	2301      	movs	r3, #1
 800963c:	1076      	asrs	r6, r6, #1
 800963e:	3708      	adds	r7, #8
 8009640:	e777      	b.n	8009532 <_dtoa_r+0x3ca>
 8009642:	2502      	movs	r5, #2
 8009644:	e779      	b.n	800953a <_dtoa_r+0x3d2>
 8009646:	9f00      	ldr	r7, [sp, #0]
 8009648:	9e03      	ldr	r6, [sp, #12]
 800964a:	e794      	b.n	8009576 <_dtoa_r+0x40e>
 800964c:	9901      	ldr	r1, [sp, #4]
 800964e:	4b4c      	ldr	r3, [pc, #304]	; (8009780 <_dtoa_r+0x618>)
 8009650:	4431      	add	r1, r6
 8009652:	910d      	str	r1, [sp, #52]	; 0x34
 8009654:	9908      	ldr	r1, [sp, #32]
 8009656:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800965a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800965e:	2900      	cmp	r1, #0
 8009660:	d043      	beq.n	80096ea <_dtoa_r+0x582>
 8009662:	494d      	ldr	r1, [pc, #308]	; (8009798 <_dtoa_r+0x630>)
 8009664:	2000      	movs	r0, #0
 8009666:	f7f7 f909 	bl	800087c <__aeabi_ddiv>
 800966a:	4652      	mov	r2, sl
 800966c:	465b      	mov	r3, fp
 800966e:	f7f6 fe23 	bl	80002b8 <__aeabi_dsub>
 8009672:	9d01      	ldr	r5, [sp, #4]
 8009674:	4682      	mov	sl, r0
 8009676:	468b      	mov	fp, r1
 8009678:	4649      	mov	r1, r9
 800967a:	4640      	mov	r0, r8
 800967c:	f7f7 fa84 	bl	8000b88 <__aeabi_d2iz>
 8009680:	4606      	mov	r6, r0
 8009682:	f7f6 ff67 	bl	8000554 <__aeabi_i2d>
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	4640      	mov	r0, r8
 800968c:	4649      	mov	r1, r9
 800968e:	f7f6 fe13 	bl	80002b8 <__aeabi_dsub>
 8009692:	3630      	adds	r6, #48	; 0x30
 8009694:	f805 6b01 	strb.w	r6, [r5], #1
 8009698:	4652      	mov	r2, sl
 800969a:	465b      	mov	r3, fp
 800969c:	4680      	mov	r8, r0
 800969e:	4689      	mov	r9, r1
 80096a0:	f7f7 fa34 	bl	8000b0c <__aeabi_dcmplt>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	d163      	bne.n	8009770 <_dtoa_r+0x608>
 80096a8:	4642      	mov	r2, r8
 80096aa:	464b      	mov	r3, r9
 80096ac:	4936      	ldr	r1, [pc, #216]	; (8009788 <_dtoa_r+0x620>)
 80096ae:	2000      	movs	r0, #0
 80096b0:	f7f6 fe02 	bl	80002b8 <__aeabi_dsub>
 80096b4:	4652      	mov	r2, sl
 80096b6:	465b      	mov	r3, fp
 80096b8:	f7f7 fa28 	bl	8000b0c <__aeabi_dcmplt>
 80096bc:	2800      	cmp	r0, #0
 80096be:	f040 80b5 	bne.w	800982c <_dtoa_r+0x6c4>
 80096c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096c4:	429d      	cmp	r5, r3
 80096c6:	d081      	beq.n	80095cc <_dtoa_r+0x464>
 80096c8:	4b30      	ldr	r3, [pc, #192]	; (800978c <_dtoa_r+0x624>)
 80096ca:	2200      	movs	r2, #0
 80096cc:	4650      	mov	r0, sl
 80096ce:	4659      	mov	r1, fp
 80096d0:	f7f6 ffaa 	bl	8000628 <__aeabi_dmul>
 80096d4:	4b2d      	ldr	r3, [pc, #180]	; (800978c <_dtoa_r+0x624>)
 80096d6:	4682      	mov	sl, r0
 80096d8:	468b      	mov	fp, r1
 80096da:	4640      	mov	r0, r8
 80096dc:	4649      	mov	r1, r9
 80096de:	2200      	movs	r2, #0
 80096e0:	f7f6 ffa2 	bl	8000628 <__aeabi_dmul>
 80096e4:	4680      	mov	r8, r0
 80096e6:	4689      	mov	r9, r1
 80096e8:	e7c6      	b.n	8009678 <_dtoa_r+0x510>
 80096ea:	4650      	mov	r0, sl
 80096ec:	4659      	mov	r1, fp
 80096ee:	f7f6 ff9b 	bl	8000628 <__aeabi_dmul>
 80096f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096f4:	9d01      	ldr	r5, [sp, #4]
 80096f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80096f8:	4682      	mov	sl, r0
 80096fa:	468b      	mov	fp, r1
 80096fc:	4649      	mov	r1, r9
 80096fe:	4640      	mov	r0, r8
 8009700:	f7f7 fa42 	bl	8000b88 <__aeabi_d2iz>
 8009704:	4606      	mov	r6, r0
 8009706:	f7f6 ff25 	bl	8000554 <__aeabi_i2d>
 800970a:	3630      	adds	r6, #48	; 0x30
 800970c:	4602      	mov	r2, r0
 800970e:	460b      	mov	r3, r1
 8009710:	4640      	mov	r0, r8
 8009712:	4649      	mov	r1, r9
 8009714:	f7f6 fdd0 	bl	80002b8 <__aeabi_dsub>
 8009718:	f805 6b01 	strb.w	r6, [r5], #1
 800971c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800971e:	429d      	cmp	r5, r3
 8009720:	4680      	mov	r8, r0
 8009722:	4689      	mov	r9, r1
 8009724:	f04f 0200 	mov.w	r2, #0
 8009728:	d124      	bne.n	8009774 <_dtoa_r+0x60c>
 800972a:	4b1b      	ldr	r3, [pc, #108]	; (8009798 <_dtoa_r+0x630>)
 800972c:	4650      	mov	r0, sl
 800972e:	4659      	mov	r1, fp
 8009730:	f7f6 fdc4 	bl	80002bc <__adddf3>
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	4640      	mov	r0, r8
 800973a:	4649      	mov	r1, r9
 800973c:	f7f7 fa04 	bl	8000b48 <__aeabi_dcmpgt>
 8009740:	2800      	cmp	r0, #0
 8009742:	d173      	bne.n	800982c <_dtoa_r+0x6c4>
 8009744:	4652      	mov	r2, sl
 8009746:	465b      	mov	r3, fp
 8009748:	4913      	ldr	r1, [pc, #76]	; (8009798 <_dtoa_r+0x630>)
 800974a:	2000      	movs	r0, #0
 800974c:	f7f6 fdb4 	bl	80002b8 <__aeabi_dsub>
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	4640      	mov	r0, r8
 8009756:	4649      	mov	r1, r9
 8009758:	f7f7 f9d8 	bl	8000b0c <__aeabi_dcmplt>
 800975c:	2800      	cmp	r0, #0
 800975e:	f43f af35 	beq.w	80095cc <_dtoa_r+0x464>
 8009762:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009764:	1e6b      	subs	r3, r5, #1
 8009766:	930f      	str	r3, [sp, #60]	; 0x3c
 8009768:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800976c:	2b30      	cmp	r3, #48	; 0x30
 800976e:	d0f8      	beq.n	8009762 <_dtoa_r+0x5fa>
 8009770:	9700      	str	r7, [sp, #0]
 8009772:	e049      	b.n	8009808 <_dtoa_r+0x6a0>
 8009774:	4b05      	ldr	r3, [pc, #20]	; (800978c <_dtoa_r+0x624>)
 8009776:	f7f6 ff57 	bl	8000628 <__aeabi_dmul>
 800977a:	4680      	mov	r8, r0
 800977c:	4689      	mov	r9, r1
 800977e:	e7bd      	b.n	80096fc <_dtoa_r+0x594>
 8009780:	0800b340 	.word	0x0800b340
 8009784:	0800b318 	.word	0x0800b318
 8009788:	3ff00000 	.word	0x3ff00000
 800978c:	40240000 	.word	0x40240000
 8009790:	401c0000 	.word	0x401c0000
 8009794:	40140000 	.word	0x40140000
 8009798:	3fe00000 	.word	0x3fe00000
 800979c:	9d01      	ldr	r5, [sp, #4]
 800979e:	4656      	mov	r6, sl
 80097a0:	465f      	mov	r7, fp
 80097a2:	4642      	mov	r2, r8
 80097a4:	464b      	mov	r3, r9
 80097a6:	4630      	mov	r0, r6
 80097a8:	4639      	mov	r1, r7
 80097aa:	f7f7 f867 	bl	800087c <__aeabi_ddiv>
 80097ae:	f7f7 f9eb 	bl	8000b88 <__aeabi_d2iz>
 80097b2:	4682      	mov	sl, r0
 80097b4:	f7f6 fece 	bl	8000554 <__aeabi_i2d>
 80097b8:	4642      	mov	r2, r8
 80097ba:	464b      	mov	r3, r9
 80097bc:	f7f6 ff34 	bl	8000628 <__aeabi_dmul>
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	4630      	mov	r0, r6
 80097c6:	4639      	mov	r1, r7
 80097c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80097cc:	f7f6 fd74 	bl	80002b8 <__aeabi_dsub>
 80097d0:	f805 6b01 	strb.w	r6, [r5], #1
 80097d4:	9e01      	ldr	r6, [sp, #4]
 80097d6:	9f03      	ldr	r7, [sp, #12]
 80097d8:	1bae      	subs	r6, r5, r6
 80097da:	42b7      	cmp	r7, r6
 80097dc:	4602      	mov	r2, r0
 80097de:	460b      	mov	r3, r1
 80097e0:	d135      	bne.n	800984e <_dtoa_r+0x6e6>
 80097e2:	f7f6 fd6b 	bl	80002bc <__adddf3>
 80097e6:	4642      	mov	r2, r8
 80097e8:	464b      	mov	r3, r9
 80097ea:	4606      	mov	r6, r0
 80097ec:	460f      	mov	r7, r1
 80097ee:	f7f7 f9ab 	bl	8000b48 <__aeabi_dcmpgt>
 80097f2:	b9d0      	cbnz	r0, 800982a <_dtoa_r+0x6c2>
 80097f4:	4642      	mov	r2, r8
 80097f6:	464b      	mov	r3, r9
 80097f8:	4630      	mov	r0, r6
 80097fa:	4639      	mov	r1, r7
 80097fc:	f7f7 f97c 	bl	8000af8 <__aeabi_dcmpeq>
 8009800:	b110      	cbz	r0, 8009808 <_dtoa_r+0x6a0>
 8009802:	f01a 0f01 	tst.w	sl, #1
 8009806:	d110      	bne.n	800982a <_dtoa_r+0x6c2>
 8009808:	4620      	mov	r0, r4
 800980a:	ee18 1a10 	vmov	r1, s16
 800980e:	f000 fd05 	bl	800a21c <_Bfree>
 8009812:	2300      	movs	r3, #0
 8009814:	9800      	ldr	r0, [sp, #0]
 8009816:	702b      	strb	r3, [r5, #0]
 8009818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800981a:	3001      	adds	r0, #1
 800981c:	6018      	str	r0, [r3, #0]
 800981e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009820:	2b00      	cmp	r3, #0
 8009822:	f43f acf1 	beq.w	8009208 <_dtoa_r+0xa0>
 8009826:	601d      	str	r5, [r3, #0]
 8009828:	e4ee      	b.n	8009208 <_dtoa_r+0xa0>
 800982a:	9f00      	ldr	r7, [sp, #0]
 800982c:	462b      	mov	r3, r5
 800982e:	461d      	mov	r5, r3
 8009830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009834:	2a39      	cmp	r2, #57	; 0x39
 8009836:	d106      	bne.n	8009846 <_dtoa_r+0x6de>
 8009838:	9a01      	ldr	r2, [sp, #4]
 800983a:	429a      	cmp	r2, r3
 800983c:	d1f7      	bne.n	800982e <_dtoa_r+0x6c6>
 800983e:	9901      	ldr	r1, [sp, #4]
 8009840:	2230      	movs	r2, #48	; 0x30
 8009842:	3701      	adds	r7, #1
 8009844:	700a      	strb	r2, [r1, #0]
 8009846:	781a      	ldrb	r2, [r3, #0]
 8009848:	3201      	adds	r2, #1
 800984a:	701a      	strb	r2, [r3, #0]
 800984c:	e790      	b.n	8009770 <_dtoa_r+0x608>
 800984e:	4ba6      	ldr	r3, [pc, #664]	; (8009ae8 <_dtoa_r+0x980>)
 8009850:	2200      	movs	r2, #0
 8009852:	f7f6 fee9 	bl	8000628 <__aeabi_dmul>
 8009856:	2200      	movs	r2, #0
 8009858:	2300      	movs	r3, #0
 800985a:	4606      	mov	r6, r0
 800985c:	460f      	mov	r7, r1
 800985e:	f7f7 f94b 	bl	8000af8 <__aeabi_dcmpeq>
 8009862:	2800      	cmp	r0, #0
 8009864:	d09d      	beq.n	80097a2 <_dtoa_r+0x63a>
 8009866:	e7cf      	b.n	8009808 <_dtoa_r+0x6a0>
 8009868:	9a08      	ldr	r2, [sp, #32]
 800986a:	2a00      	cmp	r2, #0
 800986c:	f000 80d7 	beq.w	8009a1e <_dtoa_r+0x8b6>
 8009870:	9a06      	ldr	r2, [sp, #24]
 8009872:	2a01      	cmp	r2, #1
 8009874:	f300 80ba 	bgt.w	80099ec <_dtoa_r+0x884>
 8009878:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800987a:	2a00      	cmp	r2, #0
 800987c:	f000 80b2 	beq.w	80099e4 <_dtoa_r+0x87c>
 8009880:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009884:	9e07      	ldr	r6, [sp, #28]
 8009886:	9d04      	ldr	r5, [sp, #16]
 8009888:	9a04      	ldr	r2, [sp, #16]
 800988a:	441a      	add	r2, r3
 800988c:	9204      	str	r2, [sp, #16]
 800988e:	9a05      	ldr	r2, [sp, #20]
 8009890:	2101      	movs	r1, #1
 8009892:	441a      	add	r2, r3
 8009894:	4620      	mov	r0, r4
 8009896:	9205      	str	r2, [sp, #20]
 8009898:	f000 fd78 	bl	800a38c <__i2b>
 800989c:	4607      	mov	r7, r0
 800989e:	2d00      	cmp	r5, #0
 80098a0:	dd0c      	ble.n	80098bc <_dtoa_r+0x754>
 80098a2:	9b05      	ldr	r3, [sp, #20]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	dd09      	ble.n	80098bc <_dtoa_r+0x754>
 80098a8:	42ab      	cmp	r3, r5
 80098aa:	9a04      	ldr	r2, [sp, #16]
 80098ac:	bfa8      	it	ge
 80098ae:	462b      	movge	r3, r5
 80098b0:	1ad2      	subs	r2, r2, r3
 80098b2:	9204      	str	r2, [sp, #16]
 80098b4:	9a05      	ldr	r2, [sp, #20]
 80098b6:	1aed      	subs	r5, r5, r3
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	9305      	str	r3, [sp, #20]
 80098bc:	9b07      	ldr	r3, [sp, #28]
 80098be:	b31b      	cbz	r3, 8009908 <_dtoa_r+0x7a0>
 80098c0:	9b08      	ldr	r3, [sp, #32]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f000 80af 	beq.w	8009a26 <_dtoa_r+0x8be>
 80098c8:	2e00      	cmp	r6, #0
 80098ca:	dd13      	ble.n	80098f4 <_dtoa_r+0x78c>
 80098cc:	4639      	mov	r1, r7
 80098ce:	4632      	mov	r2, r6
 80098d0:	4620      	mov	r0, r4
 80098d2:	f000 fe1b 	bl	800a50c <__pow5mult>
 80098d6:	ee18 2a10 	vmov	r2, s16
 80098da:	4601      	mov	r1, r0
 80098dc:	4607      	mov	r7, r0
 80098de:	4620      	mov	r0, r4
 80098e0:	f000 fd6a 	bl	800a3b8 <__multiply>
 80098e4:	ee18 1a10 	vmov	r1, s16
 80098e8:	4680      	mov	r8, r0
 80098ea:	4620      	mov	r0, r4
 80098ec:	f000 fc96 	bl	800a21c <_Bfree>
 80098f0:	ee08 8a10 	vmov	s16, r8
 80098f4:	9b07      	ldr	r3, [sp, #28]
 80098f6:	1b9a      	subs	r2, r3, r6
 80098f8:	d006      	beq.n	8009908 <_dtoa_r+0x7a0>
 80098fa:	ee18 1a10 	vmov	r1, s16
 80098fe:	4620      	mov	r0, r4
 8009900:	f000 fe04 	bl	800a50c <__pow5mult>
 8009904:	ee08 0a10 	vmov	s16, r0
 8009908:	2101      	movs	r1, #1
 800990a:	4620      	mov	r0, r4
 800990c:	f000 fd3e 	bl	800a38c <__i2b>
 8009910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009912:	2b00      	cmp	r3, #0
 8009914:	4606      	mov	r6, r0
 8009916:	f340 8088 	ble.w	8009a2a <_dtoa_r+0x8c2>
 800991a:	461a      	mov	r2, r3
 800991c:	4601      	mov	r1, r0
 800991e:	4620      	mov	r0, r4
 8009920:	f000 fdf4 	bl	800a50c <__pow5mult>
 8009924:	9b06      	ldr	r3, [sp, #24]
 8009926:	2b01      	cmp	r3, #1
 8009928:	4606      	mov	r6, r0
 800992a:	f340 8081 	ble.w	8009a30 <_dtoa_r+0x8c8>
 800992e:	f04f 0800 	mov.w	r8, #0
 8009932:	6933      	ldr	r3, [r6, #16]
 8009934:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009938:	6918      	ldr	r0, [r3, #16]
 800993a:	f000 fcd7 	bl	800a2ec <__hi0bits>
 800993e:	f1c0 0020 	rsb	r0, r0, #32
 8009942:	9b05      	ldr	r3, [sp, #20]
 8009944:	4418      	add	r0, r3
 8009946:	f010 001f 	ands.w	r0, r0, #31
 800994a:	f000 8092 	beq.w	8009a72 <_dtoa_r+0x90a>
 800994e:	f1c0 0320 	rsb	r3, r0, #32
 8009952:	2b04      	cmp	r3, #4
 8009954:	f340 808a 	ble.w	8009a6c <_dtoa_r+0x904>
 8009958:	f1c0 001c 	rsb	r0, r0, #28
 800995c:	9b04      	ldr	r3, [sp, #16]
 800995e:	4403      	add	r3, r0
 8009960:	9304      	str	r3, [sp, #16]
 8009962:	9b05      	ldr	r3, [sp, #20]
 8009964:	4403      	add	r3, r0
 8009966:	4405      	add	r5, r0
 8009968:	9305      	str	r3, [sp, #20]
 800996a:	9b04      	ldr	r3, [sp, #16]
 800996c:	2b00      	cmp	r3, #0
 800996e:	dd07      	ble.n	8009980 <_dtoa_r+0x818>
 8009970:	ee18 1a10 	vmov	r1, s16
 8009974:	461a      	mov	r2, r3
 8009976:	4620      	mov	r0, r4
 8009978:	f000 fe22 	bl	800a5c0 <__lshift>
 800997c:	ee08 0a10 	vmov	s16, r0
 8009980:	9b05      	ldr	r3, [sp, #20]
 8009982:	2b00      	cmp	r3, #0
 8009984:	dd05      	ble.n	8009992 <_dtoa_r+0x82a>
 8009986:	4631      	mov	r1, r6
 8009988:	461a      	mov	r2, r3
 800998a:	4620      	mov	r0, r4
 800998c:	f000 fe18 	bl	800a5c0 <__lshift>
 8009990:	4606      	mov	r6, r0
 8009992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009994:	2b00      	cmp	r3, #0
 8009996:	d06e      	beq.n	8009a76 <_dtoa_r+0x90e>
 8009998:	ee18 0a10 	vmov	r0, s16
 800999c:	4631      	mov	r1, r6
 800999e:	f000 fe7f 	bl	800a6a0 <__mcmp>
 80099a2:	2800      	cmp	r0, #0
 80099a4:	da67      	bge.n	8009a76 <_dtoa_r+0x90e>
 80099a6:	9b00      	ldr	r3, [sp, #0]
 80099a8:	3b01      	subs	r3, #1
 80099aa:	ee18 1a10 	vmov	r1, s16
 80099ae:	9300      	str	r3, [sp, #0]
 80099b0:	220a      	movs	r2, #10
 80099b2:	2300      	movs	r3, #0
 80099b4:	4620      	mov	r0, r4
 80099b6:	f000 fc53 	bl	800a260 <__multadd>
 80099ba:	9b08      	ldr	r3, [sp, #32]
 80099bc:	ee08 0a10 	vmov	s16, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f000 81b1 	beq.w	8009d28 <_dtoa_r+0xbc0>
 80099c6:	2300      	movs	r3, #0
 80099c8:	4639      	mov	r1, r7
 80099ca:	220a      	movs	r2, #10
 80099cc:	4620      	mov	r0, r4
 80099ce:	f000 fc47 	bl	800a260 <__multadd>
 80099d2:	9b02      	ldr	r3, [sp, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	4607      	mov	r7, r0
 80099d8:	f300 808e 	bgt.w	8009af8 <_dtoa_r+0x990>
 80099dc:	9b06      	ldr	r3, [sp, #24]
 80099de:	2b02      	cmp	r3, #2
 80099e0:	dc51      	bgt.n	8009a86 <_dtoa_r+0x91e>
 80099e2:	e089      	b.n	8009af8 <_dtoa_r+0x990>
 80099e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80099ea:	e74b      	b.n	8009884 <_dtoa_r+0x71c>
 80099ec:	9b03      	ldr	r3, [sp, #12]
 80099ee:	1e5e      	subs	r6, r3, #1
 80099f0:	9b07      	ldr	r3, [sp, #28]
 80099f2:	42b3      	cmp	r3, r6
 80099f4:	bfbf      	itttt	lt
 80099f6:	9b07      	ldrlt	r3, [sp, #28]
 80099f8:	9607      	strlt	r6, [sp, #28]
 80099fa:	1af2      	sublt	r2, r6, r3
 80099fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80099fe:	bfb6      	itet	lt
 8009a00:	189b      	addlt	r3, r3, r2
 8009a02:	1b9e      	subge	r6, r3, r6
 8009a04:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009a06:	9b03      	ldr	r3, [sp, #12]
 8009a08:	bfb8      	it	lt
 8009a0a:	2600      	movlt	r6, #0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	bfb7      	itett	lt
 8009a10:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009a14:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009a18:	1a9d      	sublt	r5, r3, r2
 8009a1a:	2300      	movlt	r3, #0
 8009a1c:	e734      	b.n	8009888 <_dtoa_r+0x720>
 8009a1e:	9e07      	ldr	r6, [sp, #28]
 8009a20:	9d04      	ldr	r5, [sp, #16]
 8009a22:	9f08      	ldr	r7, [sp, #32]
 8009a24:	e73b      	b.n	800989e <_dtoa_r+0x736>
 8009a26:	9a07      	ldr	r2, [sp, #28]
 8009a28:	e767      	b.n	80098fa <_dtoa_r+0x792>
 8009a2a:	9b06      	ldr	r3, [sp, #24]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	dc18      	bgt.n	8009a62 <_dtoa_r+0x8fa>
 8009a30:	f1ba 0f00 	cmp.w	sl, #0
 8009a34:	d115      	bne.n	8009a62 <_dtoa_r+0x8fa>
 8009a36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a3a:	b993      	cbnz	r3, 8009a62 <_dtoa_r+0x8fa>
 8009a3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a40:	0d1b      	lsrs	r3, r3, #20
 8009a42:	051b      	lsls	r3, r3, #20
 8009a44:	b183      	cbz	r3, 8009a68 <_dtoa_r+0x900>
 8009a46:	9b04      	ldr	r3, [sp, #16]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	9304      	str	r3, [sp, #16]
 8009a4c:	9b05      	ldr	r3, [sp, #20]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	9305      	str	r3, [sp, #20]
 8009a52:	f04f 0801 	mov.w	r8, #1
 8009a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f47f af6a 	bne.w	8009932 <_dtoa_r+0x7ca>
 8009a5e:	2001      	movs	r0, #1
 8009a60:	e76f      	b.n	8009942 <_dtoa_r+0x7da>
 8009a62:	f04f 0800 	mov.w	r8, #0
 8009a66:	e7f6      	b.n	8009a56 <_dtoa_r+0x8ee>
 8009a68:	4698      	mov	r8, r3
 8009a6a:	e7f4      	b.n	8009a56 <_dtoa_r+0x8ee>
 8009a6c:	f43f af7d 	beq.w	800996a <_dtoa_r+0x802>
 8009a70:	4618      	mov	r0, r3
 8009a72:	301c      	adds	r0, #28
 8009a74:	e772      	b.n	800995c <_dtoa_r+0x7f4>
 8009a76:	9b03      	ldr	r3, [sp, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	dc37      	bgt.n	8009aec <_dtoa_r+0x984>
 8009a7c:	9b06      	ldr	r3, [sp, #24]
 8009a7e:	2b02      	cmp	r3, #2
 8009a80:	dd34      	ble.n	8009aec <_dtoa_r+0x984>
 8009a82:	9b03      	ldr	r3, [sp, #12]
 8009a84:	9302      	str	r3, [sp, #8]
 8009a86:	9b02      	ldr	r3, [sp, #8]
 8009a88:	b96b      	cbnz	r3, 8009aa6 <_dtoa_r+0x93e>
 8009a8a:	4631      	mov	r1, r6
 8009a8c:	2205      	movs	r2, #5
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f000 fbe6 	bl	800a260 <__multadd>
 8009a94:	4601      	mov	r1, r0
 8009a96:	4606      	mov	r6, r0
 8009a98:	ee18 0a10 	vmov	r0, s16
 8009a9c:	f000 fe00 	bl	800a6a0 <__mcmp>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	f73f adbb 	bgt.w	800961c <_dtoa_r+0x4b4>
 8009aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aa8:	9d01      	ldr	r5, [sp, #4]
 8009aaa:	43db      	mvns	r3, r3
 8009aac:	9300      	str	r3, [sp, #0]
 8009aae:	f04f 0800 	mov.w	r8, #0
 8009ab2:	4631      	mov	r1, r6
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	f000 fbb1 	bl	800a21c <_Bfree>
 8009aba:	2f00      	cmp	r7, #0
 8009abc:	f43f aea4 	beq.w	8009808 <_dtoa_r+0x6a0>
 8009ac0:	f1b8 0f00 	cmp.w	r8, #0
 8009ac4:	d005      	beq.n	8009ad2 <_dtoa_r+0x96a>
 8009ac6:	45b8      	cmp	r8, r7
 8009ac8:	d003      	beq.n	8009ad2 <_dtoa_r+0x96a>
 8009aca:	4641      	mov	r1, r8
 8009acc:	4620      	mov	r0, r4
 8009ace:	f000 fba5 	bl	800a21c <_Bfree>
 8009ad2:	4639      	mov	r1, r7
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	f000 fba1 	bl	800a21c <_Bfree>
 8009ada:	e695      	b.n	8009808 <_dtoa_r+0x6a0>
 8009adc:	2600      	movs	r6, #0
 8009ade:	4637      	mov	r7, r6
 8009ae0:	e7e1      	b.n	8009aa6 <_dtoa_r+0x93e>
 8009ae2:	9700      	str	r7, [sp, #0]
 8009ae4:	4637      	mov	r7, r6
 8009ae6:	e599      	b.n	800961c <_dtoa_r+0x4b4>
 8009ae8:	40240000 	.word	0x40240000
 8009aec:	9b08      	ldr	r3, [sp, #32]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f000 80ca 	beq.w	8009c88 <_dtoa_r+0xb20>
 8009af4:	9b03      	ldr	r3, [sp, #12]
 8009af6:	9302      	str	r3, [sp, #8]
 8009af8:	2d00      	cmp	r5, #0
 8009afa:	dd05      	ble.n	8009b08 <_dtoa_r+0x9a0>
 8009afc:	4639      	mov	r1, r7
 8009afe:	462a      	mov	r2, r5
 8009b00:	4620      	mov	r0, r4
 8009b02:	f000 fd5d 	bl	800a5c0 <__lshift>
 8009b06:	4607      	mov	r7, r0
 8009b08:	f1b8 0f00 	cmp.w	r8, #0
 8009b0c:	d05b      	beq.n	8009bc6 <_dtoa_r+0xa5e>
 8009b0e:	6879      	ldr	r1, [r7, #4]
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 fb43 	bl	800a19c <_Balloc>
 8009b16:	4605      	mov	r5, r0
 8009b18:	b928      	cbnz	r0, 8009b26 <_dtoa_r+0x9be>
 8009b1a:	4b87      	ldr	r3, [pc, #540]	; (8009d38 <_dtoa_r+0xbd0>)
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009b22:	f7ff bb3b 	b.w	800919c <_dtoa_r+0x34>
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	3202      	adds	r2, #2
 8009b2a:	0092      	lsls	r2, r2, #2
 8009b2c:	f107 010c 	add.w	r1, r7, #12
 8009b30:	300c      	adds	r0, #12
 8009b32:	f7fe fcbf 	bl	80084b4 <memcpy>
 8009b36:	2201      	movs	r2, #1
 8009b38:	4629      	mov	r1, r5
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f000 fd40 	bl	800a5c0 <__lshift>
 8009b40:	9b01      	ldr	r3, [sp, #4]
 8009b42:	f103 0901 	add.w	r9, r3, #1
 8009b46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	9305      	str	r3, [sp, #20]
 8009b4e:	f00a 0301 	and.w	r3, sl, #1
 8009b52:	46b8      	mov	r8, r7
 8009b54:	9304      	str	r3, [sp, #16]
 8009b56:	4607      	mov	r7, r0
 8009b58:	4631      	mov	r1, r6
 8009b5a:	ee18 0a10 	vmov	r0, s16
 8009b5e:	f7ff fa77 	bl	8009050 <quorem>
 8009b62:	4641      	mov	r1, r8
 8009b64:	9002      	str	r0, [sp, #8]
 8009b66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009b6a:	ee18 0a10 	vmov	r0, s16
 8009b6e:	f000 fd97 	bl	800a6a0 <__mcmp>
 8009b72:	463a      	mov	r2, r7
 8009b74:	9003      	str	r0, [sp, #12]
 8009b76:	4631      	mov	r1, r6
 8009b78:	4620      	mov	r0, r4
 8009b7a:	f000 fdad 	bl	800a6d8 <__mdiff>
 8009b7e:	68c2      	ldr	r2, [r0, #12]
 8009b80:	f109 3bff 	add.w	fp, r9, #4294967295
 8009b84:	4605      	mov	r5, r0
 8009b86:	bb02      	cbnz	r2, 8009bca <_dtoa_r+0xa62>
 8009b88:	4601      	mov	r1, r0
 8009b8a:	ee18 0a10 	vmov	r0, s16
 8009b8e:	f000 fd87 	bl	800a6a0 <__mcmp>
 8009b92:	4602      	mov	r2, r0
 8009b94:	4629      	mov	r1, r5
 8009b96:	4620      	mov	r0, r4
 8009b98:	9207      	str	r2, [sp, #28]
 8009b9a:	f000 fb3f 	bl	800a21c <_Bfree>
 8009b9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009ba2:	ea43 0102 	orr.w	r1, r3, r2
 8009ba6:	9b04      	ldr	r3, [sp, #16]
 8009ba8:	430b      	orrs	r3, r1
 8009baa:	464d      	mov	r5, r9
 8009bac:	d10f      	bne.n	8009bce <_dtoa_r+0xa66>
 8009bae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009bb2:	d02a      	beq.n	8009c0a <_dtoa_r+0xaa2>
 8009bb4:	9b03      	ldr	r3, [sp, #12]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	dd02      	ble.n	8009bc0 <_dtoa_r+0xa58>
 8009bba:	9b02      	ldr	r3, [sp, #8]
 8009bbc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009bc0:	f88b a000 	strb.w	sl, [fp]
 8009bc4:	e775      	b.n	8009ab2 <_dtoa_r+0x94a>
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	e7ba      	b.n	8009b40 <_dtoa_r+0x9d8>
 8009bca:	2201      	movs	r2, #1
 8009bcc:	e7e2      	b.n	8009b94 <_dtoa_r+0xa2c>
 8009bce:	9b03      	ldr	r3, [sp, #12]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	db04      	blt.n	8009bde <_dtoa_r+0xa76>
 8009bd4:	9906      	ldr	r1, [sp, #24]
 8009bd6:	430b      	orrs	r3, r1
 8009bd8:	9904      	ldr	r1, [sp, #16]
 8009bda:	430b      	orrs	r3, r1
 8009bdc:	d122      	bne.n	8009c24 <_dtoa_r+0xabc>
 8009bde:	2a00      	cmp	r2, #0
 8009be0:	ddee      	ble.n	8009bc0 <_dtoa_r+0xa58>
 8009be2:	ee18 1a10 	vmov	r1, s16
 8009be6:	2201      	movs	r2, #1
 8009be8:	4620      	mov	r0, r4
 8009bea:	f000 fce9 	bl	800a5c0 <__lshift>
 8009bee:	4631      	mov	r1, r6
 8009bf0:	ee08 0a10 	vmov	s16, r0
 8009bf4:	f000 fd54 	bl	800a6a0 <__mcmp>
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	dc03      	bgt.n	8009c04 <_dtoa_r+0xa9c>
 8009bfc:	d1e0      	bne.n	8009bc0 <_dtoa_r+0xa58>
 8009bfe:	f01a 0f01 	tst.w	sl, #1
 8009c02:	d0dd      	beq.n	8009bc0 <_dtoa_r+0xa58>
 8009c04:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009c08:	d1d7      	bne.n	8009bba <_dtoa_r+0xa52>
 8009c0a:	2339      	movs	r3, #57	; 0x39
 8009c0c:	f88b 3000 	strb.w	r3, [fp]
 8009c10:	462b      	mov	r3, r5
 8009c12:	461d      	mov	r5, r3
 8009c14:	3b01      	subs	r3, #1
 8009c16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009c1a:	2a39      	cmp	r2, #57	; 0x39
 8009c1c:	d071      	beq.n	8009d02 <_dtoa_r+0xb9a>
 8009c1e:	3201      	adds	r2, #1
 8009c20:	701a      	strb	r2, [r3, #0]
 8009c22:	e746      	b.n	8009ab2 <_dtoa_r+0x94a>
 8009c24:	2a00      	cmp	r2, #0
 8009c26:	dd07      	ble.n	8009c38 <_dtoa_r+0xad0>
 8009c28:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009c2c:	d0ed      	beq.n	8009c0a <_dtoa_r+0xaa2>
 8009c2e:	f10a 0301 	add.w	r3, sl, #1
 8009c32:	f88b 3000 	strb.w	r3, [fp]
 8009c36:	e73c      	b.n	8009ab2 <_dtoa_r+0x94a>
 8009c38:	9b05      	ldr	r3, [sp, #20]
 8009c3a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009c3e:	4599      	cmp	r9, r3
 8009c40:	d047      	beq.n	8009cd2 <_dtoa_r+0xb6a>
 8009c42:	ee18 1a10 	vmov	r1, s16
 8009c46:	2300      	movs	r3, #0
 8009c48:	220a      	movs	r2, #10
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	f000 fb08 	bl	800a260 <__multadd>
 8009c50:	45b8      	cmp	r8, r7
 8009c52:	ee08 0a10 	vmov	s16, r0
 8009c56:	f04f 0300 	mov.w	r3, #0
 8009c5a:	f04f 020a 	mov.w	r2, #10
 8009c5e:	4641      	mov	r1, r8
 8009c60:	4620      	mov	r0, r4
 8009c62:	d106      	bne.n	8009c72 <_dtoa_r+0xb0a>
 8009c64:	f000 fafc 	bl	800a260 <__multadd>
 8009c68:	4680      	mov	r8, r0
 8009c6a:	4607      	mov	r7, r0
 8009c6c:	f109 0901 	add.w	r9, r9, #1
 8009c70:	e772      	b.n	8009b58 <_dtoa_r+0x9f0>
 8009c72:	f000 faf5 	bl	800a260 <__multadd>
 8009c76:	4639      	mov	r1, r7
 8009c78:	4680      	mov	r8, r0
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	220a      	movs	r2, #10
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f000 faee 	bl	800a260 <__multadd>
 8009c84:	4607      	mov	r7, r0
 8009c86:	e7f1      	b.n	8009c6c <_dtoa_r+0xb04>
 8009c88:	9b03      	ldr	r3, [sp, #12]
 8009c8a:	9302      	str	r3, [sp, #8]
 8009c8c:	9d01      	ldr	r5, [sp, #4]
 8009c8e:	ee18 0a10 	vmov	r0, s16
 8009c92:	4631      	mov	r1, r6
 8009c94:	f7ff f9dc 	bl	8009050 <quorem>
 8009c98:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009c9c:	9b01      	ldr	r3, [sp, #4]
 8009c9e:	f805 ab01 	strb.w	sl, [r5], #1
 8009ca2:	1aea      	subs	r2, r5, r3
 8009ca4:	9b02      	ldr	r3, [sp, #8]
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	dd09      	ble.n	8009cbe <_dtoa_r+0xb56>
 8009caa:	ee18 1a10 	vmov	r1, s16
 8009cae:	2300      	movs	r3, #0
 8009cb0:	220a      	movs	r2, #10
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f000 fad4 	bl	800a260 <__multadd>
 8009cb8:	ee08 0a10 	vmov	s16, r0
 8009cbc:	e7e7      	b.n	8009c8e <_dtoa_r+0xb26>
 8009cbe:	9b02      	ldr	r3, [sp, #8]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	bfc8      	it	gt
 8009cc4:	461d      	movgt	r5, r3
 8009cc6:	9b01      	ldr	r3, [sp, #4]
 8009cc8:	bfd8      	it	le
 8009cca:	2501      	movle	r5, #1
 8009ccc:	441d      	add	r5, r3
 8009cce:	f04f 0800 	mov.w	r8, #0
 8009cd2:	ee18 1a10 	vmov	r1, s16
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f000 fc71 	bl	800a5c0 <__lshift>
 8009cde:	4631      	mov	r1, r6
 8009ce0:	ee08 0a10 	vmov	s16, r0
 8009ce4:	f000 fcdc 	bl	800a6a0 <__mcmp>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	dc91      	bgt.n	8009c10 <_dtoa_r+0xaa8>
 8009cec:	d102      	bne.n	8009cf4 <_dtoa_r+0xb8c>
 8009cee:	f01a 0f01 	tst.w	sl, #1
 8009cf2:	d18d      	bne.n	8009c10 <_dtoa_r+0xaa8>
 8009cf4:	462b      	mov	r3, r5
 8009cf6:	461d      	mov	r5, r3
 8009cf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cfc:	2a30      	cmp	r2, #48	; 0x30
 8009cfe:	d0fa      	beq.n	8009cf6 <_dtoa_r+0xb8e>
 8009d00:	e6d7      	b.n	8009ab2 <_dtoa_r+0x94a>
 8009d02:	9a01      	ldr	r2, [sp, #4]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d184      	bne.n	8009c12 <_dtoa_r+0xaaa>
 8009d08:	9b00      	ldr	r3, [sp, #0]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	9300      	str	r3, [sp, #0]
 8009d0e:	2331      	movs	r3, #49	; 0x31
 8009d10:	7013      	strb	r3, [r2, #0]
 8009d12:	e6ce      	b.n	8009ab2 <_dtoa_r+0x94a>
 8009d14:	4b09      	ldr	r3, [pc, #36]	; (8009d3c <_dtoa_r+0xbd4>)
 8009d16:	f7ff ba95 	b.w	8009244 <_dtoa_r+0xdc>
 8009d1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f47f aa6e 	bne.w	80091fe <_dtoa_r+0x96>
 8009d22:	4b07      	ldr	r3, [pc, #28]	; (8009d40 <_dtoa_r+0xbd8>)
 8009d24:	f7ff ba8e 	b.w	8009244 <_dtoa_r+0xdc>
 8009d28:	9b02      	ldr	r3, [sp, #8]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	dcae      	bgt.n	8009c8c <_dtoa_r+0xb24>
 8009d2e:	9b06      	ldr	r3, [sp, #24]
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	f73f aea8 	bgt.w	8009a86 <_dtoa_r+0x91e>
 8009d36:	e7a9      	b.n	8009c8c <_dtoa_r+0xb24>
 8009d38:	0800b24b 	.word	0x0800b24b
 8009d3c:	0800b1a8 	.word	0x0800b1a8
 8009d40:	0800b1cc 	.word	0x0800b1cc

08009d44 <__sflush_r>:
 8009d44:	898a      	ldrh	r2, [r1, #12]
 8009d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d4a:	4605      	mov	r5, r0
 8009d4c:	0710      	lsls	r0, r2, #28
 8009d4e:	460c      	mov	r4, r1
 8009d50:	d458      	bmi.n	8009e04 <__sflush_r+0xc0>
 8009d52:	684b      	ldr	r3, [r1, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	dc05      	bgt.n	8009d64 <__sflush_r+0x20>
 8009d58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	dc02      	bgt.n	8009d64 <__sflush_r+0x20>
 8009d5e:	2000      	movs	r0, #0
 8009d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d66:	2e00      	cmp	r6, #0
 8009d68:	d0f9      	beq.n	8009d5e <__sflush_r+0x1a>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d70:	682f      	ldr	r7, [r5, #0]
 8009d72:	602b      	str	r3, [r5, #0]
 8009d74:	d032      	beq.n	8009ddc <__sflush_r+0x98>
 8009d76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d78:	89a3      	ldrh	r3, [r4, #12]
 8009d7a:	075a      	lsls	r2, r3, #29
 8009d7c:	d505      	bpl.n	8009d8a <__sflush_r+0x46>
 8009d7e:	6863      	ldr	r3, [r4, #4]
 8009d80:	1ac0      	subs	r0, r0, r3
 8009d82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d84:	b10b      	cbz	r3, 8009d8a <__sflush_r+0x46>
 8009d86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d88:	1ac0      	subs	r0, r0, r3
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d90:	6a21      	ldr	r1, [r4, #32]
 8009d92:	4628      	mov	r0, r5
 8009d94:	47b0      	blx	r6
 8009d96:	1c43      	adds	r3, r0, #1
 8009d98:	89a3      	ldrh	r3, [r4, #12]
 8009d9a:	d106      	bne.n	8009daa <__sflush_r+0x66>
 8009d9c:	6829      	ldr	r1, [r5, #0]
 8009d9e:	291d      	cmp	r1, #29
 8009da0:	d82c      	bhi.n	8009dfc <__sflush_r+0xb8>
 8009da2:	4a2a      	ldr	r2, [pc, #168]	; (8009e4c <__sflush_r+0x108>)
 8009da4:	40ca      	lsrs	r2, r1
 8009da6:	07d6      	lsls	r6, r2, #31
 8009da8:	d528      	bpl.n	8009dfc <__sflush_r+0xb8>
 8009daa:	2200      	movs	r2, #0
 8009dac:	6062      	str	r2, [r4, #4]
 8009dae:	04d9      	lsls	r1, r3, #19
 8009db0:	6922      	ldr	r2, [r4, #16]
 8009db2:	6022      	str	r2, [r4, #0]
 8009db4:	d504      	bpl.n	8009dc0 <__sflush_r+0x7c>
 8009db6:	1c42      	adds	r2, r0, #1
 8009db8:	d101      	bne.n	8009dbe <__sflush_r+0x7a>
 8009dba:	682b      	ldr	r3, [r5, #0]
 8009dbc:	b903      	cbnz	r3, 8009dc0 <__sflush_r+0x7c>
 8009dbe:	6560      	str	r0, [r4, #84]	; 0x54
 8009dc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dc2:	602f      	str	r7, [r5, #0]
 8009dc4:	2900      	cmp	r1, #0
 8009dc6:	d0ca      	beq.n	8009d5e <__sflush_r+0x1a>
 8009dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dcc:	4299      	cmp	r1, r3
 8009dce:	d002      	beq.n	8009dd6 <__sflush_r+0x92>
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	f000 fd7d 	bl	800a8d0 <_free_r>
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	6360      	str	r0, [r4, #52]	; 0x34
 8009dda:	e7c1      	b.n	8009d60 <__sflush_r+0x1c>
 8009ddc:	6a21      	ldr	r1, [r4, #32]
 8009dde:	2301      	movs	r3, #1
 8009de0:	4628      	mov	r0, r5
 8009de2:	47b0      	blx	r6
 8009de4:	1c41      	adds	r1, r0, #1
 8009de6:	d1c7      	bne.n	8009d78 <__sflush_r+0x34>
 8009de8:	682b      	ldr	r3, [r5, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d0c4      	beq.n	8009d78 <__sflush_r+0x34>
 8009dee:	2b1d      	cmp	r3, #29
 8009df0:	d001      	beq.n	8009df6 <__sflush_r+0xb2>
 8009df2:	2b16      	cmp	r3, #22
 8009df4:	d101      	bne.n	8009dfa <__sflush_r+0xb6>
 8009df6:	602f      	str	r7, [r5, #0]
 8009df8:	e7b1      	b.n	8009d5e <__sflush_r+0x1a>
 8009dfa:	89a3      	ldrh	r3, [r4, #12]
 8009dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e00:	81a3      	strh	r3, [r4, #12]
 8009e02:	e7ad      	b.n	8009d60 <__sflush_r+0x1c>
 8009e04:	690f      	ldr	r7, [r1, #16]
 8009e06:	2f00      	cmp	r7, #0
 8009e08:	d0a9      	beq.n	8009d5e <__sflush_r+0x1a>
 8009e0a:	0793      	lsls	r3, r2, #30
 8009e0c:	680e      	ldr	r6, [r1, #0]
 8009e0e:	bf08      	it	eq
 8009e10:	694b      	ldreq	r3, [r1, #20]
 8009e12:	600f      	str	r7, [r1, #0]
 8009e14:	bf18      	it	ne
 8009e16:	2300      	movne	r3, #0
 8009e18:	eba6 0807 	sub.w	r8, r6, r7
 8009e1c:	608b      	str	r3, [r1, #8]
 8009e1e:	f1b8 0f00 	cmp.w	r8, #0
 8009e22:	dd9c      	ble.n	8009d5e <__sflush_r+0x1a>
 8009e24:	6a21      	ldr	r1, [r4, #32]
 8009e26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e28:	4643      	mov	r3, r8
 8009e2a:	463a      	mov	r2, r7
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	47b0      	blx	r6
 8009e30:	2800      	cmp	r0, #0
 8009e32:	dc06      	bgt.n	8009e42 <__sflush_r+0xfe>
 8009e34:	89a3      	ldrh	r3, [r4, #12]
 8009e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e3a:	81a3      	strh	r3, [r4, #12]
 8009e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e40:	e78e      	b.n	8009d60 <__sflush_r+0x1c>
 8009e42:	4407      	add	r7, r0
 8009e44:	eba8 0800 	sub.w	r8, r8, r0
 8009e48:	e7e9      	b.n	8009e1e <__sflush_r+0xda>
 8009e4a:	bf00      	nop
 8009e4c:	20400001 	.word	0x20400001

08009e50 <_fflush_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	690b      	ldr	r3, [r1, #16]
 8009e54:	4605      	mov	r5, r0
 8009e56:	460c      	mov	r4, r1
 8009e58:	b913      	cbnz	r3, 8009e60 <_fflush_r+0x10>
 8009e5a:	2500      	movs	r5, #0
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	bd38      	pop	{r3, r4, r5, pc}
 8009e60:	b118      	cbz	r0, 8009e6a <_fflush_r+0x1a>
 8009e62:	6983      	ldr	r3, [r0, #24]
 8009e64:	b90b      	cbnz	r3, 8009e6a <_fflush_r+0x1a>
 8009e66:	f000 f887 	bl	8009f78 <__sinit>
 8009e6a:	4b14      	ldr	r3, [pc, #80]	; (8009ebc <_fflush_r+0x6c>)
 8009e6c:	429c      	cmp	r4, r3
 8009e6e:	d11b      	bne.n	8009ea8 <_fflush_r+0x58>
 8009e70:	686c      	ldr	r4, [r5, #4]
 8009e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d0ef      	beq.n	8009e5a <_fflush_r+0xa>
 8009e7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e7c:	07d0      	lsls	r0, r2, #31
 8009e7e:	d404      	bmi.n	8009e8a <_fflush_r+0x3a>
 8009e80:	0599      	lsls	r1, r3, #22
 8009e82:	d402      	bmi.n	8009e8a <_fflush_r+0x3a>
 8009e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e86:	f000 f91a 	bl	800a0be <__retarget_lock_acquire_recursive>
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	f7ff ff59 	bl	8009d44 <__sflush_r>
 8009e92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e94:	07da      	lsls	r2, r3, #31
 8009e96:	4605      	mov	r5, r0
 8009e98:	d4e0      	bmi.n	8009e5c <_fflush_r+0xc>
 8009e9a:	89a3      	ldrh	r3, [r4, #12]
 8009e9c:	059b      	lsls	r3, r3, #22
 8009e9e:	d4dd      	bmi.n	8009e5c <_fflush_r+0xc>
 8009ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ea2:	f000 f90d 	bl	800a0c0 <__retarget_lock_release_recursive>
 8009ea6:	e7d9      	b.n	8009e5c <_fflush_r+0xc>
 8009ea8:	4b05      	ldr	r3, [pc, #20]	; (8009ec0 <_fflush_r+0x70>)
 8009eaa:	429c      	cmp	r4, r3
 8009eac:	d101      	bne.n	8009eb2 <_fflush_r+0x62>
 8009eae:	68ac      	ldr	r4, [r5, #8]
 8009eb0:	e7df      	b.n	8009e72 <_fflush_r+0x22>
 8009eb2:	4b04      	ldr	r3, [pc, #16]	; (8009ec4 <_fflush_r+0x74>)
 8009eb4:	429c      	cmp	r4, r3
 8009eb6:	bf08      	it	eq
 8009eb8:	68ec      	ldreq	r4, [r5, #12]
 8009eba:	e7da      	b.n	8009e72 <_fflush_r+0x22>
 8009ebc:	0800b27c 	.word	0x0800b27c
 8009ec0:	0800b29c 	.word	0x0800b29c
 8009ec4:	0800b25c 	.word	0x0800b25c

08009ec8 <std>:
 8009ec8:	2300      	movs	r3, #0
 8009eca:	b510      	push	{r4, lr}
 8009ecc:	4604      	mov	r4, r0
 8009ece:	e9c0 3300 	strd	r3, r3, [r0]
 8009ed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ed6:	6083      	str	r3, [r0, #8]
 8009ed8:	8181      	strh	r1, [r0, #12]
 8009eda:	6643      	str	r3, [r0, #100]	; 0x64
 8009edc:	81c2      	strh	r2, [r0, #14]
 8009ede:	6183      	str	r3, [r0, #24]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	2208      	movs	r2, #8
 8009ee4:	305c      	adds	r0, #92	; 0x5c
 8009ee6:	f7fe faf3 	bl	80084d0 <memset>
 8009eea:	4b05      	ldr	r3, [pc, #20]	; (8009f00 <std+0x38>)
 8009eec:	6263      	str	r3, [r4, #36]	; 0x24
 8009eee:	4b05      	ldr	r3, [pc, #20]	; (8009f04 <std+0x3c>)
 8009ef0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ef2:	4b05      	ldr	r3, [pc, #20]	; (8009f08 <std+0x40>)
 8009ef4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ef6:	4b05      	ldr	r3, [pc, #20]	; (8009f0c <std+0x44>)
 8009ef8:	6224      	str	r4, [r4, #32]
 8009efa:	6323      	str	r3, [r4, #48]	; 0x30
 8009efc:	bd10      	pop	{r4, pc}
 8009efe:	bf00      	nop
 8009f00:	0800ad65 	.word	0x0800ad65
 8009f04:	0800ad87 	.word	0x0800ad87
 8009f08:	0800adbf 	.word	0x0800adbf
 8009f0c:	0800ade3 	.word	0x0800ade3

08009f10 <_cleanup_r>:
 8009f10:	4901      	ldr	r1, [pc, #4]	; (8009f18 <_cleanup_r+0x8>)
 8009f12:	f000 b8af 	b.w	800a074 <_fwalk_reent>
 8009f16:	bf00      	nop
 8009f18:	08009e51 	.word	0x08009e51

08009f1c <__sfmoreglue>:
 8009f1c:	b570      	push	{r4, r5, r6, lr}
 8009f1e:	2268      	movs	r2, #104	; 0x68
 8009f20:	1e4d      	subs	r5, r1, #1
 8009f22:	4355      	muls	r5, r2
 8009f24:	460e      	mov	r6, r1
 8009f26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f2a:	f000 fd3d 	bl	800a9a8 <_malloc_r>
 8009f2e:	4604      	mov	r4, r0
 8009f30:	b140      	cbz	r0, 8009f44 <__sfmoreglue+0x28>
 8009f32:	2100      	movs	r1, #0
 8009f34:	e9c0 1600 	strd	r1, r6, [r0]
 8009f38:	300c      	adds	r0, #12
 8009f3a:	60a0      	str	r0, [r4, #8]
 8009f3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f40:	f7fe fac6 	bl	80084d0 <memset>
 8009f44:	4620      	mov	r0, r4
 8009f46:	bd70      	pop	{r4, r5, r6, pc}

08009f48 <__sfp_lock_acquire>:
 8009f48:	4801      	ldr	r0, [pc, #4]	; (8009f50 <__sfp_lock_acquire+0x8>)
 8009f4a:	f000 b8b8 	b.w	800a0be <__retarget_lock_acquire_recursive>
 8009f4e:	bf00      	nop
 8009f50:	20000571 	.word	0x20000571

08009f54 <__sfp_lock_release>:
 8009f54:	4801      	ldr	r0, [pc, #4]	; (8009f5c <__sfp_lock_release+0x8>)
 8009f56:	f000 b8b3 	b.w	800a0c0 <__retarget_lock_release_recursive>
 8009f5a:	bf00      	nop
 8009f5c:	20000571 	.word	0x20000571

08009f60 <__sinit_lock_acquire>:
 8009f60:	4801      	ldr	r0, [pc, #4]	; (8009f68 <__sinit_lock_acquire+0x8>)
 8009f62:	f000 b8ac 	b.w	800a0be <__retarget_lock_acquire_recursive>
 8009f66:	bf00      	nop
 8009f68:	20000572 	.word	0x20000572

08009f6c <__sinit_lock_release>:
 8009f6c:	4801      	ldr	r0, [pc, #4]	; (8009f74 <__sinit_lock_release+0x8>)
 8009f6e:	f000 b8a7 	b.w	800a0c0 <__retarget_lock_release_recursive>
 8009f72:	bf00      	nop
 8009f74:	20000572 	.word	0x20000572

08009f78 <__sinit>:
 8009f78:	b510      	push	{r4, lr}
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	f7ff fff0 	bl	8009f60 <__sinit_lock_acquire>
 8009f80:	69a3      	ldr	r3, [r4, #24]
 8009f82:	b11b      	cbz	r3, 8009f8c <__sinit+0x14>
 8009f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f88:	f7ff bff0 	b.w	8009f6c <__sinit_lock_release>
 8009f8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f90:	6523      	str	r3, [r4, #80]	; 0x50
 8009f92:	4b13      	ldr	r3, [pc, #76]	; (8009fe0 <__sinit+0x68>)
 8009f94:	4a13      	ldr	r2, [pc, #76]	; (8009fe4 <__sinit+0x6c>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f9a:	42a3      	cmp	r3, r4
 8009f9c:	bf04      	itt	eq
 8009f9e:	2301      	moveq	r3, #1
 8009fa0:	61a3      	streq	r3, [r4, #24]
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f000 f820 	bl	8009fe8 <__sfp>
 8009fa8:	6060      	str	r0, [r4, #4]
 8009faa:	4620      	mov	r0, r4
 8009fac:	f000 f81c 	bl	8009fe8 <__sfp>
 8009fb0:	60a0      	str	r0, [r4, #8]
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f000 f818 	bl	8009fe8 <__sfp>
 8009fb8:	2200      	movs	r2, #0
 8009fba:	60e0      	str	r0, [r4, #12]
 8009fbc:	2104      	movs	r1, #4
 8009fbe:	6860      	ldr	r0, [r4, #4]
 8009fc0:	f7ff ff82 	bl	8009ec8 <std>
 8009fc4:	68a0      	ldr	r0, [r4, #8]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	2109      	movs	r1, #9
 8009fca:	f7ff ff7d 	bl	8009ec8 <std>
 8009fce:	68e0      	ldr	r0, [r4, #12]
 8009fd0:	2202      	movs	r2, #2
 8009fd2:	2112      	movs	r1, #18
 8009fd4:	f7ff ff78 	bl	8009ec8 <std>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	61a3      	str	r3, [r4, #24]
 8009fdc:	e7d2      	b.n	8009f84 <__sinit+0xc>
 8009fde:	bf00      	nop
 8009fe0:	0800b194 	.word	0x0800b194
 8009fe4:	08009f11 	.word	0x08009f11

08009fe8 <__sfp>:
 8009fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fea:	4607      	mov	r7, r0
 8009fec:	f7ff ffac 	bl	8009f48 <__sfp_lock_acquire>
 8009ff0:	4b1e      	ldr	r3, [pc, #120]	; (800a06c <__sfp+0x84>)
 8009ff2:	681e      	ldr	r6, [r3, #0]
 8009ff4:	69b3      	ldr	r3, [r6, #24]
 8009ff6:	b913      	cbnz	r3, 8009ffe <__sfp+0x16>
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	f7ff ffbd 	bl	8009f78 <__sinit>
 8009ffe:	3648      	adds	r6, #72	; 0x48
 800a000:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a004:	3b01      	subs	r3, #1
 800a006:	d503      	bpl.n	800a010 <__sfp+0x28>
 800a008:	6833      	ldr	r3, [r6, #0]
 800a00a:	b30b      	cbz	r3, 800a050 <__sfp+0x68>
 800a00c:	6836      	ldr	r6, [r6, #0]
 800a00e:	e7f7      	b.n	800a000 <__sfp+0x18>
 800a010:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a014:	b9d5      	cbnz	r5, 800a04c <__sfp+0x64>
 800a016:	4b16      	ldr	r3, [pc, #88]	; (800a070 <__sfp+0x88>)
 800a018:	60e3      	str	r3, [r4, #12]
 800a01a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a01e:	6665      	str	r5, [r4, #100]	; 0x64
 800a020:	f000 f84c 	bl	800a0bc <__retarget_lock_init_recursive>
 800a024:	f7ff ff96 	bl	8009f54 <__sfp_lock_release>
 800a028:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a02c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a030:	6025      	str	r5, [r4, #0]
 800a032:	61a5      	str	r5, [r4, #24]
 800a034:	2208      	movs	r2, #8
 800a036:	4629      	mov	r1, r5
 800a038:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a03c:	f7fe fa48 	bl	80084d0 <memset>
 800a040:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a044:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a048:	4620      	mov	r0, r4
 800a04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a04c:	3468      	adds	r4, #104	; 0x68
 800a04e:	e7d9      	b.n	800a004 <__sfp+0x1c>
 800a050:	2104      	movs	r1, #4
 800a052:	4638      	mov	r0, r7
 800a054:	f7ff ff62 	bl	8009f1c <__sfmoreglue>
 800a058:	4604      	mov	r4, r0
 800a05a:	6030      	str	r0, [r6, #0]
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d1d5      	bne.n	800a00c <__sfp+0x24>
 800a060:	f7ff ff78 	bl	8009f54 <__sfp_lock_release>
 800a064:	230c      	movs	r3, #12
 800a066:	603b      	str	r3, [r7, #0]
 800a068:	e7ee      	b.n	800a048 <__sfp+0x60>
 800a06a:	bf00      	nop
 800a06c:	0800b194 	.word	0x0800b194
 800a070:	ffff0001 	.word	0xffff0001

0800a074 <_fwalk_reent>:
 800a074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a078:	4606      	mov	r6, r0
 800a07a:	4688      	mov	r8, r1
 800a07c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a080:	2700      	movs	r7, #0
 800a082:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a086:	f1b9 0901 	subs.w	r9, r9, #1
 800a08a:	d505      	bpl.n	800a098 <_fwalk_reent+0x24>
 800a08c:	6824      	ldr	r4, [r4, #0]
 800a08e:	2c00      	cmp	r4, #0
 800a090:	d1f7      	bne.n	800a082 <_fwalk_reent+0xe>
 800a092:	4638      	mov	r0, r7
 800a094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a098:	89ab      	ldrh	r3, [r5, #12]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d907      	bls.n	800a0ae <_fwalk_reent+0x3a>
 800a09e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	d003      	beq.n	800a0ae <_fwalk_reent+0x3a>
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	47c0      	blx	r8
 800a0ac:	4307      	orrs	r7, r0
 800a0ae:	3568      	adds	r5, #104	; 0x68
 800a0b0:	e7e9      	b.n	800a086 <_fwalk_reent+0x12>
	...

0800a0b4 <_localeconv_r>:
 800a0b4:	4800      	ldr	r0, [pc, #0]	; (800a0b8 <_localeconv_r+0x4>)
 800a0b6:	4770      	bx	lr
 800a0b8:	20000224 	.word	0x20000224

0800a0bc <__retarget_lock_init_recursive>:
 800a0bc:	4770      	bx	lr

0800a0be <__retarget_lock_acquire_recursive>:
 800a0be:	4770      	bx	lr

0800a0c0 <__retarget_lock_release_recursive>:
 800a0c0:	4770      	bx	lr

0800a0c2 <__swhatbuf_r>:
 800a0c2:	b570      	push	{r4, r5, r6, lr}
 800a0c4:	460e      	mov	r6, r1
 800a0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0ca:	2900      	cmp	r1, #0
 800a0cc:	b096      	sub	sp, #88	; 0x58
 800a0ce:	4614      	mov	r4, r2
 800a0d0:	461d      	mov	r5, r3
 800a0d2:	da08      	bge.n	800a0e6 <__swhatbuf_r+0x24>
 800a0d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	602a      	str	r2, [r5, #0]
 800a0dc:	061a      	lsls	r2, r3, #24
 800a0de:	d410      	bmi.n	800a102 <__swhatbuf_r+0x40>
 800a0e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0e4:	e00e      	b.n	800a104 <__swhatbuf_r+0x42>
 800a0e6:	466a      	mov	r2, sp
 800a0e8:	f000 fed2 	bl	800ae90 <_fstat_r>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	dbf1      	blt.n	800a0d4 <__swhatbuf_r+0x12>
 800a0f0:	9a01      	ldr	r2, [sp, #4]
 800a0f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a0f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a0fa:	425a      	negs	r2, r3
 800a0fc:	415a      	adcs	r2, r3
 800a0fe:	602a      	str	r2, [r5, #0]
 800a100:	e7ee      	b.n	800a0e0 <__swhatbuf_r+0x1e>
 800a102:	2340      	movs	r3, #64	; 0x40
 800a104:	2000      	movs	r0, #0
 800a106:	6023      	str	r3, [r4, #0]
 800a108:	b016      	add	sp, #88	; 0x58
 800a10a:	bd70      	pop	{r4, r5, r6, pc}

0800a10c <__smakebuf_r>:
 800a10c:	898b      	ldrh	r3, [r1, #12]
 800a10e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a110:	079d      	lsls	r5, r3, #30
 800a112:	4606      	mov	r6, r0
 800a114:	460c      	mov	r4, r1
 800a116:	d507      	bpl.n	800a128 <__smakebuf_r+0x1c>
 800a118:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a11c:	6023      	str	r3, [r4, #0]
 800a11e:	6123      	str	r3, [r4, #16]
 800a120:	2301      	movs	r3, #1
 800a122:	6163      	str	r3, [r4, #20]
 800a124:	b002      	add	sp, #8
 800a126:	bd70      	pop	{r4, r5, r6, pc}
 800a128:	ab01      	add	r3, sp, #4
 800a12a:	466a      	mov	r2, sp
 800a12c:	f7ff ffc9 	bl	800a0c2 <__swhatbuf_r>
 800a130:	9900      	ldr	r1, [sp, #0]
 800a132:	4605      	mov	r5, r0
 800a134:	4630      	mov	r0, r6
 800a136:	f000 fc37 	bl	800a9a8 <_malloc_r>
 800a13a:	b948      	cbnz	r0, 800a150 <__smakebuf_r+0x44>
 800a13c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a140:	059a      	lsls	r2, r3, #22
 800a142:	d4ef      	bmi.n	800a124 <__smakebuf_r+0x18>
 800a144:	f023 0303 	bic.w	r3, r3, #3
 800a148:	f043 0302 	orr.w	r3, r3, #2
 800a14c:	81a3      	strh	r3, [r4, #12]
 800a14e:	e7e3      	b.n	800a118 <__smakebuf_r+0xc>
 800a150:	4b0d      	ldr	r3, [pc, #52]	; (800a188 <__smakebuf_r+0x7c>)
 800a152:	62b3      	str	r3, [r6, #40]	; 0x28
 800a154:	89a3      	ldrh	r3, [r4, #12]
 800a156:	6020      	str	r0, [r4, #0]
 800a158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a15c:	81a3      	strh	r3, [r4, #12]
 800a15e:	9b00      	ldr	r3, [sp, #0]
 800a160:	6163      	str	r3, [r4, #20]
 800a162:	9b01      	ldr	r3, [sp, #4]
 800a164:	6120      	str	r0, [r4, #16]
 800a166:	b15b      	cbz	r3, 800a180 <__smakebuf_r+0x74>
 800a168:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a16c:	4630      	mov	r0, r6
 800a16e:	f000 fea1 	bl	800aeb4 <_isatty_r>
 800a172:	b128      	cbz	r0, 800a180 <__smakebuf_r+0x74>
 800a174:	89a3      	ldrh	r3, [r4, #12]
 800a176:	f023 0303 	bic.w	r3, r3, #3
 800a17a:	f043 0301 	orr.w	r3, r3, #1
 800a17e:	81a3      	strh	r3, [r4, #12]
 800a180:	89a0      	ldrh	r0, [r4, #12]
 800a182:	4305      	orrs	r5, r0
 800a184:	81a5      	strh	r5, [r4, #12]
 800a186:	e7cd      	b.n	800a124 <__smakebuf_r+0x18>
 800a188:	08009f11 	.word	0x08009f11

0800a18c <malloc>:
 800a18c:	4b02      	ldr	r3, [pc, #8]	; (800a198 <malloc+0xc>)
 800a18e:	4601      	mov	r1, r0
 800a190:	6818      	ldr	r0, [r3, #0]
 800a192:	f000 bc09 	b.w	800a9a8 <_malloc_r>
 800a196:	bf00      	nop
 800a198:	200000d0 	.word	0x200000d0

0800a19c <_Balloc>:
 800a19c:	b570      	push	{r4, r5, r6, lr}
 800a19e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1a0:	4604      	mov	r4, r0
 800a1a2:	460d      	mov	r5, r1
 800a1a4:	b976      	cbnz	r6, 800a1c4 <_Balloc+0x28>
 800a1a6:	2010      	movs	r0, #16
 800a1a8:	f7ff fff0 	bl	800a18c <malloc>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	6260      	str	r0, [r4, #36]	; 0x24
 800a1b0:	b920      	cbnz	r0, 800a1bc <_Balloc+0x20>
 800a1b2:	4b18      	ldr	r3, [pc, #96]	; (800a214 <_Balloc+0x78>)
 800a1b4:	4818      	ldr	r0, [pc, #96]	; (800a218 <_Balloc+0x7c>)
 800a1b6:	2166      	movs	r1, #102	; 0x66
 800a1b8:	f000 fe2a 	bl	800ae10 <__assert_func>
 800a1bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1c0:	6006      	str	r6, [r0, #0]
 800a1c2:	60c6      	str	r6, [r0, #12]
 800a1c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1c6:	68f3      	ldr	r3, [r6, #12]
 800a1c8:	b183      	cbz	r3, 800a1ec <_Balloc+0x50>
 800a1ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1d2:	b9b8      	cbnz	r0, 800a204 <_Balloc+0x68>
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	fa01 f605 	lsl.w	r6, r1, r5
 800a1da:	1d72      	adds	r2, r6, #5
 800a1dc:	0092      	lsls	r2, r2, #2
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f000 fb60 	bl	800a8a4 <_calloc_r>
 800a1e4:	b160      	cbz	r0, 800a200 <_Balloc+0x64>
 800a1e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1ea:	e00e      	b.n	800a20a <_Balloc+0x6e>
 800a1ec:	2221      	movs	r2, #33	; 0x21
 800a1ee:	2104      	movs	r1, #4
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f000 fb57 	bl	800a8a4 <_calloc_r>
 800a1f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1f8:	60f0      	str	r0, [r6, #12]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1e4      	bne.n	800a1ca <_Balloc+0x2e>
 800a200:	2000      	movs	r0, #0
 800a202:	bd70      	pop	{r4, r5, r6, pc}
 800a204:	6802      	ldr	r2, [r0, #0]
 800a206:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a20a:	2300      	movs	r3, #0
 800a20c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a210:	e7f7      	b.n	800a202 <_Balloc+0x66>
 800a212:	bf00      	nop
 800a214:	0800b1d9 	.word	0x0800b1d9
 800a218:	0800b2bc 	.word	0x0800b2bc

0800a21c <_Bfree>:
 800a21c:	b570      	push	{r4, r5, r6, lr}
 800a21e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a220:	4605      	mov	r5, r0
 800a222:	460c      	mov	r4, r1
 800a224:	b976      	cbnz	r6, 800a244 <_Bfree+0x28>
 800a226:	2010      	movs	r0, #16
 800a228:	f7ff ffb0 	bl	800a18c <malloc>
 800a22c:	4602      	mov	r2, r0
 800a22e:	6268      	str	r0, [r5, #36]	; 0x24
 800a230:	b920      	cbnz	r0, 800a23c <_Bfree+0x20>
 800a232:	4b09      	ldr	r3, [pc, #36]	; (800a258 <_Bfree+0x3c>)
 800a234:	4809      	ldr	r0, [pc, #36]	; (800a25c <_Bfree+0x40>)
 800a236:	218a      	movs	r1, #138	; 0x8a
 800a238:	f000 fdea 	bl	800ae10 <__assert_func>
 800a23c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a240:	6006      	str	r6, [r0, #0]
 800a242:	60c6      	str	r6, [r0, #12]
 800a244:	b13c      	cbz	r4, 800a256 <_Bfree+0x3a>
 800a246:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a248:	6862      	ldr	r2, [r4, #4]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a250:	6021      	str	r1, [r4, #0]
 800a252:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a256:	bd70      	pop	{r4, r5, r6, pc}
 800a258:	0800b1d9 	.word	0x0800b1d9
 800a25c:	0800b2bc 	.word	0x0800b2bc

0800a260 <__multadd>:
 800a260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a264:	690d      	ldr	r5, [r1, #16]
 800a266:	4607      	mov	r7, r0
 800a268:	460c      	mov	r4, r1
 800a26a:	461e      	mov	r6, r3
 800a26c:	f101 0c14 	add.w	ip, r1, #20
 800a270:	2000      	movs	r0, #0
 800a272:	f8dc 3000 	ldr.w	r3, [ip]
 800a276:	b299      	uxth	r1, r3
 800a278:	fb02 6101 	mla	r1, r2, r1, r6
 800a27c:	0c1e      	lsrs	r6, r3, #16
 800a27e:	0c0b      	lsrs	r3, r1, #16
 800a280:	fb02 3306 	mla	r3, r2, r6, r3
 800a284:	b289      	uxth	r1, r1
 800a286:	3001      	adds	r0, #1
 800a288:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a28c:	4285      	cmp	r5, r0
 800a28e:	f84c 1b04 	str.w	r1, [ip], #4
 800a292:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a296:	dcec      	bgt.n	800a272 <__multadd+0x12>
 800a298:	b30e      	cbz	r6, 800a2de <__multadd+0x7e>
 800a29a:	68a3      	ldr	r3, [r4, #8]
 800a29c:	42ab      	cmp	r3, r5
 800a29e:	dc19      	bgt.n	800a2d4 <__multadd+0x74>
 800a2a0:	6861      	ldr	r1, [r4, #4]
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	3101      	adds	r1, #1
 800a2a6:	f7ff ff79 	bl	800a19c <_Balloc>
 800a2aa:	4680      	mov	r8, r0
 800a2ac:	b928      	cbnz	r0, 800a2ba <__multadd+0x5a>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	4b0c      	ldr	r3, [pc, #48]	; (800a2e4 <__multadd+0x84>)
 800a2b2:	480d      	ldr	r0, [pc, #52]	; (800a2e8 <__multadd+0x88>)
 800a2b4:	21b5      	movs	r1, #181	; 0xb5
 800a2b6:	f000 fdab 	bl	800ae10 <__assert_func>
 800a2ba:	6922      	ldr	r2, [r4, #16]
 800a2bc:	3202      	adds	r2, #2
 800a2be:	f104 010c 	add.w	r1, r4, #12
 800a2c2:	0092      	lsls	r2, r2, #2
 800a2c4:	300c      	adds	r0, #12
 800a2c6:	f7fe f8f5 	bl	80084b4 <memcpy>
 800a2ca:	4621      	mov	r1, r4
 800a2cc:	4638      	mov	r0, r7
 800a2ce:	f7ff ffa5 	bl	800a21c <_Bfree>
 800a2d2:	4644      	mov	r4, r8
 800a2d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2d8:	3501      	adds	r5, #1
 800a2da:	615e      	str	r6, [r3, #20]
 800a2dc:	6125      	str	r5, [r4, #16]
 800a2de:	4620      	mov	r0, r4
 800a2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e4:	0800b24b 	.word	0x0800b24b
 800a2e8:	0800b2bc 	.word	0x0800b2bc

0800a2ec <__hi0bits>:
 800a2ec:	0c03      	lsrs	r3, r0, #16
 800a2ee:	041b      	lsls	r3, r3, #16
 800a2f0:	b9d3      	cbnz	r3, 800a328 <__hi0bits+0x3c>
 800a2f2:	0400      	lsls	r0, r0, #16
 800a2f4:	2310      	movs	r3, #16
 800a2f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a2fa:	bf04      	itt	eq
 800a2fc:	0200      	lsleq	r0, r0, #8
 800a2fe:	3308      	addeq	r3, #8
 800a300:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a304:	bf04      	itt	eq
 800a306:	0100      	lsleq	r0, r0, #4
 800a308:	3304      	addeq	r3, #4
 800a30a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a30e:	bf04      	itt	eq
 800a310:	0080      	lsleq	r0, r0, #2
 800a312:	3302      	addeq	r3, #2
 800a314:	2800      	cmp	r0, #0
 800a316:	db05      	blt.n	800a324 <__hi0bits+0x38>
 800a318:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a31c:	f103 0301 	add.w	r3, r3, #1
 800a320:	bf08      	it	eq
 800a322:	2320      	moveq	r3, #32
 800a324:	4618      	mov	r0, r3
 800a326:	4770      	bx	lr
 800a328:	2300      	movs	r3, #0
 800a32a:	e7e4      	b.n	800a2f6 <__hi0bits+0xa>

0800a32c <__lo0bits>:
 800a32c:	6803      	ldr	r3, [r0, #0]
 800a32e:	f013 0207 	ands.w	r2, r3, #7
 800a332:	4601      	mov	r1, r0
 800a334:	d00b      	beq.n	800a34e <__lo0bits+0x22>
 800a336:	07da      	lsls	r2, r3, #31
 800a338:	d423      	bmi.n	800a382 <__lo0bits+0x56>
 800a33a:	0798      	lsls	r0, r3, #30
 800a33c:	bf49      	itett	mi
 800a33e:	085b      	lsrmi	r3, r3, #1
 800a340:	089b      	lsrpl	r3, r3, #2
 800a342:	2001      	movmi	r0, #1
 800a344:	600b      	strmi	r3, [r1, #0]
 800a346:	bf5c      	itt	pl
 800a348:	600b      	strpl	r3, [r1, #0]
 800a34a:	2002      	movpl	r0, #2
 800a34c:	4770      	bx	lr
 800a34e:	b298      	uxth	r0, r3
 800a350:	b9a8      	cbnz	r0, 800a37e <__lo0bits+0x52>
 800a352:	0c1b      	lsrs	r3, r3, #16
 800a354:	2010      	movs	r0, #16
 800a356:	b2da      	uxtb	r2, r3
 800a358:	b90a      	cbnz	r2, 800a35e <__lo0bits+0x32>
 800a35a:	3008      	adds	r0, #8
 800a35c:	0a1b      	lsrs	r3, r3, #8
 800a35e:	071a      	lsls	r2, r3, #28
 800a360:	bf04      	itt	eq
 800a362:	091b      	lsreq	r3, r3, #4
 800a364:	3004      	addeq	r0, #4
 800a366:	079a      	lsls	r2, r3, #30
 800a368:	bf04      	itt	eq
 800a36a:	089b      	lsreq	r3, r3, #2
 800a36c:	3002      	addeq	r0, #2
 800a36e:	07da      	lsls	r2, r3, #31
 800a370:	d403      	bmi.n	800a37a <__lo0bits+0x4e>
 800a372:	085b      	lsrs	r3, r3, #1
 800a374:	f100 0001 	add.w	r0, r0, #1
 800a378:	d005      	beq.n	800a386 <__lo0bits+0x5a>
 800a37a:	600b      	str	r3, [r1, #0]
 800a37c:	4770      	bx	lr
 800a37e:	4610      	mov	r0, r2
 800a380:	e7e9      	b.n	800a356 <__lo0bits+0x2a>
 800a382:	2000      	movs	r0, #0
 800a384:	4770      	bx	lr
 800a386:	2020      	movs	r0, #32
 800a388:	4770      	bx	lr
	...

0800a38c <__i2b>:
 800a38c:	b510      	push	{r4, lr}
 800a38e:	460c      	mov	r4, r1
 800a390:	2101      	movs	r1, #1
 800a392:	f7ff ff03 	bl	800a19c <_Balloc>
 800a396:	4602      	mov	r2, r0
 800a398:	b928      	cbnz	r0, 800a3a6 <__i2b+0x1a>
 800a39a:	4b05      	ldr	r3, [pc, #20]	; (800a3b0 <__i2b+0x24>)
 800a39c:	4805      	ldr	r0, [pc, #20]	; (800a3b4 <__i2b+0x28>)
 800a39e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a3a2:	f000 fd35 	bl	800ae10 <__assert_func>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	6144      	str	r4, [r0, #20]
 800a3aa:	6103      	str	r3, [r0, #16]
 800a3ac:	bd10      	pop	{r4, pc}
 800a3ae:	bf00      	nop
 800a3b0:	0800b24b 	.word	0x0800b24b
 800a3b4:	0800b2bc 	.word	0x0800b2bc

0800a3b8 <__multiply>:
 800a3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3bc:	4691      	mov	r9, r2
 800a3be:	690a      	ldr	r2, [r1, #16]
 800a3c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	bfb8      	it	lt
 800a3c8:	460b      	movlt	r3, r1
 800a3ca:	460c      	mov	r4, r1
 800a3cc:	bfbc      	itt	lt
 800a3ce:	464c      	movlt	r4, r9
 800a3d0:	4699      	movlt	r9, r3
 800a3d2:	6927      	ldr	r7, [r4, #16]
 800a3d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3d8:	68a3      	ldr	r3, [r4, #8]
 800a3da:	6861      	ldr	r1, [r4, #4]
 800a3dc:	eb07 060a 	add.w	r6, r7, sl
 800a3e0:	42b3      	cmp	r3, r6
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	bfb8      	it	lt
 800a3e6:	3101      	addlt	r1, #1
 800a3e8:	f7ff fed8 	bl	800a19c <_Balloc>
 800a3ec:	b930      	cbnz	r0, 800a3fc <__multiply+0x44>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	4b44      	ldr	r3, [pc, #272]	; (800a504 <__multiply+0x14c>)
 800a3f2:	4845      	ldr	r0, [pc, #276]	; (800a508 <__multiply+0x150>)
 800a3f4:	f240 115d 	movw	r1, #349	; 0x15d
 800a3f8:	f000 fd0a 	bl	800ae10 <__assert_func>
 800a3fc:	f100 0514 	add.w	r5, r0, #20
 800a400:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a404:	462b      	mov	r3, r5
 800a406:	2200      	movs	r2, #0
 800a408:	4543      	cmp	r3, r8
 800a40a:	d321      	bcc.n	800a450 <__multiply+0x98>
 800a40c:	f104 0314 	add.w	r3, r4, #20
 800a410:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a414:	f109 0314 	add.w	r3, r9, #20
 800a418:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a41c:	9202      	str	r2, [sp, #8]
 800a41e:	1b3a      	subs	r2, r7, r4
 800a420:	3a15      	subs	r2, #21
 800a422:	f022 0203 	bic.w	r2, r2, #3
 800a426:	3204      	adds	r2, #4
 800a428:	f104 0115 	add.w	r1, r4, #21
 800a42c:	428f      	cmp	r7, r1
 800a42e:	bf38      	it	cc
 800a430:	2204      	movcc	r2, #4
 800a432:	9201      	str	r2, [sp, #4]
 800a434:	9a02      	ldr	r2, [sp, #8]
 800a436:	9303      	str	r3, [sp, #12]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d80c      	bhi.n	800a456 <__multiply+0x9e>
 800a43c:	2e00      	cmp	r6, #0
 800a43e:	dd03      	ble.n	800a448 <__multiply+0x90>
 800a440:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a444:	2b00      	cmp	r3, #0
 800a446:	d05a      	beq.n	800a4fe <__multiply+0x146>
 800a448:	6106      	str	r6, [r0, #16]
 800a44a:	b005      	add	sp, #20
 800a44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a450:	f843 2b04 	str.w	r2, [r3], #4
 800a454:	e7d8      	b.n	800a408 <__multiply+0x50>
 800a456:	f8b3 a000 	ldrh.w	sl, [r3]
 800a45a:	f1ba 0f00 	cmp.w	sl, #0
 800a45e:	d024      	beq.n	800a4aa <__multiply+0xf2>
 800a460:	f104 0e14 	add.w	lr, r4, #20
 800a464:	46a9      	mov	r9, r5
 800a466:	f04f 0c00 	mov.w	ip, #0
 800a46a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a46e:	f8d9 1000 	ldr.w	r1, [r9]
 800a472:	fa1f fb82 	uxth.w	fp, r2
 800a476:	b289      	uxth	r1, r1
 800a478:	fb0a 110b 	mla	r1, sl, fp, r1
 800a47c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a480:	f8d9 2000 	ldr.w	r2, [r9]
 800a484:	4461      	add	r1, ip
 800a486:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a48a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a48e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a492:	b289      	uxth	r1, r1
 800a494:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a498:	4577      	cmp	r7, lr
 800a49a:	f849 1b04 	str.w	r1, [r9], #4
 800a49e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4a2:	d8e2      	bhi.n	800a46a <__multiply+0xb2>
 800a4a4:	9a01      	ldr	r2, [sp, #4]
 800a4a6:	f845 c002 	str.w	ip, [r5, r2]
 800a4aa:	9a03      	ldr	r2, [sp, #12]
 800a4ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	f1b9 0f00 	cmp.w	r9, #0
 800a4b6:	d020      	beq.n	800a4fa <__multiply+0x142>
 800a4b8:	6829      	ldr	r1, [r5, #0]
 800a4ba:	f104 0c14 	add.w	ip, r4, #20
 800a4be:	46ae      	mov	lr, r5
 800a4c0:	f04f 0a00 	mov.w	sl, #0
 800a4c4:	f8bc b000 	ldrh.w	fp, [ip]
 800a4c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a4cc:	fb09 220b 	mla	r2, r9, fp, r2
 800a4d0:	4492      	add	sl, r2
 800a4d2:	b289      	uxth	r1, r1
 800a4d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a4d8:	f84e 1b04 	str.w	r1, [lr], #4
 800a4dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a4e0:	f8be 1000 	ldrh.w	r1, [lr]
 800a4e4:	0c12      	lsrs	r2, r2, #16
 800a4e6:	fb09 1102 	mla	r1, r9, r2, r1
 800a4ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a4ee:	4567      	cmp	r7, ip
 800a4f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a4f4:	d8e6      	bhi.n	800a4c4 <__multiply+0x10c>
 800a4f6:	9a01      	ldr	r2, [sp, #4]
 800a4f8:	50a9      	str	r1, [r5, r2]
 800a4fa:	3504      	adds	r5, #4
 800a4fc:	e79a      	b.n	800a434 <__multiply+0x7c>
 800a4fe:	3e01      	subs	r6, #1
 800a500:	e79c      	b.n	800a43c <__multiply+0x84>
 800a502:	bf00      	nop
 800a504:	0800b24b 	.word	0x0800b24b
 800a508:	0800b2bc 	.word	0x0800b2bc

0800a50c <__pow5mult>:
 800a50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a510:	4615      	mov	r5, r2
 800a512:	f012 0203 	ands.w	r2, r2, #3
 800a516:	4606      	mov	r6, r0
 800a518:	460f      	mov	r7, r1
 800a51a:	d007      	beq.n	800a52c <__pow5mult+0x20>
 800a51c:	4c25      	ldr	r4, [pc, #148]	; (800a5b4 <__pow5mult+0xa8>)
 800a51e:	3a01      	subs	r2, #1
 800a520:	2300      	movs	r3, #0
 800a522:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a526:	f7ff fe9b 	bl	800a260 <__multadd>
 800a52a:	4607      	mov	r7, r0
 800a52c:	10ad      	asrs	r5, r5, #2
 800a52e:	d03d      	beq.n	800a5ac <__pow5mult+0xa0>
 800a530:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a532:	b97c      	cbnz	r4, 800a554 <__pow5mult+0x48>
 800a534:	2010      	movs	r0, #16
 800a536:	f7ff fe29 	bl	800a18c <malloc>
 800a53a:	4602      	mov	r2, r0
 800a53c:	6270      	str	r0, [r6, #36]	; 0x24
 800a53e:	b928      	cbnz	r0, 800a54c <__pow5mult+0x40>
 800a540:	4b1d      	ldr	r3, [pc, #116]	; (800a5b8 <__pow5mult+0xac>)
 800a542:	481e      	ldr	r0, [pc, #120]	; (800a5bc <__pow5mult+0xb0>)
 800a544:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a548:	f000 fc62 	bl	800ae10 <__assert_func>
 800a54c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a550:	6004      	str	r4, [r0, #0]
 800a552:	60c4      	str	r4, [r0, #12]
 800a554:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a558:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a55c:	b94c      	cbnz	r4, 800a572 <__pow5mult+0x66>
 800a55e:	f240 2171 	movw	r1, #625	; 0x271
 800a562:	4630      	mov	r0, r6
 800a564:	f7ff ff12 	bl	800a38c <__i2b>
 800a568:	2300      	movs	r3, #0
 800a56a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a56e:	4604      	mov	r4, r0
 800a570:	6003      	str	r3, [r0, #0]
 800a572:	f04f 0900 	mov.w	r9, #0
 800a576:	07eb      	lsls	r3, r5, #31
 800a578:	d50a      	bpl.n	800a590 <__pow5mult+0x84>
 800a57a:	4639      	mov	r1, r7
 800a57c:	4622      	mov	r2, r4
 800a57e:	4630      	mov	r0, r6
 800a580:	f7ff ff1a 	bl	800a3b8 <__multiply>
 800a584:	4639      	mov	r1, r7
 800a586:	4680      	mov	r8, r0
 800a588:	4630      	mov	r0, r6
 800a58a:	f7ff fe47 	bl	800a21c <_Bfree>
 800a58e:	4647      	mov	r7, r8
 800a590:	106d      	asrs	r5, r5, #1
 800a592:	d00b      	beq.n	800a5ac <__pow5mult+0xa0>
 800a594:	6820      	ldr	r0, [r4, #0]
 800a596:	b938      	cbnz	r0, 800a5a8 <__pow5mult+0x9c>
 800a598:	4622      	mov	r2, r4
 800a59a:	4621      	mov	r1, r4
 800a59c:	4630      	mov	r0, r6
 800a59e:	f7ff ff0b 	bl	800a3b8 <__multiply>
 800a5a2:	6020      	str	r0, [r4, #0]
 800a5a4:	f8c0 9000 	str.w	r9, [r0]
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	e7e4      	b.n	800a576 <__pow5mult+0x6a>
 800a5ac:	4638      	mov	r0, r7
 800a5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5b2:	bf00      	nop
 800a5b4:	0800b408 	.word	0x0800b408
 800a5b8:	0800b1d9 	.word	0x0800b1d9
 800a5bc:	0800b2bc 	.word	0x0800b2bc

0800a5c0 <__lshift>:
 800a5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c4:	460c      	mov	r4, r1
 800a5c6:	6849      	ldr	r1, [r1, #4]
 800a5c8:	6923      	ldr	r3, [r4, #16]
 800a5ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5ce:	68a3      	ldr	r3, [r4, #8]
 800a5d0:	4607      	mov	r7, r0
 800a5d2:	4691      	mov	r9, r2
 800a5d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5d8:	f108 0601 	add.w	r6, r8, #1
 800a5dc:	42b3      	cmp	r3, r6
 800a5de:	db0b      	blt.n	800a5f8 <__lshift+0x38>
 800a5e0:	4638      	mov	r0, r7
 800a5e2:	f7ff fddb 	bl	800a19c <_Balloc>
 800a5e6:	4605      	mov	r5, r0
 800a5e8:	b948      	cbnz	r0, 800a5fe <__lshift+0x3e>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	4b2a      	ldr	r3, [pc, #168]	; (800a698 <__lshift+0xd8>)
 800a5ee:	482b      	ldr	r0, [pc, #172]	; (800a69c <__lshift+0xdc>)
 800a5f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a5f4:	f000 fc0c 	bl	800ae10 <__assert_func>
 800a5f8:	3101      	adds	r1, #1
 800a5fa:	005b      	lsls	r3, r3, #1
 800a5fc:	e7ee      	b.n	800a5dc <__lshift+0x1c>
 800a5fe:	2300      	movs	r3, #0
 800a600:	f100 0114 	add.w	r1, r0, #20
 800a604:	f100 0210 	add.w	r2, r0, #16
 800a608:	4618      	mov	r0, r3
 800a60a:	4553      	cmp	r3, sl
 800a60c:	db37      	blt.n	800a67e <__lshift+0xbe>
 800a60e:	6920      	ldr	r0, [r4, #16]
 800a610:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a614:	f104 0314 	add.w	r3, r4, #20
 800a618:	f019 091f 	ands.w	r9, r9, #31
 800a61c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a620:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a624:	d02f      	beq.n	800a686 <__lshift+0xc6>
 800a626:	f1c9 0e20 	rsb	lr, r9, #32
 800a62a:	468a      	mov	sl, r1
 800a62c:	f04f 0c00 	mov.w	ip, #0
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	fa02 f209 	lsl.w	r2, r2, r9
 800a636:	ea42 020c 	orr.w	r2, r2, ip
 800a63a:	f84a 2b04 	str.w	r2, [sl], #4
 800a63e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a642:	4298      	cmp	r0, r3
 800a644:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a648:	d8f2      	bhi.n	800a630 <__lshift+0x70>
 800a64a:	1b03      	subs	r3, r0, r4
 800a64c:	3b15      	subs	r3, #21
 800a64e:	f023 0303 	bic.w	r3, r3, #3
 800a652:	3304      	adds	r3, #4
 800a654:	f104 0215 	add.w	r2, r4, #21
 800a658:	4290      	cmp	r0, r2
 800a65a:	bf38      	it	cc
 800a65c:	2304      	movcc	r3, #4
 800a65e:	f841 c003 	str.w	ip, [r1, r3]
 800a662:	f1bc 0f00 	cmp.w	ip, #0
 800a666:	d001      	beq.n	800a66c <__lshift+0xac>
 800a668:	f108 0602 	add.w	r6, r8, #2
 800a66c:	3e01      	subs	r6, #1
 800a66e:	4638      	mov	r0, r7
 800a670:	612e      	str	r6, [r5, #16]
 800a672:	4621      	mov	r1, r4
 800a674:	f7ff fdd2 	bl	800a21c <_Bfree>
 800a678:	4628      	mov	r0, r5
 800a67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a67e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a682:	3301      	adds	r3, #1
 800a684:	e7c1      	b.n	800a60a <__lshift+0x4a>
 800a686:	3904      	subs	r1, #4
 800a688:	f853 2b04 	ldr.w	r2, [r3], #4
 800a68c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a690:	4298      	cmp	r0, r3
 800a692:	d8f9      	bhi.n	800a688 <__lshift+0xc8>
 800a694:	e7ea      	b.n	800a66c <__lshift+0xac>
 800a696:	bf00      	nop
 800a698:	0800b24b 	.word	0x0800b24b
 800a69c:	0800b2bc 	.word	0x0800b2bc

0800a6a0 <__mcmp>:
 800a6a0:	b530      	push	{r4, r5, lr}
 800a6a2:	6902      	ldr	r2, [r0, #16]
 800a6a4:	690c      	ldr	r4, [r1, #16]
 800a6a6:	1b12      	subs	r2, r2, r4
 800a6a8:	d10e      	bne.n	800a6c8 <__mcmp+0x28>
 800a6aa:	f100 0314 	add.w	r3, r0, #20
 800a6ae:	3114      	adds	r1, #20
 800a6b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a6b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a6b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a6bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a6c0:	42a5      	cmp	r5, r4
 800a6c2:	d003      	beq.n	800a6cc <__mcmp+0x2c>
 800a6c4:	d305      	bcc.n	800a6d2 <__mcmp+0x32>
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	bd30      	pop	{r4, r5, pc}
 800a6cc:	4283      	cmp	r3, r0
 800a6ce:	d3f3      	bcc.n	800a6b8 <__mcmp+0x18>
 800a6d0:	e7fa      	b.n	800a6c8 <__mcmp+0x28>
 800a6d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6d6:	e7f7      	b.n	800a6c8 <__mcmp+0x28>

0800a6d8 <__mdiff>:
 800a6d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6dc:	460c      	mov	r4, r1
 800a6de:	4606      	mov	r6, r0
 800a6e0:	4611      	mov	r1, r2
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	4690      	mov	r8, r2
 800a6e6:	f7ff ffdb 	bl	800a6a0 <__mcmp>
 800a6ea:	1e05      	subs	r5, r0, #0
 800a6ec:	d110      	bne.n	800a710 <__mdiff+0x38>
 800a6ee:	4629      	mov	r1, r5
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	f7ff fd53 	bl	800a19c <_Balloc>
 800a6f6:	b930      	cbnz	r0, 800a706 <__mdiff+0x2e>
 800a6f8:	4b3a      	ldr	r3, [pc, #232]	; (800a7e4 <__mdiff+0x10c>)
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	f240 2132 	movw	r1, #562	; 0x232
 800a700:	4839      	ldr	r0, [pc, #228]	; (800a7e8 <__mdiff+0x110>)
 800a702:	f000 fb85 	bl	800ae10 <__assert_func>
 800a706:	2301      	movs	r3, #1
 800a708:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a70c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a710:	bfa4      	itt	ge
 800a712:	4643      	movge	r3, r8
 800a714:	46a0      	movge	r8, r4
 800a716:	4630      	mov	r0, r6
 800a718:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a71c:	bfa6      	itte	ge
 800a71e:	461c      	movge	r4, r3
 800a720:	2500      	movge	r5, #0
 800a722:	2501      	movlt	r5, #1
 800a724:	f7ff fd3a 	bl	800a19c <_Balloc>
 800a728:	b920      	cbnz	r0, 800a734 <__mdiff+0x5c>
 800a72a:	4b2e      	ldr	r3, [pc, #184]	; (800a7e4 <__mdiff+0x10c>)
 800a72c:	4602      	mov	r2, r0
 800a72e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a732:	e7e5      	b.n	800a700 <__mdiff+0x28>
 800a734:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a738:	6926      	ldr	r6, [r4, #16]
 800a73a:	60c5      	str	r5, [r0, #12]
 800a73c:	f104 0914 	add.w	r9, r4, #20
 800a740:	f108 0514 	add.w	r5, r8, #20
 800a744:	f100 0e14 	add.w	lr, r0, #20
 800a748:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a74c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a750:	f108 0210 	add.w	r2, r8, #16
 800a754:	46f2      	mov	sl, lr
 800a756:	2100      	movs	r1, #0
 800a758:	f859 3b04 	ldr.w	r3, [r9], #4
 800a75c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a760:	fa1f f883 	uxth.w	r8, r3
 800a764:	fa11 f18b 	uxtah	r1, r1, fp
 800a768:	0c1b      	lsrs	r3, r3, #16
 800a76a:	eba1 0808 	sub.w	r8, r1, r8
 800a76e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a772:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a776:	fa1f f888 	uxth.w	r8, r8
 800a77a:	1419      	asrs	r1, r3, #16
 800a77c:	454e      	cmp	r6, r9
 800a77e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a782:	f84a 3b04 	str.w	r3, [sl], #4
 800a786:	d8e7      	bhi.n	800a758 <__mdiff+0x80>
 800a788:	1b33      	subs	r3, r6, r4
 800a78a:	3b15      	subs	r3, #21
 800a78c:	f023 0303 	bic.w	r3, r3, #3
 800a790:	3304      	adds	r3, #4
 800a792:	3415      	adds	r4, #21
 800a794:	42a6      	cmp	r6, r4
 800a796:	bf38      	it	cc
 800a798:	2304      	movcc	r3, #4
 800a79a:	441d      	add	r5, r3
 800a79c:	4473      	add	r3, lr
 800a79e:	469e      	mov	lr, r3
 800a7a0:	462e      	mov	r6, r5
 800a7a2:	4566      	cmp	r6, ip
 800a7a4:	d30e      	bcc.n	800a7c4 <__mdiff+0xec>
 800a7a6:	f10c 0203 	add.w	r2, ip, #3
 800a7aa:	1b52      	subs	r2, r2, r5
 800a7ac:	f022 0203 	bic.w	r2, r2, #3
 800a7b0:	3d03      	subs	r5, #3
 800a7b2:	45ac      	cmp	ip, r5
 800a7b4:	bf38      	it	cc
 800a7b6:	2200      	movcc	r2, #0
 800a7b8:	441a      	add	r2, r3
 800a7ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a7be:	b17b      	cbz	r3, 800a7e0 <__mdiff+0x108>
 800a7c0:	6107      	str	r7, [r0, #16]
 800a7c2:	e7a3      	b.n	800a70c <__mdiff+0x34>
 800a7c4:	f856 8b04 	ldr.w	r8, [r6], #4
 800a7c8:	fa11 f288 	uxtah	r2, r1, r8
 800a7cc:	1414      	asrs	r4, r2, #16
 800a7ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a7d2:	b292      	uxth	r2, r2
 800a7d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a7d8:	f84e 2b04 	str.w	r2, [lr], #4
 800a7dc:	1421      	asrs	r1, r4, #16
 800a7de:	e7e0      	b.n	800a7a2 <__mdiff+0xca>
 800a7e0:	3f01      	subs	r7, #1
 800a7e2:	e7ea      	b.n	800a7ba <__mdiff+0xe2>
 800a7e4:	0800b24b 	.word	0x0800b24b
 800a7e8:	0800b2bc 	.word	0x0800b2bc

0800a7ec <__d2b>:
 800a7ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7f0:	4689      	mov	r9, r1
 800a7f2:	2101      	movs	r1, #1
 800a7f4:	ec57 6b10 	vmov	r6, r7, d0
 800a7f8:	4690      	mov	r8, r2
 800a7fa:	f7ff fccf 	bl	800a19c <_Balloc>
 800a7fe:	4604      	mov	r4, r0
 800a800:	b930      	cbnz	r0, 800a810 <__d2b+0x24>
 800a802:	4602      	mov	r2, r0
 800a804:	4b25      	ldr	r3, [pc, #148]	; (800a89c <__d2b+0xb0>)
 800a806:	4826      	ldr	r0, [pc, #152]	; (800a8a0 <__d2b+0xb4>)
 800a808:	f240 310a 	movw	r1, #778	; 0x30a
 800a80c:	f000 fb00 	bl	800ae10 <__assert_func>
 800a810:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a814:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a818:	bb35      	cbnz	r5, 800a868 <__d2b+0x7c>
 800a81a:	2e00      	cmp	r6, #0
 800a81c:	9301      	str	r3, [sp, #4]
 800a81e:	d028      	beq.n	800a872 <__d2b+0x86>
 800a820:	4668      	mov	r0, sp
 800a822:	9600      	str	r6, [sp, #0]
 800a824:	f7ff fd82 	bl	800a32c <__lo0bits>
 800a828:	9900      	ldr	r1, [sp, #0]
 800a82a:	b300      	cbz	r0, 800a86e <__d2b+0x82>
 800a82c:	9a01      	ldr	r2, [sp, #4]
 800a82e:	f1c0 0320 	rsb	r3, r0, #32
 800a832:	fa02 f303 	lsl.w	r3, r2, r3
 800a836:	430b      	orrs	r3, r1
 800a838:	40c2      	lsrs	r2, r0
 800a83a:	6163      	str	r3, [r4, #20]
 800a83c:	9201      	str	r2, [sp, #4]
 800a83e:	9b01      	ldr	r3, [sp, #4]
 800a840:	61a3      	str	r3, [r4, #24]
 800a842:	2b00      	cmp	r3, #0
 800a844:	bf14      	ite	ne
 800a846:	2202      	movne	r2, #2
 800a848:	2201      	moveq	r2, #1
 800a84a:	6122      	str	r2, [r4, #16]
 800a84c:	b1d5      	cbz	r5, 800a884 <__d2b+0x98>
 800a84e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a852:	4405      	add	r5, r0
 800a854:	f8c9 5000 	str.w	r5, [r9]
 800a858:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a85c:	f8c8 0000 	str.w	r0, [r8]
 800a860:	4620      	mov	r0, r4
 800a862:	b003      	add	sp, #12
 800a864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a868:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a86c:	e7d5      	b.n	800a81a <__d2b+0x2e>
 800a86e:	6161      	str	r1, [r4, #20]
 800a870:	e7e5      	b.n	800a83e <__d2b+0x52>
 800a872:	a801      	add	r0, sp, #4
 800a874:	f7ff fd5a 	bl	800a32c <__lo0bits>
 800a878:	9b01      	ldr	r3, [sp, #4]
 800a87a:	6163      	str	r3, [r4, #20]
 800a87c:	2201      	movs	r2, #1
 800a87e:	6122      	str	r2, [r4, #16]
 800a880:	3020      	adds	r0, #32
 800a882:	e7e3      	b.n	800a84c <__d2b+0x60>
 800a884:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a888:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a88c:	f8c9 0000 	str.w	r0, [r9]
 800a890:	6918      	ldr	r0, [r3, #16]
 800a892:	f7ff fd2b 	bl	800a2ec <__hi0bits>
 800a896:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a89a:	e7df      	b.n	800a85c <__d2b+0x70>
 800a89c:	0800b24b 	.word	0x0800b24b
 800a8a0:	0800b2bc 	.word	0x0800b2bc

0800a8a4 <_calloc_r>:
 800a8a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8a6:	fba1 2402 	umull	r2, r4, r1, r2
 800a8aa:	b94c      	cbnz	r4, 800a8c0 <_calloc_r+0x1c>
 800a8ac:	4611      	mov	r1, r2
 800a8ae:	9201      	str	r2, [sp, #4]
 800a8b0:	f000 f87a 	bl	800a9a8 <_malloc_r>
 800a8b4:	9a01      	ldr	r2, [sp, #4]
 800a8b6:	4605      	mov	r5, r0
 800a8b8:	b930      	cbnz	r0, 800a8c8 <_calloc_r+0x24>
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	b003      	add	sp, #12
 800a8be:	bd30      	pop	{r4, r5, pc}
 800a8c0:	220c      	movs	r2, #12
 800a8c2:	6002      	str	r2, [r0, #0]
 800a8c4:	2500      	movs	r5, #0
 800a8c6:	e7f8      	b.n	800a8ba <_calloc_r+0x16>
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	f7fd fe01 	bl	80084d0 <memset>
 800a8ce:	e7f4      	b.n	800a8ba <_calloc_r+0x16>

0800a8d0 <_free_r>:
 800a8d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8d2:	2900      	cmp	r1, #0
 800a8d4:	d044      	beq.n	800a960 <_free_r+0x90>
 800a8d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8da:	9001      	str	r0, [sp, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f1a1 0404 	sub.w	r4, r1, #4
 800a8e2:	bfb8      	it	lt
 800a8e4:	18e4      	addlt	r4, r4, r3
 800a8e6:	f000 fb19 	bl	800af1c <__malloc_lock>
 800a8ea:	4a1e      	ldr	r2, [pc, #120]	; (800a964 <_free_r+0x94>)
 800a8ec:	9801      	ldr	r0, [sp, #4]
 800a8ee:	6813      	ldr	r3, [r2, #0]
 800a8f0:	b933      	cbnz	r3, 800a900 <_free_r+0x30>
 800a8f2:	6063      	str	r3, [r4, #4]
 800a8f4:	6014      	str	r4, [r2, #0]
 800a8f6:	b003      	add	sp, #12
 800a8f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8fc:	f000 bb14 	b.w	800af28 <__malloc_unlock>
 800a900:	42a3      	cmp	r3, r4
 800a902:	d908      	bls.n	800a916 <_free_r+0x46>
 800a904:	6825      	ldr	r5, [r4, #0]
 800a906:	1961      	adds	r1, r4, r5
 800a908:	428b      	cmp	r3, r1
 800a90a:	bf01      	itttt	eq
 800a90c:	6819      	ldreq	r1, [r3, #0]
 800a90e:	685b      	ldreq	r3, [r3, #4]
 800a910:	1949      	addeq	r1, r1, r5
 800a912:	6021      	streq	r1, [r4, #0]
 800a914:	e7ed      	b.n	800a8f2 <_free_r+0x22>
 800a916:	461a      	mov	r2, r3
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	b10b      	cbz	r3, 800a920 <_free_r+0x50>
 800a91c:	42a3      	cmp	r3, r4
 800a91e:	d9fa      	bls.n	800a916 <_free_r+0x46>
 800a920:	6811      	ldr	r1, [r2, #0]
 800a922:	1855      	adds	r5, r2, r1
 800a924:	42a5      	cmp	r5, r4
 800a926:	d10b      	bne.n	800a940 <_free_r+0x70>
 800a928:	6824      	ldr	r4, [r4, #0]
 800a92a:	4421      	add	r1, r4
 800a92c:	1854      	adds	r4, r2, r1
 800a92e:	42a3      	cmp	r3, r4
 800a930:	6011      	str	r1, [r2, #0]
 800a932:	d1e0      	bne.n	800a8f6 <_free_r+0x26>
 800a934:	681c      	ldr	r4, [r3, #0]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	6053      	str	r3, [r2, #4]
 800a93a:	4421      	add	r1, r4
 800a93c:	6011      	str	r1, [r2, #0]
 800a93e:	e7da      	b.n	800a8f6 <_free_r+0x26>
 800a940:	d902      	bls.n	800a948 <_free_r+0x78>
 800a942:	230c      	movs	r3, #12
 800a944:	6003      	str	r3, [r0, #0]
 800a946:	e7d6      	b.n	800a8f6 <_free_r+0x26>
 800a948:	6825      	ldr	r5, [r4, #0]
 800a94a:	1961      	adds	r1, r4, r5
 800a94c:	428b      	cmp	r3, r1
 800a94e:	bf04      	itt	eq
 800a950:	6819      	ldreq	r1, [r3, #0]
 800a952:	685b      	ldreq	r3, [r3, #4]
 800a954:	6063      	str	r3, [r4, #4]
 800a956:	bf04      	itt	eq
 800a958:	1949      	addeq	r1, r1, r5
 800a95a:	6021      	streq	r1, [r4, #0]
 800a95c:	6054      	str	r4, [r2, #4]
 800a95e:	e7ca      	b.n	800a8f6 <_free_r+0x26>
 800a960:	b003      	add	sp, #12
 800a962:	bd30      	pop	{r4, r5, pc}
 800a964:	20000574 	.word	0x20000574

0800a968 <sbrk_aligned>:
 800a968:	b570      	push	{r4, r5, r6, lr}
 800a96a:	4e0e      	ldr	r6, [pc, #56]	; (800a9a4 <sbrk_aligned+0x3c>)
 800a96c:	460c      	mov	r4, r1
 800a96e:	6831      	ldr	r1, [r6, #0]
 800a970:	4605      	mov	r5, r0
 800a972:	b911      	cbnz	r1, 800a97a <sbrk_aligned+0x12>
 800a974:	f000 f9e6 	bl	800ad44 <_sbrk_r>
 800a978:	6030      	str	r0, [r6, #0]
 800a97a:	4621      	mov	r1, r4
 800a97c:	4628      	mov	r0, r5
 800a97e:	f000 f9e1 	bl	800ad44 <_sbrk_r>
 800a982:	1c43      	adds	r3, r0, #1
 800a984:	d00a      	beq.n	800a99c <sbrk_aligned+0x34>
 800a986:	1cc4      	adds	r4, r0, #3
 800a988:	f024 0403 	bic.w	r4, r4, #3
 800a98c:	42a0      	cmp	r0, r4
 800a98e:	d007      	beq.n	800a9a0 <sbrk_aligned+0x38>
 800a990:	1a21      	subs	r1, r4, r0
 800a992:	4628      	mov	r0, r5
 800a994:	f000 f9d6 	bl	800ad44 <_sbrk_r>
 800a998:	3001      	adds	r0, #1
 800a99a:	d101      	bne.n	800a9a0 <sbrk_aligned+0x38>
 800a99c:	f04f 34ff 	mov.w	r4, #4294967295
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	bd70      	pop	{r4, r5, r6, pc}
 800a9a4:	20000578 	.word	0x20000578

0800a9a8 <_malloc_r>:
 800a9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ac:	1ccd      	adds	r5, r1, #3
 800a9ae:	f025 0503 	bic.w	r5, r5, #3
 800a9b2:	3508      	adds	r5, #8
 800a9b4:	2d0c      	cmp	r5, #12
 800a9b6:	bf38      	it	cc
 800a9b8:	250c      	movcc	r5, #12
 800a9ba:	2d00      	cmp	r5, #0
 800a9bc:	4607      	mov	r7, r0
 800a9be:	db01      	blt.n	800a9c4 <_malloc_r+0x1c>
 800a9c0:	42a9      	cmp	r1, r5
 800a9c2:	d905      	bls.n	800a9d0 <_malloc_r+0x28>
 800a9c4:	230c      	movs	r3, #12
 800a9c6:	603b      	str	r3, [r7, #0]
 800a9c8:	2600      	movs	r6, #0
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d0:	4e2e      	ldr	r6, [pc, #184]	; (800aa8c <_malloc_r+0xe4>)
 800a9d2:	f000 faa3 	bl	800af1c <__malloc_lock>
 800a9d6:	6833      	ldr	r3, [r6, #0]
 800a9d8:	461c      	mov	r4, r3
 800a9da:	bb34      	cbnz	r4, 800aa2a <_malloc_r+0x82>
 800a9dc:	4629      	mov	r1, r5
 800a9de:	4638      	mov	r0, r7
 800a9e0:	f7ff ffc2 	bl	800a968 <sbrk_aligned>
 800a9e4:	1c43      	adds	r3, r0, #1
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	d14d      	bne.n	800aa86 <_malloc_r+0xde>
 800a9ea:	6834      	ldr	r4, [r6, #0]
 800a9ec:	4626      	mov	r6, r4
 800a9ee:	2e00      	cmp	r6, #0
 800a9f0:	d140      	bne.n	800aa74 <_malloc_r+0xcc>
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	4631      	mov	r1, r6
 800a9f6:	4638      	mov	r0, r7
 800a9f8:	eb04 0803 	add.w	r8, r4, r3
 800a9fc:	f000 f9a2 	bl	800ad44 <_sbrk_r>
 800aa00:	4580      	cmp	r8, r0
 800aa02:	d13a      	bne.n	800aa7a <_malloc_r+0xd2>
 800aa04:	6821      	ldr	r1, [r4, #0]
 800aa06:	3503      	adds	r5, #3
 800aa08:	1a6d      	subs	r5, r5, r1
 800aa0a:	f025 0503 	bic.w	r5, r5, #3
 800aa0e:	3508      	adds	r5, #8
 800aa10:	2d0c      	cmp	r5, #12
 800aa12:	bf38      	it	cc
 800aa14:	250c      	movcc	r5, #12
 800aa16:	4629      	mov	r1, r5
 800aa18:	4638      	mov	r0, r7
 800aa1a:	f7ff ffa5 	bl	800a968 <sbrk_aligned>
 800aa1e:	3001      	adds	r0, #1
 800aa20:	d02b      	beq.n	800aa7a <_malloc_r+0xd2>
 800aa22:	6823      	ldr	r3, [r4, #0]
 800aa24:	442b      	add	r3, r5
 800aa26:	6023      	str	r3, [r4, #0]
 800aa28:	e00e      	b.n	800aa48 <_malloc_r+0xa0>
 800aa2a:	6822      	ldr	r2, [r4, #0]
 800aa2c:	1b52      	subs	r2, r2, r5
 800aa2e:	d41e      	bmi.n	800aa6e <_malloc_r+0xc6>
 800aa30:	2a0b      	cmp	r2, #11
 800aa32:	d916      	bls.n	800aa62 <_malloc_r+0xba>
 800aa34:	1961      	adds	r1, r4, r5
 800aa36:	42a3      	cmp	r3, r4
 800aa38:	6025      	str	r5, [r4, #0]
 800aa3a:	bf18      	it	ne
 800aa3c:	6059      	strne	r1, [r3, #4]
 800aa3e:	6863      	ldr	r3, [r4, #4]
 800aa40:	bf08      	it	eq
 800aa42:	6031      	streq	r1, [r6, #0]
 800aa44:	5162      	str	r2, [r4, r5]
 800aa46:	604b      	str	r3, [r1, #4]
 800aa48:	4638      	mov	r0, r7
 800aa4a:	f104 060b 	add.w	r6, r4, #11
 800aa4e:	f000 fa6b 	bl	800af28 <__malloc_unlock>
 800aa52:	f026 0607 	bic.w	r6, r6, #7
 800aa56:	1d23      	adds	r3, r4, #4
 800aa58:	1af2      	subs	r2, r6, r3
 800aa5a:	d0b6      	beq.n	800a9ca <_malloc_r+0x22>
 800aa5c:	1b9b      	subs	r3, r3, r6
 800aa5e:	50a3      	str	r3, [r4, r2]
 800aa60:	e7b3      	b.n	800a9ca <_malloc_r+0x22>
 800aa62:	6862      	ldr	r2, [r4, #4]
 800aa64:	42a3      	cmp	r3, r4
 800aa66:	bf0c      	ite	eq
 800aa68:	6032      	streq	r2, [r6, #0]
 800aa6a:	605a      	strne	r2, [r3, #4]
 800aa6c:	e7ec      	b.n	800aa48 <_malloc_r+0xa0>
 800aa6e:	4623      	mov	r3, r4
 800aa70:	6864      	ldr	r4, [r4, #4]
 800aa72:	e7b2      	b.n	800a9da <_malloc_r+0x32>
 800aa74:	4634      	mov	r4, r6
 800aa76:	6876      	ldr	r6, [r6, #4]
 800aa78:	e7b9      	b.n	800a9ee <_malloc_r+0x46>
 800aa7a:	230c      	movs	r3, #12
 800aa7c:	603b      	str	r3, [r7, #0]
 800aa7e:	4638      	mov	r0, r7
 800aa80:	f000 fa52 	bl	800af28 <__malloc_unlock>
 800aa84:	e7a1      	b.n	800a9ca <_malloc_r+0x22>
 800aa86:	6025      	str	r5, [r4, #0]
 800aa88:	e7de      	b.n	800aa48 <_malloc_r+0xa0>
 800aa8a:	bf00      	nop
 800aa8c:	20000574 	.word	0x20000574

0800aa90 <__sfputc_r>:
 800aa90:	6893      	ldr	r3, [r2, #8]
 800aa92:	3b01      	subs	r3, #1
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	b410      	push	{r4}
 800aa98:	6093      	str	r3, [r2, #8]
 800aa9a:	da08      	bge.n	800aaae <__sfputc_r+0x1e>
 800aa9c:	6994      	ldr	r4, [r2, #24]
 800aa9e:	42a3      	cmp	r3, r4
 800aaa0:	db01      	blt.n	800aaa6 <__sfputc_r+0x16>
 800aaa2:	290a      	cmp	r1, #10
 800aaa4:	d103      	bne.n	800aaae <__sfputc_r+0x1e>
 800aaa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaaa:	f7fe ba11 	b.w	8008ed0 <__swbuf_r>
 800aaae:	6813      	ldr	r3, [r2, #0]
 800aab0:	1c58      	adds	r0, r3, #1
 800aab2:	6010      	str	r0, [r2, #0]
 800aab4:	7019      	strb	r1, [r3, #0]
 800aab6:	4608      	mov	r0, r1
 800aab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aabc:	4770      	bx	lr

0800aabe <__sfputs_r>:
 800aabe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac0:	4606      	mov	r6, r0
 800aac2:	460f      	mov	r7, r1
 800aac4:	4614      	mov	r4, r2
 800aac6:	18d5      	adds	r5, r2, r3
 800aac8:	42ac      	cmp	r4, r5
 800aaca:	d101      	bne.n	800aad0 <__sfputs_r+0x12>
 800aacc:	2000      	movs	r0, #0
 800aace:	e007      	b.n	800aae0 <__sfputs_r+0x22>
 800aad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aad4:	463a      	mov	r2, r7
 800aad6:	4630      	mov	r0, r6
 800aad8:	f7ff ffda 	bl	800aa90 <__sfputc_r>
 800aadc:	1c43      	adds	r3, r0, #1
 800aade:	d1f3      	bne.n	800aac8 <__sfputs_r+0xa>
 800aae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aae4 <_vfiprintf_r>:
 800aae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae8:	460d      	mov	r5, r1
 800aaea:	b09d      	sub	sp, #116	; 0x74
 800aaec:	4614      	mov	r4, r2
 800aaee:	4698      	mov	r8, r3
 800aaf0:	4606      	mov	r6, r0
 800aaf2:	b118      	cbz	r0, 800aafc <_vfiprintf_r+0x18>
 800aaf4:	6983      	ldr	r3, [r0, #24]
 800aaf6:	b90b      	cbnz	r3, 800aafc <_vfiprintf_r+0x18>
 800aaf8:	f7ff fa3e 	bl	8009f78 <__sinit>
 800aafc:	4b89      	ldr	r3, [pc, #548]	; (800ad24 <_vfiprintf_r+0x240>)
 800aafe:	429d      	cmp	r5, r3
 800ab00:	d11b      	bne.n	800ab3a <_vfiprintf_r+0x56>
 800ab02:	6875      	ldr	r5, [r6, #4]
 800ab04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab06:	07d9      	lsls	r1, r3, #31
 800ab08:	d405      	bmi.n	800ab16 <_vfiprintf_r+0x32>
 800ab0a:	89ab      	ldrh	r3, [r5, #12]
 800ab0c:	059a      	lsls	r2, r3, #22
 800ab0e:	d402      	bmi.n	800ab16 <_vfiprintf_r+0x32>
 800ab10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab12:	f7ff fad4 	bl	800a0be <__retarget_lock_acquire_recursive>
 800ab16:	89ab      	ldrh	r3, [r5, #12]
 800ab18:	071b      	lsls	r3, r3, #28
 800ab1a:	d501      	bpl.n	800ab20 <_vfiprintf_r+0x3c>
 800ab1c:	692b      	ldr	r3, [r5, #16]
 800ab1e:	b9eb      	cbnz	r3, 800ab5c <_vfiprintf_r+0x78>
 800ab20:	4629      	mov	r1, r5
 800ab22:	4630      	mov	r0, r6
 800ab24:	f7fe fa26 	bl	8008f74 <__swsetup_r>
 800ab28:	b1c0      	cbz	r0, 800ab5c <_vfiprintf_r+0x78>
 800ab2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab2c:	07dc      	lsls	r4, r3, #31
 800ab2e:	d50e      	bpl.n	800ab4e <_vfiprintf_r+0x6a>
 800ab30:	f04f 30ff 	mov.w	r0, #4294967295
 800ab34:	b01d      	add	sp, #116	; 0x74
 800ab36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3a:	4b7b      	ldr	r3, [pc, #492]	; (800ad28 <_vfiprintf_r+0x244>)
 800ab3c:	429d      	cmp	r5, r3
 800ab3e:	d101      	bne.n	800ab44 <_vfiprintf_r+0x60>
 800ab40:	68b5      	ldr	r5, [r6, #8]
 800ab42:	e7df      	b.n	800ab04 <_vfiprintf_r+0x20>
 800ab44:	4b79      	ldr	r3, [pc, #484]	; (800ad2c <_vfiprintf_r+0x248>)
 800ab46:	429d      	cmp	r5, r3
 800ab48:	bf08      	it	eq
 800ab4a:	68f5      	ldreq	r5, [r6, #12]
 800ab4c:	e7da      	b.n	800ab04 <_vfiprintf_r+0x20>
 800ab4e:	89ab      	ldrh	r3, [r5, #12]
 800ab50:	0598      	lsls	r0, r3, #22
 800ab52:	d4ed      	bmi.n	800ab30 <_vfiprintf_r+0x4c>
 800ab54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab56:	f7ff fab3 	bl	800a0c0 <__retarget_lock_release_recursive>
 800ab5a:	e7e9      	b.n	800ab30 <_vfiprintf_r+0x4c>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab60:	2320      	movs	r3, #32
 800ab62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab66:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab6a:	2330      	movs	r3, #48	; 0x30
 800ab6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ad30 <_vfiprintf_r+0x24c>
 800ab70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab74:	f04f 0901 	mov.w	r9, #1
 800ab78:	4623      	mov	r3, r4
 800ab7a:	469a      	mov	sl, r3
 800ab7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab80:	b10a      	cbz	r2, 800ab86 <_vfiprintf_r+0xa2>
 800ab82:	2a25      	cmp	r2, #37	; 0x25
 800ab84:	d1f9      	bne.n	800ab7a <_vfiprintf_r+0x96>
 800ab86:	ebba 0b04 	subs.w	fp, sl, r4
 800ab8a:	d00b      	beq.n	800aba4 <_vfiprintf_r+0xc0>
 800ab8c:	465b      	mov	r3, fp
 800ab8e:	4622      	mov	r2, r4
 800ab90:	4629      	mov	r1, r5
 800ab92:	4630      	mov	r0, r6
 800ab94:	f7ff ff93 	bl	800aabe <__sfputs_r>
 800ab98:	3001      	adds	r0, #1
 800ab9a:	f000 80aa 	beq.w	800acf2 <_vfiprintf_r+0x20e>
 800ab9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aba0:	445a      	add	r2, fp
 800aba2:	9209      	str	r2, [sp, #36]	; 0x24
 800aba4:	f89a 3000 	ldrb.w	r3, [sl]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	f000 80a2 	beq.w	800acf2 <_vfiprintf_r+0x20e>
 800abae:	2300      	movs	r3, #0
 800abb0:	f04f 32ff 	mov.w	r2, #4294967295
 800abb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abb8:	f10a 0a01 	add.w	sl, sl, #1
 800abbc:	9304      	str	r3, [sp, #16]
 800abbe:	9307      	str	r3, [sp, #28]
 800abc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abc4:	931a      	str	r3, [sp, #104]	; 0x68
 800abc6:	4654      	mov	r4, sl
 800abc8:	2205      	movs	r2, #5
 800abca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abce:	4858      	ldr	r0, [pc, #352]	; (800ad30 <_vfiprintf_r+0x24c>)
 800abd0:	f7f5 fb1e 	bl	8000210 <memchr>
 800abd4:	9a04      	ldr	r2, [sp, #16]
 800abd6:	b9d8      	cbnz	r0, 800ac10 <_vfiprintf_r+0x12c>
 800abd8:	06d1      	lsls	r1, r2, #27
 800abda:	bf44      	itt	mi
 800abdc:	2320      	movmi	r3, #32
 800abde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abe2:	0713      	lsls	r3, r2, #28
 800abe4:	bf44      	itt	mi
 800abe6:	232b      	movmi	r3, #43	; 0x2b
 800abe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abec:	f89a 3000 	ldrb.w	r3, [sl]
 800abf0:	2b2a      	cmp	r3, #42	; 0x2a
 800abf2:	d015      	beq.n	800ac20 <_vfiprintf_r+0x13c>
 800abf4:	9a07      	ldr	r2, [sp, #28]
 800abf6:	4654      	mov	r4, sl
 800abf8:	2000      	movs	r0, #0
 800abfa:	f04f 0c0a 	mov.w	ip, #10
 800abfe:	4621      	mov	r1, r4
 800ac00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac04:	3b30      	subs	r3, #48	; 0x30
 800ac06:	2b09      	cmp	r3, #9
 800ac08:	d94e      	bls.n	800aca8 <_vfiprintf_r+0x1c4>
 800ac0a:	b1b0      	cbz	r0, 800ac3a <_vfiprintf_r+0x156>
 800ac0c:	9207      	str	r2, [sp, #28]
 800ac0e:	e014      	b.n	800ac3a <_vfiprintf_r+0x156>
 800ac10:	eba0 0308 	sub.w	r3, r0, r8
 800ac14:	fa09 f303 	lsl.w	r3, r9, r3
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	9304      	str	r3, [sp, #16]
 800ac1c:	46a2      	mov	sl, r4
 800ac1e:	e7d2      	b.n	800abc6 <_vfiprintf_r+0xe2>
 800ac20:	9b03      	ldr	r3, [sp, #12]
 800ac22:	1d19      	adds	r1, r3, #4
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	9103      	str	r1, [sp, #12]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	bfbb      	ittet	lt
 800ac2c:	425b      	neglt	r3, r3
 800ac2e:	f042 0202 	orrlt.w	r2, r2, #2
 800ac32:	9307      	strge	r3, [sp, #28]
 800ac34:	9307      	strlt	r3, [sp, #28]
 800ac36:	bfb8      	it	lt
 800ac38:	9204      	strlt	r2, [sp, #16]
 800ac3a:	7823      	ldrb	r3, [r4, #0]
 800ac3c:	2b2e      	cmp	r3, #46	; 0x2e
 800ac3e:	d10c      	bne.n	800ac5a <_vfiprintf_r+0x176>
 800ac40:	7863      	ldrb	r3, [r4, #1]
 800ac42:	2b2a      	cmp	r3, #42	; 0x2a
 800ac44:	d135      	bne.n	800acb2 <_vfiprintf_r+0x1ce>
 800ac46:	9b03      	ldr	r3, [sp, #12]
 800ac48:	1d1a      	adds	r2, r3, #4
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	9203      	str	r2, [sp, #12]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	bfb8      	it	lt
 800ac52:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac56:	3402      	adds	r4, #2
 800ac58:	9305      	str	r3, [sp, #20]
 800ac5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad40 <_vfiprintf_r+0x25c>
 800ac5e:	7821      	ldrb	r1, [r4, #0]
 800ac60:	2203      	movs	r2, #3
 800ac62:	4650      	mov	r0, sl
 800ac64:	f7f5 fad4 	bl	8000210 <memchr>
 800ac68:	b140      	cbz	r0, 800ac7c <_vfiprintf_r+0x198>
 800ac6a:	2340      	movs	r3, #64	; 0x40
 800ac6c:	eba0 000a 	sub.w	r0, r0, sl
 800ac70:	fa03 f000 	lsl.w	r0, r3, r0
 800ac74:	9b04      	ldr	r3, [sp, #16]
 800ac76:	4303      	orrs	r3, r0
 800ac78:	3401      	adds	r4, #1
 800ac7a:	9304      	str	r3, [sp, #16]
 800ac7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac80:	482c      	ldr	r0, [pc, #176]	; (800ad34 <_vfiprintf_r+0x250>)
 800ac82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac86:	2206      	movs	r2, #6
 800ac88:	f7f5 fac2 	bl	8000210 <memchr>
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	d03f      	beq.n	800ad10 <_vfiprintf_r+0x22c>
 800ac90:	4b29      	ldr	r3, [pc, #164]	; (800ad38 <_vfiprintf_r+0x254>)
 800ac92:	bb1b      	cbnz	r3, 800acdc <_vfiprintf_r+0x1f8>
 800ac94:	9b03      	ldr	r3, [sp, #12]
 800ac96:	3307      	adds	r3, #7
 800ac98:	f023 0307 	bic.w	r3, r3, #7
 800ac9c:	3308      	adds	r3, #8
 800ac9e:	9303      	str	r3, [sp, #12]
 800aca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca2:	443b      	add	r3, r7
 800aca4:	9309      	str	r3, [sp, #36]	; 0x24
 800aca6:	e767      	b.n	800ab78 <_vfiprintf_r+0x94>
 800aca8:	fb0c 3202 	mla	r2, ip, r2, r3
 800acac:	460c      	mov	r4, r1
 800acae:	2001      	movs	r0, #1
 800acb0:	e7a5      	b.n	800abfe <_vfiprintf_r+0x11a>
 800acb2:	2300      	movs	r3, #0
 800acb4:	3401      	adds	r4, #1
 800acb6:	9305      	str	r3, [sp, #20]
 800acb8:	4619      	mov	r1, r3
 800acba:	f04f 0c0a 	mov.w	ip, #10
 800acbe:	4620      	mov	r0, r4
 800acc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acc4:	3a30      	subs	r2, #48	; 0x30
 800acc6:	2a09      	cmp	r2, #9
 800acc8:	d903      	bls.n	800acd2 <_vfiprintf_r+0x1ee>
 800acca:	2b00      	cmp	r3, #0
 800accc:	d0c5      	beq.n	800ac5a <_vfiprintf_r+0x176>
 800acce:	9105      	str	r1, [sp, #20]
 800acd0:	e7c3      	b.n	800ac5a <_vfiprintf_r+0x176>
 800acd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800acd6:	4604      	mov	r4, r0
 800acd8:	2301      	movs	r3, #1
 800acda:	e7f0      	b.n	800acbe <_vfiprintf_r+0x1da>
 800acdc:	ab03      	add	r3, sp, #12
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	462a      	mov	r2, r5
 800ace2:	4b16      	ldr	r3, [pc, #88]	; (800ad3c <_vfiprintf_r+0x258>)
 800ace4:	a904      	add	r1, sp, #16
 800ace6:	4630      	mov	r0, r6
 800ace8:	f7fd fc9a 	bl	8008620 <_printf_float>
 800acec:	4607      	mov	r7, r0
 800acee:	1c78      	adds	r0, r7, #1
 800acf0:	d1d6      	bne.n	800aca0 <_vfiprintf_r+0x1bc>
 800acf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acf4:	07d9      	lsls	r1, r3, #31
 800acf6:	d405      	bmi.n	800ad04 <_vfiprintf_r+0x220>
 800acf8:	89ab      	ldrh	r3, [r5, #12]
 800acfa:	059a      	lsls	r2, r3, #22
 800acfc:	d402      	bmi.n	800ad04 <_vfiprintf_r+0x220>
 800acfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad00:	f7ff f9de 	bl	800a0c0 <__retarget_lock_release_recursive>
 800ad04:	89ab      	ldrh	r3, [r5, #12]
 800ad06:	065b      	lsls	r3, r3, #25
 800ad08:	f53f af12 	bmi.w	800ab30 <_vfiprintf_r+0x4c>
 800ad0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad0e:	e711      	b.n	800ab34 <_vfiprintf_r+0x50>
 800ad10:	ab03      	add	r3, sp, #12
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	462a      	mov	r2, r5
 800ad16:	4b09      	ldr	r3, [pc, #36]	; (800ad3c <_vfiprintf_r+0x258>)
 800ad18:	a904      	add	r1, sp, #16
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f7fd ff24 	bl	8008b68 <_printf_i>
 800ad20:	e7e4      	b.n	800acec <_vfiprintf_r+0x208>
 800ad22:	bf00      	nop
 800ad24:	0800b27c 	.word	0x0800b27c
 800ad28:	0800b29c 	.word	0x0800b29c
 800ad2c:	0800b25c 	.word	0x0800b25c
 800ad30:	0800b414 	.word	0x0800b414
 800ad34:	0800b41e 	.word	0x0800b41e
 800ad38:	08008621 	.word	0x08008621
 800ad3c:	0800aabf 	.word	0x0800aabf
 800ad40:	0800b41a 	.word	0x0800b41a

0800ad44 <_sbrk_r>:
 800ad44:	b538      	push	{r3, r4, r5, lr}
 800ad46:	4d06      	ldr	r5, [pc, #24]	; (800ad60 <_sbrk_r+0x1c>)
 800ad48:	2300      	movs	r3, #0
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	4608      	mov	r0, r1
 800ad4e:	602b      	str	r3, [r5, #0]
 800ad50:	f7fd fb14 	bl	800837c <_sbrk>
 800ad54:	1c43      	adds	r3, r0, #1
 800ad56:	d102      	bne.n	800ad5e <_sbrk_r+0x1a>
 800ad58:	682b      	ldr	r3, [r5, #0]
 800ad5a:	b103      	cbz	r3, 800ad5e <_sbrk_r+0x1a>
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	bd38      	pop	{r3, r4, r5, pc}
 800ad60:	2000057c 	.word	0x2000057c

0800ad64 <__sread>:
 800ad64:	b510      	push	{r4, lr}
 800ad66:	460c      	mov	r4, r1
 800ad68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad6c:	f000 f8e2 	bl	800af34 <_read_r>
 800ad70:	2800      	cmp	r0, #0
 800ad72:	bfab      	itete	ge
 800ad74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad76:	89a3      	ldrhlt	r3, [r4, #12]
 800ad78:	181b      	addge	r3, r3, r0
 800ad7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad7e:	bfac      	ite	ge
 800ad80:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad82:	81a3      	strhlt	r3, [r4, #12]
 800ad84:	bd10      	pop	{r4, pc}

0800ad86 <__swrite>:
 800ad86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad8a:	461f      	mov	r7, r3
 800ad8c:	898b      	ldrh	r3, [r1, #12]
 800ad8e:	05db      	lsls	r3, r3, #23
 800ad90:	4605      	mov	r5, r0
 800ad92:	460c      	mov	r4, r1
 800ad94:	4616      	mov	r6, r2
 800ad96:	d505      	bpl.n	800ada4 <__swrite+0x1e>
 800ad98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad9c:	2302      	movs	r3, #2
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f000 f898 	bl	800aed4 <_lseek_r>
 800ada4:	89a3      	ldrh	r3, [r4, #12]
 800ada6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adae:	81a3      	strh	r3, [r4, #12]
 800adb0:	4632      	mov	r2, r6
 800adb2:	463b      	mov	r3, r7
 800adb4:	4628      	mov	r0, r5
 800adb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adba:	f000 b817 	b.w	800adec <_write_r>

0800adbe <__sseek>:
 800adbe:	b510      	push	{r4, lr}
 800adc0:	460c      	mov	r4, r1
 800adc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adc6:	f000 f885 	bl	800aed4 <_lseek_r>
 800adca:	1c43      	adds	r3, r0, #1
 800adcc:	89a3      	ldrh	r3, [r4, #12]
 800adce:	bf15      	itete	ne
 800add0:	6560      	strne	r0, [r4, #84]	; 0x54
 800add2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800add6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800adda:	81a3      	strheq	r3, [r4, #12]
 800addc:	bf18      	it	ne
 800adde:	81a3      	strhne	r3, [r4, #12]
 800ade0:	bd10      	pop	{r4, pc}

0800ade2 <__sclose>:
 800ade2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ade6:	f000 b831 	b.w	800ae4c <_close_r>
	...

0800adec <_write_r>:
 800adec:	b538      	push	{r3, r4, r5, lr}
 800adee:	4d07      	ldr	r5, [pc, #28]	; (800ae0c <_write_r+0x20>)
 800adf0:	4604      	mov	r4, r0
 800adf2:	4608      	mov	r0, r1
 800adf4:	4611      	mov	r1, r2
 800adf6:	2200      	movs	r2, #0
 800adf8:	602a      	str	r2, [r5, #0]
 800adfa:	461a      	mov	r2, r3
 800adfc:	f7fc fd3e 	bl	800787c <_write>
 800ae00:	1c43      	adds	r3, r0, #1
 800ae02:	d102      	bne.n	800ae0a <_write_r+0x1e>
 800ae04:	682b      	ldr	r3, [r5, #0]
 800ae06:	b103      	cbz	r3, 800ae0a <_write_r+0x1e>
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	bd38      	pop	{r3, r4, r5, pc}
 800ae0c:	2000057c 	.word	0x2000057c

0800ae10 <__assert_func>:
 800ae10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae12:	4614      	mov	r4, r2
 800ae14:	461a      	mov	r2, r3
 800ae16:	4b09      	ldr	r3, [pc, #36]	; (800ae3c <__assert_func+0x2c>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4605      	mov	r5, r0
 800ae1c:	68d8      	ldr	r0, [r3, #12]
 800ae1e:	b14c      	cbz	r4, 800ae34 <__assert_func+0x24>
 800ae20:	4b07      	ldr	r3, [pc, #28]	; (800ae40 <__assert_func+0x30>)
 800ae22:	9100      	str	r1, [sp, #0]
 800ae24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae28:	4906      	ldr	r1, [pc, #24]	; (800ae44 <__assert_func+0x34>)
 800ae2a:	462b      	mov	r3, r5
 800ae2c:	f000 f81e 	bl	800ae6c <fiprintf>
 800ae30:	f000 f89f 	bl	800af72 <abort>
 800ae34:	4b04      	ldr	r3, [pc, #16]	; (800ae48 <__assert_func+0x38>)
 800ae36:	461c      	mov	r4, r3
 800ae38:	e7f3      	b.n	800ae22 <__assert_func+0x12>
 800ae3a:	bf00      	nop
 800ae3c:	200000d0 	.word	0x200000d0
 800ae40:	0800b425 	.word	0x0800b425
 800ae44:	0800b432 	.word	0x0800b432
 800ae48:	0800b460 	.word	0x0800b460

0800ae4c <_close_r>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	4d06      	ldr	r5, [pc, #24]	; (800ae68 <_close_r+0x1c>)
 800ae50:	2300      	movs	r3, #0
 800ae52:	4604      	mov	r4, r0
 800ae54:	4608      	mov	r0, r1
 800ae56:	602b      	str	r3, [r5, #0]
 800ae58:	f7fd fa5b 	bl	8008312 <_close>
 800ae5c:	1c43      	adds	r3, r0, #1
 800ae5e:	d102      	bne.n	800ae66 <_close_r+0x1a>
 800ae60:	682b      	ldr	r3, [r5, #0]
 800ae62:	b103      	cbz	r3, 800ae66 <_close_r+0x1a>
 800ae64:	6023      	str	r3, [r4, #0]
 800ae66:	bd38      	pop	{r3, r4, r5, pc}
 800ae68:	2000057c 	.word	0x2000057c

0800ae6c <fiprintf>:
 800ae6c:	b40e      	push	{r1, r2, r3}
 800ae6e:	b503      	push	{r0, r1, lr}
 800ae70:	4601      	mov	r1, r0
 800ae72:	ab03      	add	r3, sp, #12
 800ae74:	4805      	ldr	r0, [pc, #20]	; (800ae8c <fiprintf+0x20>)
 800ae76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae7a:	6800      	ldr	r0, [r0, #0]
 800ae7c:	9301      	str	r3, [sp, #4]
 800ae7e:	f7ff fe31 	bl	800aae4 <_vfiprintf_r>
 800ae82:	b002      	add	sp, #8
 800ae84:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae88:	b003      	add	sp, #12
 800ae8a:	4770      	bx	lr
 800ae8c:	200000d0 	.word	0x200000d0

0800ae90 <_fstat_r>:
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	4d07      	ldr	r5, [pc, #28]	; (800aeb0 <_fstat_r+0x20>)
 800ae94:	2300      	movs	r3, #0
 800ae96:	4604      	mov	r4, r0
 800ae98:	4608      	mov	r0, r1
 800ae9a:	4611      	mov	r1, r2
 800ae9c:	602b      	str	r3, [r5, #0]
 800ae9e:	f7fd fa44 	bl	800832a <_fstat>
 800aea2:	1c43      	adds	r3, r0, #1
 800aea4:	d102      	bne.n	800aeac <_fstat_r+0x1c>
 800aea6:	682b      	ldr	r3, [r5, #0]
 800aea8:	b103      	cbz	r3, 800aeac <_fstat_r+0x1c>
 800aeaa:	6023      	str	r3, [r4, #0]
 800aeac:	bd38      	pop	{r3, r4, r5, pc}
 800aeae:	bf00      	nop
 800aeb0:	2000057c 	.word	0x2000057c

0800aeb4 <_isatty_r>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	4d06      	ldr	r5, [pc, #24]	; (800aed0 <_isatty_r+0x1c>)
 800aeb8:	2300      	movs	r3, #0
 800aeba:	4604      	mov	r4, r0
 800aebc:	4608      	mov	r0, r1
 800aebe:	602b      	str	r3, [r5, #0]
 800aec0:	f7fd fa43 	bl	800834a <_isatty>
 800aec4:	1c43      	adds	r3, r0, #1
 800aec6:	d102      	bne.n	800aece <_isatty_r+0x1a>
 800aec8:	682b      	ldr	r3, [r5, #0]
 800aeca:	b103      	cbz	r3, 800aece <_isatty_r+0x1a>
 800aecc:	6023      	str	r3, [r4, #0]
 800aece:	bd38      	pop	{r3, r4, r5, pc}
 800aed0:	2000057c 	.word	0x2000057c

0800aed4 <_lseek_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	4d07      	ldr	r5, [pc, #28]	; (800aef4 <_lseek_r+0x20>)
 800aed8:	4604      	mov	r4, r0
 800aeda:	4608      	mov	r0, r1
 800aedc:	4611      	mov	r1, r2
 800aede:	2200      	movs	r2, #0
 800aee0:	602a      	str	r2, [r5, #0]
 800aee2:	461a      	mov	r2, r3
 800aee4:	f7fd fa3c 	bl	8008360 <_lseek>
 800aee8:	1c43      	adds	r3, r0, #1
 800aeea:	d102      	bne.n	800aef2 <_lseek_r+0x1e>
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	b103      	cbz	r3, 800aef2 <_lseek_r+0x1e>
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	bd38      	pop	{r3, r4, r5, pc}
 800aef4:	2000057c 	.word	0x2000057c

0800aef8 <__ascii_mbtowc>:
 800aef8:	b082      	sub	sp, #8
 800aefa:	b901      	cbnz	r1, 800aefe <__ascii_mbtowc+0x6>
 800aefc:	a901      	add	r1, sp, #4
 800aefe:	b142      	cbz	r2, 800af12 <__ascii_mbtowc+0x1a>
 800af00:	b14b      	cbz	r3, 800af16 <__ascii_mbtowc+0x1e>
 800af02:	7813      	ldrb	r3, [r2, #0]
 800af04:	600b      	str	r3, [r1, #0]
 800af06:	7812      	ldrb	r2, [r2, #0]
 800af08:	1e10      	subs	r0, r2, #0
 800af0a:	bf18      	it	ne
 800af0c:	2001      	movne	r0, #1
 800af0e:	b002      	add	sp, #8
 800af10:	4770      	bx	lr
 800af12:	4610      	mov	r0, r2
 800af14:	e7fb      	b.n	800af0e <__ascii_mbtowc+0x16>
 800af16:	f06f 0001 	mvn.w	r0, #1
 800af1a:	e7f8      	b.n	800af0e <__ascii_mbtowc+0x16>

0800af1c <__malloc_lock>:
 800af1c:	4801      	ldr	r0, [pc, #4]	; (800af24 <__malloc_lock+0x8>)
 800af1e:	f7ff b8ce 	b.w	800a0be <__retarget_lock_acquire_recursive>
 800af22:	bf00      	nop
 800af24:	20000570 	.word	0x20000570

0800af28 <__malloc_unlock>:
 800af28:	4801      	ldr	r0, [pc, #4]	; (800af30 <__malloc_unlock+0x8>)
 800af2a:	f7ff b8c9 	b.w	800a0c0 <__retarget_lock_release_recursive>
 800af2e:	bf00      	nop
 800af30:	20000570 	.word	0x20000570

0800af34 <_read_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4d07      	ldr	r5, [pc, #28]	; (800af54 <_read_r+0x20>)
 800af38:	4604      	mov	r4, r0
 800af3a:	4608      	mov	r0, r1
 800af3c:	4611      	mov	r1, r2
 800af3e:	2200      	movs	r2, #0
 800af40:	602a      	str	r2, [r5, #0]
 800af42:	461a      	mov	r2, r3
 800af44:	f7fd f9c8 	bl	80082d8 <_read>
 800af48:	1c43      	adds	r3, r0, #1
 800af4a:	d102      	bne.n	800af52 <_read_r+0x1e>
 800af4c:	682b      	ldr	r3, [r5, #0]
 800af4e:	b103      	cbz	r3, 800af52 <_read_r+0x1e>
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	bd38      	pop	{r3, r4, r5, pc}
 800af54:	2000057c 	.word	0x2000057c

0800af58 <__ascii_wctomb>:
 800af58:	b149      	cbz	r1, 800af6e <__ascii_wctomb+0x16>
 800af5a:	2aff      	cmp	r2, #255	; 0xff
 800af5c:	bf85      	ittet	hi
 800af5e:	238a      	movhi	r3, #138	; 0x8a
 800af60:	6003      	strhi	r3, [r0, #0]
 800af62:	700a      	strbls	r2, [r1, #0]
 800af64:	f04f 30ff 	movhi.w	r0, #4294967295
 800af68:	bf98      	it	ls
 800af6a:	2001      	movls	r0, #1
 800af6c:	4770      	bx	lr
 800af6e:	4608      	mov	r0, r1
 800af70:	4770      	bx	lr

0800af72 <abort>:
 800af72:	b508      	push	{r3, lr}
 800af74:	2006      	movs	r0, #6
 800af76:	f000 f82b 	bl	800afd0 <raise>
 800af7a:	2001      	movs	r0, #1
 800af7c:	f7fd f9a2 	bl	80082c4 <_exit>

0800af80 <_raise_r>:
 800af80:	291f      	cmp	r1, #31
 800af82:	b538      	push	{r3, r4, r5, lr}
 800af84:	4604      	mov	r4, r0
 800af86:	460d      	mov	r5, r1
 800af88:	d904      	bls.n	800af94 <_raise_r+0x14>
 800af8a:	2316      	movs	r3, #22
 800af8c:	6003      	str	r3, [r0, #0]
 800af8e:	f04f 30ff 	mov.w	r0, #4294967295
 800af92:	bd38      	pop	{r3, r4, r5, pc}
 800af94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af96:	b112      	cbz	r2, 800af9e <_raise_r+0x1e>
 800af98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af9c:	b94b      	cbnz	r3, 800afb2 <_raise_r+0x32>
 800af9e:	4620      	mov	r0, r4
 800afa0:	f000 f830 	bl	800b004 <_getpid_r>
 800afa4:	462a      	mov	r2, r5
 800afa6:	4601      	mov	r1, r0
 800afa8:	4620      	mov	r0, r4
 800afaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afae:	f000 b817 	b.w	800afe0 <_kill_r>
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d00a      	beq.n	800afcc <_raise_r+0x4c>
 800afb6:	1c59      	adds	r1, r3, #1
 800afb8:	d103      	bne.n	800afc2 <_raise_r+0x42>
 800afba:	2316      	movs	r3, #22
 800afbc:	6003      	str	r3, [r0, #0]
 800afbe:	2001      	movs	r0, #1
 800afc0:	e7e7      	b.n	800af92 <_raise_r+0x12>
 800afc2:	2400      	movs	r4, #0
 800afc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afc8:	4628      	mov	r0, r5
 800afca:	4798      	blx	r3
 800afcc:	2000      	movs	r0, #0
 800afce:	e7e0      	b.n	800af92 <_raise_r+0x12>

0800afd0 <raise>:
 800afd0:	4b02      	ldr	r3, [pc, #8]	; (800afdc <raise+0xc>)
 800afd2:	4601      	mov	r1, r0
 800afd4:	6818      	ldr	r0, [r3, #0]
 800afd6:	f7ff bfd3 	b.w	800af80 <_raise_r>
 800afda:	bf00      	nop
 800afdc:	200000d0 	.word	0x200000d0

0800afe0 <_kill_r>:
 800afe0:	b538      	push	{r3, r4, r5, lr}
 800afe2:	4d07      	ldr	r5, [pc, #28]	; (800b000 <_kill_r+0x20>)
 800afe4:	2300      	movs	r3, #0
 800afe6:	4604      	mov	r4, r0
 800afe8:	4608      	mov	r0, r1
 800afea:	4611      	mov	r1, r2
 800afec:	602b      	str	r3, [r5, #0]
 800afee:	f7fd f959 	bl	80082a4 <_kill>
 800aff2:	1c43      	adds	r3, r0, #1
 800aff4:	d102      	bne.n	800affc <_kill_r+0x1c>
 800aff6:	682b      	ldr	r3, [r5, #0]
 800aff8:	b103      	cbz	r3, 800affc <_kill_r+0x1c>
 800affa:	6023      	str	r3, [r4, #0]
 800affc:	bd38      	pop	{r3, r4, r5, pc}
 800affe:	bf00      	nop
 800b000:	2000057c 	.word	0x2000057c

0800b004 <_getpid_r>:
 800b004:	f7fd b946 	b.w	8008294 <_getpid>

0800b008 <_init>:
 800b008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00a:	bf00      	nop
 800b00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b00e:	bc08      	pop	{r3}
 800b010:	469e      	mov	lr, r3
 800b012:	4770      	bx	lr

0800b014 <_fini>:
 800b014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b016:	bf00      	nop
 800b018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b01a:	bc08      	pop	{r3}
 800b01c:	469e      	mov	lr, r3
 800b01e:	4770      	bx	lr
