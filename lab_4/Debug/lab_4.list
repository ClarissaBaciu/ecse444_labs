
lab_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad28  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800aee8  0800aee8  0001aee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b43c  0800b43c  000202a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b43c  0800b43c  0001b43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b444  0800b444  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b444  0800b444  0001b444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b448  0800b448  0001b448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  20000000  0800b44c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  200002a0  0800b6ec  000202a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  0800b6ec  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f12d  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f25  00000000  00000000  0003f3fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  00043328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001870  00000000  00000000  00044d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ebb1  00000000  00000000  000465e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002097f  00000000  00000000  00075191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00127469  00000000  00000000  00095b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bcf79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e64  00000000  00000000  001bcfcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200002a0 	.word	0x200002a0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800aed0 	.word	0x0800aed0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200002a4 	.word	0x200002a4
 80001fc:	0800aed0 	.word	0x0800aed0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2120      	movs	r1, #32
 8000eec:	4618      	mov	r0, r3
 8000eee:	f006 fd61 	bl	80079b4 <SENSOR_IO_Read>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	f023 0304 	bic.w	r3, r3, #4
 8000efc:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	f023 0303 	bic.w	r3, r3, #3
 8000f0c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f1c:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	2120      	movs	r1, #32
 8000f26:	4618      	mov	r0, r3
 8000f28:	f006 fd2a 	bl	8007980 <SENSOR_IO_Write>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8000f42:	f006 fd13 	bl	800796c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f006 fd31 	bl	80079b4 <SENSOR_IO_Read>
 8000f52:	4603      	mov	r3, r0
 8000f54:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	b2d8      	uxtb	r0, r3
 8000f6e:	f107 020c 	add.w	r2, r7, #12
 8000f72:	2302      	movs	r3, #2
 8000f74:	21b0      	movs	r1, #176	; 0xb0
 8000f76:	f006 fd3b 	bl	80079f0 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8000f7a:	7b3b      	ldrb	r3, [r7, #12]
 8000f7c:	085b      	lsrs	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8000f82:	7b7b      	ldrb	r3, [r7, #13]
 8000f84:	085b      	lsrs	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	b2d8      	uxtb	r0, r3
 8000f8e:	f107 020c 	add.w	r2, r7, #12
 8000f92:	2302      	movs	r3, #2
 8000f94:	21b6      	movs	r1, #182	; 0xb6
 8000f96:	f006 fd2b 	bl	80079f0 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000f9a:	7b7b      	ldrb	r3, [r7, #13]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	b21a      	sxth	r2, r3
 8000fa0:	7b3b      	ldrb	r3, [r7, #12]
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	b2d8      	uxtb	r0, r3
 8000fac:	f107 020c 	add.w	r2, r7, #12
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	21ba      	movs	r1, #186	; 0xba
 8000fb4:	f006 fd1c 	bl	80079f0 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000fb8:	7b7b      	ldrb	r3, [r7, #13]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	7b3b      	ldrb	r3, [r7, #12]
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	b2d8      	uxtb	r0, r3
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2302      	movs	r3, #2
 8000fd0:	21a8      	movs	r1, #168	; 0xa8
 8000fd2:	f006 fd0d 	bl	80079f0 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000fd6:	7b7b      	ldrb	r3, [r7, #13]
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	7b3b      	ldrb	r3, [r7, #12]
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8000fe4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000fe8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	ee07 3a90 	vmov	s15, r3
 8000ff2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000ffa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	ee07 3a90 	vmov	s15, r3
 8001004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001008:	ee67 6a27 	vmul.f32	s13, s14, s15
 800100c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001010:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001022:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001032:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001036:	edd7 7a04 	vldr	s15, [r7, #16]
 800103a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800103e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001042:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001046:	edd7 7a04 	vldr	s15, [r7, #16]
 800104a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001090 <HTS221_H_ReadHumidity+0x130>
 800104e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001056:	dd01      	ble.n	800105c <HTS221_H_ReadHumidity+0xfc>
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HTS221_H_ReadHumidity+0x134>)
 800105a:	e00a      	b.n	8001072 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 800105c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001060:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	d502      	bpl.n	8001070 <HTS221_H_ReadHumidity+0x110>
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	e000      	b.n	8001072 <HTS221_H_ReadHumidity+0x112>
 8001070:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001072:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001074:	edd7 7a04 	vldr	s15, [r7, #16]
 8001078:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800107c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001080:	eef0 7a66 	vmov.f32	s15, s13
}
 8001084:	eeb0 0a67 	vmov.f32	s0, s15
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	447a0000 	.word	0x447a0000
 8001094:	447a0000 	.word	0x447a0000

08001098 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80010a4:	88fb      	ldrh	r3, [r7, #6]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2120      	movs	r1, #32
 80010aa:	4618      	mov	r0, r3
 80010ac:	f006 fc82 	bl	80079b4 <SENSOR_IO_Read>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	f023 0304 	bic.w	r3, r3, #4
 80010ba:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	f023 0303 	bic.w	r3, r3, #3
 80010ca:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010da:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	2120      	movs	r1, #32
 80010e4:	4618      	mov	r0, r3
 80010e6:	f006 fc4b 	bl	8007980 <SENSOR_IO_Write>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b088      	sub	sp, #32
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	b2d8      	uxtb	r0, r3
 8001100:	f107 0208 	add.w	r2, r7, #8
 8001104:	2302      	movs	r3, #2
 8001106:	21b2      	movs	r1, #178	; 0xb2
 8001108:	f006 fc72 	bl	80079f0 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2135      	movs	r1, #53	; 0x35
 8001112:	4618      	mov	r0, r3
 8001114:	f006 fc4e 	bl	80079b4 <SENSOR_IO_Read>
 8001118:	4603      	mov	r3, r0
 800111a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800111c:	7ffb      	ldrb	r3, [r7, #31]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21b      	sxth	r3, r3
 8001122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001126:	b21a      	sxth	r2, r3
 8001128:	7a3b      	ldrb	r3, [r7, #8]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001130:	7ffb      	ldrb	r3, [r7, #31]
 8001132:	019b      	lsls	r3, r3, #6
 8001134:	b21b      	sxth	r3, r3
 8001136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800113a:	b21a      	sxth	r2, r3
 800113c:	7a7b      	ldrb	r3, [r7, #9]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001144:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001148:	10db      	asrs	r3, r3, #3
 800114a:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800114c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001150:	10db      	asrs	r3, r3, #3
 8001152:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	b2d8      	uxtb	r0, r3
 8001158:	f107 0208 	add.w	r2, r7, #8
 800115c:	2304      	movs	r3, #4
 800115e:	21bc      	movs	r1, #188	; 0xbc
 8001160:	f006 fc46 	bl	80079f0 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001164:	7a7b      	ldrb	r3, [r7, #9]
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	b21a      	sxth	r2, r3
 800116a:	7a3b      	ldrb	r3, [r7, #8]
 800116c:	b21b      	sxth	r3, r3
 800116e:	4313      	orrs	r3, r2
 8001170:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001172:	7afb      	ldrb	r3, [r7, #11]
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	b21a      	sxth	r2, r3
 8001178:	7abb      	ldrb	r3, [r7, #10]
 800117a:	b21b      	sxth	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	b2d8      	uxtb	r0, r3
 8001184:	f107 0208 	add.w	r2, r7, #8
 8001188:	2302      	movs	r3, #2
 800118a:	21aa      	movs	r1, #170	; 0xaa
 800118c:	f006 fc30 	bl	80079f0 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001190:	7a7b      	ldrb	r3, [r7, #9]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b21a      	sxth	r2, r3
 8001196:	7a3b      	ldrb	r3, [r7, #8]
 8001198:	b21b      	sxth	r3, r3
 800119a:	4313      	orrs	r3, r2
 800119c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800119e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80011a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80011b4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80011c6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80011ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	ee07 3a90 	vmov	s15, r3
 80011d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011dc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	ee07 3a90 	vmov	s15, r3
}
 80011f6:	eeb0 0a67 	vmov.f32	s0, s15
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	463b      	mov	r3, r7
 8001208:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 800120c:	783b      	ldrb	r3, [r7, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	2120      	movs	r1, #32
 8001212:	203c      	movs	r0, #60	; 0x3c
 8001214:	f006 fbb4 	bl	8007980 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001218:	787b      	ldrb	r3, [r7, #1]
 800121a:	461a      	mov	r2, r3
 800121c:	2121      	movs	r1, #33	; 0x21
 800121e:	203c      	movs	r0, #60	; 0x3c
 8001220:	f006 fbae 	bl	8007980 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001224:	78bb      	ldrb	r3, [r7, #2]
 8001226:	461a      	mov	r2, r3
 8001228:	2122      	movs	r1, #34	; 0x22
 800122a:	203c      	movs	r0, #60	; 0x3c
 800122c:	f006 fba8 	bl	8007980 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	461a      	mov	r2, r3
 8001234:	2123      	movs	r1, #35	; 0x23
 8001236:	203c      	movs	r0, #60	; 0x3c
 8001238:	f006 fba2 	bl	8007980 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 800123c:	793b      	ldrb	r3, [r7, #4]
 800123e:	461a      	mov	r2, r3
 8001240:	2124      	movs	r1, #36	; 0x24
 8001242:	203c      	movs	r0, #60	; 0x3c
 8001244:	f006 fb9c 	bl	8007980 <SENSOR_IO_Write>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001256:	2300      	movs	r3, #0
 8001258:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800125a:	2122      	movs	r1, #34	; 0x22
 800125c:	203c      	movs	r0, #60	; 0x3c
 800125e:	f006 fba9 	bl	80079b4 <SENSOR_IO_Read>
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f023 0303 	bic.w	r3, r3, #3
 800126c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f043 0303 	orr.w	r3, r3, #3
 8001274:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	461a      	mov	r2, r3
 800127a:	2122      	movs	r1, #34	; 0x22
 800127c:	203c      	movs	r0, #60	; 0x3c
 800127e:	f006 fb7f 	bl	8007980 <SENSOR_IO_Write>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800128e:	f006 fb6d 	bl	800796c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8001292:	210f      	movs	r1, #15
 8001294:	203c      	movs	r0, #60	; 0x3c
 8001296:	f006 fb8d 	bl	80079b4 <SENSOR_IO_Read>
 800129a:	4603      	mov	r3, r0
}
 800129c:	4618      	mov	r0, r3
 800129e:	bd80      	pop	{r7, pc}

080012a0 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80012ae:	2122      	movs	r1, #34	; 0x22
 80012b0:	203c      	movs	r0, #60	; 0x3c
 80012b2:	f006 fb7f 	bl	80079b4 <SENSOR_IO_Read>
 80012b6:	4603      	mov	r3, r0
 80012b8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	f023 0320 	bic.w	r3, r3, #32
 80012c0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	f043 0320 	orr.w	r3, r3, #32
 80012ce:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	461a      	mov	r2, r3
 80012d4:	2122      	movs	r1, #34	; 0x22
 80012d6:	203c      	movs	r0, #60	; 0x3c
 80012d8:	f006 fb52 	bl	8007980 <SENSOR_IO_Write>
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80012fa:	2121      	movs	r1, #33	; 0x21
 80012fc:	203c      	movs	r0, #60	; 0x3c
 80012fe:	f006 fb59 	bl	80079b4 <SENSOR_IO_Read>
 8001302:	4603      	mov	r3, r0
 8001304:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001306:	f107 0208 	add.w	r2, r7, #8
 800130a:	2306      	movs	r3, #6
 800130c:	21a8      	movs	r1, #168	; 0xa8
 800130e:	203c      	movs	r0, #60	; 0x3c
 8001310:	f006 fb6e 	bl	80079f0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001314:	2300      	movs	r3, #0
 8001316:	77fb      	strb	r3, [r7, #31]
 8001318:	e01c      	b.n	8001354 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800131a:	7ffb      	ldrb	r3, [r7, #31]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	3301      	adds	r3, #1
 8001320:	3320      	adds	r3, #32
 8001322:	443b      	add	r3, r7
 8001324:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001328:	b29b      	uxth	r3, r3
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b29a      	uxth	r2, r3
 800132e:	7ffb      	ldrb	r3, [r7, #31]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	3320      	adds	r3, #32
 8001334:	443b      	add	r3, r7
 8001336:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800133a:	b29b      	uxth	r3, r3
 800133c:	4413      	add	r3, r2
 800133e:	b29a      	uxth	r2, r3
 8001340:	7ffb      	ldrb	r3, [r7, #31]
 8001342:	b212      	sxth	r2, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	3320      	adds	r3, #32
 8001348:	443b      	add	r3, r7
 800134a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800134e:	7ffb      	ldrb	r3, [r7, #31]
 8001350:	3301      	adds	r3, #1
 8001352:	77fb      	strb	r3, [r7, #31]
 8001354:	7ffb      	ldrb	r3, [r7, #31]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d9df      	bls.n	800131a <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 800135a:	7dfb      	ldrb	r3, [r7, #23]
 800135c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001360:	2b60      	cmp	r3, #96	; 0x60
 8001362:	d013      	beq.n	800138c <LIS3MDL_MagReadXYZ+0xa8>
 8001364:	2b60      	cmp	r3, #96	; 0x60
 8001366:	dc14      	bgt.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
 8001368:	2b40      	cmp	r3, #64	; 0x40
 800136a:	d00c      	beq.n	8001386 <LIS3MDL_MagReadXYZ+0xa2>
 800136c:	2b40      	cmp	r3, #64	; 0x40
 800136e:	dc10      	bgt.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <LIS3MDL_MagReadXYZ+0x96>
 8001374:	2b20      	cmp	r3, #32
 8001376:	d003      	beq.n	8001380 <LIS3MDL_MagReadXYZ+0x9c>
 8001378:	e00b      	b.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <LIS3MDL_MagReadXYZ+0xfc>)
 800137c:	61bb      	str	r3, [r7, #24]
    break;
 800137e:	e008      	b.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <LIS3MDL_MagReadXYZ+0x100>)
 8001382:	61bb      	str	r3, [r7, #24]
    break;
 8001384:	e005      	b.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <LIS3MDL_MagReadXYZ+0x104>)
 8001388:	61bb      	str	r3, [r7, #24]
    break;
 800138a:	e002      	b.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <LIS3MDL_MagReadXYZ+0x108>)
 800138e:	61bb      	str	r3, [r7, #24]
    break;    
 8001390:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8001392:	2300      	movs	r3, #0
 8001394:	77fb      	strb	r3, [r7, #31]
 8001396:	e01a      	b.n	80013ce <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001398:	7ffb      	ldrb	r3, [r7, #31]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	3320      	adds	r3, #32
 800139e:	443b      	add	r3, r7
 80013a0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80013b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b4:	7ffb      	ldrb	r3, [r7, #31]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c0:	ee17 2a90 	vmov	r2, s15
 80013c4:	b212      	sxth	r2, r2
 80013c6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80013c8:	7ffb      	ldrb	r3, [r7, #31]
 80013ca:	3301      	adds	r3, #1
 80013cc:	77fb      	strb	r3, [r7, #31]
 80013ce:	7ffb      	ldrb	r3, [r7, #31]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d9e1      	bls.n	8001398 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3720      	adds	r7, #32
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	3e0f5c29 	.word	0x3e0f5c29
 80013e4:	3e947ae1 	.word	0x3e947ae1
 80013e8:	3edc28f6 	.word	0x3edc28f6
 80013ec:	3f147ae1 	.word	0x3f147ae1

080013f0 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 f879 	bl	80014f4 <LPS22HB_Init>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001418:	f006 faa8 	bl	800796c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	210f      	movs	r1, #15
 8001422:	4618      	mov	r0, r3
 8001424:	f006 fac6 	bl	80079b4 <SENSOR_IO_Read>
 8001428:	4603      	mov	r3, r0
 800142a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800142c:	7bfb      	ldrb	r3, [r7, #15]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8001446:	2300      	movs	r3, #0
 8001448:	74fb      	strb	r3, [r7, #19]
 800144a:	e013      	b.n	8001474 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	7cfb      	ldrb	r3, [r7, #19]
 8001452:	3328      	adds	r3, #40	; 0x28
 8001454:	b2db      	uxtb	r3, r3
 8001456:	7cfc      	ldrb	r4, [r7, #19]
 8001458:	4619      	mov	r1, r3
 800145a:	4610      	mov	r0, r2
 800145c:	f006 faaa 	bl	80079b4 <SENSOR_IO_Read>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	f104 0318 	add.w	r3, r4, #24
 8001468:	443b      	add	r3, r7
 800146a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800146e:	7cfb      	ldrb	r3, [r7, #19]
 8001470:	3301      	adds	r3, #1
 8001472:	74fb      	strb	r3, [r7, #19]
 8001474:	7cfb      	ldrb	r3, [r7, #19]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d9e8      	bls.n	800144c <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800147a:	2300      	movs	r3, #0
 800147c:	74fb      	strb	r3, [r7, #19]
 800147e:	e00f      	b.n	80014a0 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8001480:	7cfb      	ldrb	r3, [r7, #19]
 8001482:	3318      	adds	r3, #24
 8001484:	443b      	add	r3, r7
 8001486:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800148a:	461a      	mov	r2, r3
 800148c:	7cfb      	ldrb	r3, [r7, #19]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	4313      	orrs	r3, r2
 8001498:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800149a:	7cfb      	ldrb	r3, [r7, #19]
 800149c:	3301      	adds	r3, #1
 800149e:	74fb      	strb	r3, [r7, #19]
 80014a0:	7cfb      	ldrb	r3, [r7, #19]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d9ec      	bls.n	8001480 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80014b6:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2264      	movs	r2, #100	; 0x64
 80014c0:	fb02 f303 	mul.w	r3, r2, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	da01      	bge.n	80014cc <LPS22HB_P_ReadPressure+0x94>
 80014c8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80014cc:	131b      	asrs	r3, r3, #12
 80014ce:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014da:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014f0 <LPS22HB_P_ReadPressure+0xb8>
 80014de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014e2:	eef0 7a66 	vmov.f32	s15, s13
}
 80014e6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ea:	371c      	adds	r7, #28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd90      	pop	{r4, r7, pc}
 80014f0:	42c80000 	.word	0x42c80000

080014f4 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	211a      	movs	r1, #26
 8001504:	4618      	mov	r0, r3
 8001506:	f006 fa55 	bl	80079b4 <SENSOR_IO_Read>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	211a      	movs	r1, #26
 8001526:	4618      	mov	r0, r3
 8001528:	f006 fa2a 	bl	8007980 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2110      	movs	r1, #16
 8001532:	4618      	mov	r0, r3
 8001534:	f006 fa3e 	bl	80079b4 <SENSOR_IO_Read>
 8001538:	4603      	mov	r3, r0
 800153a:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001542:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800154a:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	f023 0302 	bic.w	r3, r3, #2
 8001552:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	2110      	movs	r1, #16
 8001564:	4618      	mov	r0, r3
 8001566:	f006 fa0b 	bl	8007980 <SENSOR_IO_Write>
}  
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001580:	2110      	movs	r1, #16
 8001582:	20d4      	movs	r0, #212	; 0xd4
 8001584:	f006 fa16 	bl	80079b4 <SENSOR_IO_Read>
 8001588:	4603      	mov	r3, r0
 800158a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001590:	7bbb      	ldrb	r3, [r7, #14]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001598:	7bba      	ldrb	r2, [r7, #14]
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	4313      	orrs	r3, r2
 800159e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80015a0:	7bbb      	ldrb	r3, [r7, #14]
 80015a2:	461a      	mov	r2, r3
 80015a4:	2110      	movs	r1, #16
 80015a6:	20d4      	movs	r0, #212	; 0xd4
 80015a8:	f006 f9ea 	bl	8007980 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80015ac:	2112      	movs	r1, #18
 80015ae:	20d4      	movs	r0, #212	; 0xd4
 80015b0:	f006 fa00 	bl	80079b4 <SENSOR_IO_Read>
 80015b4:	4603      	mov	r3, r0
 80015b6:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	b29b      	uxth	r3, r3
 80015be:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80015c0:	7bbb      	ldrb	r3, [r7, #14]
 80015c2:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80015c6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80015c8:	7bba      	ldrb	r2, [r7, #14]
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80015d0:	7bbb      	ldrb	r3, [r7, #14]
 80015d2:	461a      	mov	r2, r3
 80015d4:	2112      	movs	r1, #18
 80015d6:	20d4      	movs	r0, #212	; 0xd4
 80015d8:	f006 f9d2 	bl	8007980 <SENSOR_IO_Write>
}
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80015ea:	2300      	movs	r3, #0
 80015ec:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80015ee:	2110      	movs	r1, #16
 80015f0:	20d4      	movs	r0, #212	; 0xd4
 80015f2:	f006 f9df 	bl	80079b4 <SENSOR_IO_Read>
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 030f 	and.w	r3, r3, #15
 8001600:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	461a      	mov	r2, r3
 8001606:	2110      	movs	r1, #16
 8001608:	20d4      	movs	r0, #212	; 0xd4
 800160a:	f006 f9b9 	bl	8007980 <SENSOR_IO_Write>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001616:	b580      	push	{r7, lr}
 8001618:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800161a:	f006 f9a7 	bl	800796c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800161e:	210f      	movs	r1, #15
 8001620:	20d4      	movs	r0, #212	; 0xd4
 8001622:	f006 f9c7 	bl	80079b4 <SENSOR_IO_Read>
 8001626:	4603      	mov	r3, r0
}
 8001628:	4618      	mov	r0, r3
 800162a:	bd80      	pop	{r7, pc}

0800162c <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001636:	2300      	movs	r3, #0
 8001638:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800163a:	2115      	movs	r1, #21
 800163c:	20d4      	movs	r0, #212	; 0xd4
 800163e:	f006 f9b9 	bl	80079b4 <SENSOR_IO_Read>
 8001642:	4603      	mov	r3, r0
 8001644:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	f023 0310 	bic.w	r3, r3, #16
 800164c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	f043 0310 	orr.w	r3, r3, #16
 800165a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	461a      	mov	r2, r3
 8001660:	2115      	movs	r1, #21
 8001662:	20d4      	movs	r0, #212	; 0xd4
 8001664:	f006 f98c 	bl	8007980 <SENSOR_IO_Write>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001678:	2300      	movs	r3, #0
 800167a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001686:	2110      	movs	r1, #16
 8001688:	20d4      	movs	r0, #212	; 0xd4
 800168a:	f006 f993 	bl	80079b4 <SENSOR_IO_Read>
 800168e:	4603      	mov	r3, r0
 8001690:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001692:	f107 0208 	add.w	r2, r7, #8
 8001696:	2306      	movs	r3, #6
 8001698:	2128      	movs	r1, #40	; 0x28
 800169a:	20d4      	movs	r0, #212	; 0xd4
 800169c:	f006 f9a8 	bl	80079f0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	77fb      	strb	r3, [r7, #31]
 80016a4:	e01c      	b.n	80016e0 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80016a6:	7ffb      	ldrb	r3, [r7, #31]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	3301      	adds	r3, #1
 80016ac:	3320      	adds	r3, #32
 80016ae:	443b      	add	r3, r7
 80016b0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	7ffb      	ldrb	r3, [r7, #31]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	3320      	adds	r3, #32
 80016c0:	443b      	add	r3, r7
 80016c2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4413      	add	r3, r2
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	7ffb      	ldrb	r3, [r7, #31]
 80016ce:	b212      	sxth	r2, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	3320      	adds	r3, #32
 80016d4:	443b      	add	r3, r7
 80016d6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80016da:	7ffb      	ldrb	r3, [r7, #31]
 80016dc:	3301      	adds	r3, #1
 80016de:	77fb      	strb	r3, [r7, #31]
 80016e0:	7ffb      	ldrb	r3, [r7, #31]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d9df      	bls.n	80016a6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80016e6:	7dfb      	ldrb	r3, [r7, #23]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b0c      	cmp	r3, #12
 80016ee:	d829      	bhi.n	8001744 <LSM6DSL_AccReadXYZ+0xd4>
 80016f0:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <LSM6DSL_AccReadXYZ+0x88>)
 80016f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f6:	bf00      	nop
 80016f8:	0800172d 	.word	0x0800172d
 80016fc:	08001745 	.word	0x08001745
 8001700:	08001745 	.word	0x08001745
 8001704:	08001745 	.word	0x08001745
 8001708:	0800173f 	.word	0x0800173f
 800170c:	08001745 	.word	0x08001745
 8001710:	08001745 	.word	0x08001745
 8001714:	08001745 	.word	0x08001745
 8001718:	08001733 	.word	0x08001733
 800171c:	08001745 	.word	0x08001745
 8001720:	08001745 	.word	0x08001745
 8001724:	08001745 	.word	0x08001745
 8001728:	08001739 	.word	0x08001739
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <LSM6DSL_AccReadXYZ+0x120>)
 800172e:	61bb      	str	r3, [r7, #24]
    break;
 8001730:	e008      	b.n	8001744 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <LSM6DSL_AccReadXYZ+0x124>)
 8001734:	61bb      	str	r3, [r7, #24]
    break;
 8001736:	e005      	b.n	8001744 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001738:	4b17      	ldr	r3, [pc, #92]	; (8001798 <LSM6DSL_AccReadXYZ+0x128>)
 800173a:	61bb      	str	r3, [r7, #24]
    break;
 800173c:	e002      	b.n	8001744 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <LSM6DSL_AccReadXYZ+0x12c>)
 8001740:	61bb      	str	r3, [r7, #24]
    break;    
 8001742:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001744:	2300      	movs	r3, #0
 8001746:	77fb      	strb	r3, [r7, #31]
 8001748:	e01a      	b.n	8001780 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800174a:	7ffb      	ldrb	r3, [r7, #31]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	3320      	adds	r3, #32
 8001750:	443b      	add	r3, r7
 8001752:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800175e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001766:	7ffb      	ldrb	r3, [r7, #31]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001772:	ee17 2a90 	vmov	r2, s15
 8001776:	b212      	sxth	r2, r2
 8001778:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800177a:	7ffb      	ldrb	r3, [r7, #31]
 800177c:	3301      	adds	r3, #1
 800177e:	77fb      	strb	r3, [r7, #31]
 8001780:	7ffb      	ldrb	r3, [r7, #31]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d9e1      	bls.n	800174a <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8001786:	bf00      	nop
 8001788:	bf00      	nop
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	3d79db23 	.word	0x3d79db23
 8001794:	3df9db23 	.word	0x3df9db23
 8001798:	3e79db23 	.word	0x3e79db23
 800179c:	3ef9db23 	.word	0x3ef9db23

080017a0 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80017aa:	2300      	movs	r3, #0
 80017ac:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80017ae:	2111      	movs	r1, #17
 80017b0:	20d4      	movs	r0, #212	; 0xd4
 80017b2:	f006 f8ff 	bl	80079b4 <SENSOR_IO_Read>
 80017b6:	4603      	mov	r3, r0
 80017b8:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80017be:	7bbb      	ldrb	r3, [r7, #14]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80017c6:	7bba      	ldrb	r2, [r7, #14]
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80017ce:	7bbb      	ldrb	r3, [r7, #14]
 80017d0:	461a      	mov	r2, r3
 80017d2:	2111      	movs	r1, #17
 80017d4:	20d4      	movs	r0, #212	; 0xd4
 80017d6:	f006 f8d3 	bl	8007980 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80017da:	2112      	movs	r1, #18
 80017dc:	20d4      	movs	r0, #212	; 0xd4
 80017de:	f006 f8e9 	bl	80079b4 <SENSOR_IO_Read>
 80017e2:	4603      	mov	r3, r0
 80017e4:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80017ee:	7bbb      	ldrb	r3, [r7, #14]
 80017f0:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80017f4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80017f6:	7bba      	ldrb	r2, [r7, #14]
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80017fe:	7bbb      	ldrb	r3, [r7, #14]
 8001800:	461a      	mov	r2, r3
 8001802:	2112      	movs	r1, #18
 8001804:	20d4      	movs	r0, #212	; 0xd4
 8001806:	f006 f8bb 	bl	8007980 <SENSOR_IO_Write>
}
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001818:	2300      	movs	r3, #0
 800181a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800181c:	2111      	movs	r1, #17
 800181e:	20d4      	movs	r0, #212	; 0xd4
 8001820:	f006 f8c8 	bl	80079b4 <SENSOR_IO_Read>
 8001824:	4603      	mov	r3, r0
 8001826:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	461a      	mov	r2, r3
 8001834:	2111      	movs	r1, #17
 8001836:	20d4      	movs	r0, #212	; 0xd4
 8001838:	f006 f8a2 	bl	8007980 <SENSOR_IO_Write>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001848:	f006 f890 	bl	800796c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 800184c:	210f      	movs	r1, #15
 800184e:	20d4      	movs	r0, #212	; 0xd4
 8001850:	f006 f8b0 	bl	80079b4 <SENSOR_IO_Read>
 8001854:	4603      	mov	r3, r0
}
 8001856:	4618      	mov	r0, r3
 8001858:	bd80      	pop	{r7, pc}

0800185a <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8001868:	2116      	movs	r1, #22
 800186a:	20d4      	movs	r0, #212	; 0xd4
 800186c:	f006 f8a2 	bl	80079b4 <SENSOR_IO_Read>
 8001870:	4603      	mov	r3, r0
 8001872:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800187a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001888:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	461a      	mov	r2, r3
 800188e:	2116      	movs	r1, #22
 8001890:	20d4      	movs	r0, #212	; 0xd4
 8001892:	f006 f875 	bl	8007980 <SENSOR_IO_Write>
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80018b6:	2111      	movs	r1, #17
 80018b8:	20d4      	movs	r0, #212	; 0xd4
 80018ba:	f006 f87b 	bl	80079b4 <SENSOR_IO_Read>
 80018be:	4603      	mov	r3, r0
 80018c0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80018c2:	f107 0208 	add.w	r2, r7, #8
 80018c6:	2306      	movs	r3, #6
 80018c8:	2122      	movs	r1, #34	; 0x22
 80018ca:	20d4      	movs	r0, #212	; 0xd4
 80018cc:	f006 f890 	bl	80079f0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80018d0:	2300      	movs	r3, #0
 80018d2:	77fb      	strb	r3, [r7, #31]
 80018d4:	e01c      	b.n	8001910 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80018d6:	7ffb      	ldrb	r3, [r7, #31]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	3301      	adds	r3, #1
 80018dc:	3320      	adds	r3, #32
 80018de:	443b      	add	r3, r7
 80018e0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	7ffb      	ldrb	r3, [r7, #31]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	3320      	adds	r3, #32
 80018f0:	443b      	add	r3, r7
 80018f2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	7ffb      	ldrb	r3, [r7, #31]
 80018fe:	b212      	sxth	r2, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	3320      	adds	r3, #32
 8001904:	443b      	add	r3, r7
 8001906:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800190a:	7ffb      	ldrb	r3, [r7, #31]
 800190c:	3301      	adds	r3, #1
 800190e:	77fb      	strb	r3, [r7, #31]
 8001910:	7ffb      	ldrb	r3, [r7, #31]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d9df      	bls.n	80018d6 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8001916:	7dfb      	ldrb	r3, [r7, #23]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	2b0c      	cmp	r3, #12
 800191e:	d829      	bhi.n	8001974 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8001920:	a201      	add	r2, pc, #4	; (adr r2, 8001928 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8001922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001926:	bf00      	nop
 8001928:	0800195d 	.word	0x0800195d
 800192c:	08001975 	.word	0x08001975
 8001930:	08001975 	.word	0x08001975
 8001934:	08001975 	.word	0x08001975
 8001938:	08001963 	.word	0x08001963
 800193c:	08001975 	.word	0x08001975
 8001940:	08001975 	.word	0x08001975
 8001944:	08001975 	.word	0x08001975
 8001948:	08001969 	.word	0x08001969
 800194c:	08001975 	.word	0x08001975
 8001950:	08001975 	.word	0x08001975
 8001954:	08001975 	.word	0x08001975
 8001958:	0800196f 	.word	0x0800196f
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 800195c:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 800195e:	61bb      	str	r3, [r7, #24]
    break;
 8001960:	e008      	b.n	8001974 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8001964:	61bb      	str	r3, [r7, #24]
    break;
 8001966:	e005      	b.n	8001974 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 800196a:	61bb      	str	r3, [r7, #24]
    break;
 800196c:	e002      	b.n	8001974 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8001970:	61bb      	str	r3, [r7, #24]
    break;    
 8001972:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001974:	2300      	movs	r3, #0
 8001976:	77fb      	strb	r3, [r7, #31]
 8001978:	e016      	b.n	80019a8 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800197a:	7ffb      	ldrb	r3, [r7, #31]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	3320      	adds	r3, #32
 8001980:	443b      	add	r3, r7
 8001982:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800198e:	7ffb      	ldrb	r3, [r7, #31]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	edd7 7a06 	vldr	s15, [r7, #24]
 800199a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199e:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80019a2:	7ffb      	ldrb	r3, [r7, #31]
 80019a4:	3301      	adds	r3, #1
 80019a6:	77fb      	strb	r3, [r7, #31]
 80019a8:	7ffb      	ldrb	r3, [r7, #31]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d9e5      	bls.n	800197a <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 80019ae:	bf00      	nop
 80019b0:	bf00      	nop
 80019b2:	3720      	adds	r7, #32
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	410c0000 	.word	0x410c0000
 80019bc:	418c0000 	.word	0x418c0000
 80019c0:	420c0000 	.word	0x420c0000
 80019c4:	428c0000 	.word	0x428c0000

080019c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d2:	2003      	movs	r0, #3
 80019d4:	f001 f848 	bl	8002a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019d8:	2000      	movs	r0, #0
 80019da:	f000 f80d 	bl	80019f8 <HAL_InitTick>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	e001      	b.n	80019ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019ea:	f006 f999 	bl	8007d20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019ee:	79fb      	ldrb	r3, [r7, #7]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <HAL_InitTick+0x6c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d023      	beq.n	8001a54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a0c:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <HAL_InitTick+0x70>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <HAL_InitTick+0x6c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a22:	4618      	mov	r0, r3
 8001a24:	f001 f855 	bl	8002ad2 <HAL_SYSTICK_Config>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10f      	bne.n	8001a4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b0f      	cmp	r3, #15
 8001a32:	d809      	bhi.n	8001a48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a34:	2200      	movs	r2, #0
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	f001 f81f 	bl	8002a7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a40:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <HAL_InitTick+0x74>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e007      	b.n	8001a58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
 8001a4c:	e004      	b.n	8001a58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	73fb      	strb	r3, [r7, #15]
 8001a52:	e001      	b.n	8001a58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200000c8 	.word	0x200000c8
 8001a68:	200000cc 	.word	0x200000cc
 8001a6c:	200000c4 	.word	0x200000c4

08001a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_IncTick+0x20>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_IncTick+0x24>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <HAL_IncTick+0x24>)
 8001a82:	6013      	str	r3, [r2, #0]
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	200000c8 	.word	0x200000c8
 8001a94:	200002bc 	.word	0x200002bc

08001a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <HAL_GetTick+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	200002bc 	.word	0x200002bc

08001ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab8:	f7ff ffee 	bl	8001a98 <HAL_GetTick>
 8001abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac8:	d005      	beq.n	8001ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_Delay+0x44>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad6:	bf00      	nop
 8001ad8:	f7ff ffde 	bl	8001a98 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d8f7      	bhi.n	8001ad8 <HAL_Delay+0x28>
  {
  }
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200000c8 	.word	0x200000c8

08001af8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	609a      	str	r2, [r3, #8]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	609a      	str	r2, [r3, #8]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3360      	adds	r3, #96	; 0x60
 8001b72:	461a      	mov	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <LL_ADC_SetOffset+0x44>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b98:	bf00      	nop
 8001b9a:	371c      	adds	r7, #28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	03fff000 	.word	0x03fff000

08001ba8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3360      	adds	r3, #96	; 0x60
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	3360      	adds	r3, #96	; 0x60
 8001be4:	461a      	mov	r2, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bfe:	bf00      	nop
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	615a      	str	r2, [r3, #20]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b087      	sub	sp, #28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	3330      	adds	r3, #48	; 0x30
 8001c40:	461a      	mov	r2, r3
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	f003 030c 	and.w	r3, r3, #12
 8001c4c:	4413      	add	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	211f      	movs	r1, #31
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	401a      	ands	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	0e9b      	lsrs	r3, r3, #26
 8001c68:	f003 011f 	and.w	r1, r3, #31
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	431a      	orrs	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c7c:	bf00      	nop
 8001c7e:	371c      	adds	r7, #28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3314      	adds	r3, #20
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	0e5b      	lsrs	r3, r3, #25
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	4413      	add	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	0d1b      	lsrs	r3, r3, #20
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	2107      	movs	r1, #7
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	0d1b      	lsrs	r3, r3, #20
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cd2:	bf00      	nop
 8001cd4:	371c      	adds	r7, #28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0318 	and.w	r3, r3, #24
 8001d02:	4908      	ldr	r1, [pc, #32]	; (8001d24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d04:	40d9      	lsrs	r1, r3
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	400b      	ands	r3, r1
 8001d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	0007ffff 	.word	0x0007ffff

08001d28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6093      	str	r3, [r2, #8]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d60:	d101      	bne.n	8001d66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001db0:	d101      	bne.n	8001db6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <LL_ADC_IsEnabled+0x18>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <LL_ADC_IsEnabled+0x1a>
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d101      	bne.n	8001e02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d101      	bne.n	8001e28 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e12f      	b.n	80020b2 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f005 ff81 	bl	8007d68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff67 	bl	8001d4c <LL_ADC_IsDeepPowerDownEnabled>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d004      	beq.n	8001e8e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff4d 	bl	8001d28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff82 	bl	8001d9c <LL_ADC_IsInternalRegulatorEnabled>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d115      	bne.n	8001eca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ff66 	bl	8001d74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ea8:	4b84      	ldr	r3, [pc, #528]	; (80020bc <HAL_ADC_Init+0x284>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	099b      	lsrs	r3, r3, #6
 8001eae:	4a84      	ldr	r2, [pc, #528]	; (80020c0 <HAL_ADC_Init+0x288>)
 8001eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb4:	099b      	lsrs	r3, r3, #6
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ebc:	e002      	b.n	8001ec4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f9      	bne.n	8001ebe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff ff64 	bl	8001d9c <LL_ADC_IsInternalRegulatorEnabled>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10d      	bne.n	8001ef6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ede:	f043 0210 	orr.w	r2, r3, #16
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eea:	f043 0201 	orr.w	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff ff75 	bl	8001dea <LL_ADC_REG_IsConversionOngoing>
 8001f00:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f040 80c8 	bne.w	80020a0 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f040 80c4 	bne.w	80020a0 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f20:	f043 0202 	orr.w	r2, r3, #2
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff49 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10b      	bne.n	8001f50 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f38:	4862      	ldr	r0, [pc, #392]	; (80020c4 <HAL_ADC_Init+0x28c>)
 8001f3a:	f7ff ff43 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d105      	bne.n	8001f50 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	485f      	ldr	r0, [pc, #380]	; (80020c8 <HAL_ADC_Init+0x290>)
 8001f4c:	f7ff fdd4 	bl	8001af8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	7e5b      	ldrb	r3, [r3, #25]
 8001f54:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f5a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001f60:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001f66:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f6e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d106      	bne.n	8001f8c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	3b01      	subs	r3, #1
 8001f84:	045b      	lsls	r3, r3, #17
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d009      	beq.n	8001fa8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	4b47      	ldr	r3, [pc, #284]	; (80020cc <HAL_ADC_Init+0x294>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	69b9      	ldr	r1, [r7, #24]
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff12 	bl	8001dea <LL_ADC_REG_IsConversionOngoing>
 8001fc6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff1f 	bl	8001e10 <LL_ADC_INJ_IsConversionOngoing>
 8001fd2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d140      	bne.n	800205c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d13d      	bne.n	800205c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7e1b      	ldrb	r3, [r3, #24]
 8001fe8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fea:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ff2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002002:	f023 0306 	bic.w	r3, r3, #6
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	69b9      	ldr	r1, [r7, #24]
 800200c:	430b      	orrs	r3, r1
 800200e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002016:	2b01      	cmp	r3, #1
 8002018:	d118      	bne.n	800204c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002024:	f023 0304 	bic.w	r3, r3, #4
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002030:	4311      	orrs	r1, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002036:	4311      	orrs	r1, r2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800203c:	430a      	orrs	r2, r1
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 0201 	orr.w	r2, r2, #1
 8002048:	611a      	str	r2, [r3, #16]
 800204a:	e007      	b.n	800205c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0201 	bic.w	r2, r2, #1
 800205a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d10c      	bne.n	800207e <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f023 010f 	bic.w	r1, r3, #15
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	1e5a      	subs	r2, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
 800207c:	e007      	b.n	800208e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 020f 	bic.w	r2, r2, #15
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	659a      	str	r2, [r3, #88]	; 0x58
 800209e:	e007      	b.n	80020b0 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	f043 0210 	orr.w	r2, r3, #16
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3720      	adds	r7, #32
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200000cc 	.word	0x200000cc
 80020c0:	053e2d63 	.word	0x053e2d63
 80020c4:	50040000 	.word	0x50040000
 80020c8:	50040300 	.word	0x50040300
 80020cc:	fff0c007 	.word	0xfff0c007

080020d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b0b6      	sub	sp, #216	; 0xd8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x22>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e3d5      	b.n	800289e <HAL_ADC_ConfigChannel+0x7ce>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fe73 	bl	8001dea <LL_ADC_REG_IsConversionOngoing>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 83ba 	bne.w	8002880 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b05      	cmp	r3, #5
 8002112:	d824      	bhi.n	800215e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	3b02      	subs	r3, #2
 800211a:	2b03      	cmp	r3, #3
 800211c:	d81b      	bhi.n	8002156 <HAL_ADC_ConfigChannel+0x86>
 800211e:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <HAL_ADC_ConfigChannel+0x54>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	08002135 	.word	0x08002135
 8002128:	0800213d 	.word	0x0800213d
 800212c:	08002145 	.word	0x08002145
 8002130:	0800214d 	.word	0x0800214d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	220c      	movs	r2, #12
 8002138:	605a      	str	r2, [r3, #4]
          break;
 800213a:	e011      	b.n	8002160 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2212      	movs	r2, #18
 8002140:	605a      	str	r2, [r3, #4]
          break;
 8002142:	e00d      	b.n	8002160 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2218      	movs	r2, #24
 8002148:	605a      	str	r2, [r3, #4]
          break;
 800214a:	e009      	b.n	8002160 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002152:	605a      	str	r2, [r3, #4]
          break;
 8002154:	e004      	b.n	8002160 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2206      	movs	r2, #6
 800215a:	605a      	str	r2, [r3, #4]
          break;
 800215c:	e000      	b.n	8002160 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800215e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	f7ff fd5f 	bl	8001c30 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fe37 	bl	8001dea <LL_ADC_REG_IsConversionOngoing>
 800217c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fe43 	bl	8001e10 <LL_ADC_INJ_IsConversionOngoing>
 800218a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800218e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 81c1 	bne.w	800251a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002198:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800219c:	2b00      	cmp	r3, #0
 800219e:	f040 81bc 	bne.w	800251a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021aa:	d10f      	bne.n	80021cc <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2200      	movs	r2, #0
 80021b6:	4619      	mov	r1, r3
 80021b8:	f7ff fd66 	bl	8001c88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fd20 	bl	8001c0a <LL_ADC_SetSamplingTimeCommonConfig>
 80021ca:	e00e      	b.n	80021ea <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	461a      	mov	r2, r3
 80021da:	f7ff fd55 	bl	8001c88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fd10 	bl	8001c0a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	08db      	lsrs	r3, r3, #3
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	2b04      	cmp	r3, #4
 800220a:	d00a      	beq.n	8002222 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	6919      	ldr	r1, [r3, #16]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800221c:	f7ff fca0 	bl	8001b60 <LL_ADC_SetOffset>
 8002220:	e17b      	b.n	800251a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fcbd 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <HAL_ADC_ConfigChannel+0x17e>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fcb2 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002244:	4603      	mov	r3, r0
 8002246:	0e9b      	lsrs	r3, r3, #26
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	e01e      	b.n	800228c <HAL_ADC_ConfigChannel+0x1bc>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fca7 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 800225a:	4603      	mov	r3, r0
 800225c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800226c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002270:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002274:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800227c:	2320      	movs	r3, #32
 800227e:	e004      	b.n	800228a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002280:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002284:	fab3 f383 	clz	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002294:	2b00      	cmp	r3, #0
 8002296:	d105      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1d4>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0e9b      	lsrs	r3, r3, #26
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	e018      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x206>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80022b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80022c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80022c8:	2320      	movs	r3, #32
 80022ca:	e004      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80022cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022d0:	fab3 f383 	clz	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d106      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2200      	movs	r2, #0
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fc76 	bl	8001bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2101      	movs	r1, #1
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fc5a 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 80022f4:	4603      	mov	r3, r0
 80022f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10a      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x244>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2101      	movs	r1, #1
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fc4f 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 800230a:	4603      	mov	r3, r0
 800230c:	0e9b      	lsrs	r3, r3, #26
 800230e:	f003 021f 	and.w	r2, r3, #31
 8002312:	e01e      	b.n	8002352 <HAL_ADC_ConfigChannel+0x282>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2101      	movs	r1, #1
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fc44 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002320:	4603      	mov	r3, r0
 8002322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002336:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800233a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002342:	2320      	movs	r3, #32
 8002344:	e004      	b.n	8002350 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002346:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <HAL_ADC_ConfigChannel+0x29a>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	0e9b      	lsrs	r3, r3, #26
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	e018      	b.n	800239c <HAL_ADC_ConfigChannel+0x2cc>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800237e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002382:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002386:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800238e:	2320      	movs	r3, #32
 8002390:	e004      	b.n	800239c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002392:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800239c:	429a      	cmp	r2, r3
 800239e:	d106      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2200      	movs	r2, #0
 80023a6:	2101      	movs	r1, #1
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fc13 	bl	8001bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2102      	movs	r1, #2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fbf7 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10a      	bne.n	80023da <HAL_ADC_ConfigChannel+0x30a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2102      	movs	r1, #2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fbec 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	0e9b      	lsrs	r3, r3, #26
 80023d4:	f003 021f 	and.w	r2, r3, #31
 80023d8:	e01e      	b.n	8002418 <HAL_ADC_ConfigChannel+0x348>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2102      	movs	r1, #2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fbe1 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80023f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002400:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002408:	2320      	movs	r3, #32
 800240a:	e004      	b.n	8002416 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800240c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002410:	fab3 f383 	clz	r3, r3
 8002414:	b2db      	uxtb	r3, r3
 8002416:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002420:	2b00      	cmp	r3, #0
 8002422:	d105      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x360>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0e9b      	lsrs	r3, r3, #26
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	e016      	b.n	800245e <HAL_ADC_ConfigChannel+0x38e>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002442:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002444:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002448:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002450:	2320      	movs	r3, #32
 8002452:	e004      	b.n	800245e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002454:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002458:	fab3 f383 	clz	r3, r3
 800245c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800245e:	429a      	cmp	r2, r3
 8002460:	d106      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2200      	movs	r2, #0
 8002468:	2102      	movs	r1, #2
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fbb2 	bl	8001bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2103      	movs	r1, #3
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fb96 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 800247c:	4603      	mov	r3, r0
 800247e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10a      	bne.n	800249c <HAL_ADC_ConfigChannel+0x3cc>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2103      	movs	r1, #3
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fb8b 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 8002492:	4603      	mov	r3, r0
 8002494:	0e9b      	lsrs	r3, r3, #26
 8002496:	f003 021f 	and.w	r2, r3, #31
 800249a:	e017      	b.n	80024cc <HAL_ADC_ConfigChannel+0x3fc>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2103      	movs	r1, #3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fb80 	bl	8001ba8 <LL_ADC_GetOffsetChannel>
 80024a8:	4603      	mov	r3, r0
 80024aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80024b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024b6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80024b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80024be:	2320      	movs	r3, #32
 80024c0:	e003      	b.n	80024ca <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80024c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024c4:	fab3 f383 	clz	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d105      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x414>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	0e9b      	lsrs	r3, r3, #26
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	e011      	b.n	8002508 <HAL_ADC_ConfigChannel+0x438>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80024f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80024f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80024fc:	2320      	movs	r3, #32
 80024fe:	e003      	b.n	8002508 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002508:	429a      	cmp	r2, r3
 800250a:	d106      	bne.n	800251a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2200      	movs	r2, #0
 8002512:	2103      	movs	r1, #3
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fb5d 	bl	8001bd4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fc50 	bl	8001dc4 <LL_ADC_IsEnabled>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	f040 8140 	bne.w	80027ac <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	6819      	ldr	r1, [r3, #0]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	461a      	mov	r2, r3
 800253a:	f7ff fbd1 	bl	8001ce0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	4a8f      	ldr	r2, [pc, #572]	; (8002780 <HAL_ADC_ConfigChannel+0x6b0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	f040 8131 	bne.w	80027ac <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10b      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x4a2>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	0e9b      	lsrs	r3, r3, #26
 8002560:	3301      	adds	r3, #1
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	2b09      	cmp	r3, #9
 8002568:	bf94      	ite	ls
 800256a:	2301      	movls	r3, #1
 800256c:	2300      	movhi	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	e019      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x4d6>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002582:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800258a:	2320      	movs	r3, #32
 800258c:	e003      	b.n	8002596 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800258e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002590:	fab3 f383 	clz	r3, r3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	3301      	adds	r3, #1
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	2b09      	cmp	r3, #9
 800259e:	bf94      	ite	ls
 80025a0:	2301      	movls	r3, #1
 80025a2:	2300      	movhi	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d079      	beq.n	800269e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d107      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x4f6>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	0e9b      	lsrs	r3, r3, #26
 80025bc:	3301      	adds	r3, #1
 80025be:	069b      	lsls	r3, r3, #26
 80025c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025c4:	e015      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x522>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80025d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80025de:	2320      	movs	r3, #32
 80025e0:	e003      	b.n	80025ea <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80025e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e4:	fab3 f383 	clz	r3, r3
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	3301      	adds	r3, #1
 80025ec:	069b      	lsls	r3, r3, #26
 80025ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x542>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	0e9b      	lsrs	r3, r3, #26
 8002604:	3301      	adds	r3, #1
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	2101      	movs	r1, #1
 800260c:	fa01 f303 	lsl.w	r3, r1, r3
 8002610:	e017      	b.n	8002642 <HAL_ADC_ConfigChannel+0x572>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002622:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800262a:	2320      	movs	r3, #32
 800262c:	e003      	b.n	8002636 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800262e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	3301      	adds	r3, #1
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	2101      	movs	r1, #1
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	ea42 0103 	orr.w	r1, r2, r3
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10a      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x598>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	0e9b      	lsrs	r3, r3, #26
 8002658:	3301      	adds	r3, #1
 800265a:	f003 021f 	and.w	r2, r3, #31
 800265e:	4613      	mov	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4413      	add	r3, r2
 8002664:	051b      	lsls	r3, r3, #20
 8002666:	e018      	b.n	800269a <HAL_ADC_ConfigChannel+0x5ca>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002678:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800267a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002680:	2320      	movs	r3, #32
 8002682:	e003      	b.n	800268c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	3301      	adds	r3, #1
 800268e:	f003 021f 	and.w	r2, r3, #31
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800269a:	430b      	orrs	r3, r1
 800269c:	e081      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d107      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x5ea>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	0e9b      	lsrs	r3, r3, #26
 80026b0:	3301      	adds	r3, #1
 80026b2:	069b      	lsls	r3, r3, #26
 80026b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026b8:	e015      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x616>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ca:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80026cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80026d2:	2320      	movs	r3, #32
 80026d4:	e003      	b.n	80026de <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	fab3 f383 	clz	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	3301      	adds	r3, #1
 80026e0:	069b      	lsls	r3, r3, #26
 80026e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x636>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	0e9b      	lsrs	r3, r3, #26
 80026f8:	3301      	adds	r3, #1
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	2101      	movs	r1, #1
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	e017      	b.n	8002736 <HAL_ADC_ConfigChannel+0x666>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	61fb      	str	r3, [r7, #28]
  return result;
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800271e:	2320      	movs	r3, #32
 8002720:	e003      	b.n	800272a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	fab3 f383 	clz	r3, r3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	3301      	adds	r3, #1
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	2101      	movs	r1, #1
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	ea42 0103 	orr.w	r1, r2, r3
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10d      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x692>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	0e9b      	lsrs	r3, r3, #26
 800274c:	3301      	adds	r3, #1
 800274e:	f003 021f 	and.w	r2, r3, #31
 8002752:	4613      	mov	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4413      	add	r3, r2
 8002758:	3b1e      	subs	r3, #30
 800275a:	051b      	lsls	r3, r3, #20
 800275c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002760:	e01e      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x6d0>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	613b      	str	r3, [r7, #16]
  return result;
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d104      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800277a:	2320      	movs	r3, #32
 800277c:	e006      	b.n	800278c <HAL_ADC_ConfigChannel+0x6bc>
 800277e:	bf00      	nop
 8002780:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	fab3 f383 	clz	r3, r3
 800278a:	b2db      	uxtb	r3, r3
 800278c:	3301      	adds	r3, #1
 800278e:	f003 021f 	and.w	r2, r3, #31
 8002792:	4613      	mov	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	3b1e      	subs	r3, #30
 800279a:	051b      	lsls	r3, r3, #20
 800279c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027a0:	430b      	orrs	r3, r1
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	6892      	ldr	r2, [r2, #8]
 80027a6:	4619      	mov	r1, r3
 80027a8:	f7ff fa6e 	bl	8001c88 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4b3d      	ldr	r3, [pc, #244]	; (80028a8 <HAL_ADC_ConfigChannel+0x7d8>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d06c      	beq.n	8002892 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027b8:	483c      	ldr	r0, [pc, #240]	; (80028ac <HAL_ADC_ConfigChannel+0x7dc>)
 80027ba:	f7ff f9c3 	bl	8001b44 <LL_ADC_GetCommonPathInternalCh>
 80027be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a3a      	ldr	r2, [pc, #232]	; (80028b0 <HAL_ADC_ConfigChannel+0x7e0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d127      	bne.n	800281c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d121      	bne.n	800281c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a35      	ldr	r2, [pc, #212]	; (80028b4 <HAL_ADC_ConfigChannel+0x7e4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d157      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027ea:	4619      	mov	r1, r3
 80027ec:	482f      	ldr	r0, [pc, #188]	; (80028ac <HAL_ADC_ConfigChannel+0x7dc>)
 80027ee:	f7ff f996 	bl	8001b1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027f2:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <HAL_ADC_ConfigChannel+0x7e8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	099b      	lsrs	r3, r3, #6
 80027f8:	4a30      	ldr	r2, [pc, #192]	; (80028bc <HAL_ADC_ConfigChannel+0x7ec>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	099b      	lsrs	r3, r3, #6
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800280c:	e002      	b.n	8002814 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	3b01      	subs	r3, #1
 8002812:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f9      	bne.n	800280e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800281a:	e03a      	b.n	8002892 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a27      	ldr	r2, [pc, #156]	; (80028c0 <HAL_ADC_ConfigChannel+0x7f0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d113      	bne.n	800284e <HAL_ADC_ConfigChannel+0x77e>
 8002826:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800282a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10d      	bne.n	800284e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1f      	ldr	r2, [pc, #124]	; (80028b4 <HAL_ADC_ConfigChannel+0x7e4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d12a      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800283c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002840:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002844:	4619      	mov	r1, r3
 8002846:	4819      	ldr	r0, [pc, #100]	; (80028ac <HAL_ADC_ConfigChannel+0x7dc>)
 8002848:	f7ff f969 	bl	8001b1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800284c:	e021      	b.n	8002892 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a1c      	ldr	r2, [pc, #112]	; (80028c4 <HAL_ADC_ConfigChannel+0x7f4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d11c      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002858:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800285c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d116      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a12      	ldr	r2, [pc, #72]	; (80028b4 <HAL_ADC_ConfigChannel+0x7e4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d111      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800286e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002872:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002876:	4619      	mov	r1, r3
 8002878:	480c      	ldr	r0, [pc, #48]	; (80028ac <HAL_ADC_ConfigChannel+0x7dc>)
 800287a:	f7ff f950 	bl	8001b1e <LL_ADC_SetCommonPathInternalCh>
 800287e:	e008      	b.n	8002892 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002884:	f043 0220 	orr.w	r2, r3, #32
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800289a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800289e:	4618      	mov	r0, r3
 80028a0:	37d8      	adds	r7, #216	; 0xd8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	80080000 	.word	0x80080000
 80028ac:	50040300 	.word	0x50040300
 80028b0:	c7520000 	.word	0xc7520000
 80028b4:	50040000 	.word	0x50040000
 80028b8:	200000cc 	.word	0x200000cc
 80028bc:	053e2d63 	.word	0x053e2d63
 80028c0:	cb840000 	.word	0xcb840000
 80028c4:	80000001 	.word	0x80000001

080028c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e4:	4013      	ands	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fa:	4a04      	ldr	r2, [pc, #16]	; (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60d3      	str	r3, [r2, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <__NVIC_GetPriorityGrouping+0x18>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0307 	and.w	r3, r3, #7
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	2b00      	cmp	r3, #0
 800293c:	db0b      	blt.n	8002956 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	4907      	ldr	r1, [pc, #28]	; (8002964 <__NVIC_EnableIRQ+0x38>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2001      	movs	r0, #1
 800294e:	fa00 f202 	lsl.w	r2, r0, r2
 8002952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000e100 	.word	0xe000e100

08002968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	6039      	str	r1, [r7, #0]
 8002972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	2b00      	cmp	r3, #0
 800297a:	db0a      	blt.n	8002992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	b2da      	uxtb	r2, r3
 8002980:	490c      	ldr	r1, [pc, #48]	; (80029b4 <__NVIC_SetPriority+0x4c>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	0112      	lsls	r2, r2, #4
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	440b      	add	r3, r1
 800298c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002990:	e00a      	b.n	80029a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4908      	ldr	r1, [pc, #32]	; (80029b8 <__NVIC_SetPriority+0x50>)
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	3b04      	subs	r3, #4
 80029a0:	0112      	lsls	r2, r2, #4
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	440b      	add	r3, r1
 80029a6:	761a      	strb	r2, [r3, #24]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000e100 	.word	0xe000e100
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b089      	sub	sp, #36	; 0x24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f1c3 0307 	rsb	r3, r3, #7
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	bf28      	it	cs
 80029da:	2304      	movcs	r3, #4
 80029dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3304      	adds	r3, #4
 80029e2:	2b06      	cmp	r3, #6
 80029e4:	d902      	bls.n	80029ec <NVIC_EncodePriority+0x30>
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3b03      	subs	r3, #3
 80029ea:	e000      	b.n	80029ee <NVIC_EncodePriority+0x32>
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	f04f 32ff 	mov.w	r2, #4294967295
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43da      	mvns	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	401a      	ands	r2, r3
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a04:	f04f 31ff 	mov.w	r1, #4294967295
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0e:	43d9      	mvns	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a14:	4313      	orrs	r3, r2
         );
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3724      	adds	r7, #36	; 0x24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a34:	d301      	bcc.n	8002a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a36:	2301      	movs	r3, #1
 8002a38:	e00f      	b.n	8002a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <SysTick_Config+0x40>)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a42:	210f      	movs	r1, #15
 8002a44:	f04f 30ff 	mov.w	r0, #4294967295
 8002a48:	f7ff ff8e 	bl	8002968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <SysTick_Config+0x40>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <SysTick_Config+0x40>)
 8002a54:	2207      	movs	r2, #7
 8002a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	e000e010 	.word	0xe000e010

08002a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ff29 	bl	80028c8 <__NVIC_SetPriorityGrouping>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a90:	f7ff ff3e 	bl	8002910 <__NVIC_GetPriorityGrouping>
 8002a94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	6978      	ldr	r0, [r7, #20]
 8002a9c:	f7ff ff8e 	bl	80029bc <NVIC_EncodePriority>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff5d 	bl	8002968 <__NVIC_SetPriority>
}
 8002aae:	bf00      	nop
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4603      	mov	r3, r0
 8002abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff31 	bl	800292c <__NVIC_EnableIRQ>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ffa2 	bl	8002a24 <SysTick_Config>
 8002ae0:	4603      	mov	r3, r0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e014      	b.n	8002b26 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	791b      	ldrb	r3, [r3, #4]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d105      	bne.n	8002b12 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f005 f96f 	bl	8007df0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2202      	movs	r2, #2
 8002b16:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	795b      	ldrb	r3, [r3, #5]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_DAC_ConfigChannel+0x1c>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e12a      	b.n	8002da2 <HAL_DAC_ConfigChannel+0x272>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2202      	movs	r2, #2
 8002b56:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d174      	bne.n	8002c4a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002b60:	f7fe ff9a 	bl	8001a98 <HAL_GetTick>
 8002b64:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d134      	bne.n	8002bd6 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b6c:	e011      	b.n	8002b92 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b6e:	f7fe ff93 	bl	8001a98 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d90a      	bls.n	8002b92 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f043 0208 	orr.w	r2, r3, #8
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e107      	b.n	8002da2 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1e6      	bne.n	8002b6e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	f7fe ff85 	bl	8001ab0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	69d2      	ldr	r2, [r2, #28]
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40
 8002bb0:	e01e      	b.n	8002bf0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002bb2:	f7fe ff71 	bl	8001a98 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d90a      	bls.n	8002bd6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f043 0208 	orr.w	r2, r3, #8
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2203      	movs	r2, #3
 8002bd0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e0e5      	b.n	8002da2 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	dbe8      	blt.n	8002bb2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002be0:	2001      	movs	r0, #1
 8002be2:	f7fe ff65 	bl	8001ab0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	69d2      	ldr	r2, [r2, #28]
 8002bee:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	ea02 0103 	and.w	r1, r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	6a1a      	ldr	r2, [r3, #32]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	409a      	lsls	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	21ff      	movs	r1, #255	; 0xff
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	ea02 0103 	and.w	r1, r2, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	409a      	lsls	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d11d      	bne.n	8002c8e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c58:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	221f      	movs	r2, #31
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c94:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69fa      	ldr	r2, [r7, #28]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69fa      	ldr	r2, [r7, #28]
 8002cd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6819      	ldr	r1, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43da      	mvns	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	400a      	ands	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d32:	d104      	bne.n	8002d3e <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d3a:	61fb      	str	r3, [r7, #28]
 8002d3c:	e018      	b.n	8002d70 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d104      	bne.n	8002d50 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	e00f      	b.n	8002d70 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002d50:	f002 f976 	bl	8005040 <HAL_RCC_GetHCLKFreq>
 8002d54:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4a14      	ldr	r2, [pc, #80]	; (8002dac <HAL_DAC_ConfigChannel+0x27c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d904      	bls.n	8002d68 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	e003      	b.n	8002d70 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d6e:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6819      	ldr	r1, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	22c0      	movs	r2, #192	; 0xc0
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43da      	mvns	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	400a      	ands	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3720      	adds	r7, #32
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	04c4b400 	.word	0x04c4b400

08002db0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e08d      	b.n	8002ede <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_DMA_Init+0x138>)
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d80f      	bhi.n	8002dee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4b45      	ldr	r3, [pc, #276]	; (8002eec <HAL_DMA_Init+0x13c>)
 8002dd6:	4413      	add	r3, r2
 8002dd8:	4a45      	ldr	r2, [pc, #276]	; (8002ef0 <HAL_DMA_Init+0x140>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	009a      	lsls	r2, r3, #2
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a42      	ldr	r2, [pc, #264]	; (8002ef4 <HAL_DMA_Init+0x144>)
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40
 8002dec:	e00e      	b.n	8002e0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	4b40      	ldr	r3, [pc, #256]	; (8002ef8 <HAL_DMA_Init+0x148>)
 8002df6:	4413      	add	r3, r2
 8002df8:	4a3d      	ldr	r2, [pc, #244]	; (8002ef0 <HAL_DMA_Init+0x140>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	009a      	lsls	r2, r3, #2
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a3c      	ldr	r2, [pc, #240]	; (8002efc <HAL_DMA_Init+0x14c>)
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f8fe 	bl	8003060 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e6c:	d102      	bne.n	8002e74 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e88:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d010      	beq.n	8002eb4 <HAL_DMA_Init+0x104>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d80c      	bhi.n	8002eb4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f91e 	bl	80030dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	e008      	b.n	8002ec6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40020407 	.word	0x40020407
 8002eec:	bffdfff8 	.word	0xbffdfff8
 8002ef0:	cccccccd 	.word	0xcccccccd
 8002ef4:	40020000 	.word	0x40020000
 8002ef8:	bffdfbf8 	.word	0xbffdfbf8
 8002efc:	40020400 	.word	0x40020400

08002f00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1c:	f003 031c 	and.w	r3, r3, #28
 8002f20:	2204      	movs	r2, #4
 8002f22:	409a      	lsls	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d026      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x7a>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d021      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d107      	bne.n	8002f54 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0204 	bic.w	r2, r2, #4
 8002f52:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f58:	f003 021c 	and.w	r2, r3, #28
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	2104      	movs	r1, #4
 8002f62:	fa01 f202 	lsl.w	r2, r1, r2
 8002f66:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d071      	beq.n	8003054 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002f78:	e06c      	b.n	8003054 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	f003 031c 	and.w	r3, r3, #28
 8002f82:	2202      	movs	r2, #2
 8002f84:	409a      	lsls	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d02e      	beq.n	8002fec <HAL_DMA_IRQHandler+0xec>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d029      	beq.n	8002fec <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10b      	bne.n	8002fbe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 020a 	bic.w	r2, r2, #10
 8002fb4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	f003 021c 	and.w	r2, r3, #28
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	2102      	movs	r1, #2
 8002fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d038      	beq.n	8003054 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002fea:	e033      	b.n	8003054 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff0:	f003 031c 	and.w	r3, r3, #28
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d02a      	beq.n	8003056 <HAL_DMA_IRQHandler+0x156>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d025      	beq.n	8003056 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 020e 	bic.w	r2, r2, #14
 8003018:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f003 021c 	and.w	r2, r3, #28
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	2101      	movs	r1, #1
 8003028:	fa01 f202 	lsl.w	r2, r1, r2
 800302c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003048:	2b00      	cmp	r3, #0
 800304a:	d004      	beq.n	8003056 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003054:	bf00      	nop
 8003056:	bf00      	nop
}
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	4b17      	ldr	r3, [pc, #92]	; (80030cc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003070:	429a      	cmp	r2, r3
 8003072:	d80a      	bhi.n	800308a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003078:	089b      	lsrs	r3, r3, #2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003080:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6493      	str	r3, [r2, #72]	; 0x48
 8003088:	e007      	b.n	800309a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	009a      	lsls	r2, r3, #2
 8003092:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003094:	4413      	add	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	3b08      	subs	r3, #8
 80030a2:	4a0c      	ldr	r2, [pc, #48]	; (80030d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80030b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	2201      	movs	r2, #1
 80030ba:	409a      	lsls	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	40020407 	.word	0x40020407
 80030d0:	4002081c 	.word	0x4002081c
 80030d4:	cccccccd 	.word	0xcccccccd
 80030d8:	40020880 	.word	0x40020880

080030dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4b0b      	ldr	r3, [pc, #44]	; (800311c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	461a      	mov	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a08      	ldr	r2, [pc, #32]	; (8003120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80030fe:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3b01      	subs	r3, #1
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2201      	movs	r2, #1
 800310a:	409a      	lsls	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	1000823f 	.word	0x1000823f
 8003120:	40020940 	.word	0x40020940

08003124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003132:	e166      	b.n	8003402 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	2101      	movs	r1, #1
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	fa01 f303 	lsl.w	r3, r1, r3
 8003140:	4013      	ands	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8158 	beq.w	80033fc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	2b01      	cmp	r3, #1
 8003156:	d005      	beq.n	8003164 <HAL_GPIO_Init+0x40>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d130      	bne.n	80031c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	2203      	movs	r2, #3
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4013      	ands	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800319a:	2201      	movs	r2, #1
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	f003 0201 	and.w	r2, r3, #1
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d017      	beq.n	8003202 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	2203      	movs	r2, #3
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4013      	ands	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d123      	bne.n	8003256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	08da      	lsrs	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3208      	adds	r2, #8
 8003216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800321a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	220f      	movs	r2, #15
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	08da      	lsrs	r2, r3, #3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3208      	adds	r2, #8
 8003250:	6939      	ldr	r1, [r7, #16]
 8003252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	2203      	movs	r2, #3
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 0203 	and.w	r2, r3, #3
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80b2 	beq.w	80033fc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003298:	4b61      	ldr	r3, [pc, #388]	; (8003420 <HAL_GPIO_Init+0x2fc>)
 800329a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329c:	4a60      	ldr	r2, [pc, #384]	; (8003420 <HAL_GPIO_Init+0x2fc>)
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	6613      	str	r3, [r2, #96]	; 0x60
 80032a4:	4b5e      	ldr	r3, [pc, #376]	; (8003420 <HAL_GPIO_Init+0x2fc>)
 80032a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032b0:	4a5c      	ldr	r2, [pc, #368]	; (8003424 <HAL_GPIO_Init+0x300>)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	3302      	adds	r3, #2
 80032b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	220f      	movs	r2, #15
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032da:	d02b      	beq.n	8003334 <HAL_GPIO_Init+0x210>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a52      	ldr	r2, [pc, #328]	; (8003428 <HAL_GPIO_Init+0x304>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d025      	beq.n	8003330 <HAL_GPIO_Init+0x20c>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a51      	ldr	r2, [pc, #324]	; (800342c <HAL_GPIO_Init+0x308>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d01f      	beq.n	800332c <HAL_GPIO_Init+0x208>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a50      	ldr	r2, [pc, #320]	; (8003430 <HAL_GPIO_Init+0x30c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d019      	beq.n	8003328 <HAL_GPIO_Init+0x204>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a4f      	ldr	r2, [pc, #316]	; (8003434 <HAL_GPIO_Init+0x310>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d013      	beq.n	8003324 <HAL_GPIO_Init+0x200>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a4e      	ldr	r2, [pc, #312]	; (8003438 <HAL_GPIO_Init+0x314>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d00d      	beq.n	8003320 <HAL_GPIO_Init+0x1fc>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a4d      	ldr	r2, [pc, #308]	; (800343c <HAL_GPIO_Init+0x318>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d007      	beq.n	800331c <HAL_GPIO_Init+0x1f8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a4c      	ldr	r2, [pc, #304]	; (8003440 <HAL_GPIO_Init+0x31c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d101      	bne.n	8003318 <HAL_GPIO_Init+0x1f4>
 8003314:	2307      	movs	r3, #7
 8003316:	e00e      	b.n	8003336 <HAL_GPIO_Init+0x212>
 8003318:	2308      	movs	r3, #8
 800331a:	e00c      	b.n	8003336 <HAL_GPIO_Init+0x212>
 800331c:	2306      	movs	r3, #6
 800331e:	e00a      	b.n	8003336 <HAL_GPIO_Init+0x212>
 8003320:	2305      	movs	r3, #5
 8003322:	e008      	b.n	8003336 <HAL_GPIO_Init+0x212>
 8003324:	2304      	movs	r3, #4
 8003326:	e006      	b.n	8003336 <HAL_GPIO_Init+0x212>
 8003328:	2303      	movs	r3, #3
 800332a:	e004      	b.n	8003336 <HAL_GPIO_Init+0x212>
 800332c:	2302      	movs	r3, #2
 800332e:	e002      	b.n	8003336 <HAL_GPIO_Init+0x212>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_GPIO_Init+0x212>
 8003334:	2300      	movs	r3, #0
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	f002 0203 	and.w	r2, r2, #3
 800333c:	0092      	lsls	r2, r2, #2
 800333e:	4093      	lsls	r3, r2
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003346:	4937      	ldr	r1, [pc, #220]	; (8003424 <HAL_GPIO_Init+0x300>)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	3302      	adds	r3, #2
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003354:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <HAL_GPIO_Init+0x320>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	43db      	mvns	r3, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003378:	4a32      	ldr	r2, [pc, #200]	; (8003444 <HAL_GPIO_Init+0x320>)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800337e:	4b31      	ldr	r3, [pc, #196]	; (8003444 <HAL_GPIO_Init+0x320>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	43db      	mvns	r3, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4013      	ands	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033a2:	4a28      	ldr	r2, [pc, #160]	; (8003444 <HAL_GPIO_Init+0x320>)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80033a8:	4b26      	ldr	r3, [pc, #152]	; (8003444 <HAL_GPIO_Init+0x320>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	43db      	mvns	r3, r3
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033cc:	4a1d      	ldr	r2, [pc, #116]	; (8003444 <HAL_GPIO_Init+0x320>)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033d2:	4b1c      	ldr	r3, [pc, #112]	; (8003444 <HAL_GPIO_Init+0x320>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	43db      	mvns	r3, r3
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4013      	ands	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033f6:	4a13      	ldr	r2, [pc, #76]	; (8003444 <HAL_GPIO_Init+0x320>)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	3301      	adds	r3, #1
 8003400:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	fa22 f303 	lsr.w	r3, r2, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	f47f ae91 	bne.w	8003134 <HAL_GPIO_Init+0x10>
  }
}
 8003412:	bf00      	nop
 8003414:	bf00      	nop
 8003416:	371c      	adds	r7, #28
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	40021000 	.word	0x40021000
 8003424:	40010000 	.word	0x40010000
 8003428:	48000400 	.word	0x48000400
 800342c:	48000800 	.word	0x48000800
 8003430:	48000c00 	.word	0x48000c00
 8003434:	48001000 	.word	0x48001000
 8003438:	48001400 	.word	0x48001400
 800343c:	48001800 	.word	0x48001800
 8003440:	48001c00 	.word	0x48001c00
 8003444:	40010400 	.word	0x40010400

08003448 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003456:	e0c9      	b.n	80035ec <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003458:	2201      	movs	r2, #1
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	4013      	ands	r3, r2
 8003464:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 80bc 	beq.w	80035e6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800346e:	4a66      	ldr	r2, [pc, #408]	; (8003608 <HAL_GPIO_DeInit+0x1c0>)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	3302      	adds	r3, #2
 8003476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	220f      	movs	r2, #15
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4013      	ands	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003496:	d02b      	beq.n	80034f0 <HAL_GPIO_DeInit+0xa8>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a5c      	ldr	r2, [pc, #368]	; (800360c <HAL_GPIO_DeInit+0x1c4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d025      	beq.n	80034ec <HAL_GPIO_DeInit+0xa4>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a5b      	ldr	r2, [pc, #364]	; (8003610 <HAL_GPIO_DeInit+0x1c8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d01f      	beq.n	80034e8 <HAL_GPIO_DeInit+0xa0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a5a      	ldr	r2, [pc, #360]	; (8003614 <HAL_GPIO_DeInit+0x1cc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d019      	beq.n	80034e4 <HAL_GPIO_DeInit+0x9c>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a59      	ldr	r2, [pc, #356]	; (8003618 <HAL_GPIO_DeInit+0x1d0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d013      	beq.n	80034e0 <HAL_GPIO_DeInit+0x98>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a58      	ldr	r2, [pc, #352]	; (800361c <HAL_GPIO_DeInit+0x1d4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00d      	beq.n	80034dc <HAL_GPIO_DeInit+0x94>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a57      	ldr	r2, [pc, #348]	; (8003620 <HAL_GPIO_DeInit+0x1d8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d007      	beq.n	80034d8 <HAL_GPIO_DeInit+0x90>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a56      	ldr	r2, [pc, #344]	; (8003624 <HAL_GPIO_DeInit+0x1dc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d101      	bne.n	80034d4 <HAL_GPIO_DeInit+0x8c>
 80034d0:	2307      	movs	r3, #7
 80034d2:	e00e      	b.n	80034f2 <HAL_GPIO_DeInit+0xaa>
 80034d4:	2308      	movs	r3, #8
 80034d6:	e00c      	b.n	80034f2 <HAL_GPIO_DeInit+0xaa>
 80034d8:	2306      	movs	r3, #6
 80034da:	e00a      	b.n	80034f2 <HAL_GPIO_DeInit+0xaa>
 80034dc:	2305      	movs	r3, #5
 80034de:	e008      	b.n	80034f2 <HAL_GPIO_DeInit+0xaa>
 80034e0:	2304      	movs	r3, #4
 80034e2:	e006      	b.n	80034f2 <HAL_GPIO_DeInit+0xaa>
 80034e4:	2303      	movs	r3, #3
 80034e6:	e004      	b.n	80034f2 <HAL_GPIO_DeInit+0xaa>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e002      	b.n	80034f2 <HAL_GPIO_DeInit+0xaa>
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <HAL_GPIO_DeInit+0xaa>
 80034f0:	2300      	movs	r3, #0
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	f002 0203 	and.w	r2, r2, #3
 80034f8:	0092      	lsls	r2, r2, #2
 80034fa:	4093      	lsls	r3, r2
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d132      	bne.n	8003568 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003502:	4b49      	ldr	r3, [pc, #292]	; (8003628 <HAL_GPIO_DeInit+0x1e0>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	43db      	mvns	r3, r3
 800350a:	4947      	ldr	r1, [pc, #284]	; (8003628 <HAL_GPIO_DeInit+0x1e0>)
 800350c:	4013      	ands	r3, r2
 800350e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003510:	4b45      	ldr	r3, [pc, #276]	; (8003628 <HAL_GPIO_DeInit+0x1e0>)
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	43db      	mvns	r3, r3
 8003518:	4943      	ldr	r1, [pc, #268]	; (8003628 <HAL_GPIO_DeInit+0x1e0>)
 800351a:	4013      	ands	r3, r2
 800351c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800351e:	4b42      	ldr	r3, [pc, #264]	; (8003628 <HAL_GPIO_DeInit+0x1e0>)
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	43db      	mvns	r3, r3
 8003526:	4940      	ldr	r1, [pc, #256]	; (8003628 <HAL_GPIO_DeInit+0x1e0>)
 8003528:	4013      	ands	r3, r2
 800352a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800352c:	4b3e      	ldr	r3, [pc, #248]	; (8003628 <HAL_GPIO_DeInit+0x1e0>)
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	43db      	mvns	r3, r3
 8003534:	493c      	ldr	r1, [pc, #240]	; (8003628 <HAL_GPIO_DeInit+0x1e0>)
 8003536:	4013      	ands	r3, r2
 8003538:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	220f      	movs	r2, #15
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800354a:	4a2f      	ldr	r2, [pc, #188]	; (8003608 <HAL_GPIO_DeInit+0x1c0>)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	089b      	lsrs	r3, r3, #2
 8003550:	3302      	adds	r3, #2
 8003552:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	43da      	mvns	r2, r3
 800355a:	482b      	ldr	r0, [pc, #172]	; (8003608 <HAL_GPIO_DeInit+0x1c0>)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	089b      	lsrs	r3, r3, #2
 8003560:	400a      	ands	r2, r1
 8003562:	3302      	adds	r3, #2
 8003564:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	2103      	movs	r1, #3
 8003572:	fa01 f303 	lsl.w	r3, r1, r3
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	08da      	lsrs	r2, r3, #3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3208      	adds	r2, #8
 8003584:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	220f      	movs	r2, #15
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43db      	mvns	r3, r3
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	08d2      	lsrs	r2, r2, #3
 800359c:	4019      	ands	r1, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3208      	adds	r2, #8
 80035a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	2103      	movs	r1, #3
 80035b0:	fa01 f303 	lsl.w	r3, r1, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	401a      	ands	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	2101      	movs	r1, #1
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	fa01 f303 	lsl.w	r3, r1, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	401a      	ands	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	2103      	movs	r1, #3
 80035da:	fa01 f303 	lsl.w	r3, r1, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	401a      	ands	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	3301      	adds	r3, #1
 80035ea:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f47f af2f 	bne.w	8003458 <HAL_GPIO_DeInit+0x10>
  }
}
 80035fa:	bf00      	nop
 80035fc:	bf00      	nop
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	40010000 	.word	0x40010000
 800360c:	48000400 	.word	0x48000400
 8003610:	48000800 	.word	0x48000800
 8003614:	48000c00 	.word	0x48000c00
 8003618:	48001000 	.word	0x48001000
 800361c:	48001400 	.word	0x48001400
 8003620:	48001800 	.word	0x48001800
 8003624:	48001c00 	.word	0x48001c00
 8003628:	40010400 	.word	0x40010400

0800362c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	807b      	strh	r3, [r7, #2]
 8003638:	4613      	mov	r3, r2
 800363a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800363c:	787b      	ldrb	r3, [r7, #1]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003642:	887a      	ldrh	r2, [r7, #2]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003648:	e002      	b.n	8003650 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800364a:	887a      	ldrh	r2, [r7, #2]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003666:	4b08      	ldr	r3, [pc, #32]	; (8003688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003668:	695a      	ldr	r2, [r3, #20]
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d006      	beq.n	8003680 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003672:	4a05      	ldr	r2, [pc, #20]	; (8003688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 f806 	bl	800368c <HAL_GPIO_EXTI_Callback>
  }
}
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40010400 	.word	0x40010400

0800368c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e081      	b.n	80037b8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d106      	bne.n	80036ce <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f004 fbff 	bl	8007ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2224      	movs	r2, #36	; 0x24
 80036d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0201 	bic.w	r2, r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003702:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d107      	bne.n	800371c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003718:	609a      	str	r2, [r3, #8]
 800371a:	e006      	b.n	800372a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003728:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d104      	bne.n	800373c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800373a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800374a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800374e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800375e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69d9      	ldr	r1, [r3, #28]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1a      	ldr	r2, [r3, #32]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0201 	orr.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e021      	b.n	8003816 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2224      	movs	r2, #36	; 0x24
 80037d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f004 fbcc 	bl	8007f88 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af02      	add	r7, sp, #8
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	4608      	mov	r0, r1
 800382a:	4611      	mov	r1, r2
 800382c:	461a      	mov	r2, r3
 800382e:	4603      	mov	r3, r0
 8003830:	817b      	strh	r3, [r7, #10]
 8003832:	460b      	mov	r3, r1
 8003834:	813b      	strh	r3, [r7, #8]
 8003836:	4613      	mov	r3, r2
 8003838:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b20      	cmp	r3, #32
 8003844:	f040 80f9 	bne.w	8003a3a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <HAL_I2C_Mem_Write+0x34>
 800384e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003850:	2b00      	cmp	r3, #0
 8003852:	d105      	bne.n	8003860 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800385a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0ed      	b.n	8003a3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_I2C_Mem_Write+0x4e>
 800386a:	2302      	movs	r3, #2
 800386c:	e0e6      	b.n	8003a3c <HAL_I2C_Mem_Write+0x21c>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003876:	f7fe f90f 	bl	8001a98 <HAL_GetTick>
 800387a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	2319      	movs	r3, #25
 8003882:	2201      	movs	r2, #1
 8003884:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 fac3 	bl	8003e14 <I2C_WaitOnFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0d1      	b.n	8003a3c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2221      	movs	r2, #33	; 0x21
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2240      	movs	r2, #64	; 0x40
 80038a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a3a      	ldr	r2, [r7, #32]
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038c0:	88f8      	ldrh	r0, [r7, #6]
 80038c2:	893a      	ldrh	r2, [r7, #8]
 80038c4:	8979      	ldrh	r1, [r7, #10]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	9301      	str	r3, [sp, #4]
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	4603      	mov	r3, r0
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f9d3 	bl	8003c7c <I2C_RequestMemoryWrite>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0a9      	b.n	8003a3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2bff      	cmp	r3, #255	; 0xff
 80038f0:	d90e      	bls.n	8003910 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	22ff      	movs	r2, #255	; 0xff
 80038f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	8979      	ldrh	r1, [r7, #10]
 8003900:	2300      	movs	r3, #0
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 fc2b 	bl	8004164 <I2C_TransferConfig>
 800390e:	e00f      	b.n	8003930 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391e:	b2da      	uxtb	r2, r3
 8003920:	8979      	ldrh	r1, [r7, #10]
 8003922:	2300      	movs	r3, #0
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fc1a 	bl	8004164 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 faad 	bl	8003e94 <I2C_WaitOnTXISFlagUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e07b      	b.n	8003a3c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	781a      	ldrb	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d034      	beq.n	80039e8 <HAL_I2C_Mem_Write+0x1c8>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003982:	2b00      	cmp	r3, #0
 8003984:	d130      	bne.n	80039e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398c:	2200      	movs	r2, #0
 800398e:	2180      	movs	r1, #128	; 0x80
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 fa3f 	bl	8003e14 <I2C_WaitOnFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e04d      	b.n	8003a3c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2bff      	cmp	r3, #255	; 0xff
 80039a8:	d90e      	bls.n	80039c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	22ff      	movs	r2, #255	; 0xff
 80039ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	8979      	ldrh	r1, [r7, #10]
 80039b8:	2300      	movs	r3, #0
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 fbcf 	bl	8004164 <I2C_TransferConfig>
 80039c6:	e00f      	b.n	80039e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	8979      	ldrh	r1, [r7, #10]
 80039da:	2300      	movs	r3, #0
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 fbbe 	bl	8004164 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d19e      	bne.n	8003930 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 fa8c 	bl	8003f14 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e01a      	b.n	8003a3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <HAL_I2C_Mem_Write+0x224>)
 8003a1a:	400b      	ands	r3, r1
 8003a1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	e000      	b.n	8003a3c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003a3a:	2302      	movs	r3, #2
  }
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	fe00e800 	.word	0xfe00e800

08003a48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	4608      	mov	r0, r1
 8003a52:	4611      	mov	r1, r2
 8003a54:	461a      	mov	r2, r3
 8003a56:	4603      	mov	r3, r0
 8003a58:	817b      	strh	r3, [r7, #10]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	813b      	strh	r3, [r7, #8]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	f040 80fd 	bne.w	8003c6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_I2C_Mem_Read+0x34>
 8003a76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d105      	bne.n	8003a88 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0f1      	b.n	8003c6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_I2C_Mem_Read+0x4e>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e0ea      	b.n	8003c6c <HAL_I2C_Mem_Read+0x224>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a9e:	f7fd fffb 	bl	8001a98 <HAL_GetTick>
 8003aa2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	2319      	movs	r3, #25
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f9af 	bl	8003e14 <I2C_WaitOnFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0d5      	b.n	8003c6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2222      	movs	r2, #34	; 0x22
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2240      	movs	r2, #64	; 0x40
 8003acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a3a      	ldr	r2, [r7, #32]
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ae8:	88f8      	ldrh	r0, [r7, #6]
 8003aea:	893a      	ldrh	r2, [r7, #8]
 8003aec:	8979      	ldrh	r1, [r7, #10]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	9301      	str	r3, [sp, #4]
 8003af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	4603      	mov	r3, r0
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f913 	bl	8003d24 <I2C_RequestMemoryRead>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0ad      	b.n	8003c6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2bff      	cmp	r3, #255	; 0xff
 8003b18:	d90e      	bls.n	8003b38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	22ff      	movs	r2, #255	; 0xff
 8003b1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	8979      	ldrh	r1, [r7, #10]
 8003b28:	4b52      	ldr	r3, [pc, #328]	; (8003c74 <HAL_I2C_Mem_Read+0x22c>)
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 fb17 	bl	8004164 <I2C_TransferConfig>
 8003b36:	e00f      	b.n	8003b58 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	8979      	ldrh	r1, [r7, #10]
 8003b4a:	4b4a      	ldr	r3, [pc, #296]	; (8003c74 <HAL_I2C_Mem_Read+0x22c>)
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 fb06 	bl	8004164 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2104      	movs	r1, #4
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 f956 	bl	8003e14 <I2C_WaitOnFlagUntilTimeout>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e07c      	b.n	8003c6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d034      	beq.n	8003c18 <HAL_I2C_Mem_Read+0x1d0>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d130      	bne.n	8003c18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2180      	movs	r1, #128	; 0x80
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 f927 	bl	8003e14 <I2C_WaitOnFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e04d      	b.n	8003c6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2bff      	cmp	r3, #255	; 0xff
 8003bd8:	d90e      	bls.n	8003bf8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	22ff      	movs	r2, #255	; 0xff
 8003bde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	8979      	ldrh	r1, [r7, #10]
 8003be8:	2300      	movs	r3, #0
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 fab7 	bl	8004164 <I2C_TransferConfig>
 8003bf6:	e00f      	b.n	8003c18 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	8979      	ldrh	r1, [r7, #10]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 faa6 	bl	8004164 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d19a      	bne.n	8003b58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f974 	bl	8003f14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e01a      	b.n	8003c6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6859      	ldr	r1, [r3, #4]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_I2C_Mem_Read+0x230>)
 8003c4a:	400b      	ands	r3, r1
 8003c4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	e000      	b.n	8003c6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003c6a:	2302      	movs	r3, #2
  }
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	80002400 	.word	0x80002400
 8003c78:	fe00e800 	.word	0xfe00e800

08003c7c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	4608      	mov	r0, r1
 8003c86:	4611      	mov	r1, r2
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	817b      	strh	r3, [r7, #10]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	813b      	strh	r3, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	8979      	ldrh	r1, [r7, #10]
 8003c9c:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <I2C_RequestMemoryWrite+0xa4>)
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 fa5d 	bl	8004164 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	69b9      	ldr	r1, [r7, #24]
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f8f0 	bl	8003e94 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e02c      	b.n	8003d18 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d105      	bne.n	8003cd0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cc4:	893b      	ldrh	r3, [r7, #8]
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	629a      	str	r2, [r3, #40]	; 0x28
 8003cce:	e015      	b.n	8003cfc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cd0:	893b      	ldrh	r3, [r7, #8]
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	69b9      	ldr	r1, [r7, #24]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f8d6 	bl	8003e94 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e012      	b.n	8003d18 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cf2:	893b      	ldrh	r3, [r7, #8]
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2200      	movs	r2, #0
 8003d04:	2180      	movs	r1, #128	; 0x80
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f884 	bl	8003e14 <I2C_WaitOnFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	80002000 	.word	0x80002000

08003d24 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	4611      	mov	r1, r2
 8003d30:	461a      	mov	r2, r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	817b      	strh	r3, [r7, #10]
 8003d36:	460b      	mov	r3, r1
 8003d38:	813b      	strh	r3, [r7, #8]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d3e:	88fb      	ldrh	r3, [r7, #6]
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	8979      	ldrh	r1, [r7, #10]
 8003d44:	4b20      	ldr	r3, [pc, #128]	; (8003dc8 <I2C_RequestMemoryRead+0xa4>)
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 fa0a 	bl	8004164 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	69b9      	ldr	r1, [r7, #24]
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f89d 	bl	8003e94 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e02c      	b.n	8003dbe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d64:	88fb      	ldrh	r3, [r7, #6]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d105      	bne.n	8003d76 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d6a:	893b      	ldrh	r3, [r7, #8]
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	629a      	str	r2, [r3, #40]	; 0x28
 8003d74:	e015      	b.n	8003da2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d76:	893b      	ldrh	r3, [r7, #8]
 8003d78:	0a1b      	lsrs	r3, r3, #8
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	69b9      	ldr	r1, [r7, #24]
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 f883 	bl	8003e94 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e012      	b.n	8003dbe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d98:	893b      	ldrh	r3, [r7, #8]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	2200      	movs	r2, #0
 8003daa:	2140      	movs	r1, #64	; 0x40
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f831 	bl	8003e14 <I2C_WaitOnFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	80002000 	.word	0x80002000

08003dcc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d103      	bne.n	8003dea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2200      	movs	r2, #0
 8003de8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d007      	beq.n	8003e08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	619a      	str	r2, [r3, #24]
  }
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	4613      	mov	r3, r2
 8003e22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e24:	e022      	b.n	8003e6c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2c:	d01e      	beq.n	8003e6c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2e:	f7fd fe33 	bl	8001a98 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d302      	bcc.n	8003e44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d113      	bne.n	8003e6c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e48:	f043 0220 	orr.w	r2, r3, #32
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e00f      	b.n	8003e8c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	4013      	ands	r3, r2
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	bf0c      	ite	eq
 8003e7c:	2301      	moveq	r3, #1
 8003e7e:	2300      	movne	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	79fb      	ldrb	r3, [r7, #7]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d0cd      	beq.n	8003e26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ea0:	e02c      	b.n	8003efc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 f870 	bl	8003f8c <I2C_IsErrorOccurred>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e02a      	b.n	8003f0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebc:	d01e      	beq.n	8003efc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ebe:	f7fd fdeb 	bl	8001a98 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d302      	bcc.n	8003ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d113      	bne.n	8003efc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed8:	f043 0220 	orr.w	r2, r3, #32
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e007      	b.n	8003f0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d1cb      	bne.n	8003ea2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f20:	e028      	b.n	8003f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	68b9      	ldr	r1, [r7, #8]
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f830 	bl	8003f8c <I2C_IsErrorOccurred>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e026      	b.n	8003f84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f36:	f7fd fdaf 	bl	8001a98 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d302      	bcc.n	8003f4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d113      	bne.n	8003f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f50:	f043 0220 	orr.w	r2, r3, #32
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e007      	b.n	8003f84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	d1cf      	bne.n	8003f22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08a      	sub	sp, #40	; 0x28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	f003 0310 	and.w	r3, r3, #16
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d075      	beq.n	80040a4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2210      	movs	r2, #16
 8003fbe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fc0:	e056      	b.n	8004070 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc8:	d052      	beq.n	8004070 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fca:	f7fd fd65 	bl	8001a98 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d302      	bcc.n	8003fe0 <I2C_IsErrorOccurred+0x54>
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d147      	bne.n	8004070 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ff2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004002:	d12e      	bne.n	8004062 <I2C_IsErrorOccurred+0xd6>
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800400a:	d02a      	beq.n	8004062 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800400c:	7cfb      	ldrb	r3, [r7, #19]
 800400e:	2b20      	cmp	r3, #32
 8004010:	d027      	beq.n	8004062 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004020:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004022:	f7fd fd39 	bl	8001a98 <HAL_GetTick>
 8004026:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004028:	e01b      	b.n	8004062 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800402a:	f7fd fd35 	bl	8001a98 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b19      	cmp	r3, #25
 8004036:	d914      	bls.n	8004062 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403c:	f043 0220 	orr.w	r2, r3, #32
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b20      	cmp	r3, #32
 800406e:	d1dc      	bne.n	800402a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	2b20      	cmp	r3, #32
 800407c:	d003      	beq.n	8004086 <I2C_IsErrorOccurred+0xfa>
 800407e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004082:	2b00      	cmp	r3, #0
 8004084:	d09d      	beq.n	8003fc2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004086:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800408a:	2b00      	cmp	r3, #0
 800408c:	d103      	bne.n	8004096 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2220      	movs	r2, #32
 8004094:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	f043 0304 	orr.w	r3, r3, #4
 800409c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00b      	beq.n	80040ce <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00b      	beq.n	80040f0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	f043 0308 	orr.w	r3, r3, #8
 80040de:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00b      	beq.n	8004112 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	f043 0302 	orr.w	r3, r3, #2
 8004100:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f44f 7200 	mov.w	r2, #512	; 0x200
 800410a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004116:	2b00      	cmp	r3, #0
 8004118:	d01c      	beq.n	8004154 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f7ff fe56 	bl	8003dcc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6859      	ldr	r1, [r3, #4]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <I2C_IsErrorOccurred+0x1d4>)
 800412c:	400b      	ands	r3, r1
 800412e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	431a      	orrs	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004158:	4618      	mov	r0, r3
 800415a:	3728      	adds	r7, #40	; 0x28
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	fe00e800 	.word	0xfe00e800

08004164 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	607b      	str	r3, [r7, #4]
 800416e:	460b      	mov	r3, r1
 8004170:	817b      	strh	r3, [r7, #10]
 8004172:	4613      	mov	r3, r2
 8004174:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004176:	897b      	ldrh	r3, [r7, #10]
 8004178:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800417c:	7a7b      	ldrb	r3, [r7, #9]
 800417e:	041b      	lsls	r3, r3, #16
 8004180:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004184:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	4313      	orrs	r3, r2
 800418e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004192:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	0d5b      	lsrs	r3, r3, #21
 800419e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80041a2:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <I2C_TransferConfig+0x60>)
 80041a4:	430b      	orrs	r3, r1
 80041a6:	43db      	mvns	r3, r3
 80041a8:	ea02 0103 	and.w	r1, r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	03ff63ff 	.word	0x03ff63ff

080041c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d138      	bne.n	8004250 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e032      	b.n	8004252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2224      	movs	r2, #36	; 0x24
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0201 	bic.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800421a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6819      	ldr	r1, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	e000      	b.n	8004252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004250:	2302      	movs	r3, #2
  }
}
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800425e:	b480      	push	{r7}
 8004260:	b085      	sub	sp, #20
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b20      	cmp	r3, #32
 8004272:	d139      	bne.n	80042e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800427e:	2302      	movs	r3, #2
 8004280:	e033      	b.n	80042ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2224      	movs	r2, #36	; 0x24
 800428e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0201 	bic.w	r2, r2, #1
 80042a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	021b      	lsls	r3, r3, #8
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	e000      	b.n	80042ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042e8:	2302      	movs	r3, #2
  }
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
	...

080042f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042fc:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <HAL_PWREx_GetVoltageRange+0x3c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004308:	d102      	bne.n	8004310 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800430a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800430e:	e00b      	b.n	8004328 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004310:	4b08      	ldr	r3, [pc, #32]	; (8004334 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800431e:	d102      	bne.n	8004326 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004324:	e000      	b.n	8004328 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004326:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004328:	4618      	mov	r0, r3
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40007000 	.word	0x40007000

08004338 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d141      	bne.n	80043ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004346:	4b4b      	ldr	r3, [pc, #300]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800434e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004352:	d131      	bne.n	80043b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004354:	4b47      	ldr	r3, [pc, #284]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800435a:	4a46      	ldr	r2, [pc, #280]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800435c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004360:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004364:	4b43      	ldr	r3, [pc, #268]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800436c:	4a41      	ldr	r2, [pc, #260]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800436e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004372:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004374:	4b40      	ldr	r3, [pc, #256]	; (8004478 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2232      	movs	r2, #50	; 0x32
 800437a:	fb02 f303 	mul.w	r3, r2, r3
 800437e:	4a3f      	ldr	r2, [pc, #252]	; (800447c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	0c9b      	lsrs	r3, r3, #18
 8004386:	3301      	adds	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800438a:	e002      	b.n	8004392 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	3b01      	subs	r3, #1
 8004390:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004392:	4b38      	ldr	r3, [pc, #224]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800439a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439e:	d102      	bne.n	80043a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1f2      	bne.n	800438c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043a6:	4b33      	ldr	r3, [pc, #204]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b2:	d158      	bne.n	8004466 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e057      	b.n	8004468 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043b8:	4b2e      	ldr	r3, [pc, #184]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043be:	4a2d      	ldr	r2, [pc, #180]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043c8:	e04d      	b.n	8004466 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043d0:	d141      	bne.n	8004456 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043d2:	4b28      	ldr	r3, [pc, #160]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043de:	d131      	bne.n	8004444 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043e0:	4b24      	ldr	r3, [pc, #144]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043e6:	4a23      	ldr	r2, [pc, #140]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043f0:	4b20      	ldr	r3, [pc, #128]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043f8:	4a1e      	ldr	r2, [pc, #120]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004400:	4b1d      	ldr	r3, [pc, #116]	; (8004478 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2232      	movs	r2, #50	; 0x32
 8004406:	fb02 f303 	mul.w	r3, r2, r3
 800440a:	4a1c      	ldr	r2, [pc, #112]	; (800447c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800440c:	fba2 2303 	umull	r2, r3, r2, r3
 8004410:	0c9b      	lsrs	r3, r3, #18
 8004412:	3301      	adds	r3, #1
 8004414:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004416:	e002      	b.n	800441e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3b01      	subs	r3, #1
 800441c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800441e:	4b15      	ldr	r3, [pc, #84]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800442a:	d102      	bne.n	8004432 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f2      	bne.n	8004418 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004432:	4b10      	ldr	r3, [pc, #64]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443e:	d112      	bne.n	8004466 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e011      	b.n	8004468 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004444:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800444a:	4a0a      	ldr	r2, [pc, #40]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800444c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004450:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004454:	e007      	b.n	8004466 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004456:	4b07      	ldr	r3, [pc, #28]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800445e:	4a05      	ldr	r2, [pc, #20]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004460:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004464:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	40007000 	.word	0x40007000
 8004478:	200000cc 	.word	0x200000cc
 800447c:	431bde83 	.word	0x431bde83

08004480 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d102      	bne.n	8004494 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	f000 bc08 	b.w	8004ca4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004494:	4b96      	ldr	r3, [pc, #600]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 030c 	and.w	r3, r3, #12
 800449c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800449e:	4b94      	ldr	r3, [pc, #592]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80e4 	beq.w	800467e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d007      	beq.n	80044cc <HAL_RCC_OscConfig+0x4c>
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2b0c      	cmp	r3, #12
 80044c0:	f040 808b 	bne.w	80045da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	f040 8087 	bne.w	80045da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044cc:	4b88      	ldr	r3, [pc, #544]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_RCC_OscConfig+0x64>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e3df      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1a      	ldr	r2, [r3, #32]
 80044e8:	4b81      	ldr	r3, [pc, #516]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d004      	beq.n	80044fe <HAL_RCC_OscConfig+0x7e>
 80044f4:	4b7e      	ldr	r3, [pc, #504]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044fc:	e005      	b.n	800450a <HAL_RCC_OscConfig+0x8a>
 80044fe:	4b7c      	ldr	r3, [pc, #496]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 8004500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004504:	091b      	lsrs	r3, r3, #4
 8004506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800450a:	4293      	cmp	r3, r2
 800450c:	d223      	bcs.n	8004556 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fdcc 	bl	80050b0 <RCC_SetFlashLatencyFromMSIRange>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e3c0      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004522:	4b73      	ldr	r3, [pc, #460]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a72      	ldr	r2, [pc, #456]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 8004528:	f043 0308 	orr.w	r3, r3, #8
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	4b70      	ldr	r3, [pc, #448]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	496d      	ldr	r1, [pc, #436]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 800453c:	4313      	orrs	r3, r2
 800453e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004540:	4b6b      	ldr	r3, [pc, #428]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	4968      	ldr	r1, [pc, #416]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 8004550:	4313      	orrs	r3, r2
 8004552:	604b      	str	r3, [r1, #4]
 8004554:	e025      	b.n	80045a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004556:	4b66      	ldr	r3, [pc, #408]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a65      	ldr	r2, [pc, #404]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 800455c:	f043 0308 	orr.w	r3, r3, #8
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	4b63      	ldr	r3, [pc, #396]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	4960      	ldr	r1, [pc, #384]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 8004570:	4313      	orrs	r3, r2
 8004572:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004574:	4b5e      	ldr	r3, [pc, #376]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	021b      	lsls	r3, r3, #8
 8004582:	495b      	ldr	r1, [pc, #364]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 8004584:	4313      	orrs	r3, r2
 8004586:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fd8c 	bl	80050b0 <RCC_SetFlashLatencyFromMSIRange>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e380      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045a2:	f000 fcc1 	bl	8004f28 <HAL_RCC_GetSysClockFreq>
 80045a6:	4602      	mov	r2, r0
 80045a8:	4b51      	ldr	r3, [pc, #324]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	4950      	ldr	r1, [pc, #320]	; (80046f4 <HAL_RCC_OscConfig+0x274>)
 80045b4:	5ccb      	ldrb	r3, [r1, r3]
 80045b6:	f003 031f 	and.w	r3, r3, #31
 80045ba:	fa22 f303 	lsr.w	r3, r2, r3
 80045be:	4a4e      	ldr	r2, [pc, #312]	; (80046f8 <HAL_RCC_OscConfig+0x278>)
 80045c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045c2:	4b4e      	ldr	r3, [pc, #312]	; (80046fc <HAL_RCC_OscConfig+0x27c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fd fa16 	bl	80019f8 <HAL_InitTick>
 80045cc:	4603      	mov	r3, r0
 80045ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d052      	beq.n	800467c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
 80045d8:	e364      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d032      	beq.n	8004648 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045e2:	4b43      	ldr	r3, [pc, #268]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a42      	ldr	r2, [pc, #264]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 80045e8:	f043 0301 	orr.w	r3, r3, #1
 80045ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045ee:	f7fd fa53 	bl	8001a98 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045f6:	f7fd fa4f 	bl	8001a98 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e34d      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004608:	4b39      	ldr	r3, [pc, #228]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0f0      	beq.n	80045f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004614:	4b36      	ldr	r3, [pc, #216]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a35      	ldr	r2, [pc, #212]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 800461a:	f043 0308 	orr.w	r3, r3, #8
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	4b33      	ldr	r3, [pc, #204]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	4930      	ldr	r1, [pc, #192]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 800462e:	4313      	orrs	r3, r2
 8004630:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004632:	4b2f      	ldr	r3, [pc, #188]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	021b      	lsls	r3, r3, #8
 8004640:	492b      	ldr	r1, [pc, #172]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 8004642:	4313      	orrs	r3, r2
 8004644:	604b      	str	r3, [r1, #4]
 8004646:	e01a      	b.n	800467e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004648:	4b29      	ldr	r3, [pc, #164]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a28      	ldr	r2, [pc, #160]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 800464e:	f023 0301 	bic.w	r3, r3, #1
 8004652:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004654:	f7fd fa20 	bl	8001a98 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800465c:	f7fd fa1c 	bl	8001a98 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e31a      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800466e:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x1dc>
 800467a:	e000      	b.n	800467e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800467c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d073      	beq.n	8004772 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b08      	cmp	r3, #8
 800468e:	d005      	beq.n	800469c <HAL_RCC_OscConfig+0x21c>
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	2b0c      	cmp	r3, #12
 8004694:	d10e      	bne.n	80046b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b03      	cmp	r3, #3
 800469a:	d10b      	bne.n	80046b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800469c:	4b14      	ldr	r3, [pc, #80]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d063      	beq.n	8004770 <HAL_RCC_OscConfig+0x2f0>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d15f      	bne.n	8004770 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e2f7      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046bc:	d106      	bne.n	80046cc <HAL_RCC_OscConfig+0x24c>
 80046be:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a0b      	ldr	r2, [pc, #44]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 80046c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e025      	b.n	8004718 <HAL_RCC_OscConfig+0x298>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046d4:	d114      	bne.n	8004700 <HAL_RCC_OscConfig+0x280>
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a05      	ldr	r2, [pc, #20]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 80046dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	4b03      	ldr	r3, [pc, #12]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a02      	ldr	r2, [pc, #8]	; (80046f0 <HAL_RCC_OscConfig+0x270>)
 80046e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	e013      	b.n	8004718 <HAL_RCC_OscConfig+0x298>
 80046f0:	40021000 	.word	0x40021000
 80046f4:	0800b018 	.word	0x0800b018
 80046f8:	200000cc 	.word	0x200000cc
 80046fc:	200000c4 	.word	0x200000c4
 8004700:	4ba0      	ldr	r3, [pc, #640]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a9f      	ldr	r2, [pc, #636]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 8004706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	4b9d      	ldr	r3, [pc, #628]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a9c      	ldr	r2, [pc, #624]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 8004712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d013      	beq.n	8004748 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004720:	f7fd f9ba 	bl	8001a98 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004728:	f7fd f9b6 	bl	8001a98 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b64      	cmp	r3, #100	; 0x64
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e2b4      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800473a:	4b92      	ldr	r3, [pc, #584]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0f0      	beq.n	8004728 <HAL_RCC_OscConfig+0x2a8>
 8004746:	e014      	b.n	8004772 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004748:	f7fd f9a6 	bl	8001a98 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004750:	f7fd f9a2 	bl	8001a98 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b64      	cmp	r3, #100	; 0x64
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e2a0      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004762:	4b88      	ldr	r3, [pc, #544]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f0      	bne.n	8004750 <HAL_RCC_OscConfig+0x2d0>
 800476e:	e000      	b.n	8004772 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d060      	beq.n	8004840 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	2b04      	cmp	r3, #4
 8004782:	d005      	beq.n	8004790 <HAL_RCC_OscConfig+0x310>
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2b0c      	cmp	r3, #12
 8004788:	d119      	bne.n	80047be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b02      	cmp	r3, #2
 800478e:	d116      	bne.n	80047be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004790:	4b7c      	ldr	r3, [pc, #496]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <HAL_RCC_OscConfig+0x328>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e27d      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a8:	4b76      	ldr	r3, [pc, #472]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	061b      	lsls	r3, r3, #24
 80047b6:	4973      	ldr	r1, [pc, #460]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047bc:	e040      	b.n	8004840 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d023      	beq.n	800480e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047c6:	4b6f      	ldr	r3, [pc, #444]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a6e      	ldr	r2, [pc, #440]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 80047cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d2:	f7fd f961 	bl	8001a98 <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047da:	f7fd f95d 	bl	8001a98 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e25b      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047ec:	4b65      	ldr	r3, [pc, #404]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0f0      	beq.n	80047da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f8:	4b62      	ldr	r3, [pc, #392]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	061b      	lsls	r3, r3, #24
 8004806:	495f      	ldr	r1, [pc, #380]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 8004808:	4313      	orrs	r3, r2
 800480a:	604b      	str	r3, [r1, #4]
 800480c:	e018      	b.n	8004840 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800480e:	4b5d      	ldr	r3, [pc, #372]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a5c      	ldr	r2, [pc, #368]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 8004814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481a:	f7fd f93d 	bl	8001a98 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004822:	f7fd f939 	bl	8001a98 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e237      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004834:	4b53      	ldr	r3, [pc, #332]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1f0      	bne.n	8004822 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b00      	cmp	r3, #0
 800484a:	d03c      	beq.n	80048c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01c      	beq.n	800488e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004854:	4b4b      	ldr	r3, [pc, #300]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 8004856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800485a:	4a4a      	ldr	r2, [pc, #296]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fd f918 	bl	8001a98 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800486c:	f7fd f914 	bl	8001a98 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e212      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800487e:	4b41      	ldr	r3, [pc, #260]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 8004880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0ef      	beq.n	800486c <HAL_RCC_OscConfig+0x3ec>
 800488c:	e01b      	b.n	80048c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800488e:	4b3d      	ldr	r3, [pc, #244]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 8004890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004894:	4a3b      	ldr	r2, [pc, #236]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 8004896:	f023 0301 	bic.w	r3, r3, #1
 800489a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489e:	f7fd f8fb 	bl	8001a98 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a6:	f7fd f8f7 	bl	8001a98 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e1f5      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048b8:	4b32      	ldr	r3, [pc, #200]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 80048ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1ef      	bne.n	80048a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 80a6 	beq.w	8004a20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d4:	2300      	movs	r3, #0
 80048d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048d8:	4b2a      	ldr	r3, [pc, #168]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 80048da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10d      	bne.n	8004900 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e4:	4b27      	ldr	r3, [pc, #156]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 80048e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e8:	4a26      	ldr	r2, [pc, #152]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 80048ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ee:	6593      	str	r3, [r2, #88]	; 0x58
 80048f0:	4b24      	ldr	r3, [pc, #144]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 80048f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048fc:	2301      	movs	r3, #1
 80048fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004900:	4b21      	ldr	r3, [pc, #132]	; (8004988 <HAL_RCC_OscConfig+0x508>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004908:	2b00      	cmp	r3, #0
 800490a:	d118      	bne.n	800493e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800490c:	4b1e      	ldr	r3, [pc, #120]	; (8004988 <HAL_RCC_OscConfig+0x508>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1d      	ldr	r2, [pc, #116]	; (8004988 <HAL_RCC_OscConfig+0x508>)
 8004912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004916:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004918:	f7fd f8be 	bl	8001a98 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004920:	f7fd f8ba 	bl	8001a98 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e1b8      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004932:	4b15      	ldr	r3, [pc, #84]	; (8004988 <HAL_RCC_OscConfig+0x508>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f0      	beq.n	8004920 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d108      	bne.n	8004958 <HAL_RCC_OscConfig+0x4d8>
 8004946:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 8004948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494c:	4a0d      	ldr	r2, [pc, #52]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004956:	e029      	b.n	80049ac <HAL_RCC_OscConfig+0x52c>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	2b05      	cmp	r3, #5
 800495e:	d115      	bne.n	800498c <HAL_RCC_OscConfig+0x50c>
 8004960:	4b08      	ldr	r3, [pc, #32]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004966:	4a07      	ldr	r2, [pc, #28]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 8004968:	f043 0304 	orr.w	r3, r3, #4
 800496c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004970:	4b04      	ldr	r3, [pc, #16]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004976:	4a03      	ldr	r2, [pc, #12]	; (8004984 <HAL_RCC_OscConfig+0x504>)
 8004978:	f043 0301 	orr.w	r3, r3, #1
 800497c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004980:	e014      	b.n	80049ac <HAL_RCC_OscConfig+0x52c>
 8004982:	bf00      	nop
 8004984:	40021000 	.word	0x40021000
 8004988:	40007000 	.word	0x40007000
 800498c:	4b9d      	ldr	r3, [pc, #628]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004992:	4a9c      	ldr	r2, [pc, #624]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004994:	f023 0301 	bic.w	r3, r3, #1
 8004998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800499c:	4b99      	ldr	r3, [pc, #612]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a2:	4a98      	ldr	r2, [pc, #608]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 80049a4:	f023 0304 	bic.w	r3, r3, #4
 80049a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d016      	beq.n	80049e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b4:	f7fd f870 	bl	8001a98 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ba:	e00a      	b.n	80049d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049bc:	f7fd f86c 	bl	8001a98 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e168      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049d2:	4b8c      	ldr	r3, [pc, #560]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0ed      	beq.n	80049bc <HAL_RCC_OscConfig+0x53c>
 80049e0:	e015      	b.n	8004a0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e2:	f7fd f859 	bl	8001a98 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049e8:	e00a      	b.n	8004a00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ea:	f7fd f855 	bl	8001a98 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e151      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a00:	4b80      	ldr	r3, [pc, #512]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1ed      	bne.n	80049ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a0e:	7ffb      	ldrb	r3, [r7, #31]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d105      	bne.n	8004a20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a14:	4b7b      	ldr	r3, [pc, #492]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a18:	4a7a      	ldr	r2, [pc, #488]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d03c      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01c      	beq.n	8004a6e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a34:	4b73      	ldr	r3, [pc, #460]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a3a:	4a72      	ldr	r2, [pc, #456]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a44:	f7fd f828 	bl	8001a98 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a4c:	f7fd f824 	bl	8001a98 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e122      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a5e:	4b69      	ldr	r3, [pc, #420]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004a60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0ef      	beq.n	8004a4c <HAL_RCC_OscConfig+0x5cc>
 8004a6c:	e01b      	b.n	8004aa6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a6e:	4b65      	ldr	r3, [pc, #404]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004a70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a74:	4a63      	ldr	r2, [pc, #396]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004a76:	f023 0301 	bic.w	r3, r3, #1
 8004a7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7e:	f7fd f80b 	bl	8001a98 <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a84:	e008      	b.n	8004a98 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a86:	f7fd f807 	bl	8001a98 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e105      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a98:	4b5a      	ldr	r3, [pc, #360]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004a9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1ef      	bne.n	8004a86 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 80f9 	beq.w	8004ca2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	f040 80cf 	bne.w	8004c58 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004aba:	4b52      	ldr	r3, [pc, #328]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f003 0203 	and.w	r2, r3, #3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d12c      	bne.n	8004b28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d123      	bne.n	8004b28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d11b      	bne.n	8004b28 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d113      	bne.n	8004b28 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0a:	085b      	lsrs	r3, r3, #1
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d109      	bne.n	8004b28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	085b      	lsrs	r3, r3, #1
 8004b20:	3b01      	subs	r3, #1
 8004b22:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d071      	beq.n	8004c0c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b0c      	cmp	r3, #12
 8004b2c:	d068      	beq.n	8004c00 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b2e:	4b35      	ldr	r3, [pc, #212]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d105      	bne.n	8004b46 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b3a:	4b32      	ldr	r3, [pc, #200]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e0ac      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b4a:	4b2e      	ldr	r3, [pc, #184]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a2d      	ldr	r2, [pc, #180]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004b50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b54:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b56:	f7fc ff9f 	bl	8001a98 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b5e:	f7fc ff9b 	bl	8001a98 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e099      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b70:	4b24      	ldr	r3, [pc, #144]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1f0      	bne.n	8004b5e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b7c:	4b21      	ldr	r3, [pc, #132]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	4b21      	ldr	r3, [pc, #132]	; (8004c08 <HAL_RCC_OscConfig+0x788>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b8c:	3a01      	subs	r2, #1
 8004b8e:	0112      	lsls	r2, r2, #4
 8004b90:	4311      	orrs	r1, r2
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b96:	0212      	lsls	r2, r2, #8
 8004b98:	4311      	orrs	r1, r2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b9e:	0852      	lsrs	r2, r2, #1
 8004ba0:	3a01      	subs	r2, #1
 8004ba2:	0552      	lsls	r2, r2, #21
 8004ba4:	4311      	orrs	r1, r2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004baa:	0852      	lsrs	r2, r2, #1
 8004bac:	3a01      	subs	r2, #1
 8004bae:	0652      	lsls	r2, r2, #25
 8004bb0:	4311      	orrs	r1, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bb6:	06d2      	lsls	r2, r2, #27
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	4912      	ldr	r1, [pc, #72]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004bc0:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a0f      	ldr	r2, [pc, #60]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bcc:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	4a0c      	ldr	r2, [pc, #48]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bd8:	f7fc ff5e 	bl	8001a98 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be0:	f7fc ff5a 	bl	8001a98 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e058      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf2:	4b04      	ldr	r3, [pc, #16]	; (8004c04 <HAL_RCC_OscConfig+0x784>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0f0      	beq.n	8004be0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bfe:	e050      	b.n	8004ca2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e04f      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
 8004c04:	40021000 	.word	0x40021000
 8004c08:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0c:	4b27      	ldr	r3, [pc, #156]	; (8004cac <HAL_RCC_OscConfig+0x82c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d144      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c18:	4b24      	ldr	r3, [pc, #144]	; (8004cac <HAL_RCC_OscConfig+0x82c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a23      	ldr	r2, [pc, #140]	; (8004cac <HAL_RCC_OscConfig+0x82c>)
 8004c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c24:	4b21      	ldr	r3, [pc, #132]	; (8004cac <HAL_RCC_OscConfig+0x82c>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	4a20      	ldr	r2, [pc, #128]	; (8004cac <HAL_RCC_OscConfig+0x82c>)
 8004c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c30:	f7fc ff32 	bl	8001a98 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c38:	f7fc ff2e 	bl	8001a98 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e02c      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c4a:	4b18      	ldr	r3, [pc, #96]	; (8004cac <HAL_RCC_OscConfig+0x82c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f0      	beq.n	8004c38 <HAL_RCC_OscConfig+0x7b8>
 8004c56:	e024      	b.n	8004ca2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	2b0c      	cmp	r3, #12
 8004c5c:	d01f      	beq.n	8004c9e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5e:	4b13      	ldr	r3, [pc, #76]	; (8004cac <HAL_RCC_OscConfig+0x82c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a12      	ldr	r2, [pc, #72]	; (8004cac <HAL_RCC_OscConfig+0x82c>)
 8004c64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6a:	f7fc ff15 	bl	8001a98 <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c72:	f7fc ff11 	bl	8001a98 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e00f      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c84:	4b09      	ldr	r3, [pc, #36]	; (8004cac <HAL_RCC_OscConfig+0x82c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1f0      	bne.n	8004c72 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c90:	4b06      	ldr	r3, [pc, #24]	; (8004cac <HAL_RCC_OscConfig+0x82c>)
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	4905      	ldr	r1, [pc, #20]	; (8004cac <HAL_RCC_OscConfig+0x82c>)
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <HAL_RCC_OscConfig+0x830>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	60cb      	str	r3, [r1, #12]
 8004c9c:	e001      	b.n	8004ca2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3720      	adds	r7, #32
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	feeefffc 	.word	0xfeeefffc

08004cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e11d      	b.n	8004f08 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ccc:	4b90      	ldr	r3, [pc, #576]	; (8004f10 <HAL_RCC_ClockConfig+0x25c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d910      	bls.n	8004cfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cda:	4b8d      	ldr	r3, [pc, #564]	; (8004f10 <HAL_RCC_ClockConfig+0x25c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f023 020f 	bic.w	r2, r3, #15
 8004ce2:	498b      	ldr	r1, [pc, #556]	; (8004f10 <HAL_RCC_ClockConfig+0x25c>)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cea:	4b89      	ldr	r3, [pc, #548]	; (8004f10 <HAL_RCC_ClockConfig+0x25c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e105      	b.n	8004f08 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d010      	beq.n	8004d2a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	4b81      	ldr	r3, [pc, #516]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d908      	bls.n	8004d2a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d18:	4b7e      	ldr	r3, [pc, #504]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	497b      	ldr	r1, [pc, #492]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d079      	beq.n	8004e2a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d11e      	bne.n	8004d7c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3e:	4b75      	ldr	r3, [pc, #468]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e0dc      	b.n	8004f08 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004d4e:	f000 fa09 	bl	8005164 <RCC_GetSysClockFreqFromPLLSource>
 8004d52:	4603      	mov	r3, r0
 8004d54:	4a70      	ldr	r2, [pc, #448]	; (8004f18 <HAL_RCC_ClockConfig+0x264>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d946      	bls.n	8004de8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004d5a:	4b6e      	ldr	r3, [pc, #440]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d140      	bne.n	8004de8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d66:	4b6b      	ldr	r3, [pc, #428]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d6e:	4a69      	ldr	r2, [pc, #420]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d76:	2380      	movs	r3, #128	; 0x80
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	e035      	b.n	8004de8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d107      	bne.n	8004d94 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d84:	4b63      	ldr	r3, [pc, #396]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d115      	bne.n	8004dbc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0b9      	b.n	8004f08 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d107      	bne.n	8004dac <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d9c:	4b5d      	ldr	r3, [pc, #372]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d109      	bne.n	8004dbc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e0ad      	b.n	8004f08 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dac:	4b59      	ldr	r3, [pc, #356]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e0a5      	b.n	8004f08 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004dbc:	f000 f8b4 	bl	8004f28 <HAL_RCC_GetSysClockFreq>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4a55      	ldr	r2, [pc, #340]	; (8004f18 <HAL_RCC_ClockConfig+0x264>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d90f      	bls.n	8004de8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004dc8:	4b52      	ldr	r3, [pc, #328]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d109      	bne.n	8004de8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004dd4:	4b4f      	ldr	r3, [pc, #316]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ddc:	4a4d      	ldr	r2, [pc, #308]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004de8:	4b4a      	ldr	r3, [pc, #296]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f023 0203 	bic.w	r2, r3, #3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	4947      	ldr	r1, [pc, #284]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dfa:	f7fc fe4d 	bl	8001a98 <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e00:	e00a      	b.n	8004e18 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e02:	f7fc fe49 	bl	8001a98 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e077      	b.n	8004f08 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e18:	4b3e      	ldr	r3, [pc, #248]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 020c 	and.w	r2, r3, #12
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d1eb      	bne.n	8004e02 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2b80      	cmp	r3, #128	; 0x80
 8004e2e:	d105      	bne.n	8004e3c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e30:	4b38      	ldr	r3, [pc, #224]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	4a37      	ldr	r2, [pc, #220]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004e36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e3a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d010      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	4b31      	ldr	r3, [pc, #196]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d208      	bcs.n	8004e6a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e58:	4b2e      	ldr	r3, [pc, #184]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	492b      	ldr	r1, [pc, #172]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e6a:	4b29      	ldr	r3, [pc, #164]	; (8004f10 <HAL_RCC_ClockConfig+0x25c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d210      	bcs.n	8004e9a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e78:	4b25      	ldr	r3, [pc, #148]	; (8004f10 <HAL_RCC_ClockConfig+0x25c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f023 020f 	bic.w	r2, r3, #15
 8004e80:	4923      	ldr	r1, [pc, #140]	; (8004f10 <HAL_RCC_ClockConfig+0x25c>)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e88:	4b21      	ldr	r3, [pc, #132]	; (8004f10 <HAL_RCC_ClockConfig+0x25c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 030f 	and.w	r3, r3, #15
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d001      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e036      	b.n	8004f08 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d008      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ea6:	4b1b      	ldr	r3, [pc, #108]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	4918      	ldr	r1, [pc, #96]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d009      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ec4:	4b13      	ldr	r3, [pc, #76]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	4910      	ldr	r1, [pc, #64]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ed8:	f000 f826 	bl	8004f28 <HAL_RCC_GetSysClockFreq>
 8004edc:	4602      	mov	r2, r0
 8004ede:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <HAL_RCC_ClockConfig+0x260>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	091b      	lsrs	r3, r3, #4
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	490c      	ldr	r1, [pc, #48]	; (8004f1c <HAL_RCC_ClockConfig+0x268>)
 8004eea:	5ccb      	ldrb	r3, [r1, r3]
 8004eec:	f003 031f 	and.w	r3, r3, #31
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef4:	4a0a      	ldr	r2, [pc, #40]	; (8004f20 <HAL_RCC_ClockConfig+0x26c>)
 8004ef6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <HAL_RCC_ClockConfig+0x270>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7fc fd7b 	bl	80019f8 <HAL_InitTick>
 8004f02:	4603      	mov	r3, r0
 8004f04:	73fb      	strb	r3, [r7, #15]

  return status;
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40022000 	.word	0x40022000
 8004f14:	40021000 	.word	0x40021000
 8004f18:	04c4b400 	.word	0x04c4b400
 8004f1c:	0800b018 	.word	0x0800b018
 8004f20:	200000cc 	.word	0x200000cc
 8004f24:	200000c4 	.word	0x200000c4

08004f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b089      	sub	sp, #36	; 0x24
 8004f2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
 8004f32:	2300      	movs	r3, #0
 8004f34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f36:	4b3e      	ldr	r3, [pc, #248]	; (8005030 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 030c 	and.w	r3, r3, #12
 8004f3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f40:	4b3b      	ldr	r3, [pc, #236]	; (8005030 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d005      	beq.n	8004f5c <HAL_RCC_GetSysClockFreq+0x34>
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	2b0c      	cmp	r3, #12
 8004f54:	d121      	bne.n	8004f9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d11e      	bne.n	8004f9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f5c:	4b34      	ldr	r3, [pc, #208]	; (8005030 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0308 	and.w	r3, r3, #8
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d107      	bne.n	8004f78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f68:	4b31      	ldr	r3, [pc, #196]	; (8005030 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f6e:	0a1b      	lsrs	r3, r3, #8
 8004f70:	f003 030f 	and.w	r3, r3, #15
 8004f74:	61fb      	str	r3, [r7, #28]
 8004f76:	e005      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f78:	4b2d      	ldr	r3, [pc, #180]	; (8005030 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	091b      	lsrs	r3, r3, #4
 8004f7e:	f003 030f 	and.w	r3, r3, #15
 8004f82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f84:	4a2b      	ldr	r2, [pc, #172]	; (8005034 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10d      	bne.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f98:	e00a      	b.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d102      	bne.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fa0:	4b25      	ldr	r3, [pc, #148]	; (8005038 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fa2:	61bb      	str	r3, [r7, #24]
 8004fa4:	e004      	b.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d101      	bne.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fac:	4b23      	ldr	r3, [pc, #140]	; (800503c <HAL_RCC_GetSysClockFreq+0x114>)
 8004fae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2b0c      	cmp	r3, #12
 8004fb4:	d134      	bne.n	8005020 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fb6:	4b1e      	ldr	r3, [pc, #120]	; (8005030 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d003      	beq.n	8004fce <HAL_RCC_GetSysClockFreq+0xa6>
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d003      	beq.n	8004fd4 <HAL_RCC_GetSysClockFreq+0xac>
 8004fcc:	e005      	b.n	8004fda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004fce:	4b1a      	ldr	r3, [pc, #104]	; (8005038 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fd0:	617b      	str	r3, [r7, #20]
      break;
 8004fd2:	e005      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004fd4:	4b19      	ldr	r3, [pc, #100]	; (800503c <HAL_RCC_GetSysClockFreq+0x114>)
 8004fd6:	617b      	str	r3, [r7, #20]
      break;
 8004fd8:	e002      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	617b      	str	r3, [r7, #20]
      break;
 8004fde:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fe0:	4b13      	ldr	r3, [pc, #76]	; (8005030 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	091b      	lsrs	r3, r3, #4
 8004fe6:	f003 030f 	and.w	r3, r3, #15
 8004fea:	3301      	adds	r3, #1
 8004fec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004fee:	4b10      	ldr	r3, [pc, #64]	; (8005030 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	0a1b      	lsrs	r3, r3, #8
 8004ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	fb03 f202 	mul.w	r2, r3, r2
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	fbb2 f3f3 	udiv	r3, r2, r3
 8005004:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005006:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <HAL_RCC_GetSysClockFreq+0x108>)
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	0e5b      	lsrs	r3, r3, #25
 800500c:	f003 0303 	and.w	r3, r3, #3
 8005010:	3301      	adds	r3, #1
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	fbb2 f3f3 	udiv	r3, r2, r3
 800501e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005020:	69bb      	ldr	r3, [r7, #24]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3724      	adds	r7, #36	; 0x24
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40021000 	.word	0x40021000
 8005034:	0800b030 	.word	0x0800b030
 8005038:	00f42400 	.word	0x00f42400
 800503c:	007a1200 	.word	0x007a1200

08005040 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005044:	4b03      	ldr	r3, [pc, #12]	; (8005054 <HAL_RCC_GetHCLKFreq+0x14>)
 8005046:	681b      	ldr	r3, [r3, #0]
}
 8005048:	4618      	mov	r0, r3
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	200000cc 	.word	0x200000cc

08005058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800505c:	f7ff fff0 	bl	8005040 <HAL_RCC_GetHCLKFreq>
 8005060:	4602      	mov	r2, r0
 8005062:	4b06      	ldr	r3, [pc, #24]	; (800507c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	0a1b      	lsrs	r3, r3, #8
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	4904      	ldr	r1, [pc, #16]	; (8005080 <HAL_RCC_GetPCLK1Freq+0x28>)
 800506e:	5ccb      	ldrb	r3, [r1, r3]
 8005070:	f003 031f 	and.w	r3, r3, #31
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005078:	4618      	mov	r0, r3
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40021000 	.word	0x40021000
 8005080:	0800b028 	.word	0x0800b028

08005084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005088:	f7ff ffda 	bl	8005040 <HAL_RCC_GetHCLKFreq>
 800508c:	4602      	mov	r2, r0
 800508e:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	0adb      	lsrs	r3, r3, #11
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	4904      	ldr	r1, [pc, #16]	; (80050ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800509a:	5ccb      	ldrb	r3, [r1, r3]
 800509c:	f003 031f 	and.w	r3, r3, #31
 80050a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	40021000 	.word	0x40021000
 80050ac:	0800b028 	.word	0x0800b028

080050b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80050b8:	2300      	movs	r3, #0
 80050ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050bc:	4b27      	ldr	r3, [pc, #156]	; (800515c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050c8:	f7ff f916 	bl	80042f8 <HAL_PWREx_GetVoltageRange>
 80050cc:	6178      	str	r0, [r7, #20]
 80050ce:	e014      	b.n	80050fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050d0:	4b22      	ldr	r3, [pc, #136]	; (800515c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d4:	4a21      	ldr	r2, [pc, #132]	; (800515c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050da:	6593      	str	r3, [r2, #88]	; 0x58
 80050dc:	4b1f      	ldr	r3, [pc, #124]	; (800515c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050e8:	f7ff f906 	bl	80042f8 <HAL_PWREx_GetVoltageRange>
 80050ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050ee:	4b1b      	ldr	r3, [pc, #108]	; (800515c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f2:	4a1a      	ldr	r2, [pc, #104]	; (800515c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005100:	d10b      	bne.n	800511a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b80      	cmp	r3, #128	; 0x80
 8005106:	d913      	bls.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2ba0      	cmp	r3, #160	; 0xa0
 800510c:	d902      	bls.n	8005114 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800510e:	2302      	movs	r3, #2
 8005110:	613b      	str	r3, [r7, #16]
 8005112:	e00d      	b.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005114:	2301      	movs	r3, #1
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	e00a      	b.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b7f      	cmp	r3, #127	; 0x7f
 800511e:	d902      	bls.n	8005126 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005120:	2302      	movs	r3, #2
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	e004      	b.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b70      	cmp	r3, #112	; 0x70
 800512a:	d101      	bne.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800512c:	2301      	movs	r3, #1
 800512e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005130:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f023 020f 	bic.w	r2, r3, #15
 8005138:	4909      	ldr	r1, [pc, #36]	; (8005160 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005140:	4b07      	ldr	r3, [pc, #28]	; (8005160 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	429a      	cmp	r2, r3
 800514c:	d001      	beq.n	8005152 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40021000 	.word	0x40021000
 8005160:	40022000 	.word	0x40022000

08005164 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800516a:	4b2d      	ldr	r3, [pc, #180]	; (8005220 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2b03      	cmp	r3, #3
 8005178:	d00b      	beq.n	8005192 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2b03      	cmp	r3, #3
 800517e:	d825      	bhi.n	80051cc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d008      	beq.n	8005198 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b02      	cmp	r3, #2
 800518a:	d11f      	bne.n	80051cc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800518c:	4b25      	ldr	r3, [pc, #148]	; (8005224 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800518e:	613b      	str	r3, [r7, #16]
    break;
 8005190:	e01f      	b.n	80051d2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005192:	4b25      	ldr	r3, [pc, #148]	; (8005228 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005194:	613b      	str	r3, [r7, #16]
    break;
 8005196:	e01c      	b.n	80051d2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005198:	4b21      	ldr	r3, [pc, #132]	; (8005220 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d107      	bne.n	80051b4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051a4:	4b1e      	ldr	r3, [pc, #120]	; (8005220 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80051a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051aa:	0a1b      	lsrs	r3, r3, #8
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	e005      	b.n	80051c0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051b4:	4b1a      	ldr	r3, [pc, #104]	; (8005220 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	091b      	lsrs	r3, r3, #4
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80051c0:	4a1a      	ldr	r2, [pc, #104]	; (800522c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c8:	613b      	str	r3, [r7, #16]
    break;
 80051ca:	e002      	b.n	80051d2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80051cc:	2300      	movs	r3, #0
 80051ce:	613b      	str	r3, [r7, #16]
    break;
 80051d0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051d2:	4b13      	ldr	r3, [pc, #76]	; (8005220 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	091b      	lsrs	r3, r3, #4
 80051d8:	f003 030f 	and.w	r3, r3, #15
 80051dc:	3301      	adds	r3, #1
 80051de:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051e0:	4b0f      	ldr	r3, [pc, #60]	; (8005220 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	0a1b      	lsrs	r3, r3, #8
 80051e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	fb03 f202 	mul.w	r2, r3, r2
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051f8:	4b09      	ldr	r3, [pc, #36]	; (8005220 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	0e5b      	lsrs	r3, r3, #25
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	3301      	adds	r3, #1
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005210:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005212:	683b      	ldr	r3, [r7, #0]
}
 8005214:	4618      	mov	r0, r3
 8005216:	371c      	adds	r7, #28
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	40021000 	.word	0x40021000
 8005224:	00f42400 	.word	0x00f42400
 8005228:	007a1200 	.word	0x007a1200
 800522c:	0800b030 	.word	0x0800b030

08005230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005238:	2300      	movs	r3, #0
 800523a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800523c:	2300      	movs	r3, #0
 800523e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005248:	2b00      	cmp	r3, #0
 800524a:	d040      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005250:	2b80      	cmp	r3, #128	; 0x80
 8005252:	d02a      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005254:	2b80      	cmp	r3, #128	; 0x80
 8005256:	d825      	bhi.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005258:	2b60      	cmp	r3, #96	; 0x60
 800525a:	d026      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800525c:	2b60      	cmp	r3, #96	; 0x60
 800525e:	d821      	bhi.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005260:	2b40      	cmp	r3, #64	; 0x40
 8005262:	d006      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005264:	2b40      	cmp	r3, #64	; 0x40
 8005266:	d81d      	bhi.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005268:	2b00      	cmp	r3, #0
 800526a:	d009      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800526c:	2b20      	cmp	r3, #32
 800526e:	d010      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005270:	e018      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005272:	4b89      	ldr	r3, [pc, #548]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	4a88      	ldr	r2, [pc, #544]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800527c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800527e:	e015      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3304      	adds	r3, #4
 8005284:	2100      	movs	r1, #0
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fb02 	bl	8005890 <RCCEx_PLLSAI1_Config>
 800528c:	4603      	mov	r3, r0
 800528e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005290:	e00c      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	3320      	adds	r3, #32
 8005296:	2100      	movs	r1, #0
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fbed 	bl	8005a78 <RCCEx_PLLSAI2_Config>
 800529e:	4603      	mov	r3, r0
 80052a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052a2:	e003      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	74fb      	strb	r3, [r7, #19]
      break;
 80052a8:	e000      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80052aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052ac:	7cfb      	ldrb	r3, [r7, #19]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10b      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052b2:	4b79      	ldr	r3, [pc, #484]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052b8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c0:	4975      	ldr	r1, [pc, #468]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80052c8:	e001      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ca:	7cfb      	ldrb	r3, [r7, #19]
 80052cc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d047      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e2:	d030      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80052e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e8:	d82a      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80052ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ee:	d02a      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80052f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052f4:	d824      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80052f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052fa:	d008      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xde>
 80052fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005300:	d81e      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800530a:	d010      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800530c:	e018      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800530e:	4b62      	ldr	r3, [pc, #392]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	4a61      	ldr	r2, [pc, #388]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005318:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800531a:	e015      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3304      	adds	r3, #4
 8005320:	2100      	movs	r1, #0
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fab4 	bl	8005890 <RCCEx_PLLSAI1_Config>
 8005328:	4603      	mov	r3, r0
 800532a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800532c:	e00c      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3320      	adds	r3, #32
 8005332:	2100      	movs	r1, #0
 8005334:	4618      	mov	r0, r3
 8005336:	f000 fb9f 	bl	8005a78 <RCCEx_PLLSAI2_Config>
 800533a:	4603      	mov	r3, r0
 800533c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800533e:	e003      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	74fb      	strb	r3, [r7, #19]
      break;
 8005344:	e000      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005348:	7cfb      	ldrb	r3, [r7, #19]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10b      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800534e:	4b52      	ldr	r3, [pc, #328]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005350:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535c:	494e      	ldr	r1, [pc, #312]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005364:	e001      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005366:	7cfb      	ldrb	r3, [r7, #19]
 8005368:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 809f 	beq.w	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005378:	2300      	movs	r3, #0
 800537a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800537c:	4b46      	ldr	r3, [pc, #280]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800537e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800538c:	2300      	movs	r3, #0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00d      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005392:	4b41      	ldr	r3, [pc, #260]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005396:	4a40      	ldr	r2, [pc, #256]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800539c:	6593      	str	r3, [r2, #88]	; 0x58
 800539e:	4b3e      	ldr	r3, [pc, #248]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a6:	60bb      	str	r3, [r7, #8]
 80053a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053aa:	2301      	movs	r3, #1
 80053ac:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053ae:	4b3b      	ldr	r3, [pc, #236]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a3a      	ldr	r2, [pc, #232]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80053b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053ba:	f7fc fb6d 	bl	8001a98 <HAL_GetTick>
 80053be:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053c0:	e009      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c2:	f7fc fb69 	bl	8001a98 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d902      	bls.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	74fb      	strb	r3, [r7, #19]
        break;
 80053d4:	e005      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053d6:	4b31      	ldr	r3, [pc, #196]	; (800549c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0ef      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80053e2:	7cfb      	ldrb	r3, [r7, #19]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d15b      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053e8:	4b2b      	ldr	r3, [pc, #172]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01f      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	429a      	cmp	r2, r3
 8005404:	d019      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005406:	4b24      	ldr	r3, [pc, #144]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005410:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005412:	4b21      	ldr	r3, [pc, #132]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005418:	4a1f      	ldr	r2, [pc, #124]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800541a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800541e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005422:	4b1d      	ldr	r3, [pc, #116]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005428:	4a1b      	ldr	r2, [pc, #108]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800542a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005432:	4a19      	ldr	r2, [pc, #100]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d016      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005444:	f7fc fb28 	bl	8001a98 <HAL_GetTick>
 8005448:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800544a:	e00b      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544c:	f7fc fb24 	bl	8001a98 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	f241 3288 	movw	r2, #5000	; 0x1388
 800545a:	4293      	cmp	r3, r2
 800545c:	d902      	bls.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	74fb      	strb	r3, [r7, #19]
            break;
 8005462:	e006      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005464:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0ec      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005472:	7cfb      	ldrb	r3, [r7, #19]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10c      	bne.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005478:	4b07      	ldr	r3, [pc, #28]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800547a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005488:	4903      	ldr	r1, [pc, #12]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005490:	e008      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005492:	7cfb      	ldrb	r3, [r7, #19]
 8005494:	74bb      	strb	r3, [r7, #18]
 8005496:	e005      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005498:	40021000 	.word	0x40021000
 800549c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a0:	7cfb      	ldrb	r3, [r7, #19]
 80054a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054a4:	7c7b      	ldrb	r3, [r7, #17]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d105      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054aa:	4ba0      	ldr	r3, [pc, #640]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ae:	4a9f      	ldr	r2, [pc, #636]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054c2:	4b9a      	ldr	r3, [pc, #616]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c8:	f023 0203 	bic.w	r2, r3, #3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d0:	4996      	ldr	r1, [pc, #600]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054e4:	4b91      	ldr	r3, [pc, #580]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ea:	f023 020c 	bic.w	r2, r3, #12
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	498e      	ldr	r1, [pc, #568]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005506:	4b89      	ldr	r3, [pc, #548]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005514:	4985      	ldr	r1, [pc, #532]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005528:	4b80      	ldr	r3, [pc, #512]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005536:	497d      	ldr	r1, [pc, #500]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800554a:	4b78      	ldr	r3, [pc, #480]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005550:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005558:	4974      	ldr	r1, [pc, #464]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0320 	and.w	r3, r3, #32
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800556c:	4b6f      	ldr	r3, [pc, #444]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005572:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557a:	496c      	ldr	r1, [pc, #432]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800558e:	4b67      	ldr	r3, [pc, #412]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005594:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800559c:	4963      	ldr	r1, [pc, #396]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055b0:	4b5e      	ldr	r3, [pc, #376]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055be:	495b      	ldr	r1, [pc, #364]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055d2:	4b56      	ldr	r3, [pc, #344]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e0:	4952      	ldr	r1, [pc, #328]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055f4:	4b4d      	ldr	r3, [pc, #308]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005602:	494a      	ldr	r1, [pc, #296]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005616:	4b45      	ldr	r3, [pc, #276]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005624:	4941      	ldr	r1, [pc, #260]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005638:	4b3c      	ldr	r3, [pc, #240]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800563a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800563e:	f023 0203 	bic.w	r2, r3, #3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005646:	4939      	ldr	r1, [pc, #228]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d028      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800565a:	4b34      	ldr	r3, [pc, #208]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800565c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005660:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005668:	4930      	ldr	r1, [pc, #192]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800566a:	4313      	orrs	r3, r2
 800566c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005678:	d106      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800567a:	4b2c      	ldr	r3, [pc, #176]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	4a2b      	ldr	r2, [pc, #172]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005684:	60d3      	str	r3, [r2, #12]
 8005686:	e011      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800568c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005690:	d10c      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3304      	adds	r3, #4
 8005696:	2101      	movs	r1, #1
 8005698:	4618      	mov	r0, r3
 800569a:	f000 f8f9 	bl	8005890 <RCCEx_PLLSAI1_Config>
 800569e:	4603      	mov	r3, r0
 80056a0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80056a2:	7cfb      	ldrb	r3, [r7, #19]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80056a8:	7cfb      	ldrb	r3, [r7, #19]
 80056aa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d04d      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056c0:	d108      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80056c2:	4b1a      	ldr	r3, [pc, #104]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056c8:	4a18      	ldr	r2, [pc, #96]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056ce:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80056d2:	e012      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80056d4:	4b15      	ldr	r3, [pc, #84]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056da:	4a14      	ldr	r2, [pc, #80]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056e0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80056e4:	4b11      	ldr	r3, [pc, #68]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056f2:	490e      	ldr	r1, [pc, #56]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005702:	d106      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005704:	4b09      	ldr	r3, [pc, #36]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	4a08      	ldr	r2, [pc, #32]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800570a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800570e:	60d3      	str	r3, [r2, #12]
 8005710:	e020      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005716:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800571a:	d109      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800571c:	4b03      	ldr	r3, [pc, #12]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	4a02      	ldr	r2, [pc, #8]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005726:	60d3      	str	r3, [r2, #12]
 8005728:	e014      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800572a:	bf00      	nop
 800572c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005734:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005738:	d10c      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	3304      	adds	r3, #4
 800573e:	2101      	movs	r1, #1
 8005740:	4618      	mov	r0, r3
 8005742:	f000 f8a5 	bl	8005890 <RCCEx_PLLSAI1_Config>
 8005746:	4603      	mov	r3, r0
 8005748:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800574a:	7cfb      	ldrb	r3, [r7, #19]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005750:	7cfb      	ldrb	r3, [r7, #19]
 8005752:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d028      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005760:	4b4a      	ldr	r3, [pc, #296]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005766:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800576e:	4947      	ldr	r1, [pc, #284]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005770:	4313      	orrs	r3, r2
 8005772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800577a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800577e:	d106      	bne.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005780:	4b42      	ldr	r3, [pc, #264]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	4a41      	ldr	r2, [pc, #260]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800578a:	60d3      	str	r3, [r2, #12]
 800578c:	e011      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005792:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005796:	d10c      	bne.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3304      	adds	r3, #4
 800579c:	2101      	movs	r1, #1
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 f876 	bl	8005890 <RCCEx_PLLSAI1_Config>
 80057a4:	4603      	mov	r3, r0
 80057a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057a8:	7cfb      	ldrb	r3, [r7, #19]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80057ae:	7cfb      	ldrb	r3, [r7, #19]
 80057b0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d01e      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057be:	4b33      	ldr	r3, [pc, #204]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ce:	492f      	ldr	r1, [pc, #188]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057e0:	d10c      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	3304      	adds	r3, #4
 80057e6:	2102      	movs	r1, #2
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 f851 	bl	8005890 <RCCEx_PLLSAI1_Config>
 80057ee:	4603      	mov	r3, r0
 80057f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057f2:	7cfb      	ldrb	r3, [r7, #19]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80057f8:	7cfb      	ldrb	r3, [r7, #19]
 80057fa:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00b      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005808:	4b20      	ldr	r3, [pc, #128]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800580a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800580e:	f023 0204 	bic.w	r2, r3, #4
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005818:	491c      	ldr	r1, [pc, #112]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00b      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800582c:	4b17      	ldr	r3, [pc, #92]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800582e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005832:	f023 0218 	bic.w	r2, r3, #24
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583c:	4913      	ldr	r1, [pc, #76]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d017      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005850:	4b0e      	ldr	r3, [pc, #56]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005852:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005856:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005860:	490a      	ldr	r1, [pc, #40]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800586e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005872:	d105      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005874:	4b05      	ldr	r3, [pc, #20]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	4a04      	ldr	r2, [pc, #16]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800587a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800587e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005880:	7cbb      	ldrb	r3, [r7, #18]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	40021000 	.word	0x40021000

08005890 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800589e:	4b72      	ldr	r3, [pc, #456]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00e      	beq.n	80058c8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058aa:	4b6f      	ldr	r3, [pc, #444]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f003 0203 	and.w	r2, r3, #3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d103      	bne.n	80058c2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
       ||
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d142      	bne.n	8005948 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	73fb      	strb	r3, [r7, #15]
 80058c6:	e03f      	b.n	8005948 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d018      	beq.n	8005902 <RCCEx_PLLSAI1_Config+0x72>
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d825      	bhi.n	8005920 <RCCEx_PLLSAI1_Config+0x90>
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d002      	beq.n	80058de <RCCEx_PLLSAI1_Config+0x4e>
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d009      	beq.n	80058f0 <RCCEx_PLLSAI1_Config+0x60>
 80058dc:	e020      	b.n	8005920 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058de:	4b62      	ldr	r3, [pc, #392]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d11d      	bne.n	8005926 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058ee:	e01a      	b.n	8005926 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058f0:	4b5d      	ldr	r3, [pc, #372]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d116      	bne.n	800592a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005900:	e013      	b.n	800592a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005902:	4b59      	ldr	r3, [pc, #356]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10f      	bne.n	800592e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800590e:	4b56      	ldr	r3, [pc, #344]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d109      	bne.n	800592e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800591e:	e006      	b.n	800592e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	73fb      	strb	r3, [r7, #15]
      break;
 8005924:	e004      	b.n	8005930 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005926:	bf00      	nop
 8005928:	e002      	b.n	8005930 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800592a:	bf00      	nop
 800592c:	e000      	b.n	8005930 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800592e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d108      	bne.n	8005948 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005936:	4b4c      	ldr	r3, [pc, #304]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f023 0203 	bic.w	r2, r3, #3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4949      	ldr	r1, [pc, #292]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005944:	4313      	orrs	r3, r2
 8005946:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f040 8086 	bne.w	8005a5c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005950:	4b45      	ldr	r3, [pc, #276]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a44      	ldr	r2, [pc, #272]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005956:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800595a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800595c:	f7fc f89c 	bl	8001a98 <HAL_GetTick>
 8005960:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005962:	e009      	b.n	8005978 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005964:	f7fc f898 	bl	8001a98 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d902      	bls.n	8005978 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	73fb      	strb	r3, [r7, #15]
        break;
 8005976:	e005      	b.n	8005984 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005978:	4b3b      	ldr	r3, [pc, #236]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1ef      	bne.n	8005964 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d168      	bne.n	8005a5c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d113      	bne.n	80059b8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005990:	4b35      	ldr	r3, [pc, #212]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005992:	691a      	ldr	r2, [r3, #16]
 8005994:	4b35      	ldr	r3, [pc, #212]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005996:	4013      	ands	r3, r2
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6892      	ldr	r2, [r2, #8]
 800599c:	0211      	lsls	r1, r2, #8
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	68d2      	ldr	r2, [r2, #12]
 80059a2:	06d2      	lsls	r2, r2, #27
 80059a4:	4311      	orrs	r1, r2
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6852      	ldr	r2, [r2, #4]
 80059aa:	3a01      	subs	r2, #1
 80059ac:	0112      	lsls	r2, r2, #4
 80059ae:	430a      	orrs	r2, r1
 80059b0:	492d      	ldr	r1, [pc, #180]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	610b      	str	r3, [r1, #16]
 80059b6:	e02d      	b.n	8005a14 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d115      	bne.n	80059ea <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059be:	4b2a      	ldr	r3, [pc, #168]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059c0:	691a      	ldr	r2, [r3, #16]
 80059c2:	4b2b      	ldr	r3, [pc, #172]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059c4:	4013      	ands	r3, r2
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6892      	ldr	r2, [r2, #8]
 80059ca:	0211      	lsls	r1, r2, #8
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	6912      	ldr	r2, [r2, #16]
 80059d0:	0852      	lsrs	r2, r2, #1
 80059d2:	3a01      	subs	r2, #1
 80059d4:	0552      	lsls	r2, r2, #21
 80059d6:	4311      	orrs	r1, r2
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	6852      	ldr	r2, [r2, #4]
 80059dc:	3a01      	subs	r2, #1
 80059de:	0112      	lsls	r2, r2, #4
 80059e0:	430a      	orrs	r2, r1
 80059e2:	4921      	ldr	r1, [pc, #132]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	610b      	str	r3, [r1, #16]
 80059e8:	e014      	b.n	8005a14 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059ea:	4b1f      	ldr	r3, [pc, #124]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059ec:	691a      	ldr	r2, [r3, #16]
 80059ee:	4b21      	ldr	r3, [pc, #132]	; (8005a74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059f0:	4013      	ands	r3, r2
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6892      	ldr	r2, [r2, #8]
 80059f6:	0211      	lsls	r1, r2, #8
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6952      	ldr	r2, [r2, #20]
 80059fc:	0852      	lsrs	r2, r2, #1
 80059fe:	3a01      	subs	r2, #1
 8005a00:	0652      	lsls	r2, r2, #25
 8005a02:	4311      	orrs	r1, r2
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6852      	ldr	r2, [r2, #4]
 8005a08:	3a01      	subs	r2, #1
 8005a0a:	0112      	lsls	r2, r2, #4
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	4916      	ldr	r1, [pc, #88]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a14:	4b14      	ldr	r3, [pc, #80]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a13      	ldr	r2, [pc, #76]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a20:	f7fc f83a 	bl	8001a98 <HAL_GetTick>
 8005a24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a26:	e009      	b.n	8005a3c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a28:	f7fc f836 	bl	8001a98 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d902      	bls.n	8005a3c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	73fb      	strb	r3, [r7, #15]
          break;
 8005a3a:	e005      	b.n	8005a48 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0ef      	beq.n	8005a28 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d106      	bne.n	8005a5c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a4e:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a50:	691a      	ldr	r2, [r3, #16]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	4904      	ldr	r1, [pc, #16]	; (8005a68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	40021000 	.word	0x40021000
 8005a6c:	07ff800f 	.word	0x07ff800f
 8005a70:	ff9f800f 	.word	0xff9f800f
 8005a74:	f9ff800f 	.word	0xf9ff800f

08005a78 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a86:	4b72      	ldr	r3, [pc, #456]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00e      	beq.n	8005ab0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a92:	4b6f      	ldr	r3, [pc, #444]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f003 0203 	and.w	r2, r3, #3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d103      	bne.n	8005aaa <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
       ||
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d142      	bne.n	8005b30 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	73fb      	strb	r3, [r7, #15]
 8005aae:	e03f      	b.n	8005b30 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d018      	beq.n	8005aea <RCCEx_PLLSAI2_Config+0x72>
 8005ab8:	2b03      	cmp	r3, #3
 8005aba:	d825      	bhi.n	8005b08 <RCCEx_PLLSAI2_Config+0x90>
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d002      	beq.n	8005ac6 <RCCEx_PLLSAI2_Config+0x4e>
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d009      	beq.n	8005ad8 <RCCEx_PLLSAI2_Config+0x60>
 8005ac4:	e020      	b.n	8005b08 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ac6:	4b62      	ldr	r3, [pc, #392]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d11d      	bne.n	8005b0e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ad6:	e01a      	b.n	8005b0e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ad8:	4b5d      	ldr	r3, [pc, #372]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d116      	bne.n	8005b12 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ae8:	e013      	b.n	8005b12 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005aea:	4b59      	ldr	r3, [pc, #356]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10f      	bne.n	8005b16 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005af6:	4b56      	ldr	r3, [pc, #344]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d109      	bne.n	8005b16 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b06:	e006      	b.n	8005b16 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b0c:	e004      	b.n	8005b18 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005b0e:	bf00      	nop
 8005b10:	e002      	b.n	8005b18 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005b12:	bf00      	nop
 8005b14:	e000      	b.n	8005b18 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005b16:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d108      	bne.n	8005b30 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005b1e:	4b4c      	ldr	r3, [pc, #304]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f023 0203 	bic.w	r2, r3, #3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4949      	ldr	r1, [pc, #292]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f040 8086 	bne.w	8005c44 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b38:	4b45      	ldr	r3, [pc, #276]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a44      	ldr	r2, [pc, #272]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b44:	f7fb ffa8 	bl	8001a98 <HAL_GetTick>
 8005b48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b4a:	e009      	b.n	8005b60 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b4c:	f7fb ffa4 	bl	8001a98 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d902      	bls.n	8005b60 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	73fb      	strb	r3, [r7, #15]
        break;
 8005b5e:	e005      	b.n	8005b6c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b60:	4b3b      	ldr	r3, [pc, #236]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1ef      	bne.n	8005b4c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d168      	bne.n	8005c44 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d113      	bne.n	8005ba0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b78:	4b35      	ldr	r3, [pc, #212]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b7a:	695a      	ldr	r2, [r3, #20]
 8005b7c:	4b35      	ldr	r3, [pc, #212]	; (8005c54 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005b7e:	4013      	ands	r3, r2
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6892      	ldr	r2, [r2, #8]
 8005b84:	0211      	lsls	r1, r2, #8
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	68d2      	ldr	r2, [r2, #12]
 8005b8a:	06d2      	lsls	r2, r2, #27
 8005b8c:	4311      	orrs	r1, r2
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6852      	ldr	r2, [r2, #4]
 8005b92:	3a01      	subs	r2, #1
 8005b94:	0112      	lsls	r2, r2, #4
 8005b96:	430a      	orrs	r2, r1
 8005b98:	492d      	ldr	r1, [pc, #180]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	614b      	str	r3, [r1, #20]
 8005b9e:	e02d      	b.n	8005bfc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d115      	bne.n	8005bd2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ba6:	4b2a      	ldr	r3, [pc, #168]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ba8:	695a      	ldr	r2, [r3, #20]
 8005baa:	4b2b      	ldr	r3, [pc, #172]	; (8005c58 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6892      	ldr	r2, [r2, #8]
 8005bb2:	0211      	lsls	r1, r2, #8
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	6912      	ldr	r2, [r2, #16]
 8005bb8:	0852      	lsrs	r2, r2, #1
 8005bba:	3a01      	subs	r2, #1
 8005bbc:	0552      	lsls	r2, r2, #21
 8005bbe:	4311      	orrs	r1, r2
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6852      	ldr	r2, [r2, #4]
 8005bc4:	3a01      	subs	r2, #1
 8005bc6:	0112      	lsls	r2, r2, #4
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	4921      	ldr	r1, [pc, #132]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	614b      	str	r3, [r1, #20]
 8005bd0:	e014      	b.n	8005bfc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bd2:	4b1f      	ldr	r3, [pc, #124]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bd4:	695a      	ldr	r2, [r3, #20]
 8005bd6:	4b21      	ldr	r3, [pc, #132]	; (8005c5c <RCCEx_PLLSAI2_Config+0x1e4>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	6892      	ldr	r2, [r2, #8]
 8005bde:	0211      	lsls	r1, r2, #8
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6952      	ldr	r2, [r2, #20]
 8005be4:	0852      	lsrs	r2, r2, #1
 8005be6:	3a01      	subs	r2, #1
 8005be8:	0652      	lsls	r2, r2, #25
 8005bea:	4311      	orrs	r1, r2
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6852      	ldr	r2, [r2, #4]
 8005bf0:	3a01      	subs	r2, #1
 8005bf2:	0112      	lsls	r2, r2, #4
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	4916      	ldr	r1, [pc, #88]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005bfc:	4b14      	ldr	r3, [pc, #80]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a13      	ldr	r2, [pc, #76]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c08:	f7fb ff46 	bl	8001a98 <HAL_GetTick>
 8005c0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c0e:	e009      	b.n	8005c24 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c10:	f7fb ff42 	bl	8001a98 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d902      	bls.n	8005c24 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	73fb      	strb	r3, [r7, #15]
          break;
 8005c22:	e005      	b.n	8005c30 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c24:	4b0a      	ldr	r3, [pc, #40]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0ef      	beq.n	8005c10 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c36:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c38:	695a      	ldr	r2, [r3, #20]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	4904      	ldr	r1, [pc, #16]	; (8005c50 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	40021000 	.word	0x40021000
 8005c54:	07ff800f 	.word	0x07ff800f
 8005c58:	ff9f800f 	.word	0xff9f800f
 8005c5c:	f9ff800f 	.word	0xf9ff800f

08005c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e049      	b.n	8005d06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d106      	bne.n	8005c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f002 f9a2 	bl	8007fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	f000 fa50 	bl	8006144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b082      	sub	sp, #8
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d122      	bne.n	8005d6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d11b      	bne.n	8005d6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f06f 0202 	mvn.w	r2, #2
 8005d3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	f003 0303 	and.w	r3, r3, #3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f9d8 	bl	8006106 <HAL_TIM_IC_CaptureCallback>
 8005d56:	e005      	b.n	8005d64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f9ca 	bl	80060f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f9db 	bl	800611a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b04      	cmp	r3, #4
 8005d76:	d122      	bne.n	8005dbe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	f003 0304 	and.w	r3, r3, #4
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d11b      	bne.n	8005dbe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f06f 0204 	mvn.w	r2, #4
 8005d8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f9ae 	bl	8006106 <HAL_TIM_IC_CaptureCallback>
 8005daa:	e005      	b.n	8005db8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f9a0 	bl	80060f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f9b1 	bl	800611a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f003 0308 	and.w	r3, r3, #8
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d122      	bne.n	8005e12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b08      	cmp	r3, #8
 8005dd8:	d11b      	bne.n	8005e12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f06f 0208 	mvn.w	r2, #8
 8005de2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2204      	movs	r2, #4
 8005de8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	f003 0303 	and.w	r3, r3, #3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f984 	bl	8006106 <HAL_TIM_IC_CaptureCallback>
 8005dfe:	e005      	b.n	8005e0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f976 	bl	80060f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f987 	bl	800611a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	f003 0310 	and.w	r3, r3, #16
 8005e1c:	2b10      	cmp	r3, #16
 8005e1e:	d122      	bne.n	8005e66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f003 0310 	and.w	r3, r3, #16
 8005e2a:	2b10      	cmp	r3, #16
 8005e2c:	d11b      	bne.n	8005e66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f06f 0210 	mvn.w	r2, #16
 8005e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2208      	movs	r2, #8
 8005e3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f95a 	bl	8006106 <HAL_TIM_IC_CaptureCallback>
 8005e52:	e005      	b.n	8005e60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f94c 	bl	80060f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f95d 	bl	800611a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d10e      	bne.n	8005e92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d107      	bne.n	8005e92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f06f 0201 	mvn.w	r2, #1
 8005e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f926 	bl	80060de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9c:	2b80      	cmp	r3, #128	; 0x80
 8005e9e:	d10e      	bne.n	8005ebe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eaa:	2b80      	cmp	r3, #128	; 0x80
 8005eac:	d107      	bne.n	8005ebe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fb09 	bl	80064d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ecc:	d10e      	bne.n	8005eec <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed8:	2b80      	cmp	r3, #128	; 0x80
 8005eda:	d107      	bne.n	8005eec <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fafc 	bl	80064e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef6:	2b40      	cmp	r3, #64	; 0x40
 8005ef8:	d10e      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f04:	2b40      	cmp	r3, #64	; 0x40
 8005f06:	d107      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f90b 	bl	800612e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b20      	cmp	r3, #32
 8005f24:	d10e      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0320 	and.w	r3, r3, #32
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	d107      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0220 	mvn.w	r2, #32
 8005f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fabc 	bl	80064bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f44:	bf00      	nop
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_TIM_ConfigClockSource+0x1c>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e0b6      	b.n	80060d6 <HAL_TIM_ConfigClockSource+0x18a>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fa4:	d03e      	beq.n	8006024 <HAL_TIM_ConfigClockSource+0xd8>
 8005fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005faa:	f200 8087 	bhi.w	80060bc <HAL_TIM_ConfigClockSource+0x170>
 8005fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb2:	f000 8086 	beq.w	80060c2 <HAL_TIM_ConfigClockSource+0x176>
 8005fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fba:	d87f      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x170>
 8005fbc:	2b70      	cmp	r3, #112	; 0x70
 8005fbe:	d01a      	beq.n	8005ff6 <HAL_TIM_ConfigClockSource+0xaa>
 8005fc0:	2b70      	cmp	r3, #112	; 0x70
 8005fc2:	d87b      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x170>
 8005fc4:	2b60      	cmp	r3, #96	; 0x60
 8005fc6:	d050      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x11e>
 8005fc8:	2b60      	cmp	r3, #96	; 0x60
 8005fca:	d877      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x170>
 8005fcc:	2b50      	cmp	r3, #80	; 0x50
 8005fce:	d03c      	beq.n	800604a <HAL_TIM_ConfigClockSource+0xfe>
 8005fd0:	2b50      	cmp	r3, #80	; 0x50
 8005fd2:	d873      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x170>
 8005fd4:	2b40      	cmp	r3, #64	; 0x40
 8005fd6:	d058      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x13e>
 8005fd8:	2b40      	cmp	r3, #64	; 0x40
 8005fda:	d86f      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x170>
 8005fdc:	2b30      	cmp	r3, #48	; 0x30
 8005fde:	d064      	beq.n	80060aa <HAL_TIM_ConfigClockSource+0x15e>
 8005fe0:	2b30      	cmp	r3, #48	; 0x30
 8005fe2:	d86b      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x170>
 8005fe4:	2b20      	cmp	r3, #32
 8005fe6:	d060      	beq.n	80060aa <HAL_TIM_ConfigClockSource+0x15e>
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	d867      	bhi.n	80060bc <HAL_TIM_ConfigClockSource+0x170>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d05c      	beq.n	80060aa <HAL_TIM_ConfigClockSource+0x15e>
 8005ff0:	2b10      	cmp	r3, #16
 8005ff2:	d05a      	beq.n	80060aa <HAL_TIM_ConfigClockSource+0x15e>
 8005ff4:	e062      	b.n	80060bc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6818      	ldr	r0, [r3, #0]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	6899      	ldr	r1, [r3, #8]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f000 f9b1 	bl	800636c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006018:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	609a      	str	r2, [r3, #8]
      break;
 8006022:	e04f      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6818      	ldr	r0, [r3, #0]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	6899      	ldr	r1, [r3, #8]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	f000 f99a 	bl	800636c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689a      	ldr	r2, [r3, #8]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006046:	609a      	str	r2, [r3, #8]
      break;
 8006048:	e03c      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6818      	ldr	r0, [r3, #0]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	6859      	ldr	r1, [r3, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	461a      	mov	r2, r3
 8006058:	f000 f90e 	bl	8006278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2150      	movs	r1, #80	; 0x50
 8006062:	4618      	mov	r0, r3
 8006064:	f000 f967 	bl	8006336 <TIM_ITRx_SetConfig>
      break;
 8006068:	e02c      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	6859      	ldr	r1, [r3, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	461a      	mov	r2, r3
 8006078:	f000 f92d 	bl	80062d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2160      	movs	r1, #96	; 0x60
 8006082:	4618      	mov	r0, r3
 8006084:	f000 f957 	bl	8006336 <TIM_ITRx_SetConfig>
      break;
 8006088:	e01c      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6818      	ldr	r0, [r3, #0]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	6859      	ldr	r1, [r3, #4]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	461a      	mov	r2, r3
 8006098:	f000 f8ee 	bl	8006278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2140      	movs	r1, #64	; 0x40
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 f947 	bl	8006336 <TIM_ITRx_SetConfig>
      break;
 80060a8:	e00c      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4619      	mov	r1, r3
 80060b4:	4610      	mov	r0, r2
 80060b6:	f000 f93e 	bl	8006336 <TIM_ITRx_SetConfig>
      break;
 80060ba:	e003      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	73fb      	strb	r3, [r7, #15]
      break;
 80060c0:	e000      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80060c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
	...

08006144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a40      	ldr	r2, [pc, #256]	; (8006258 <TIM_Base_SetConfig+0x114>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d013      	beq.n	8006184 <TIM_Base_SetConfig+0x40>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006162:	d00f      	beq.n	8006184 <TIM_Base_SetConfig+0x40>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a3d      	ldr	r2, [pc, #244]	; (800625c <TIM_Base_SetConfig+0x118>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00b      	beq.n	8006184 <TIM_Base_SetConfig+0x40>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a3c      	ldr	r2, [pc, #240]	; (8006260 <TIM_Base_SetConfig+0x11c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d007      	beq.n	8006184 <TIM_Base_SetConfig+0x40>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a3b      	ldr	r2, [pc, #236]	; (8006264 <TIM_Base_SetConfig+0x120>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d003      	beq.n	8006184 <TIM_Base_SetConfig+0x40>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a3a      	ldr	r2, [pc, #232]	; (8006268 <TIM_Base_SetConfig+0x124>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d108      	bne.n	8006196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a2f      	ldr	r2, [pc, #188]	; (8006258 <TIM_Base_SetConfig+0x114>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d01f      	beq.n	80061de <TIM_Base_SetConfig+0x9a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a4:	d01b      	beq.n	80061de <TIM_Base_SetConfig+0x9a>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a2c      	ldr	r2, [pc, #176]	; (800625c <TIM_Base_SetConfig+0x118>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d017      	beq.n	80061de <TIM_Base_SetConfig+0x9a>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a2b      	ldr	r2, [pc, #172]	; (8006260 <TIM_Base_SetConfig+0x11c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d013      	beq.n	80061de <TIM_Base_SetConfig+0x9a>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a2a      	ldr	r2, [pc, #168]	; (8006264 <TIM_Base_SetConfig+0x120>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d00f      	beq.n	80061de <TIM_Base_SetConfig+0x9a>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a29      	ldr	r2, [pc, #164]	; (8006268 <TIM_Base_SetConfig+0x124>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d00b      	beq.n	80061de <TIM_Base_SetConfig+0x9a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a28      	ldr	r2, [pc, #160]	; (800626c <TIM_Base_SetConfig+0x128>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d007      	beq.n	80061de <TIM_Base_SetConfig+0x9a>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a27      	ldr	r2, [pc, #156]	; (8006270 <TIM_Base_SetConfig+0x12c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d003      	beq.n	80061de <TIM_Base_SetConfig+0x9a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a26      	ldr	r2, [pc, #152]	; (8006274 <TIM_Base_SetConfig+0x130>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d108      	bne.n	80061f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a10      	ldr	r2, [pc, #64]	; (8006258 <TIM_Base_SetConfig+0x114>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d00f      	beq.n	800623c <TIM_Base_SetConfig+0xf8>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a12      	ldr	r2, [pc, #72]	; (8006268 <TIM_Base_SetConfig+0x124>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d00b      	beq.n	800623c <TIM_Base_SetConfig+0xf8>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a11      	ldr	r2, [pc, #68]	; (800626c <TIM_Base_SetConfig+0x128>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d007      	beq.n	800623c <TIM_Base_SetConfig+0xf8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a10      	ldr	r2, [pc, #64]	; (8006270 <TIM_Base_SetConfig+0x12c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d003      	beq.n	800623c <TIM_Base_SetConfig+0xf8>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a0f      	ldr	r2, [pc, #60]	; (8006274 <TIM_Base_SetConfig+0x130>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d103      	bne.n	8006244 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	615a      	str	r2, [r3, #20]
}
 800624a:	bf00      	nop
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	40012c00 	.word	0x40012c00
 800625c:	40000400 	.word	0x40000400
 8006260:	40000800 	.word	0x40000800
 8006264:	40000c00 	.word	0x40000c00
 8006268:	40013400 	.word	0x40013400
 800626c:	40014000 	.word	0x40014000
 8006270:	40014400 	.word	0x40014400
 8006274:	40014800 	.word	0x40014800

08006278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	f023 0201 	bic.w	r2, r3, #1
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	011b      	lsls	r3, r3, #4
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f023 030a 	bic.w	r3, r3, #10
 80062b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	621a      	str	r2, [r3, #32]
}
 80062ca:	bf00      	nop
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b087      	sub	sp, #28
 80062da:	af00      	add	r7, sp, #0
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	f023 0210 	bic.w	r2, r3, #16
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006300:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	031b      	lsls	r3, r3, #12
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	4313      	orrs	r3, r2
 800630a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006312:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	011b      	lsls	r3, r3, #4
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	4313      	orrs	r3, r2
 800631c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	621a      	str	r2, [r3, #32]
}
 800632a:	bf00      	nop
 800632c:	371c      	adds	r7, #28
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4313      	orrs	r3, r2
 8006354:	f043 0307 	orr.w	r3, r3, #7
 8006358:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	609a      	str	r2, [r3, #8]
}
 8006360:	bf00      	nop
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800636c:	b480      	push	{r7}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	021a      	lsls	r2, r3, #8
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	431a      	orrs	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	4313      	orrs	r3, r2
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	4313      	orrs	r3, r2
 8006398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	609a      	str	r2, [r3, #8]
}
 80063a0:	bf00      	nop
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e068      	b.n	8006496 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a2e      	ldr	r2, [pc, #184]	; (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d004      	beq.n	80063f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a2d      	ldr	r2, [pc, #180]	; (80064a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d108      	bne.n	800640a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80063fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	4313      	orrs	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006410:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	4313      	orrs	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a1e      	ldr	r2, [pc, #120]	; (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d01d      	beq.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006436:	d018      	beq.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1b      	ldr	r2, [pc, #108]	; (80064ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d013      	beq.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1a      	ldr	r2, [pc, #104]	; (80064b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00e      	beq.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a18      	ldr	r2, [pc, #96]	; (80064b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d009      	beq.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a13      	ldr	r2, [pc, #76]	; (80064a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d004      	beq.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a14      	ldr	r2, [pc, #80]	; (80064b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d10c      	bne.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006470:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	4313      	orrs	r3, r2
 800647a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	40012c00 	.word	0x40012c00
 80064a8:	40013400 	.word	0x40013400
 80064ac:	40000400 	.word	0x40000400
 80064b0:	40000800 	.word	0x40000800
 80064b4:	40000c00 	.word	0x40000c00
 80064b8:	40014000 	.word	0x40014000

080064bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e042      	b.n	8006590 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006510:	2b00      	cmp	r3, #0
 8006512:	d106      	bne.n	8006522 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f001 fd7b 	bl	8008018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2224      	movs	r2, #36	; 0x24
 8006526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0201 	bic.w	r2, r2, #1
 8006538:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f82c 	bl	8006598 <UART_SetConfig>
 8006540:	4603      	mov	r3, r0
 8006542:	2b01      	cmp	r3, #1
 8006544:	d101      	bne.n	800654a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e022      	b.n	8006590 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fb1c 	bl	8006b90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006566:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689a      	ldr	r2, [r3, #8]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006576:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fba3 	bl	8006cd4 <UART_CheckIdleState>
 800658e:	4603      	mov	r3, r0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800659c:	b08c      	sub	sp, #48	; 0x30
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	431a      	orrs	r2, r3
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	431a      	orrs	r2, r3
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	4313      	orrs	r3, r2
 80065be:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	4baa      	ldr	r3, [pc, #680]	; (8006870 <UART_SetConfig+0x2d8>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	6812      	ldr	r2, [r2, #0]
 80065ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065d0:	430b      	orrs	r3, r1
 80065d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	68da      	ldr	r2, [r3, #12]
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a9f      	ldr	r2, [pc, #636]	; (8006874 <UART_SetConfig+0x2dc>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d004      	beq.n	8006604 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006600:	4313      	orrs	r3, r2
 8006602:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800660e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	6812      	ldr	r2, [r2, #0]
 8006616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006618:	430b      	orrs	r3, r1
 800661a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006622:	f023 010f 	bic.w	r1, r3, #15
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a90      	ldr	r2, [pc, #576]	; (8006878 <UART_SetConfig+0x2e0>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d125      	bne.n	8006688 <UART_SetConfig+0xf0>
 800663c:	4b8f      	ldr	r3, [pc, #572]	; (800687c <UART_SetConfig+0x2e4>)
 800663e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006642:	f003 0303 	and.w	r3, r3, #3
 8006646:	2b03      	cmp	r3, #3
 8006648:	d81a      	bhi.n	8006680 <UART_SetConfig+0xe8>
 800664a:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <UART_SetConfig+0xb8>)
 800664c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006650:	08006661 	.word	0x08006661
 8006654:	08006671 	.word	0x08006671
 8006658:	08006669 	.word	0x08006669
 800665c:	08006679 	.word	0x08006679
 8006660:	2301      	movs	r3, #1
 8006662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006666:	e116      	b.n	8006896 <UART_SetConfig+0x2fe>
 8006668:	2302      	movs	r3, #2
 800666a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800666e:	e112      	b.n	8006896 <UART_SetConfig+0x2fe>
 8006670:	2304      	movs	r3, #4
 8006672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006676:	e10e      	b.n	8006896 <UART_SetConfig+0x2fe>
 8006678:	2308      	movs	r3, #8
 800667a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800667e:	e10a      	b.n	8006896 <UART_SetConfig+0x2fe>
 8006680:	2310      	movs	r3, #16
 8006682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006686:	e106      	b.n	8006896 <UART_SetConfig+0x2fe>
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a7c      	ldr	r2, [pc, #496]	; (8006880 <UART_SetConfig+0x2e8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d138      	bne.n	8006704 <UART_SetConfig+0x16c>
 8006692:	4b7a      	ldr	r3, [pc, #488]	; (800687c <UART_SetConfig+0x2e4>)
 8006694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006698:	f003 030c 	and.w	r3, r3, #12
 800669c:	2b0c      	cmp	r3, #12
 800669e:	d82d      	bhi.n	80066fc <UART_SetConfig+0x164>
 80066a0:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <UART_SetConfig+0x110>)
 80066a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a6:	bf00      	nop
 80066a8:	080066dd 	.word	0x080066dd
 80066ac:	080066fd 	.word	0x080066fd
 80066b0:	080066fd 	.word	0x080066fd
 80066b4:	080066fd 	.word	0x080066fd
 80066b8:	080066ed 	.word	0x080066ed
 80066bc:	080066fd 	.word	0x080066fd
 80066c0:	080066fd 	.word	0x080066fd
 80066c4:	080066fd 	.word	0x080066fd
 80066c8:	080066e5 	.word	0x080066e5
 80066cc:	080066fd 	.word	0x080066fd
 80066d0:	080066fd 	.word	0x080066fd
 80066d4:	080066fd 	.word	0x080066fd
 80066d8:	080066f5 	.word	0x080066f5
 80066dc:	2300      	movs	r3, #0
 80066de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066e2:	e0d8      	b.n	8006896 <UART_SetConfig+0x2fe>
 80066e4:	2302      	movs	r3, #2
 80066e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ea:	e0d4      	b.n	8006896 <UART_SetConfig+0x2fe>
 80066ec:	2304      	movs	r3, #4
 80066ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066f2:	e0d0      	b.n	8006896 <UART_SetConfig+0x2fe>
 80066f4:	2308      	movs	r3, #8
 80066f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066fa:	e0cc      	b.n	8006896 <UART_SetConfig+0x2fe>
 80066fc:	2310      	movs	r3, #16
 80066fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006702:	e0c8      	b.n	8006896 <UART_SetConfig+0x2fe>
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a5e      	ldr	r2, [pc, #376]	; (8006884 <UART_SetConfig+0x2ec>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d125      	bne.n	800675a <UART_SetConfig+0x1c2>
 800670e:	4b5b      	ldr	r3, [pc, #364]	; (800687c <UART_SetConfig+0x2e4>)
 8006710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006714:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006718:	2b30      	cmp	r3, #48	; 0x30
 800671a:	d016      	beq.n	800674a <UART_SetConfig+0x1b2>
 800671c:	2b30      	cmp	r3, #48	; 0x30
 800671e:	d818      	bhi.n	8006752 <UART_SetConfig+0x1ba>
 8006720:	2b20      	cmp	r3, #32
 8006722:	d00a      	beq.n	800673a <UART_SetConfig+0x1a2>
 8006724:	2b20      	cmp	r3, #32
 8006726:	d814      	bhi.n	8006752 <UART_SetConfig+0x1ba>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <UART_SetConfig+0x19a>
 800672c:	2b10      	cmp	r3, #16
 800672e:	d008      	beq.n	8006742 <UART_SetConfig+0x1aa>
 8006730:	e00f      	b.n	8006752 <UART_SetConfig+0x1ba>
 8006732:	2300      	movs	r3, #0
 8006734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006738:	e0ad      	b.n	8006896 <UART_SetConfig+0x2fe>
 800673a:	2302      	movs	r3, #2
 800673c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006740:	e0a9      	b.n	8006896 <UART_SetConfig+0x2fe>
 8006742:	2304      	movs	r3, #4
 8006744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006748:	e0a5      	b.n	8006896 <UART_SetConfig+0x2fe>
 800674a:	2308      	movs	r3, #8
 800674c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006750:	e0a1      	b.n	8006896 <UART_SetConfig+0x2fe>
 8006752:	2310      	movs	r3, #16
 8006754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006758:	e09d      	b.n	8006896 <UART_SetConfig+0x2fe>
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a4a      	ldr	r2, [pc, #296]	; (8006888 <UART_SetConfig+0x2f0>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d125      	bne.n	80067b0 <UART_SetConfig+0x218>
 8006764:	4b45      	ldr	r3, [pc, #276]	; (800687c <UART_SetConfig+0x2e4>)
 8006766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800676a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800676e:	2bc0      	cmp	r3, #192	; 0xc0
 8006770:	d016      	beq.n	80067a0 <UART_SetConfig+0x208>
 8006772:	2bc0      	cmp	r3, #192	; 0xc0
 8006774:	d818      	bhi.n	80067a8 <UART_SetConfig+0x210>
 8006776:	2b80      	cmp	r3, #128	; 0x80
 8006778:	d00a      	beq.n	8006790 <UART_SetConfig+0x1f8>
 800677a:	2b80      	cmp	r3, #128	; 0x80
 800677c:	d814      	bhi.n	80067a8 <UART_SetConfig+0x210>
 800677e:	2b00      	cmp	r3, #0
 8006780:	d002      	beq.n	8006788 <UART_SetConfig+0x1f0>
 8006782:	2b40      	cmp	r3, #64	; 0x40
 8006784:	d008      	beq.n	8006798 <UART_SetConfig+0x200>
 8006786:	e00f      	b.n	80067a8 <UART_SetConfig+0x210>
 8006788:	2300      	movs	r3, #0
 800678a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800678e:	e082      	b.n	8006896 <UART_SetConfig+0x2fe>
 8006790:	2302      	movs	r3, #2
 8006792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006796:	e07e      	b.n	8006896 <UART_SetConfig+0x2fe>
 8006798:	2304      	movs	r3, #4
 800679a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800679e:	e07a      	b.n	8006896 <UART_SetConfig+0x2fe>
 80067a0:	2308      	movs	r3, #8
 80067a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067a6:	e076      	b.n	8006896 <UART_SetConfig+0x2fe>
 80067a8:	2310      	movs	r3, #16
 80067aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ae:	e072      	b.n	8006896 <UART_SetConfig+0x2fe>
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a35      	ldr	r2, [pc, #212]	; (800688c <UART_SetConfig+0x2f4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d12a      	bne.n	8006810 <UART_SetConfig+0x278>
 80067ba:	4b30      	ldr	r3, [pc, #192]	; (800687c <UART_SetConfig+0x2e4>)
 80067bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067c8:	d01a      	beq.n	8006800 <UART_SetConfig+0x268>
 80067ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067ce:	d81b      	bhi.n	8006808 <UART_SetConfig+0x270>
 80067d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d4:	d00c      	beq.n	80067f0 <UART_SetConfig+0x258>
 80067d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067da:	d815      	bhi.n	8006808 <UART_SetConfig+0x270>
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <UART_SetConfig+0x250>
 80067e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067e4:	d008      	beq.n	80067f8 <UART_SetConfig+0x260>
 80067e6:	e00f      	b.n	8006808 <UART_SetConfig+0x270>
 80067e8:	2300      	movs	r3, #0
 80067ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ee:	e052      	b.n	8006896 <UART_SetConfig+0x2fe>
 80067f0:	2302      	movs	r3, #2
 80067f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067f6:	e04e      	b.n	8006896 <UART_SetConfig+0x2fe>
 80067f8:	2304      	movs	r3, #4
 80067fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067fe:	e04a      	b.n	8006896 <UART_SetConfig+0x2fe>
 8006800:	2308      	movs	r3, #8
 8006802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006806:	e046      	b.n	8006896 <UART_SetConfig+0x2fe>
 8006808:	2310      	movs	r3, #16
 800680a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800680e:	e042      	b.n	8006896 <UART_SetConfig+0x2fe>
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a17      	ldr	r2, [pc, #92]	; (8006874 <UART_SetConfig+0x2dc>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d13a      	bne.n	8006890 <UART_SetConfig+0x2f8>
 800681a:	4b18      	ldr	r3, [pc, #96]	; (800687c <UART_SetConfig+0x2e4>)
 800681c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006820:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006824:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006828:	d01a      	beq.n	8006860 <UART_SetConfig+0x2c8>
 800682a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800682e:	d81b      	bhi.n	8006868 <UART_SetConfig+0x2d0>
 8006830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006834:	d00c      	beq.n	8006850 <UART_SetConfig+0x2b8>
 8006836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800683a:	d815      	bhi.n	8006868 <UART_SetConfig+0x2d0>
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <UART_SetConfig+0x2b0>
 8006840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006844:	d008      	beq.n	8006858 <UART_SetConfig+0x2c0>
 8006846:	e00f      	b.n	8006868 <UART_SetConfig+0x2d0>
 8006848:	2300      	movs	r3, #0
 800684a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800684e:	e022      	b.n	8006896 <UART_SetConfig+0x2fe>
 8006850:	2302      	movs	r3, #2
 8006852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006856:	e01e      	b.n	8006896 <UART_SetConfig+0x2fe>
 8006858:	2304      	movs	r3, #4
 800685a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800685e:	e01a      	b.n	8006896 <UART_SetConfig+0x2fe>
 8006860:	2308      	movs	r3, #8
 8006862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006866:	e016      	b.n	8006896 <UART_SetConfig+0x2fe>
 8006868:	2310      	movs	r3, #16
 800686a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800686e:	e012      	b.n	8006896 <UART_SetConfig+0x2fe>
 8006870:	cfff69f3 	.word	0xcfff69f3
 8006874:	40008000 	.word	0x40008000
 8006878:	40013800 	.word	0x40013800
 800687c:	40021000 	.word	0x40021000
 8006880:	40004400 	.word	0x40004400
 8006884:	40004800 	.word	0x40004800
 8006888:	40004c00 	.word	0x40004c00
 800688c:	40005000 	.word	0x40005000
 8006890:	2310      	movs	r3, #16
 8006892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4aae      	ldr	r2, [pc, #696]	; (8006b54 <UART_SetConfig+0x5bc>)
 800689c:	4293      	cmp	r3, r2
 800689e:	f040 8097 	bne.w	80069d0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068a6:	2b08      	cmp	r3, #8
 80068a8:	d823      	bhi.n	80068f2 <UART_SetConfig+0x35a>
 80068aa:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <UART_SetConfig+0x318>)
 80068ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b0:	080068d5 	.word	0x080068d5
 80068b4:	080068f3 	.word	0x080068f3
 80068b8:	080068dd 	.word	0x080068dd
 80068bc:	080068f3 	.word	0x080068f3
 80068c0:	080068e3 	.word	0x080068e3
 80068c4:	080068f3 	.word	0x080068f3
 80068c8:	080068f3 	.word	0x080068f3
 80068cc:	080068f3 	.word	0x080068f3
 80068d0:	080068eb 	.word	0x080068eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068d4:	f7fe fbc0 	bl	8005058 <HAL_RCC_GetPCLK1Freq>
 80068d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068da:	e010      	b.n	80068fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068dc:	4b9e      	ldr	r3, [pc, #632]	; (8006b58 <UART_SetConfig+0x5c0>)
 80068de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068e0:	e00d      	b.n	80068fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068e2:	f7fe fb21 	bl	8004f28 <HAL_RCC_GetSysClockFreq>
 80068e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068e8:	e009      	b.n	80068fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068f0:	e005      	b.n	80068fe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80068fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 8130 	beq.w	8006b66 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	4a94      	ldr	r2, [pc, #592]	; (8006b5c <UART_SetConfig+0x5c4>)
 800690c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006910:	461a      	mov	r2, r3
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	fbb3 f3f2 	udiv	r3, r3, r2
 8006918:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	4613      	mov	r3, r2
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	4413      	add	r3, r2
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	429a      	cmp	r2, r3
 8006928:	d305      	bcc.n	8006936 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	429a      	cmp	r2, r3
 8006934:	d903      	bls.n	800693e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800693c:	e113      	b.n	8006b66 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	2200      	movs	r2, #0
 8006942:	60bb      	str	r3, [r7, #8]
 8006944:	60fa      	str	r2, [r7, #12]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	4a84      	ldr	r2, [pc, #528]	; (8006b5c <UART_SetConfig+0x5c4>)
 800694c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006950:	b29b      	uxth	r3, r3
 8006952:	2200      	movs	r2, #0
 8006954:	603b      	str	r3, [r7, #0]
 8006956:	607a      	str	r2, [r7, #4]
 8006958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800695c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006960:	f7fa f93a 	bl	8000bd8 <__aeabi_uldivmod>
 8006964:	4602      	mov	r2, r0
 8006966:	460b      	mov	r3, r1
 8006968:	4610      	mov	r0, r2
 800696a:	4619      	mov	r1, r3
 800696c:	f04f 0200 	mov.w	r2, #0
 8006970:	f04f 0300 	mov.w	r3, #0
 8006974:	020b      	lsls	r3, r1, #8
 8006976:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800697a:	0202      	lsls	r2, r0, #8
 800697c:	6979      	ldr	r1, [r7, #20]
 800697e:	6849      	ldr	r1, [r1, #4]
 8006980:	0849      	lsrs	r1, r1, #1
 8006982:	2000      	movs	r0, #0
 8006984:	460c      	mov	r4, r1
 8006986:	4605      	mov	r5, r0
 8006988:	eb12 0804 	adds.w	r8, r2, r4
 800698c:	eb43 0905 	adc.w	r9, r3, r5
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	469a      	mov	sl, r3
 8006998:	4693      	mov	fp, r2
 800699a:	4652      	mov	r2, sl
 800699c:	465b      	mov	r3, fp
 800699e:	4640      	mov	r0, r8
 80069a0:	4649      	mov	r1, r9
 80069a2:	f7fa f919 	bl	8000bd8 <__aeabi_uldivmod>
 80069a6:	4602      	mov	r2, r0
 80069a8:	460b      	mov	r3, r1
 80069aa:	4613      	mov	r3, r2
 80069ac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069b4:	d308      	bcc.n	80069c8 <UART_SetConfig+0x430>
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069bc:	d204      	bcs.n	80069c8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6a3a      	ldr	r2, [r7, #32]
 80069c4:	60da      	str	r2, [r3, #12]
 80069c6:	e0ce      	b.n	8006b66 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80069ce:	e0ca      	b.n	8006b66 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069d8:	d166      	bne.n	8006aa8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80069da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069de:	2b08      	cmp	r3, #8
 80069e0:	d827      	bhi.n	8006a32 <UART_SetConfig+0x49a>
 80069e2:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <UART_SetConfig+0x450>)
 80069e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e8:	08006a0d 	.word	0x08006a0d
 80069ec:	08006a15 	.word	0x08006a15
 80069f0:	08006a1d 	.word	0x08006a1d
 80069f4:	08006a33 	.word	0x08006a33
 80069f8:	08006a23 	.word	0x08006a23
 80069fc:	08006a33 	.word	0x08006a33
 8006a00:	08006a33 	.word	0x08006a33
 8006a04:	08006a33 	.word	0x08006a33
 8006a08:	08006a2b 	.word	0x08006a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a0c:	f7fe fb24 	bl	8005058 <HAL_RCC_GetPCLK1Freq>
 8006a10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a12:	e014      	b.n	8006a3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a14:	f7fe fb36 	bl	8005084 <HAL_RCC_GetPCLK2Freq>
 8006a18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a1a:	e010      	b.n	8006a3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a1c:	4b4e      	ldr	r3, [pc, #312]	; (8006b58 <UART_SetConfig+0x5c0>)
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a20:	e00d      	b.n	8006a3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a22:	f7fe fa81 	bl	8004f28 <HAL_RCC_GetSysClockFreq>
 8006a26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a28:	e009      	b.n	8006a3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a30:	e005      	b.n	8006a3e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 8090 	beq.w	8006b66 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	4a44      	ldr	r2, [pc, #272]	; (8006b5c <UART_SetConfig+0x5c4>)
 8006a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a50:	461a      	mov	r2, r3
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a58:	005a      	lsls	r2, r3, #1
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	085b      	lsrs	r3, r3, #1
 8006a60:	441a      	add	r2, r3
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	2b0f      	cmp	r3, #15
 8006a70:	d916      	bls.n	8006aa0 <UART_SetConfig+0x508>
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a78:	d212      	bcs.n	8006aa0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	f023 030f 	bic.w	r3, r3, #15
 8006a82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	085b      	lsrs	r3, r3, #1
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	f003 0307 	and.w	r3, r3, #7
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	8bfb      	ldrh	r3, [r7, #30]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	8bfa      	ldrh	r2, [r7, #30]
 8006a9c:	60da      	str	r2, [r3, #12]
 8006a9e:	e062      	b.n	8006b66 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006aa6:	e05e      	b.n	8006b66 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006aa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006aac:	2b08      	cmp	r3, #8
 8006aae:	d828      	bhi.n	8006b02 <UART_SetConfig+0x56a>
 8006ab0:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <UART_SetConfig+0x520>)
 8006ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab6:	bf00      	nop
 8006ab8:	08006add 	.word	0x08006add
 8006abc:	08006ae5 	.word	0x08006ae5
 8006ac0:	08006aed 	.word	0x08006aed
 8006ac4:	08006b03 	.word	0x08006b03
 8006ac8:	08006af3 	.word	0x08006af3
 8006acc:	08006b03 	.word	0x08006b03
 8006ad0:	08006b03 	.word	0x08006b03
 8006ad4:	08006b03 	.word	0x08006b03
 8006ad8:	08006afb 	.word	0x08006afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006adc:	f7fe fabc 	bl	8005058 <HAL_RCC_GetPCLK1Freq>
 8006ae0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ae2:	e014      	b.n	8006b0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ae4:	f7fe face 	bl	8005084 <HAL_RCC_GetPCLK2Freq>
 8006ae8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006aea:	e010      	b.n	8006b0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006aec:	4b1a      	ldr	r3, [pc, #104]	; (8006b58 <UART_SetConfig+0x5c0>)
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006af0:	e00d      	b.n	8006b0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006af2:	f7fe fa19 	bl	8004f28 <HAL_RCC_GetSysClockFreq>
 8006af6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006af8:	e009      	b.n	8006b0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006afe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b00:	e005      	b.n	8006b0e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006b0c:	bf00      	nop
    }

    if (pclk != 0U)
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d028      	beq.n	8006b66 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	4a10      	ldr	r2, [pc, #64]	; (8006b5c <UART_SetConfig+0x5c4>)
 8006b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	085b      	lsrs	r3, r3, #1
 8006b2c:	441a      	add	r2, r3
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b36:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b38:	6a3b      	ldr	r3, [r7, #32]
 8006b3a:	2b0f      	cmp	r3, #15
 8006b3c:	d910      	bls.n	8006b60 <UART_SetConfig+0x5c8>
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b44:	d20c      	bcs.n	8006b60 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60da      	str	r2, [r3, #12]
 8006b50:	e009      	b.n	8006b66 <UART_SetConfig+0x5ce>
 8006b52:	bf00      	nop
 8006b54:	40008000 	.word	0x40008000
 8006b58:	00f42400 	.word	0x00f42400
 8006b5c:	0800aff0 	.word	0x0800aff0
      }
      else
      {
        ret = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006b82:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3730      	adds	r7, #48	; 0x30
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006b90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00a      	beq.n	8006bba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00a      	beq.n	8006bdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00a      	beq.n	8006bfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c02:	f003 0308 	and.w	r3, r3, #8
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c24:	f003 0310 	and.w	r3, r3, #16
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d01a      	beq.n	8006ca6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c8e:	d10a      	bne.n	8006ca6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00a      	beq.n	8006cc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	605a      	str	r2, [r3, #4]
  }
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af02      	add	r7, sp, #8
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ce4:	f7fa fed8 	bl	8001a98 <HAL_GetTick>
 8006ce8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0308 	and.w	r3, r3, #8
 8006cf4:	2b08      	cmp	r3, #8
 8006cf6:	d10e      	bne.n	8006d16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f82f 	bl	8006d6a <UART_WaitOnFlagUntilTimeout>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e025      	b.n	8006d62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0304 	and.w	r3, r3, #4
 8006d20:	2b04      	cmp	r3, #4
 8006d22:	d10e      	bne.n	8006d42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f819 	bl	8006d6a <UART_WaitOnFlagUntilTimeout>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e00f      	b.n	8006d62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b09c      	sub	sp, #112	; 0x70
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	603b      	str	r3, [r7, #0]
 8006d76:	4613      	mov	r3, r2
 8006d78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d7a:	e0a9      	b.n	8006ed0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d82:	f000 80a5 	beq.w	8006ed0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d86:	f7fa fe87 	bl	8001a98 <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d302      	bcc.n	8006d9c <UART_WaitOnFlagUntilTimeout+0x32>
 8006d96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d140      	bne.n	8006e1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006db0:	667b      	str	r3, [r7, #100]	; 0x64
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dbc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006dc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e6      	bne.n	8006d9c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3308      	adds	r3, #8
 8006dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de0:	f023 0301 	bic.w	r3, r3, #1
 8006de4:	663b      	str	r3, [r7, #96]	; 0x60
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3308      	adds	r3, #8
 8006dec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006dee:	64ba      	str	r2, [r7, #72]	; 0x48
 8006df0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006df4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1e5      	bne.n	8006dce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e069      	b.n	8006ef2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d051      	beq.n	8006ed0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e3a:	d149      	bne.n	8006ed0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	461a      	mov	r2, r3
 8006e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e64:	637b      	str	r3, [r7, #52]	; 0x34
 8006e66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e6      	bne.n	8006e46 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	e853 3f00 	ldrex	r3, [r3]
 8006e86:	613b      	str	r3, [r7, #16]
   return(result);
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f023 0301 	bic.w	r3, r3, #1
 8006e8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3308      	adds	r3, #8
 8006e96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e98:	623a      	str	r2, [r7, #32]
 8006e9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	69f9      	ldr	r1, [r7, #28]
 8006e9e:	6a3a      	ldr	r2, [r7, #32]
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e5      	bne.n	8006e78 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e010      	b.n	8006ef2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	69da      	ldr	r2, [r3, #28]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	4013      	ands	r3, r2
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	bf0c      	ite	eq
 8006ee0:	2301      	moveq	r3, #1
 8006ee2:	2300      	movne	r3, #0
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	79fb      	ldrb	r3, [r7, #7]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	f43f af46 	beq.w	8006d7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3770      	adds	r7, #112	; 0x70
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b085      	sub	sp, #20
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d101      	bne.n	8006f10 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	e027      	b.n	8006f60 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2224      	movs	r2, #36	; 0x24
 8006f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0201 	bic.w	r2, r2, #1
 8006f36:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d101      	bne.n	8006f84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f80:	2302      	movs	r3, #2
 8006f82:	e02d      	b.n	8006fe0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2224      	movs	r2, #36	; 0x24
 8006f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0201 	bic.w	r2, r2, #1
 8006faa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f84f 	bl	8007064 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d101      	bne.n	8007000 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	e02d      	b.n	800705c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2224      	movs	r2, #36	; 0x24
 800700c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0201 	bic.w	r2, r2, #1
 8007026:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f811 	bl	8007064 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2220      	movs	r2, #32
 800704e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007070:	2b00      	cmp	r3, #0
 8007072:	d108      	bne.n	8007086 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007084:	e031      	b.n	80070ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007086:	2308      	movs	r3, #8
 8007088:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800708a:	2308      	movs	r3, #8
 800708c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	0e5b      	lsrs	r3, r3, #25
 8007096:	b2db      	uxtb	r3, r3
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	0f5b      	lsrs	r3, r3, #29
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	f003 0307 	and.w	r3, r3, #7
 80070ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	7b3a      	ldrb	r2, [r7, #12]
 80070b2:	4911      	ldr	r1, [pc, #68]	; (80070f8 <UARTEx_SetNbDataToProcess+0x94>)
 80070b4:	5c8a      	ldrb	r2, [r1, r2]
 80070b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070ba:	7b3a      	ldrb	r2, [r7, #12]
 80070bc:	490f      	ldr	r1, [pc, #60]	; (80070fc <UARTEx_SetNbDataToProcess+0x98>)
 80070be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
 80070ce:	7b7a      	ldrb	r2, [r7, #13]
 80070d0:	4909      	ldr	r1, [pc, #36]	; (80070f8 <UARTEx_SetNbDataToProcess+0x94>)
 80070d2:	5c8a      	ldrb	r2, [r1, r2]
 80070d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80070d8:	7b7a      	ldrb	r2, [r7, #13]
 80070da:	4908      	ldr	r1, [pc, #32]	; (80070fc <UARTEx_SetNbDataToProcess+0x98>)
 80070dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070de:	fb93 f3f2 	sdiv	r3, r3, r2
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80070ea:	bf00      	nop
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	0800b008 	.word	0x0800b008
 80070fc:	0800b010 	.word	0x0800b010

08007100 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007108:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800710c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b00      	cmp	r3, #0
 8007116:	d013      	beq.n	8007140 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007118:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800711c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007120:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00b      	beq.n	8007140 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007128:	e000      	b.n	800712c <ITM_SendChar+0x2c>
    {
      __NOP();
 800712a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800712c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0f9      	beq.n	800712a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007136:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	b2d2      	uxtb	r2, r2
 800713e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007140:	687b      	ldr	r3, [r7, #4]
}
 8007142:	4618      	mov	r0, r3
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
	...

08007150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007154:	f7fa fc38 	bl	80019c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007158:	f000 f898 	bl	800728c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800715c:	f000 fa90 	bl	8007680 <MX_GPIO_Init>
  MX_DMA_Init();
 8007160:	f000 fa64 	bl	800762c <MX_DMA_Init>
  MX_ADC1_Init();
 8007164:	f000 f8e4 	bl	8007330 <MX_ADC1_Init>
  MX_DAC1_Init();
 8007168:	f000 f948 	bl	80073fc <MX_DAC1_Init>
  MX_TIM2_Init();
 800716c:	f000 f9c6 	bl	80074fc <MX_TIM2_Init>
  MX_I2C2_Init();
 8007170:	f000 f984 	bl	800747c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8007174:	f000 fa0e 	bl	8007594 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //initialize sensors
  BSP_TSENSOR_Init();
 8007178:	f000 fda8 	bl	8007ccc <BSP_TSENSOR_Init>
  BSP_HSENSOR_Init();
 800717c:	f000 fd06 	bl	8007b8c <BSP_HSENSOR_Init>
  BSP_MAGNETO_Init();
 8007180:	f000 fd32 	bl	8007be8 <BSP_MAGNETO_Init>
  BSP_ACCELERO_Init();
 8007184:	f000 fc52 	bl	8007a2c <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 8007188:	f000 fca6 	bl	8007ad8 <BSP_GYRO_Init>
  BSP_PSENSOR_Init();
 800718c:	f000 fd70 	bl	8007c70 <BSP_PSENSOR_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  temp_value = BSP_TSENSOR_ReadTemp();
 8007190:	f000 fdb8 	bl	8007d04 <BSP_TSENSOR_ReadTemp>
 8007194:	eef0 7a40 	vmov.f32	s15, s0
 8007198:	4b2f      	ldr	r3, [pc, #188]	; (8007258 <main+0x108>)
 800719a:	edc3 7a00 	vstr	s15, [r3]
	  hum_value = BSP_HSENSOR_ReadHumidity();
 800719e:	f000 fd15 	bl	8007bcc <BSP_HSENSOR_ReadHumidity>
 80071a2:	eef0 7a40 	vmov.f32	s15, s0
 80071a6:	4b2d      	ldr	r3, [pc, #180]	; (800725c <main+0x10c>)
 80071a8:	edc3 7a00 	vstr	s15, [r3]
	  baro_value = BSP_PSENSOR_ReadPressure();
 80071ac:	f000 fd80 	bl	8007cb0 <BSP_PSENSOR_ReadPressure>
 80071b0:	eef0 7a40 	vmov.f32	s15, s0
 80071b4:	4b2a      	ldr	r3, [pc, #168]	; (8007260 <main+0x110>)
 80071b6:	edc3 7a00 	vstr	s15, [r3]
	  BSP_MAGNETO_GetXYZ(mag_xyz);
 80071ba:	482a      	ldr	r0, [pc, #168]	; (8007264 <main+0x114>)
 80071bc:	f000 fd40 	bl	8007c40 <BSP_MAGNETO_GetXYZ>
	  BSP_ACCELERO_AccGetXYZ(acc_xyz);
 80071c0:	4829      	ldr	r0, [pc, #164]	; (8007268 <main+0x118>)
 80071c2:	f000 fc71 	bl	8007aa8 <BSP_ACCELERO_AccGetXYZ>
	  BSP_GYRO_GetXYZ(gyro_xyz);
 80071c6:	4829      	ldr	r0, [pc, #164]	; (800726c <main+0x11c>)
 80071c8:	f000 fcc8 	bl	8007b5c <BSP_GYRO_GetXYZ>

//	  tof_value =
//	  gest_value

	  printf("temperature sensor value: %f\n", temp_value);
 80071cc:	4b22      	ldr	r3, [pc, #136]	; (8007258 <main+0x108>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7f9 f9d1 	bl	8000578 <__aeabi_f2d>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	4825      	ldr	r0, [pc, #148]	; (8007270 <main+0x120>)
 80071dc:	f001 fd4e 	bl	8008c7c <iprintf>
	  printf("humidity sensor value: %f\n", hum_value);
 80071e0:	4b1e      	ldr	r3, [pc, #120]	; (800725c <main+0x10c>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7f9 f9c7 	bl	8000578 <__aeabi_f2d>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	4821      	ldr	r0, [pc, #132]	; (8007274 <main+0x124>)
 80071f0:	f001 fd44 	bl	8008c7c <iprintf>
	  printf("barometer sensor value: %f\n", baro_value);
 80071f4:	4b1a      	ldr	r3, [pc, #104]	; (8007260 <main+0x110>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7f9 f9bd 	bl	8000578 <__aeabi_f2d>
 80071fe:	4602      	mov	r2, r0
 8007200:	460b      	mov	r3, r1
 8007202:	481d      	ldr	r0, [pc, #116]	; (8007278 <main+0x128>)
 8007204:	f001 fd3a 	bl	8008c7c <iprintf>

	  printf("magnetometer sensor value: x: %f, y: %f, z: %f \n", mag_xyz[0], mag_xyz[1], mag_xyz[0]);
 8007208:	4b16      	ldr	r3, [pc, #88]	; (8007264 <main+0x114>)
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	4619      	mov	r1, r3
 800720e:	4b15      	ldr	r3, [pc, #84]	; (8007264 <main+0x114>)
 8007210:	885b      	ldrh	r3, [r3, #2]
 8007212:	461a      	mov	r2, r3
 8007214:	4b13      	ldr	r3, [pc, #76]	; (8007264 <main+0x114>)
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	4818      	ldr	r0, [pc, #96]	; (800727c <main+0x12c>)
 800721a:	f001 fd2f 	bl	8008c7c <iprintf>
	  printf("accelerator sensor value:  x: %f, y: %f, z: %f \n", acc_xyz[0], acc_xyz[1], acc_xyz[0]);
 800721e:	4b12      	ldr	r3, [pc, #72]	; (8007268 <main+0x118>)
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	4619      	mov	r1, r3
 8007224:	4b10      	ldr	r3, [pc, #64]	; (8007268 <main+0x118>)
 8007226:	885b      	ldrh	r3, [r3, #2]
 8007228:	461a      	mov	r2, r3
 800722a:	4b0f      	ldr	r3, [pc, #60]	; (8007268 <main+0x118>)
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	4814      	ldr	r0, [pc, #80]	; (8007280 <main+0x130>)
 8007230:	f001 fd24 	bl	8008c7c <iprintf>
	  printf("gyroscope sensor value:  x: %f, y: %f, z: %f \n", gyro_xyz[0], gyro_xyz[1], gyro_xyz[0]);
 8007234:	4b0d      	ldr	r3, [pc, #52]	; (800726c <main+0x11c>)
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	4619      	mov	r1, r3
 800723a:	4b0c      	ldr	r3, [pc, #48]	; (800726c <main+0x11c>)
 800723c:	885b      	ldrh	r3, [r3, #2]
 800723e:	461a      	mov	r2, r3
 8007240:	4b0a      	ldr	r3, [pc, #40]	; (800726c <main+0x11c>)
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	480f      	ldr	r0, [pc, #60]	; (8007284 <main+0x134>)
 8007246:	f001 fd19 	bl	8008c7c <iprintf>

	  printf("--------------------\n");
 800724a:	480f      	ldr	r0, [pc, #60]	; (8007288 <main+0x138>)
 800724c:	f001 fd9c 	bl	8008d88 <puts>

//	  printf("time of flight sensor value: %f\n", tof_value);
//	  printf("gesture detection sensor value: %f\n", gest_value);

	  HAL_Delay(2);
 8007250:	2002      	movs	r0, #2
 8007252:	f7fa fc2d 	bl	8001ab0 <HAL_Delay>
  {
 8007256:	e79b      	b.n	8007190 <main+0x40>
 8007258:	200004cc 	.word	0x200004cc
 800725c:	200004d0 	.word	0x200004d0
 8007260:	200004ec 	.word	0x200004ec
 8007264:	200004d4 	.word	0x200004d4
 8007268:	200004dc 	.word	0x200004dc
 800726c:	200004e4 	.word	0x200004e4
 8007270:	0800aee8 	.word	0x0800aee8
 8007274:	0800af08 	.word	0x0800af08
 8007278:	0800af24 	.word	0x0800af24
 800727c:	0800af40 	.word	0x0800af40
 8007280:	0800af74 	.word	0x0800af74
 8007284:	0800afa8 	.word	0x0800afa8
 8007288:	0800afd8 	.word	0x0800afd8

0800728c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b096      	sub	sp, #88	; 0x58
 8007290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007292:	f107 0314 	add.w	r3, r7, #20
 8007296:	2244      	movs	r2, #68	; 0x44
 8007298:	2100      	movs	r1, #0
 800729a:	4618      	mov	r0, r3
 800729c:	f001 f87c 	bl	8008398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80072a0:	463b      	mov	r3, r7
 80072a2:	2200      	movs	r2, #0
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	605a      	str	r2, [r3, #4]
 80072a8:	609a      	str	r2, [r3, #8]
 80072aa:	60da      	str	r2, [r3, #12]
 80072ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80072ae:	2000      	movs	r0, #0
 80072b0:	f7fd f842 	bl	8004338 <HAL_PWREx_ControlVoltageScaling>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <SystemClock_Config+0x32>
  {
    Error_Handler();
 80072ba:	f000 fa61 	bl	8007780 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80072be:	2310      	movs	r3, #16
 80072c0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80072c2:	2301      	movs	r3, #1
 80072c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80072ca:	2360      	movs	r3, #96	; 0x60
 80072cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80072ce:	2302      	movs	r3, #2
 80072d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80072d2:	2301      	movs	r3, #1
 80072d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80072d6:	2301      	movs	r3, #1
 80072d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80072da:	233c      	movs	r3, #60	; 0x3c
 80072dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80072de:	2302      	movs	r3, #2
 80072e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80072e2:	2302      	movs	r3, #2
 80072e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80072e6:	2302      	movs	r3, #2
 80072e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80072ea:	f107 0314 	add.w	r3, r7, #20
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fd f8c6 	bl	8004480 <HAL_RCC_OscConfig>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 80072fa:	f000 fa41 	bl	8007780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80072fe:	230f      	movs	r3, #15
 8007300:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007302:	2303      	movs	r3, #3
 8007304:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007306:	2300      	movs	r3, #0
 8007308:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800730a:	2300      	movs	r3, #0
 800730c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800730e:	2300      	movs	r3, #0
 8007310:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007312:	463b      	mov	r3, r7
 8007314:	2105      	movs	r1, #5
 8007316:	4618      	mov	r0, r3
 8007318:	f7fd fccc 	bl	8004cb4 <HAL_RCC_ClockConfig>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8007322:	f000 fa2d 	bl	8007780 <Error_Handler>
  }
}
 8007326:	bf00      	nop
 8007328:	3758      	adds	r7, #88	; 0x58
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007336:	463b      	mov	r3, r7
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	605a      	str	r2, [r3, #4]
 800733e:	609a      	str	r2, [r3, #8]
 8007340:	60da      	str	r2, [r3, #12]
 8007342:	611a      	str	r2, [r3, #16]
 8007344:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007346:	4b2a      	ldr	r3, [pc, #168]	; (80073f0 <MX_ADC1_Init+0xc0>)
 8007348:	4a2a      	ldr	r2, [pc, #168]	; (80073f4 <MX_ADC1_Init+0xc4>)
 800734a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800734c:	4b28      	ldr	r3, [pc, #160]	; (80073f0 <MX_ADC1_Init+0xc0>)
 800734e:	2200      	movs	r2, #0
 8007350:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007352:	4b27      	ldr	r3, [pc, #156]	; (80073f0 <MX_ADC1_Init+0xc0>)
 8007354:	2200      	movs	r2, #0
 8007356:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007358:	4b25      	ldr	r3, [pc, #148]	; (80073f0 <MX_ADC1_Init+0xc0>)
 800735a:	2200      	movs	r2, #0
 800735c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800735e:	4b24      	ldr	r3, [pc, #144]	; (80073f0 <MX_ADC1_Init+0xc0>)
 8007360:	2200      	movs	r2, #0
 8007362:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007364:	4b22      	ldr	r3, [pc, #136]	; (80073f0 <MX_ADC1_Init+0xc0>)
 8007366:	2204      	movs	r2, #4
 8007368:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800736a:	4b21      	ldr	r3, [pc, #132]	; (80073f0 <MX_ADC1_Init+0xc0>)
 800736c:	2200      	movs	r2, #0
 800736e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007370:	4b1f      	ldr	r3, [pc, #124]	; (80073f0 <MX_ADC1_Init+0xc0>)
 8007372:	2200      	movs	r2, #0
 8007374:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8007376:	4b1e      	ldr	r3, [pc, #120]	; (80073f0 <MX_ADC1_Init+0xc0>)
 8007378:	2201      	movs	r2, #1
 800737a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800737c:	4b1c      	ldr	r3, [pc, #112]	; (80073f0 <MX_ADC1_Init+0xc0>)
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007384:	4b1a      	ldr	r3, [pc, #104]	; (80073f0 <MX_ADC1_Init+0xc0>)
 8007386:	2200      	movs	r2, #0
 8007388:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800738a:	4b19      	ldr	r3, [pc, #100]	; (80073f0 <MX_ADC1_Init+0xc0>)
 800738c:	2200      	movs	r2, #0
 800738e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007390:	4b17      	ldr	r3, [pc, #92]	; (80073f0 <MX_ADC1_Init+0xc0>)
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007398:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <MX_ADC1_Init+0xc0>)
 800739a:	2200      	movs	r2, #0
 800739c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800739e:	4b14      	ldr	r3, [pc, #80]	; (80073f0 <MX_ADC1_Init+0xc0>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 80073a6:	4b12      	ldr	r3, [pc, #72]	; (80073f0 <MX_ADC1_Init+0xc0>)
 80073a8:	2204      	movs	r2, #4
 80073aa:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80073ac:	4810      	ldr	r0, [pc, #64]	; (80073f0 <MX_ADC1_Init+0xc0>)
 80073ae:	f7fa fd43 	bl	8001e38 <HAL_ADC_Init>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80073b8:	f000 f9e2 	bl	8007780 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80073bc:	4b0e      	ldr	r3, [pc, #56]	; (80073f8 <MX_ADC1_Init+0xc8>)
 80073be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80073c0:	2306      	movs	r3, #6
 80073c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80073c4:	2307      	movs	r3, #7
 80073c6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80073c8:	237f      	movs	r3, #127	; 0x7f
 80073ca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80073cc:	2304      	movs	r3, #4
 80073ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80073d0:	2300      	movs	r3, #0
 80073d2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80073d4:	463b      	mov	r3, r7
 80073d6:	4619      	mov	r1, r3
 80073d8:	4805      	ldr	r0, [pc, #20]	; (80073f0 <MX_ADC1_Init+0xc0>)
 80073da:	f7fa fe79 	bl	80020d0 <HAL_ADC_ConfigChannel>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d001      	beq.n	80073e8 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80073e4:	f000 f9cc 	bl	8007780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80073e8:	bf00      	nop
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	200002c0 	.word	0x200002c0
 80073f4:	50040000 	.word	0x50040000
 80073f8:	c7520000 	.word	0xc7520000

080073fc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b08a      	sub	sp, #40	; 0x28
 8007400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8007402:	463b      	mov	r3, r7
 8007404:	2228      	movs	r2, #40	; 0x28
 8007406:	2100      	movs	r1, #0
 8007408:	4618      	mov	r0, r3
 800740a:	f000 ffc5 	bl	8008398 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800740e:	4b19      	ldr	r3, [pc, #100]	; (8007474 <MX_DAC1_Init+0x78>)
 8007410:	4a19      	ldr	r2, [pc, #100]	; (8007478 <MX_DAC1_Init+0x7c>)
 8007412:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8007414:	4817      	ldr	r0, [pc, #92]	; (8007474 <MX_DAC1_Init+0x78>)
 8007416:	f7fb fb68 	bl	8002aea <HAL_DAC_Init>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8007420:	f000 f9ae 	bl	8007780 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8007424:	2300      	movs	r3, #0
 8007426:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8007428:	2300      	movs	r3, #0
 800742a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800742c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007430:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8007432:	2300      	movs	r3, #0
 8007434:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8007436:	2300      	movs	r3, #0
 8007438:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800743a:	2300      	movs	r3, #0
 800743c:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800743e:	463b      	mov	r3, r7
 8007440:	2200      	movs	r2, #0
 8007442:	4619      	mov	r1, r3
 8007444:	480b      	ldr	r0, [pc, #44]	; (8007474 <MX_DAC1_Init+0x78>)
 8007446:	f7fb fb73 	bl	8002b30 <HAL_DAC_ConfigChannel>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8007450:	f000 f996 	bl	8007780 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8007454:	463b      	mov	r3, r7
 8007456:	2210      	movs	r2, #16
 8007458:	4619      	mov	r1, r3
 800745a:	4806      	ldr	r0, [pc, #24]	; (8007474 <MX_DAC1_Init+0x78>)
 800745c:	f7fb fb68 	bl	8002b30 <HAL_DAC_ConfigChannel>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <MX_DAC1_Init+0x6e>
  {
    Error_Handler();
 8007466:	f000 f98b 	bl	8007780 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800746a:	bf00      	nop
 800746c:	3728      	adds	r7, #40	; 0x28
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20000328 	.word	0x20000328
 8007478:	40007400 	.word	0x40007400

0800747c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007480:	4b1b      	ldr	r3, [pc, #108]	; (80074f0 <MX_I2C2_Init+0x74>)
 8007482:	4a1c      	ldr	r2, [pc, #112]	; (80074f4 <MX_I2C2_Init+0x78>)
 8007484:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8007486:	4b1a      	ldr	r3, [pc, #104]	; (80074f0 <MX_I2C2_Init+0x74>)
 8007488:	4a1b      	ldr	r2, [pc, #108]	; (80074f8 <MX_I2C2_Init+0x7c>)
 800748a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800748c:	4b18      	ldr	r3, [pc, #96]	; (80074f0 <MX_I2C2_Init+0x74>)
 800748e:	2200      	movs	r2, #0
 8007490:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007492:	4b17      	ldr	r3, [pc, #92]	; (80074f0 <MX_I2C2_Init+0x74>)
 8007494:	2201      	movs	r2, #1
 8007496:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007498:	4b15      	ldr	r3, [pc, #84]	; (80074f0 <MX_I2C2_Init+0x74>)
 800749a:	2200      	movs	r2, #0
 800749c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800749e:	4b14      	ldr	r3, [pc, #80]	; (80074f0 <MX_I2C2_Init+0x74>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80074a4:	4b12      	ldr	r3, [pc, #72]	; (80074f0 <MX_I2C2_Init+0x74>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80074aa:	4b11      	ldr	r3, [pc, #68]	; (80074f0 <MX_I2C2_Init+0x74>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80074b0:	4b0f      	ldr	r3, [pc, #60]	; (80074f0 <MX_I2C2_Init+0x74>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80074b6:	480e      	ldr	r0, [pc, #56]	; (80074f0 <MX_I2C2_Init+0x74>)
 80074b8:	f7fc f8f3 	bl	80036a2 <HAL_I2C_Init>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80074c2:	f000 f95d 	bl	8007780 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80074c6:	2100      	movs	r1, #0
 80074c8:	4809      	ldr	r0, [pc, #36]	; (80074f0 <MX_I2C2_Init+0x74>)
 80074ca:	f7fc fe7d 	bl	80041c8 <HAL_I2CEx_ConfigAnalogFilter>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80074d4:	f000 f954 	bl	8007780 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80074d8:	2100      	movs	r1, #0
 80074da:	4805      	ldr	r0, [pc, #20]	; (80074f0 <MX_I2C2_Init+0x74>)
 80074dc:	f7fc febf 	bl	800425e <HAL_I2CEx_ConfigDigitalFilter>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80074e6:	f000 f94b 	bl	8007780 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80074ea:	bf00      	nop
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	2000039c 	.word	0x2000039c
 80074f4:	40005800 	.word	0x40005800
 80074f8:	307075b1 	.word	0x307075b1

080074fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b088      	sub	sp, #32
 8007500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007502:	f107 0310 	add.w	r3, r7, #16
 8007506:	2200      	movs	r2, #0
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	605a      	str	r2, [r3, #4]
 800750c:	609a      	str	r2, [r3, #8]
 800750e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007510:	1d3b      	adds	r3, r7, #4
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	605a      	str	r2, [r3, #4]
 8007518:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800751a:	4b1d      	ldr	r3, [pc, #116]	; (8007590 <MX_TIM2_Init+0x94>)
 800751c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007520:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 120;
 8007522:	4b1b      	ldr	r3, [pc, #108]	; (8007590 <MX_TIM2_Init+0x94>)
 8007524:	2278      	movs	r2, #120	; 0x78
 8007526:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007528:	4b19      	ldr	r3, [pc, #100]	; (8007590 <MX_TIM2_Init+0x94>)
 800752a:	2200      	movs	r2, #0
 800752c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 23;
 800752e:	4b18      	ldr	r3, [pc, #96]	; (8007590 <MX_TIM2_Init+0x94>)
 8007530:	2217      	movs	r2, #23
 8007532:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007534:	4b16      	ldr	r3, [pc, #88]	; (8007590 <MX_TIM2_Init+0x94>)
 8007536:	2200      	movs	r2, #0
 8007538:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800753a:	4b15      	ldr	r3, [pc, #84]	; (8007590 <MX_TIM2_Init+0x94>)
 800753c:	2200      	movs	r2, #0
 800753e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007540:	4813      	ldr	r0, [pc, #76]	; (8007590 <MX_TIM2_Init+0x94>)
 8007542:	f7fe fb8d 	bl	8005c60 <HAL_TIM_Base_Init>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800754c:	f000 f918 	bl	8007780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007554:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007556:	f107 0310 	add.w	r3, r7, #16
 800755a:	4619      	mov	r1, r3
 800755c:	480c      	ldr	r0, [pc, #48]	; (8007590 <MX_TIM2_Init+0x94>)
 800755e:	f7fe fcf5 	bl	8005f4c <HAL_TIM_ConfigClockSource>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8007568:	f000 f90a 	bl	8007780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800756c:	2300      	movs	r3, #0
 800756e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007570:	2300      	movs	r3, #0
 8007572:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007574:	1d3b      	adds	r3, r7, #4
 8007576:	4619      	mov	r1, r3
 8007578:	4805      	ldr	r0, [pc, #20]	; (8007590 <MX_TIM2_Init+0x94>)
 800757a:	f7fe ff17 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d001      	beq.n	8007588 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007584:	f000 f8fc 	bl	8007780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007588:	bf00      	nop
 800758a:	3720      	adds	r7, #32
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	200003f0 	.word	0x200003f0

08007594 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007598:	4b22      	ldr	r3, [pc, #136]	; (8007624 <MX_USART2_UART_Init+0x90>)
 800759a:	4a23      	ldr	r2, [pc, #140]	; (8007628 <MX_USART2_UART_Init+0x94>)
 800759c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800759e:	4b21      	ldr	r3, [pc, #132]	; (8007624 <MX_USART2_UART_Init+0x90>)
 80075a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80075a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80075a6:	4b1f      	ldr	r3, [pc, #124]	; (8007624 <MX_USART2_UART_Init+0x90>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80075ac:	4b1d      	ldr	r3, [pc, #116]	; (8007624 <MX_USART2_UART_Init+0x90>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80075b2:	4b1c      	ldr	r3, [pc, #112]	; (8007624 <MX_USART2_UART_Init+0x90>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80075b8:	4b1a      	ldr	r3, [pc, #104]	; (8007624 <MX_USART2_UART_Init+0x90>)
 80075ba:	220c      	movs	r2, #12
 80075bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80075be:	4b19      	ldr	r3, [pc, #100]	; (8007624 <MX_USART2_UART_Init+0x90>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80075c4:	4b17      	ldr	r3, [pc, #92]	; (8007624 <MX_USART2_UART_Init+0x90>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80075ca:	4b16      	ldr	r3, [pc, #88]	; (8007624 <MX_USART2_UART_Init+0x90>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80075d0:	4b14      	ldr	r3, [pc, #80]	; (8007624 <MX_USART2_UART_Init+0x90>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80075d6:	4b13      	ldr	r3, [pc, #76]	; (8007624 <MX_USART2_UART_Init+0x90>)
 80075d8:	2200      	movs	r2, #0
 80075da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80075dc:	4811      	ldr	r0, [pc, #68]	; (8007624 <MX_USART2_UART_Init+0x90>)
 80075de:	f7fe ff8b 	bl	80064f8 <HAL_UART_Init>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80075e8:	f000 f8ca 	bl	8007780 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80075ec:	2100      	movs	r1, #0
 80075ee:	480d      	ldr	r0, [pc, #52]	; (8007624 <MX_USART2_UART_Init+0x90>)
 80075f0:	f7ff fcbc 	bl	8006f6c <HAL_UARTEx_SetTxFifoThreshold>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80075fa:	f000 f8c1 	bl	8007780 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80075fe:	2100      	movs	r1, #0
 8007600:	4808      	ldr	r0, [pc, #32]	; (8007624 <MX_USART2_UART_Init+0x90>)
 8007602:	f7ff fcf1 	bl	8006fe8 <HAL_UARTEx_SetRxFifoThreshold>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800760c:	f000 f8b8 	bl	8007780 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8007610:	4804      	ldr	r0, [pc, #16]	; (8007624 <MX_USART2_UART_Init+0x90>)
 8007612:	f7ff fc72 	bl	8006efa <HAL_UARTEx_DisableFifoMode>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800761c:	f000 f8b0 	bl	8007780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007620:	bf00      	nop
 8007622:	bd80      	pop	{r7, pc}
 8007624:	2000043c 	.word	0x2000043c
 8007628:	40004400 	.word	0x40004400

0800762c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007632:	4b12      	ldr	r3, [pc, #72]	; (800767c <MX_DMA_Init+0x50>)
 8007634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007636:	4a11      	ldr	r2, [pc, #68]	; (800767c <MX_DMA_Init+0x50>)
 8007638:	f043 0304 	orr.w	r3, r3, #4
 800763c:	6493      	str	r3, [r2, #72]	; 0x48
 800763e:	4b0f      	ldr	r3, [pc, #60]	; (800767c <MX_DMA_Init+0x50>)
 8007640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007642:	f003 0304 	and.w	r3, r3, #4
 8007646:	607b      	str	r3, [r7, #4]
 8007648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800764a:	4b0c      	ldr	r3, [pc, #48]	; (800767c <MX_DMA_Init+0x50>)
 800764c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800764e:	4a0b      	ldr	r2, [pc, #44]	; (800767c <MX_DMA_Init+0x50>)
 8007650:	f043 0301 	orr.w	r3, r3, #1
 8007654:	6493      	str	r3, [r2, #72]	; 0x48
 8007656:	4b09      	ldr	r3, [pc, #36]	; (800767c <MX_DMA_Init+0x50>)
 8007658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	603b      	str	r3, [r7, #0]
 8007660:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007662:	2200      	movs	r2, #0
 8007664:	2100      	movs	r1, #0
 8007666:	200c      	movs	r0, #12
 8007668:	f7fb fa09 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800766c:	200c      	movs	r0, #12
 800766e:	f7fb fa22 	bl	8002ab6 <HAL_NVIC_EnableIRQ>

}
 8007672:	bf00      	nop
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	40021000 	.word	0x40021000

08007680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007686:	f107 030c 	add.w	r3, r7, #12
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	605a      	str	r2, [r3, #4]
 8007690:	609a      	str	r2, [r3, #8]
 8007692:	60da      	str	r2, [r3, #12]
 8007694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007696:	4b29      	ldr	r3, [pc, #164]	; (800773c <MX_GPIO_Init+0xbc>)
 8007698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800769a:	4a28      	ldr	r2, [pc, #160]	; (800773c <MX_GPIO_Init+0xbc>)
 800769c:	f043 0304 	orr.w	r3, r3, #4
 80076a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80076a2:	4b26      	ldr	r3, [pc, #152]	; (800773c <MX_GPIO_Init+0xbc>)
 80076a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076a6:	f003 0304 	and.w	r3, r3, #4
 80076aa:	60bb      	str	r3, [r7, #8]
 80076ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80076ae:	4b23      	ldr	r3, [pc, #140]	; (800773c <MX_GPIO_Init+0xbc>)
 80076b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076b2:	4a22      	ldr	r2, [pc, #136]	; (800773c <MX_GPIO_Init+0xbc>)
 80076b4:	f043 0301 	orr.w	r3, r3, #1
 80076b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80076ba:	4b20      	ldr	r3, [pc, #128]	; (800773c <MX_GPIO_Init+0xbc>)
 80076bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	607b      	str	r3, [r7, #4]
 80076c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80076c6:	4b1d      	ldr	r3, [pc, #116]	; (800773c <MX_GPIO_Init+0xbc>)
 80076c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ca:	4a1c      	ldr	r2, [pc, #112]	; (800773c <MX_GPIO_Init+0xbc>)
 80076cc:	f043 0302 	orr.w	r3, r3, #2
 80076d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80076d2:	4b1a      	ldr	r3, [pc, #104]	; (800773c <MX_GPIO_Init+0xbc>)
 80076d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	603b      	str	r3, [r7, #0]
 80076dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_RESET);
 80076de:	2200      	movs	r2, #0
 80076e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80076e4:	4816      	ldr	r0, [pc, #88]	; (8007740 <MX_GPIO_Init+0xc0>)
 80076e6:	f7fb ffa1 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80076ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80076f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80076f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076f6:	2300      	movs	r3, #0
 80076f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076fa:	f107 030c 	add.w	r3, r7, #12
 80076fe:	4619      	mov	r1, r3
 8007700:	4810      	ldr	r0, [pc, #64]	; (8007744 <MX_GPIO_Init+0xc4>)
 8007702:	f7fb fd0f 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : myLed_Pin */
  GPIO_InitStruct.Pin = myLed_Pin;
 8007706:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800770a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800770c:	2301      	movs	r3, #1
 800770e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007710:	2300      	movs	r3, #0
 8007712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007714:	2300      	movs	r3, #0
 8007716:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(myLed_GPIO_Port, &GPIO_InitStruct);
 8007718:	f107 030c 	add.w	r3, r7, #12
 800771c:	4619      	mov	r1, r3
 800771e:	4808      	ldr	r0, [pc, #32]	; (8007740 <MX_GPIO_Init+0xc0>)
 8007720:	f7fb fd00 	bl	8003124 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8007724:	2200      	movs	r2, #0
 8007726:	2100      	movs	r1, #0
 8007728:	2028      	movs	r0, #40	; 0x28
 800772a:	f7fb f9a8 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800772e:	2028      	movs	r0, #40	; 0x28
 8007730:	f7fb f9c1 	bl	8002ab6 <HAL_NVIC_EnableIRQ>

}
 8007734:	bf00      	nop
 8007736:	3720      	adds	r7, #32
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	40021000 	.word	0x40021000
 8007740:	48000400 	.word	0x48000400
 8007744:	48000800 	.word	0x48000800

08007748 <_write>:



//function for printing to console (swb port 0)
int _write(int file, char *ptr, int len)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007754:	2300      	movs	r3, #0
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	e009      	b.n	800776e <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	60ba      	str	r2, [r7, #8]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff fccc 	bl	8007100 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	3301      	adds	r3, #1
 800776c:	617b      	str	r3, [r7, #20]
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	429a      	cmp	r2, r3
 8007774:	dbf1      	blt.n	800775a <_write+0x12>
  }
  return len;
 8007776:	687b      	ldr	r3, [r7, #4]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007780:	b480      	push	{r7}
 8007782:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007784:	b672      	cpsid	i
}
 8007786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007788:	e7fe      	b.n	8007788 <Error_Handler+0x8>
	...

0800778c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b08a      	sub	sp, #40	; 0x28
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8007794:	4b27      	ldr	r3, [pc, #156]	; (8007834 <I2Cx_MspInit+0xa8>)
 8007796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007798:	4a26      	ldr	r2, [pc, #152]	; (8007834 <I2Cx_MspInit+0xa8>)
 800779a:	f043 0302 	orr.w	r3, r3, #2
 800779e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077a0:	4b24      	ldr	r3, [pc, #144]	; (8007834 <I2Cx_MspInit+0xa8>)
 80077a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	613b      	str	r3, [r7, #16]
 80077aa:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80077ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80077b0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80077b2:	2312      	movs	r3, #18
 80077b4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80077b6:	2301      	movs	r3, #1
 80077b8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077ba:	2303      	movs	r3, #3
 80077bc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80077be:	2304      	movs	r3, #4
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80077c2:	f107 0314 	add.w	r3, r7, #20
 80077c6:	4619      	mov	r1, r3
 80077c8:	481b      	ldr	r0, [pc, #108]	; (8007838 <I2Cx_MspInit+0xac>)
 80077ca:	f7fb fcab 	bl	8003124 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80077ce:	f107 0314 	add.w	r3, r7, #20
 80077d2:	4619      	mov	r1, r3
 80077d4:	4818      	ldr	r0, [pc, #96]	; (8007838 <I2Cx_MspInit+0xac>)
 80077d6:	f7fb fca5 	bl	8003124 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80077da:	4b16      	ldr	r3, [pc, #88]	; (8007834 <I2Cx_MspInit+0xa8>)
 80077dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077de:	4a15      	ldr	r2, [pc, #84]	; (8007834 <I2Cx_MspInit+0xa8>)
 80077e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80077e4:	6593      	str	r3, [r2, #88]	; 0x58
 80077e6:	4b13      	ldr	r3, [pc, #76]	; (8007834 <I2Cx_MspInit+0xa8>)
 80077e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077ee:	60fb      	str	r3, [r7, #12]
 80077f0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80077f2:	4b10      	ldr	r3, [pc, #64]	; (8007834 <I2Cx_MspInit+0xa8>)
 80077f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f6:	4a0f      	ldr	r2, [pc, #60]	; (8007834 <I2Cx_MspInit+0xa8>)
 80077f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80077fc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80077fe:	4b0d      	ldr	r3, [pc, #52]	; (8007834 <I2Cx_MspInit+0xa8>)
 8007800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007802:	4a0c      	ldr	r2, [pc, #48]	; (8007834 <I2Cx_MspInit+0xa8>)
 8007804:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007808:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800780a:	2200      	movs	r2, #0
 800780c:	210f      	movs	r1, #15
 800780e:	2021      	movs	r0, #33	; 0x21
 8007810:	f7fb f935 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8007814:	2021      	movs	r0, #33	; 0x21
 8007816:	f7fb f94e 	bl	8002ab6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800781a:	2200      	movs	r2, #0
 800781c:	210f      	movs	r1, #15
 800781e:	2022      	movs	r0, #34	; 0x22
 8007820:	f7fb f92d 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8007824:	2022      	movs	r0, #34	; 0x22
 8007826:	f7fb f946 	bl	8002ab6 <HAL_NVIC_EnableIRQ>
}
 800782a:	bf00      	nop
 800782c:	3728      	adds	r7, #40	; 0x28
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	40021000 	.word	0x40021000
 8007838:	48000400 	.word	0x48000400

0800783c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a12      	ldr	r2, [pc, #72]	; (8007890 <I2Cx_Init+0x54>)
 8007848:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a11      	ldr	r2, [pc, #68]	; (8007894 <I2Cx_Init+0x58>)
 800784e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff ff89 	bl	800778c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7fb ff11 	bl	80036a2 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8007880:	2100      	movs	r1, #0
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7fc fca0 	bl	80041c8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8007888:	bf00      	nop
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	40005800 	.word	0x40005800
 8007894:	00702681 	.word	0x00702681

08007898 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08a      	sub	sp, #40	; 0x28
 800789c:	af04      	add	r7, sp, #16
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	4608      	mov	r0, r1
 80078a2:	4611      	mov	r1, r2
 80078a4:	461a      	mov	r2, r3
 80078a6:	4603      	mov	r3, r0
 80078a8:	72fb      	strb	r3, [r7, #11]
 80078aa:	460b      	mov	r3, r1
 80078ac:	813b      	strh	r3, [r7, #8]
 80078ae:	4613      	mov	r3, r2
 80078b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80078b6:	7afb      	ldrb	r3, [r7, #11]
 80078b8:	b299      	uxth	r1, r3
 80078ba:	88f8      	ldrh	r0, [r7, #6]
 80078bc:	893a      	ldrh	r2, [r7, #8]
 80078be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078c2:	9302      	str	r3, [sp, #8]
 80078c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078c6:	9301      	str	r3, [sp, #4]
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	4603      	mov	r3, r0
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f7fc f8ba 	bl	8003a48 <HAL_I2C_Mem_Read>
 80078d4:	4603      	mov	r3, r0
 80078d6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80078d8:	7dfb      	ldrb	r3, [r7, #23]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d004      	beq.n	80078e8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80078de:	7afb      	ldrb	r3, [r7, #11]
 80078e0:	4619      	mov	r1, r3
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 f832 	bl	800794c <I2Cx_Error>
  }
  return status;
 80078e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b08a      	sub	sp, #40	; 0x28
 80078f6:	af04      	add	r7, sp, #16
 80078f8:	60f8      	str	r0, [r7, #12]
 80078fa:	4608      	mov	r0, r1
 80078fc:	4611      	mov	r1, r2
 80078fe:	461a      	mov	r2, r3
 8007900:	4603      	mov	r3, r0
 8007902:	72fb      	strb	r3, [r7, #11]
 8007904:	460b      	mov	r3, r1
 8007906:	813b      	strh	r3, [r7, #8]
 8007908:	4613      	mov	r3, r2
 800790a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8007910:	7afb      	ldrb	r3, [r7, #11]
 8007912:	b299      	uxth	r1, r3
 8007914:	88f8      	ldrh	r0, [r7, #6]
 8007916:	893a      	ldrh	r2, [r7, #8]
 8007918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800791c:	9302      	str	r3, [sp, #8]
 800791e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007920:	9301      	str	r3, [sp, #4]
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	4603      	mov	r3, r0
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f7fb ff79 	bl	8003820 <HAL_I2C_Mem_Write>
 800792e:	4603      	mov	r3, r0
 8007930:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8007932:	7dfb      	ldrb	r3, [r7, #23]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d004      	beq.n	8007942 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8007938:	7afb      	ldrb	r3, [r7, #11]
 800793a:	4619      	mov	r1, r3
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 f805 	bl	800794c <I2Cx_Error>
  }
  return status;
 8007942:	7dfb      	ldrb	r3, [r7, #23]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7fb ff31 	bl	80037c0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7ff ff6c 	bl	800783c <I2Cx_Init>
}
 8007964:	bf00      	nop
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8007970:	4802      	ldr	r0, [pc, #8]	; (800797c <SENSOR_IO_Init+0x10>)
 8007972:	f7ff ff63 	bl	800783c <I2Cx_Init>
}
 8007976:	bf00      	nop
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	200004f0 	.word	0x200004f0

08007980 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af02      	add	r7, sp, #8
 8007986:	4603      	mov	r3, r0
 8007988:	71fb      	strb	r3, [r7, #7]
 800798a:	460b      	mov	r3, r1
 800798c:	71bb      	strb	r3, [r7, #6]
 800798e:	4613      	mov	r3, r2
 8007990:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8007992:	79bb      	ldrb	r3, [r7, #6]
 8007994:	b29a      	uxth	r2, r3
 8007996:	79f9      	ldrb	r1, [r7, #7]
 8007998:	2301      	movs	r3, #1
 800799a:	9301      	str	r3, [sp, #4]
 800799c:	1d7b      	adds	r3, r7, #5
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	2301      	movs	r3, #1
 80079a2:	4803      	ldr	r0, [pc, #12]	; (80079b0 <SENSOR_IO_Write+0x30>)
 80079a4:	f7ff ffa5 	bl	80078f2 <I2Cx_WriteMultiple>
}
 80079a8:	bf00      	nop
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	200004f0 	.word	0x200004f0

080079b4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af02      	add	r7, sp, #8
 80079ba:	4603      	mov	r3, r0
 80079bc:	460a      	mov	r2, r1
 80079be:	71fb      	strb	r3, [r7, #7]
 80079c0:	4613      	mov	r3, r2
 80079c2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80079c4:	2300      	movs	r3, #0
 80079c6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80079c8:	79bb      	ldrb	r3, [r7, #6]
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	79f9      	ldrb	r1, [r7, #7]
 80079ce:	2301      	movs	r3, #1
 80079d0:	9301      	str	r3, [sp, #4]
 80079d2:	f107 030f 	add.w	r3, r7, #15
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	2301      	movs	r3, #1
 80079da:	4804      	ldr	r0, [pc, #16]	; (80079ec <SENSOR_IO_Read+0x38>)
 80079dc:	f7ff ff5c 	bl	8007898 <I2Cx_ReadMultiple>

  return read_value;
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	200004f0 	.word	0x200004f0

080079f0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af02      	add	r7, sp, #8
 80079f6:	603a      	str	r2, [r7, #0]
 80079f8:	461a      	mov	r2, r3
 80079fa:	4603      	mov	r3, r0
 80079fc:	71fb      	strb	r3, [r7, #7]
 80079fe:	460b      	mov	r3, r1
 8007a00:	71bb      	strb	r3, [r7, #6]
 8007a02:	4613      	mov	r3, r2
 8007a04:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8007a06:	79bb      	ldrb	r3, [r7, #6]
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	79f9      	ldrb	r1, [r7, #7]
 8007a0c:	88bb      	ldrh	r3, [r7, #4]
 8007a0e:	9301      	str	r3, [sp, #4]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	2301      	movs	r3, #1
 8007a16:	4804      	ldr	r0, [pc, #16]	; (8007a28 <SENSOR_IO_ReadMultiple+0x38>)
 8007a18:	f7ff ff3e 	bl	8007898 <I2Cx_ReadMultiple>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	b29b      	uxth	r3, r3
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	200004f0 	.word	0x200004f0

08007a2c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8007a36:	2300      	movs	r3, #0
 8007a38:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8007a3a:	4b19      	ldr	r3, [pc, #100]	; (8007aa0 <BSP_ACCELERO_Init+0x74>)
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	4798      	blx	r3
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b6a      	cmp	r3, #106	; 0x6a
 8007a44:	d002      	beq.n	8007a4c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	73fb      	strb	r3, [r7, #15]
 8007a4a:	e024      	b.n	8007a96 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8007a4c:	4b15      	ldr	r3, [pc, #84]	; (8007aa4 <BSP_ACCELERO_Init+0x78>)
 8007a4e:	4a14      	ldr	r2, [pc, #80]	; (8007aa0 <BSP_ACCELERO_Init+0x74>)
 8007a50:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8007a52:	2330      	movs	r3, #48	; 0x30
 8007a54:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8007a5e:	2340      	movs	r3, #64	; 0x40
 8007a60:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8007a62:	2300      	movs	r3, #0
 8007a64:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8007a66:	2300      	movs	r3, #0
 8007a68:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8007a6a:	797a      	ldrb	r2, [r7, #5]
 8007a6c:	7abb      	ldrb	r3, [r7, #10]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8007a74:	7a3b      	ldrb	r3, [r7, #8]
 8007a76:	f043 0304 	orr.w	r3, r3, #4
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	021b      	lsls	r3, r3, #8
 8007a7e:	b21a      	sxth	r2, r3
 8007a80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	b21b      	sxth	r3, r3
 8007a88:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8007a8a:	4b06      	ldr	r3, [pc, #24]	; (8007aa4 <BSP_ACCELERO_Init+0x78>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	89ba      	ldrh	r2, [r7, #12]
 8007a92:	4610      	mov	r0, r2
 8007a94:	4798      	blx	r3
  }  

  return ret;
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	2000005c 	.word	0x2000005c
 8007aa4:	20000544 	.word	0x20000544

08007aa8 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8007ab0:	4b08      	ldr	r3, [pc, #32]	; (8007ad4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d009      	beq.n	8007acc <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8007ab8:	4b06      	ldr	r3, [pc, #24]	; (8007ad4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d004      	beq.n	8007acc <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8007ac2:	4b04      	ldr	r3, [pc, #16]	; (8007ad4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	4798      	blx	r3
    }
  }
}
 8007acc:	bf00      	nop
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	20000544 	.word	0x20000544

08007ad8 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8007ae6:	4b1b      	ldr	r3, [pc, #108]	; (8007b54 <BSP_GYRO_Init+0x7c>)
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	4798      	blx	r3
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b6a      	cmp	r3, #106	; 0x6a
 8007af0:	d002      	beq.n	8007af8 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	73fb      	strb	r3, [r7, #15]
 8007af6:	e028      	b.n	8007b4a <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8007af8:	4b17      	ldr	r3, [pc, #92]	; (8007b58 <BSP_GYRO_Init+0x80>)
 8007afa:	4a16      	ldr	r2, [pc, #88]	; (8007b54 <BSP_GYRO_Init+0x7c>)
 8007afc:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8007afe:	2300      	movs	r3, #0
 8007b00:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8007b02:	2330      	movs	r3, #48	; 0x30
 8007b04:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8007b06:	2300      	movs	r3, #0
 8007b08:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8007b0e:	2340      	movs	r3, #64	; 0x40
 8007b10:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8007b16:	230c      	movs	r3, #12
 8007b18:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8007b1a:	7aba      	ldrb	r2, [r7, #10]
 8007b1c:	797b      	ldrb	r3, [r7, #5]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8007b24:	7a3b      	ldrb	r3, [r7, #8]
 8007b26:	f043 0304 	orr.w	r3, r3, #4
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	021b      	lsls	r3, r3, #8
 8007b2e:	b21a      	sxth	r2, r3
 8007b30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	b21b      	sxth	r3, r3
 8007b38:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8007b3a:	4b07      	ldr	r3, [pc, #28]	; (8007b58 <BSP_GYRO_Init+0x80>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	89ba      	ldrh	r2, [r7, #12]
 8007b42:	4610      	mov	r0, r2
 8007b44:	4798      	blx	r3
    
    ret = GYRO_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	20000090 	.word	0x20000090
 8007b58:	20000548 	.word	0x20000548

08007b5c <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8007b64:	4b08      	ldr	r3, [pc, #32]	; (8007b88 <BSP_GYRO_GetXYZ+0x2c>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d009      	beq.n	8007b80 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8007b6c:	4b06      	ldr	r3, [pc, #24]	; (8007b88 <BSP_GYRO_GetXYZ+0x2c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d004      	beq.n	8007b80 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8007b76:	4b04      	ldr	r3, [pc, #16]	; (8007b88 <BSP_GYRO_GetXYZ+0x2c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	4798      	blx	r3
    }
  }
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	20000548 	.word	0x20000548

08007b8c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8007b92:	4b0c      	ldr	r3, [pc, #48]	; (8007bc4 <BSP_HSENSOR_Init+0x38>)
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	20be      	movs	r0, #190	; 0xbe
 8007b98:	4798      	blx	r3
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2bbc      	cmp	r3, #188	; 0xbc
 8007b9e:	d002      	beq.n	8007ba6 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	607b      	str	r3, [r7, #4]
 8007ba4:	e009      	b.n	8007bba <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8007ba6:	4b08      	ldr	r3, [pc, #32]	; (8007bc8 <BSP_HSENSOR_Init+0x3c>)
 8007ba8:	4a06      	ldr	r2, [pc, #24]	; (8007bc4 <BSP_HSENSOR_Init+0x38>)
 8007baa:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8007bac:	4b06      	ldr	r3, [pc, #24]	; (8007bc8 <BSP_HSENSOR_Init+0x3c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	20be      	movs	r0, #190	; 0xbe
 8007bb4:	4798      	blx	r3
    ret = HSENSOR_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8007bba:	687b      	ldr	r3, [r7, #4]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	20000000 	.word	0x20000000
 8007bc8:	2000054c 	.word	0x2000054c

08007bcc <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8007bd0:	4b04      	ldr	r3, [pc, #16]	; (8007be4 <BSP_HSENSOR_ReadHumidity+0x18>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	20be      	movs	r0, #190	; 0xbe
 8007bd8:	4798      	blx	r3
 8007bda:	eef0 7a40 	vmov.f32	s15, s0
}
 8007bde:	eeb0 0a67 	vmov.f32	s0, s15
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	2000054c 	.word	0x2000054c

08007be8 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8007bf2:	4b11      	ldr	r3, [pc, #68]	; (8007c38 <BSP_MAGNETO_Init+0x50>)
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	4798      	blx	r3
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b3d      	cmp	r3, #61	; 0x3d
 8007bfc:	d002      	beq.n	8007c04 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	71fb      	strb	r3, [r7, #7]
 8007c02:	e013      	b.n	8007c2c <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8007c04:	4b0d      	ldr	r3, [pc, #52]	; (8007c3c <BSP_MAGNETO_Init+0x54>)
 8007c06:	4a0c      	ldr	r2, [pc, #48]	; (8007c38 <BSP_MAGNETO_Init+0x50>)
 8007c08:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8007c0a:	2358      	movs	r3, #88	; 0x58
 8007c0c:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8007c12:	2300      	movs	r3, #0
 8007c14:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8007c16:	2308      	movs	r3, #8
 8007c18:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8007c1a:	2340      	movs	r3, #64	; 0x40
 8007c1c:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8007c1e:	4b07      	ldr	r3, [pc, #28]	; (8007c3c <BSP_MAGNETO_Init+0x54>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	463a      	mov	r2, r7
 8007c26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c2a:	4798      	blx	r3
  } 

  return ret;  
 8007c2c:	79fb      	ldrb	r3, [r7, #7]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	2000001c 	.word	0x2000001c
 8007c3c:	20000550 	.word	0x20000550

08007c40 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8007c48:	4b08      	ldr	r3, [pc, #32]	; (8007c6c <BSP_MAGNETO_GetXYZ+0x2c>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d009      	beq.n	8007c64 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8007c50:	4b06      	ldr	r3, [pc, #24]	; (8007c6c <BSP_MAGNETO_GetXYZ+0x2c>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d004      	beq.n	8007c64 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8007c5a:	4b04      	ldr	r3, [pc, #16]	; (8007c6c <BSP_MAGNETO_GetXYZ+0x2c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	4798      	blx	r3
    }
  }
}
 8007c64:	bf00      	nop
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	20000550 	.word	0x20000550

08007c70 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8007c76:	4b0c      	ldr	r3, [pc, #48]	; (8007ca8 <BSP_PSENSOR_Init+0x38>)
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	20ba      	movs	r0, #186	; 0xba
 8007c7c:	4798      	blx	r3
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2bb1      	cmp	r3, #177	; 0xb1
 8007c82:	d002      	beq.n	8007c8a <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	607b      	str	r3, [r7, #4]
 8007c88:	e009      	b.n	8007c9e <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8007c8a:	4b08      	ldr	r3, [pc, #32]	; (8007cac <BSP_PSENSOR_Init+0x3c>)
 8007c8c:	4a06      	ldr	r2, [pc, #24]	; (8007ca8 <BSP_PSENSOR_Init+0x38>)
 8007c8e:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8007c90:	4b06      	ldr	r3, [pc, #24]	; (8007cac <BSP_PSENSOR_Init+0x3c>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	20ba      	movs	r0, #186	; 0xba
 8007c98:	4798      	blx	r3
    ret = PSENSOR_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8007c9e:	687b      	ldr	r3, [r7, #4]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	20000050 	.word	0x20000050
 8007cac:	20000554 	.word	0x20000554

08007cb0 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8007cb4:	4b04      	ldr	r3, [pc, #16]	; (8007cc8 <BSP_PSENSOR_ReadPressure+0x18>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	20ba      	movs	r0, #186	; 0xba
 8007cbc:	4798      	blx	r3
 8007cbe:	eef0 7a40 	vmov.f32	s15, s0
}
 8007cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	20000554 	.word	0x20000554

08007ccc <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8007cd6:	4b09      	ldr	r3, [pc, #36]	; (8007cfc <BSP_TSENSOR_Init+0x30>)
 8007cd8:	4a09      	ldr	r2, [pc, #36]	; (8007d00 <BSP_TSENSOR_Init+0x34>)
 8007cda:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8007cdc:	f7ff fe46 	bl	800796c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8007ce0:	4b06      	ldr	r3, [pc, #24]	; (8007cfc <BSP_TSENSOR_Init+0x30>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	20be      	movs	r0, #190	; 0xbe
 8007cea:	4798      	blx	r3

  ret = TSENSOR_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8007cf0:	79fb      	ldrb	r3, [r7, #7]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20000558 	.word	0x20000558
 8007d00:	2000000c 	.word	0x2000000c

08007d04 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8007d04:	b580      	push	{r7, lr}
 8007d06:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8007d08:	4b04      	ldr	r3, [pc, #16]	; (8007d1c <BSP_TSENSOR_ReadTemp+0x18>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	20be      	movs	r0, #190	; 0xbe
 8007d10:	4798      	blx	r3
 8007d12:	eef0 7a40 	vmov.f32	s15, s0
}
 8007d16:	eeb0 0a67 	vmov.f32	s0, s15
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20000558 	.word	0x20000558

08007d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d26:	4b0f      	ldr	r3, [pc, #60]	; (8007d64 <HAL_MspInit+0x44>)
 8007d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d2a:	4a0e      	ldr	r2, [pc, #56]	; (8007d64 <HAL_MspInit+0x44>)
 8007d2c:	f043 0301 	orr.w	r3, r3, #1
 8007d30:	6613      	str	r3, [r2, #96]	; 0x60
 8007d32:	4b0c      	ldr	r3, [pc, #48]	; (8007d64 <HAL_MspInit+0x44>)
 8007d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	607b      	str	r3, [r7, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d3e:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <HAL_MspInit+0x44>)
 8007d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d42:	4a08      	ldr	r2, [pc, #32]	; (8007d64 <HAL_MspInit+0x44>)
 8007d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d48:	6593      	str	r3, [r2, #88]	; 0x58
 8007d4a:	4b06      	ldr	r3, [pc, #24]	; (8007d64 <HAL_MspInit+0x44>)
 8007d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d52:	603b      	str	r3, [r7, #0]
 8007d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	40021000 	.word	0x40021000

08007d68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b0a8      	sub	sp, #160	; 0xa0
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007d70:	f107 030c 	add.w	r3, r7, #12
 8007d74:	2294      	movs	r2, #148	; 0x94
 8007d76:	2100      	movs	r1, #0
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 fb0d 	bl	8008398 <memset>
  if(hadc->Instance==ADC1)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a19      	ldr	r2, [pc, #100]	; (8007de8 <HAL_ADC_MspInit+0x80>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d12b      	bne.n	8007de0 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8007d88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007d8c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8007d8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8007d96:	2301      	movs	r3, #1
 8007d98:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8007d9e:	2310      	movs	r3, #16
 8007da0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8007da2:	2302      	movs	r3, #2
 8007da4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007da6:	2302      	movs	r3, #2
 8007da8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007daa:	2302      	movs	r3, #2
 8007dac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8007dae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007db2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007db4:	f107 030c 	add.w	r3, r7, #12
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fd fa39 	bl	8005230 <HAL_RCCEx_PeriphCLKConfig>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8007dc4:	f7ff fcdc 	bl	8007780 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8007dc8:	4b08      	ldr	r3, [pc, #32]	; (8007dec <HAL_ADC_MspInit+0x84>)
 8007dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dcc:	4a07      	ldr	r2, [pc, #28]	; (8007dec <HAL_ADC_MspInit+0x84>)
 8007dce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007dd4:	4b05      	ldr	r3, [pc, #20]	; (8007dec <HAL_ADC_MspInit+0x84>)
 8007dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ddc:	60bb      	str	r3, [r7, #8]
 8007dde:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007de0:	bf00      	nop
 8007de2:	37a0      	adds	r7, #160	; 0xa0
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	50040000 	.word	0x50040000
 8007dec:	40021000 	.word	0x40021000

08007df0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08a      	sub	sp, #40	; 0x28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007df8:	f107 0314 	add.w	r3, r7, #20
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	605a      	str	r2, [r3, #4]
 8007e02:	609a      	str	r2, [r3, #8]
 8007e04:	60da      	str	r2, [r3, #12]
 8007e06:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a2b      	ldr	r2, [pc, #172]	; (8007ebc <HAL_DAC_MspInit+0xcc>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d14f      	bne.n	8007eb2 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8007e12:	4b2b      	ldr	r3, [pc, #172]	; (8007ec0 <HAL_DAC_MspInit+0xd0>)
 8007e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e16:	4a2a      	ldr	r2, [pc, #168]	; (8007ec0 <HAL_DAC_MspInit+0xd0>)
 8007e18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8007e1e:	4b28      	ldr	r3, [pc, #160]	; (8007ec0 <HAL_DAC_MspInit+0xd0>)
 8007e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e26:	613b      	str	r3, [r7, #16]
 8007e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e2a:	4b25      	ldr	r3, [pc, #148]	; (8007ec0 <HAL_DAC_MspInit+0xd0>)
 8007e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e2e:	4a24      	ldr	r2, [pc, #144]	; (8007ec0 <HAL_DAC_MspInit+0xd0>)
 8007e30:	f043 0301 	orr.w	r3, r3, #1
 8007e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e36:	4b22      	ldr	r3, [pc, #136]	; (8007ec0 <HAL_DAC_MspInit+0xd0>)
 8007e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007e42:	2330      	movs	r3, #48	; 0x30
 8007e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007e46:	2303      	movs	r3, #3
 8007e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e4e:	f107 0314 	add.w	r3, r7, #20
 8007e52:	4619      	mov	r1, r3
 8007e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e58:	f7fb f964 	bl	8003124 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8007e5c:	4b19      	ldr	r3, [pc, #100]	; (8007ec4 <HAL_DAC_MspInit+0xd4>)
 8007e5e:	4a1a      	ldr	r2, [pc, #104]	; (8007ec8 <HAL_DAC_MspInit+0xd8>)
 8007e60:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8007e62:	4b18      	ldr	r3, [pc, #96]	; (8007ec4 <HAL_DAC_MspInit+0xd4>)
 8007e64:	2206      	movs	r2, #6
 8007e66:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007e68:	4b16      	ldr	r3, [pc, #88]	; (8007ec4 <HAL_DAC_MspInit+0xd4>)
 8007e6a:	2210      	movs	r2, #16
 8007e6c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e6e:	4b15      	ldr	r3, [pc, #84]	; (8007ec4 <HAL_DAC_MspInit+0xd4>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007e74:	4b13      	ldr	r3, [pc, #76]	; (8007ec4 <HAL_DAC_MspInit+0xd4>)
 8007e76:	2280      	movs	r2, #128	; 0x80
 8007e78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007e7a:	4b12      	ldr	r3, [pc, #72]	; (8007ec4 <HAL_DAC_MspInit+0xd4>)
 8007e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007e82:	4b10      	ldr	r3, [pc, #64]	; (8007ec4 <HAL_DAC_MspInit+0xd4>)
 8007e84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8007e8a:	4b0e      	ldr	r3, [pc, #56]	; (8007ec4 <HAL_DAC_MspInit+0xd4>)
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007e90:	4b0c      	ldr	r3, [pc, #48]	; (8007ec4 <HAL_DAC_MspInit+0xd4>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8007e96:	480b      	ldr	r0, [pc, #44]	; (8007ec4 <HAL_DAC_MspInit+0xd4>)
 8007e98:	f7fa ff8a 	bl	8002db0 <HAL_DMA_Init>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d001      	beq.n	8007ea6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8007ea2:	f7ff fc6d 	bl	8007780 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a06      	ldr	r2, [pc, #24]	; (8007ec4 <HAL_DAC_MspInit+0xd4>)
 8007eaa:	609a      	str	r2, [r3, #8]
 8007eac:	4a05      	ldr	r2, [pc, #20]	; (8007ec4 <HAL_DAC_MspInit+0xd4>)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8007eb2:	bf00      	nop
 8007eb4:	3728      	adds	r7, #40	; 0x28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	40007400 	.word	0x40007400
 8007ec0:	40021000 	.word	0x40021000
 8007ec4:	2000033c 	.word	0x2000033c
 8007ec8:	4002001c 	.word	0x4002001c

08007ecc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b0ae      	sub	sp, #184	; 0xb8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ed4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007ed8:	2200      	movs	r2, #0
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	605a      	str	r2, [r3, #4]
 8007ede:	609a      	str	r2, [r3, #8]
 8007ee0:	60da      	str	r2, [r3, #12]
 8007ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007ee4:	f107 0310 	add.w	r3, r7, #16
 8007ee8:	2294      	movs	r2, #148	; 0x94
 8007eea:	2100      	movs	r1, #0
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 fa53 	bl	8008398 <memset>
  if(hi2c->Instance==I2C2)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a21      	ldr	r2, [pc, #132]	; (8007f7c <HAL_I2C_MspInit+0xb0>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d13b      	bne.n	8007f74 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8007efc:	2380      	movs	r3, #128	; 0x80
 8007efe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8007f00:	2300      	movs	r3, #0
 8007f02:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007f04:	f107 0310 	add.w	r3, r7, #16
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fd f991 	bl	8005230 <HAL_RCCEx_PeriphCLKConfig>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d001      	beq.n	8007f18 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8007f14:	f7ff fc34 	bl	8007780 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f18:	4b19      	ldr	r3, [pc, #100]	; (8007f80 <HAL_I2C_MspInit+0xb4>)
 8007f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f1c:	4a18      	ldr	r2, [pc, #96]	; (8007f80 <HAL_I2C_MspInit+0xb4>)
 8007f1e:	f043 0302 	orr.w	r3, r3, #2
 8007f22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f24:	4b16      	ldr	r3, [pc, #88]	; (8007f80 <HAL_I2C_MspInit+0xb4>)
 8007f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f28:	f003 0302 	and.w	r3, r3, #2
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007f30:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007f34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f38:	2312      	movs	r3, #18
 8007f3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f44:	2303      	movs	r3, #3
 8007f46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007f4a:	2304      	movs	r3, #4
 8007f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007f54:	4619      	mov	r1, r3
 8007f56:	480b      	ldr	r0, [pc, #44]	; (8007f84 <HAL_I2C_MspInit+0xb8>)
 8007f58:	f7fb f8e4 	bl	8003124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007f5c:	4b08      	ldr	r3, [pc, #32]	; (8007f80 <HAL_I2C_MspInit+0xb4>)
 8007f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f60:	4a07      	ldr	r2, [pc, #28]	; (8007f80 <HAL_I2C_MspInit+0xb4>)
 8007f62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007f66:	6593      	str	r3, [r2, #88]	; 0x58
 8007f68:	4b05      	ldr	r3, [pc, #20]	; (8007f80 <HAL_I2C_MspInit+0xb4>)
 8007f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f70:	60bb      	str	r3, [r7, #8]
 8007f72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007f74:	bf00      	nop
 8007f76:	37b8      	adds	r7, #184	; 0xb8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	40005800 	.word	0x40005800
 8007f80:	40021000 	.word	0x40021000
 8007f84:	48000400 	.word	0x48000400

08007f88 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a0b      	ldr	r2, [pc, #44]	; (8007fc4 <HAL_I2C_MspDeInit+0x3c>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d10f      	bne.n	8007fba <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8007f9a:	4b0b      	ldr	r3, [pc, #44]	; (8007fc8 <HAL_I2C_MspDeInit+0x40>)
 8007f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f9e:	4a0a      	ldr	r2, [pc, #40]	; (8007fc8 <HAL_I2C_MspDeInit+0x40>)
 8007fa0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007fa4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8007fa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007faa:	4808      	ldr	r0, [pc, #32]	; (8007fcc <HAL_I2C_MspDeInit+0x44>)
 8007fac:	f7fb fa4c 	bl	8003448 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8007fb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007fb4:	4805      	ldr	r0, [pc, #20]	; (8007fcc <HAL_I2C_MspDeInit+0x44>)
 8007fb6:	f7fb fa47 	bl	8003448 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8007fba:	bf00      	nop
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	40005800 	.word	0x40005800
 8007fc8:	40021000 	.word	0x40021000
 8007fcc:	48000400 	.word	0x48000400

08007fd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe0:	d113      	bne.n	800800a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007fe2:	4b0c      	ldr	r3, [pc, #48]	; (8008014 <HAL_TIM_Base_MspInit+0x44>)
 8007fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe6:	4a0b      	ldr	r2, [pc, #44]	; (8008014 <HAL_TIM_Base_MspInit+0x44>)
 8007fe8:	f043 0301 	orr.w	r3, r3, #1
 8007fec:	6593      	str	r3, [r2, #88]	; 0x58
 8007fee:	4b09      	ldr	r3, [pc, #36]	; (8008014 <HAL_TIM_Base_MspInit+0x44>)
 8007ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	60fb      	str	r3, [r7, #12]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	201c      	movs	r0, #28
 8008000:	f7fa fd3d 	bl	8002a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008004:	201c      	movs	r0, #28
 8008006:	f7fa fd56 	bl	8002ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800800a:	bf00      	nop
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	40021000 	.word	0x40021000

08008018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b0ae      	sub	sp, #184	; 0xb8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008020:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008024:	2200      	movs	r2, #0
 8008026:	601a      	str	r2, [r3, #0]
 8008028:	605a      	str	r2, [r3, #4]
 800802a:	609a      	str	r2, [r3, #8]
 800802c:	60da      	str	r2, [r3, #12]
 800802e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008030:	f107 0310 	add.w	r3, r7, #16
 8008034:	2294      	movs	r2, #148	; 0x94
 8008036:	2100      	movs	r1, #0
 8008038:	4618      	mov	r0, r3
 800803a:	f000 f9ad 	bl	8008398 <memset>
  if(huart->Instance==USART2)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a21      	ldr	r2, [pc, #132]	; (80080c8 <HAL_UART_MspInit+0xb0>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d13b      	bne.n	80080c0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008048:	2302      	movs	r3, #2
 800804a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800804c:	2300      	movs	r3, #0
 800804e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008050:	f107 0310 	add.w	r3, r7, #16
 8008054:	4618      	mov	r0, r3
 8008056:	f7fd f8eb 	bl	8005230 <HAL_RCCEx_PeriphCLKConfig>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8008060:	f7ff fb8e 	bl	8007780 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008064:	4b19      	ldr	r3, [pc, #100]	; (80080cc <HAL_UART_MspInit+0xb4>)
 8008066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008068:	4a18      	ldr	r2, [pc, #96]	; (80080cc <HAL_UART_MspInit+0xb4>)
 800806a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800806e:	6593      	str	r3, [r2, #88]	; 0x58
 8008070:	4b16      	ldr	r3, [pc, #88]	; (80080cc <HAL_UART_MspInit+0xb4>)
 8008072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008078:	60fb      	str	r3, [r7, #12]
 800807a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800807c:	4b13      	ldr	r3, [pc, #76]	; (80080cc <HAL_UART_MspInit+0xb4>)
 800807e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008080:	4a12      	ldr	r2, [pc, #72]	; (80080cc <HAL_UART_MspInit+0xb4>)
 8008082:	f043 0301 	orr.w	r3, r3, #1
 8008086:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008088:	4b10      	ldr	r3, [pc, #64]	; (80080cc <HAL_UART_MspInit+0xb4>)
 800808a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	60bb      	str	r3, [r7, #8]
 8008092:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008094:	230c      	movs	r3, #12
 8008096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800809a:	2302      	movs	r3, #2
 800809c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080a0:	2300      	movs	r3, #0
 80080a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080a6:	2303      	movs	r3, #3
 80080a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80080ac:	2307      	movs	r3, #7
 80080ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80080b6:	4619      	mov	r1, r3
 80080b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80080bc:	f7fb f832 	bl	8003124 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80080c0:	bf00      	nop
 80080c2:	37b8      	adds	r7, #184	; 0xb8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	40004400 	.word	0x40004400
 80080cc:	40021000 	.word	0x40021000

080080d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80080d0:	b480      	push	{r7}
 80080d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80080d4:	e7fe      	b.n	80080d4 <NMI_Handler+0x4>

080080d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80080d6:	b480      	push	{r7}
 80080d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80080da:	e7fe      	b.n	80080da <HardFault_Handler+0x4>

080080dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80080dc:	b480      	push	{r7}
 80080de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80080e0:	e7fe      	b.n	80080e0 <MemManage_Handler+0x4>

080080e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80080e2:	b480      	push	{r7}
 80080e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80080e6:	e7fe      	b.n	80080e6 <BusFault_Handler+0x4>

080080e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80080e8:	b480      	push	{r7}
 80080ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80080ec:	e7fe      	b.n	80080ec <UsageFault_Handler+0x4>

080080ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80080ee:	b480      	push	{r7}
 80080f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80080f2:	bf00      	nop
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80080fc:	b480      	push	{r7}
 80080fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008100:	bf00      	nop
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800810a:	b480      	push	{r7}
 800810c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800810e:	bf00      	nop
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800811c:	f7f9 fca8 	bl	8001a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008120:	bf00      	nop
 8008122:	bd80      	pop	{r7, pc}

08008124 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8008128:	4802      	ldr	r0, [pc, #8]	; (8008134 <DMA1_Channel2_IRQHandler+0x10>)
 800812a:	f7fa fee9 	bl	8002f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800812e:	bf00      	nop
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	2000033c 	.word	0x2000033c

08008138 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800813c:	4802      	ldr	r0, [pc, #8]	; (8008148 <TIM2_IRQHandler+0x10>)
 800813e:	f7fd fde6 	bl	8005d0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008142:	bf00      	nop
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	200003f0 	.word	0x200003f0

0800814c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8008150:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008154:	f7fb fa82 	bl	800365c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008158:	bf00      	nop
 800815a:	bd80      	pop	{r7, pc}

0800815c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800815c:	b480      	push	{r7}
 800815e:	af00      	add	r7, sp, #0
  return 1;
 8008160:	2301      	movs	r3, #1
}
 8008162:	4618      	mov	r0, r3
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <_kill>:

int _kill(int pid, int sig)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008176:	f000 f8d7 	bl	8008328 <__errno>
 800817a:	4603      	mov	r3, r0
 800817c:	2216      	movs	r2, #22
 800817e:	601a      	str	r2, [r3, #0]
  return -1;
 8008180:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <_exit>:

void _exit (int status)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008194:	f04f 31ff 	mov.w	r1, #4294967295
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7ff ffe7 	bl	800816c <_kill>
  while (1) {}    /* Make sure we hang here */
 800819e:	e7fe      	b.n	800819e <_exit+0x12>

080081a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80081ac:	2300      	movs	r3, #0
 80081ae:	617b      	str	r3, [r7, #20]
 80081b0:	e00a      	b.n	80081c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80081b2:	f3af 8000 	nop.w
 80081b6:	4601      	mov	r1, r0
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	1c5a      	adds	r2, r3, #1
 80081bc:	60ba      	str	r2, [r7, #8]
 80081be:	b2ca      	uxtb	r2, r1
 80081c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	3301      	adds	r3, #1
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	dbf0      	blt.n	80081b2 <_read+0x12>
  }

  return len;
 80081d0:	687b      	ldr	r3, [r7, #4]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <_close>:
  }
  return len;
}

int _close(int file)
{
 80081da:	b480      	push	{r7}
 80081dc:	b083      	sub	sp, #12
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80081e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b083      	sub	sp, #12
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008202:	605a      	str	r2, [r3, #4]
  return 0;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <_isatty>:

int _isatty(int file)
{
 8008212:	b480      	push	{r7}
 8008214:	b083      	sub	sp, #12
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800821a:	2301      	movs	r3, #1
}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
	...

08008244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800824c:	4a14      	ldr	r2, [pc, #80]	; (80082a0 <_sbrk+0x5c>)
 800824e:	4b15      	ldr	r3, [pc, #84]	; (80082a4 <_sbrk+0x60>)
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008258:	4b13      	ldr	r3, [pc, #76]	; (80082a8 <_sbrk+0x64>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d102      	bne.n	8008266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008260:	4b11      	ldr	r3, [pc, #68]	; (80082a8 <_sbrk+0x64>)
 8008262:	4a12      	ldr	r2, [pc, #72]	; (80082ac <_sbrk+0x68>)
 8008264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008266:	4b10      	ldr	r3, [pc, #64]	; (80082a8 <_sbrk+0x64>)
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4413      	add	r3, r2
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	429a      	cmp	r2, r3
 8008272:	d207      	bcs.n	8008284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008274:	f000 f858 	bl	8008328 <__errno>
 8008278:	4603      	mov	r3, r0
 800827a:	220c      	movs	r2, #12
 800827c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800827e:	f04f 33ff 	mov.w	r3, #4294967295
 8008282:	e009      	b.n	8008298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008284:	4b08      	ldr	r3, [pc, #32]	; (80082a8 <_sbrk+0x64>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800828a:	4b07      	ldr	r3, [pc, #28]	; (80082a8 <_sbrk+0x64>)
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4413      	add	r3, r2
 8008292:	4a05      	ldr	r2, [pc, #20]	; (80082a8 <_sbrk+0x64>)
 8008294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008296:	68fb      	ldr	r3, [r7, #12]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3718      	adds	r7, #24
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	200a0000 	.word	0x200a0000
 80082a4:	00000400 	.word	0x00000400
 80082a8:	2000055c 	.word	0x2000055c
 80082ac:	20000570 	.word	0x20000570

080082b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80082b0:	b480      	push	{r7}
 80082b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80082b4:	4b06      	ldr	r3, [pc, #24]	; (80082d0 <SystemInit+0x20>)
 80082b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ba:	4a05      	ldr	r2, [pc, #20]	; (80082d0 <SystemInit+0x20>)
 80082bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80082c4:	bf00      	nop
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	e000ed00 	.word	0xe000ed00

080082d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80082d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800830c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80082d8:	f7ff ffea 	bl	80082b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80082dc:	480c      	ldr	r0, [pc, #48]	; (8008310 <LoopForever+0x6>)
  ldr r1, =_edata
 80082de:	490d      	ldr	r1, [pc, #52]	; (8008314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80082e0:	4a0d      	ldr	r2, [pc, #52]	; (8008318 <LoopForever+0xe>)
  movs r3, #0
 80082e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80082e4:	e002      	b.n	80082ec <LoopCopyDataInit>

080082e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80082e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80082e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80082ea:	3304      	adds	r3, #4

080082ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80082ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80082ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80082f0:	d3f9      	bcc.n	80082e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80082f2:	4a0a      	ldr	r2, [pc, #40]	; (800831c <LoopForever+0x12>)
  ldr r4, =_ebss
 80082f4:	4c0a      	ldr	r4, [pc, #40]	; (8008320 <LoopForever+0x16>)
  movs r3, #0
 80082f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80082f8:	e001      	b.n	80082fe <LoopFillZerobss>

080082fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80082fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80082fc:	3204      	adds	r2, #4

080082fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80082fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008300:	d3fb      	bcc.n	80082fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008302:	f000 f817 	bl	8008334 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008306:	f7fe ff23 	bl	8007150 <main>

0800830a <LoopForever>:

LoopForever:
    b LoopForever
 800830a:	e7fe      	b.n	800830a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800830c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8008310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008314:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 8008318:	0800b44c 	.word	0x0800b44c
  ldr r2, =_sbss
 800831c:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8008320:	20000570 	.word	0x20000570

08008324 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008324:	e7fe      	b.n	8008324 <ADC1_IRQHandler>
	...

08008328 <__errno>:
 8008328:	4b01      	ldr	r3, [pc, #4]	; (8008330 <__errno+0x8>)
 800832a:	6818      	ldr	r0, [r3, #0]
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	200000d0 	.word	0x200000d0

08008334 <__libc_init_array>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	4d0d      	ldr	r5, [pc, #52]	; (800836c <__libc_init_array+0x38>)
 8008338:	4c0d      	ldr	r4, [pc, #52]	; (8008370 <__libc_init_array+0x3c>)
 800833a:	1b64      	subs	r4, r4, r5
 800833c:	10a4      	asrs	r4, r4, #2
 800833e:	2600      	movs	r6, #0
 8008340:	42a6      	cmp	r6, r4
 8008342:	d109      	bne.n	8008358 <__libc_init_array+0x24>
 8008344:	4d0b      	ldr	r5, [pc, #44]	; (8008374 <__libc_init_array+0x40>)
 8008346:	4c0c      	ldr	r4, [pc, #48]	; (8008378 <__libc_init_array+0x44>)
 8008348:	f002 fdc2 	bl	800aed0 <_init>
 800834c:	1b64      	subs	r4, r4, r5
 800834e:	10a4      	asrs	r4, r4, #2
 8008350:	2600      	movs	r6, #0
 8008352:	42a6      	cmp	r6, r4
 8008354:	d105      	bne.n	8008362 <__libc_init_array+0x2e>
 8008356:	bd70      	pop	{r4, r5, r6, pc}
 8008358:	f855 3b04 	ldr.w	r3, [r5], #4
 800835c:	4798      	blx	r3
 800835e:	3601      	adds	r6, #1
 8008360:	e7ee      	b.n	8008340 <__libc_init_array+0xc>
 8008362:	f855 3b04 	ldr.w	r3, [r5], #4
 8008366:	4798      	blx	r3
 8008368:	3601      	adds	r6, #1
 800836a:	e7f2      	b.n	8008352 <__libc_init_array+0x1e>
 800836c:	0800b444 	.word	0x0800b444
 8008370:	0800b444 	.word	0x0800b444
 8008374:	0800b444 	.word	0x0800b444
 8008378:	0800b448 	.word	0x0800b448

0800837c <memcpy>:
 800837c:	440a      	add	r2, r1
 800837e:	4291      	cmp	r1, r2
 8008380:	f100 33ff 	add.w	r3, r0, #4294967295
 8008384:	d100      	bne.n	8008388 <memcpy+0xc>
 8008386:	4770      	bx	lr
 8008388:	b510      	push	{r4, lr}
 800838a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800838e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008392:	4291      	cmp	r1, r2
 8008394:	d1f9      	bne.n	800838a <memcpy+0xe>
 8008396:	bd10      	pop	{r4, pc}

08008398 <memset>:
 8008398:	4402      	add	r2, r0
 800839a:	4603      	mov	r3, r0
 800839c:	4293      	cmp	r3, r2
 800839e:	d100      	bne.n	80083a2 <memset+0xa>
 80083a0:	4770      	bx	lr
 80083a2:	f803 1b01 	strb.w	r1, [r3], #1
 80083a6:	e7f9      	b.n	800839c <memset+0x4>

080083a8 <__cvt>:
 80083a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083ac:	ec55 4b10 	vmov	r4, r5, d0
 80083b0:	2d00      	cmp	r5, #0
 80083b2:	460e      	mov	r6, r1
 80083b4:	4619      	mov	r1, r3
 80083b6:	462b      	mov	r3, r5
 80083b8:	bfbb      	ittet	lt
 80083ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80083be:	461d      	movlt	r5, r3
 80083c0:	2300      	movge	r3, #0
 80083c2:	232d      	movlt	r3, #45	; 0x2d
 80083c4:	700b      	strb	r3, [r1, #0]
 80083c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80083cc:	4691      	mov	r9, r2
 80083ce:	f023 0820 	bic.w	r8, r3, #32
 80083d2:	bfbc      	itt	lt
 80083d4:	4622      	movlt	r2, r4
 80083d6:	4614      	movlt	r4, r2
 80083d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083dc:	d005      	beq.n	80083ea <__cvt+0x42>
 80083de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80083e2:	d100      	bne.n	80083e6 <__cvt+0x3e>
 80083e4:	3601      	adds	r6, #1
 80083e6:	2102      	movs	r1, #2
 80083e8:	e000      	b.n	80083ec <__cvt+0x44>
 80083ea:	2103      	movs	r1, #3
 80083ec:	ab03      	add	r3, sp, #12
 80083ee:	9301      	str	r3, [sp, #4]
 80083f0:	ab02      	add	r3, sp, #8
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	ec45 4b10 	vmov	d0, r4, r5
 80083f8:	4653      	mov	r3, sl
 80083fa:	4632      	mov	r2, r6
 80083fc:	f000 fe18 	bl	8009030 <_dtoa_r>
 8008400:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008404:	4607      	mov	r7, r0
 8008406:	d102      	bne.n	800840e <__cvt+0x66>
 8008408:	f019 0f01 	tst.w	r9, #1
 800840c:	d022      	beq.n	8008454 <__cvt+0xac>
 800840e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008412:	eb07 0906 	add.w	r9, r7, r6
 8008416:	d110      	bne.n	800843a <__cvt+0x92>
 8008418:	783b      	ldrb	r3, [r7, #0]
 800841a:	2b30      	cmp	r3, #48	; 0x30
 800841c:	d10a      	bne.n	8008434 <__cvt+0x8c>
 800841e:	2200      	movs	r2, #0
 8008420:	2300      	movs	r3, #0
 8008422:	4620      	mov	r0, r4
 8008424:	4629      	mov	r1, r5
 8008426:	f7f8 fb67 	bl	8000af8 <__aeabi_dcmpeq>
 800842a:	b918      	cbnz	r0, 8008434 <__cvt+0x8c>
 800842c:	f1c6 0601 	rsb	r6, r6, #1
 8008430:	f8ca 6000 	str.w	r6, [sl]
 8008434:	f8da 3000 	ldr.w	r3, [sl]
 8008438:	4499      	add	r9, r3
 800843a:	2200      	movs	r2, #0
 800843c:	2300      	movs	r3, #0
 800843e:	4620      	mov	r0, r4
 8008440:	4629      	mov	r1, r5
 8008442:	f7f8 fb59 	bl	8000af8 <__aeabi_dcmpeq>
 8008446:	b108      	cbz	r0, 800844c <__cvt+0xa4>
 8008448:	f8cd 900c 	str.w	r9, [sp, #12]
 800844c:	2230      	movs	r2, #48	; 0x30
 800844e:	9b03      	ldr	r3, [sp, #12]
 8008450:	454b      	cmp	r3, r9
 8008452:	d307      	bcc.n	8008464 <__cvt+0xbc>
 8008454:	9b03      	ldr	r3, [sp, #12]
 8008456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008458:	1bdb      	subs	r3, r3, r7
 800845a:	4638      	mov	r0, r7
 800845c:	6013      	str	r3, [r2, #0]
 800845e:	b004      	add	sp, #16
 8008460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008464:	1c59      	adds	r1, r3, #1
 8008466:	9103      	str	r1, [sp, #12]
 8008468:	701a      	strb	r2, [r3, #0]
 800846a:	e7f0      	b.n	800844e <__cvt+0xa6>

0800846c <__exponent>:
 800846c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800846e:	4603      	mov	r3, r0
 8008470:	2900      	cmp	r1, #0
 8008472:	bfb8      	it	lt
 8008474:	4249      	neglt	r1, r1
 8008476:	f803 2b02 	strb.w	r2, [r3], #2
 800847a:	bfb4      	ite	lt
 800847c:	222d      	movlt	r2, #45	; 0x2d
 800847e:	222b      	movge	r2, #43	; 0x2b
 8008480:	2909      	cmp	r1, #9
 8008482:	7042      	strb	r2, [r0, #1]
 8008484:	dd2a      	ble.n	80084dc <__exponent+0x70>
 8008486:	f10d 0407 	add.w	r4, sp, #7
 800848a:	46a4      	mov	ip, r4
 800848c:	270a      	movs	r7, #10
 800848e:	46a6      	mov	lr, r4
 8008490:	460a      	mov	r2, r1
 8008492:	fb91 f6f7 	sdiv	r6, r1, r7
 8008496:	fb07 1516 	mls	r5, r7, r6, r1
 800849a:	3530      	adds	r5, #48	; 0x30
 800849c:	2a63      	cmp	r2, #99	; 0x63
 800849e:	f104 34ff 	add.w	r4, r4, #4294967295
 80084a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80084a6:	4631      	mov	r1, r6
 80084a8:	dcf1      	bgt.n	800848e <__exponent+0x22>
 80084aa:	3130      	adds	r1, #48	; 0x30
 80084ac:	f1ae 0502 	sub.w	r5, lr, #2
 80084b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80084b4:	1c44      	adds	r4, r0, #1
 80084b6:	4629      	mov	r1, r5
 80084b8:	4561      	cmp	r1, ip
 80084ba:	d30a      	bcc.n	80084d2 <__exponent+0x66>
 80084bc:	f10d 0209 	add.w	r2, sp, #9
 80084c0:	eba2 020e 	sub.w	r2, r2, lr
 80084c4:	4565      	cmp	r5, ip
 80084c6:	bf88      	it	hi
 80084c8:	2200      	movhi	r2, #0
 80084ca:	4413      	add	r3, r2
 80084cc:	1a18      	subs	r0, r3, r0
 80084ce:	b003      	add	sp, #12
 80084d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80084da:	e7ed      	b.n	80084b8 <__exponent+0x4c>
 80084dc:	2330      	movs	r3, #48	; 0x30
 80084de:	3130      	adds	r1, #48	; 0x30
 80084e0:	7083      	strb	r3, [r0, #2]
 80084e2:	70c1      	strb	r1, [r0, #3]
 80084e4:	1d03      	adds	r3, r0, #4
 80084e6:	e7f1      	b.n	80084cc <__exponent+0x60>

080084e8 <_printf_float>:
 80084e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ec:	ed2d 8b02 	vpush	{d8}
 80084f0:	b08d      	sub	sp, #52	; 0x34
 80084f2:	460c      	mov	r4, r1
 80084f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80084f8:	4616      	mov	r6, r2
 80084fa:	461f      	mov	r7, r3
 80084fc:	4605      	mov	r5, r0
 80084fe:	f001 fd3d 	bl	8009f7c <_localeconv_r>
 8008502:	f8d0 a000 	ldr.w	sl, [r0]
 8008506:	4650      	mov	r0, sl
 8008508:	f7f7 fe7a 	bl	8000200 <strlen>
 800850c:	2300      	movs	r3, #0
 800850e:	930a      	str	r3, [sp, #40]	; 0x28
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	9305      	str	r3, [sp, #20]
 8008514:	f8d8 3000 	ldr.w	r3, [r8]
 8008518:	f894 b018 	ldrb.w	fp, [r4, #24]
 800851c:	3307      	adds	r3, #7
 800851e:	f023 0307 	bic.w	r3, r3, #7
 8008522:	f103 0208 	add.w	r2, r3, #8
 8008526:	f8c8 2000 	str.w	r2, [r8]
 800852a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008532:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008536:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800853a:	9307      	str	r3, [sp, #28]
 800853c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008540:	ee08 0a10 	vmov	s16, r0
 8008544:	4b9f      	ldr	r3, [pc, #636]	; (80087c4 <_printf_float+0x2dc>)
 8008546:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800854a:	f04f 32ff 	mov.w	r2, #4294967295
 800854e:	f7f8 fb05 	bl	8000b5c <__aeabi_dcmpun>
 8008552:	bb88      	cbnz	r0, 80085b8 <_printf_float+0xd0>
 8008554:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008558:	4b9a      	ldr	r3, [pc, #616]	; (80087c4 <_printf_float+0x2dc>)
 800855a:	f04f 32ff 	mov.w	r2, #4294967295
 800855e:	f7f8 fadf 	bl	8000b20 <__aeabi_dcmple>
 8008562:	bb48      	cbnz	r0, 80085b8 <_printf_float+0xd0>
 8008564:	2200      	movs	r2, #0
 8008566:	2300      	movs	r3, #0
 8008568:	4640      	mov	r0, r8
 800856a:	4649      	mov	r1, r9
 800856c:	f7f8 face 	bl	8000b0c <__aeabi_dcmplt>
 8008570:	b110      	cbz	r0, 8008578 <_printf_float+0x90>
 8008572:	232d      	movs	r3, #45	; 0x2d
 8008574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008578:	4b93      	ldr	r3, [pc, #588]	; (80087c8 <_printf_float+0x2e0>)
 800857a:	4894      	ldr	r0, [pc, #592]	; (80087cc <_printf_float+0x2e4>)
 800857c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008580:	bf94      	ite	ls
 8008582:	4698      	movls	r8, r3
 8008584:	4680      	movhi	r8, r0
 8008586:	2303      	movs	r3, #3
 8008588:	6123      	str	r3, [r4, #16]
 800858a:	9b05      	ldr	r3, [sp, #20]
 800858c:	f023 0204 	bic.w	r2, r3, #4
 8008590:	6022      	str	r2, [r4, #0]
 8008592:	f04f 0900 	mov.w	r9, #0
 8008596:	9700      	str	r7, [sp, #0]
 8008598:	4633      	mov	r3, r6
 800859a:	aa0b      	add	r2, sp, #44	; 0x2c
 800859c:	4621      	mov	r1, r4
 800859e:	4628      	mov	r0, r5
 80085a0:	f000 f9d8 	bl	8008954 <_printf_common>
 80085a4:	3001      	adds	r0, #1
 80085a6:	f040 8090 	bne.w	80086ca <_printf_float+0x1e2>
 80085aa:	f04f 30ff 	mov.w	r0, #4294967295
 80085ae:	b00d      	add	sp, #52	; 0x34
 80085b0:	ecbd 8b02 	vpop	{d8}
 80085b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b8:	4642      	mov	r2, r8
 80085ba:	464b      	mov	r3, r9
 80085bc:	4640      	mov	r0, r8
 80085be:	4649      	mov	r1, r9
 80085c0:	f7f8 facc 	bl	8000b5c <__aeabi_dcmpun>
 80085c4:	b140      	cbz	r0, 80085d8 <_printf_float+0xf0>
 80085c6:	464b      	mov	r3, r9
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	bfbc      	itt	lt
 80085cc:	232d      	movlt	r3, #45	; 0x2d
 80085ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80085d2:	487f      	ldr	r0, [pc, #508]	; (80087d0 <_printf_float+0x2e8>)
 80085d4:	4b7f      	ldr	r3, [pc, #508]	; (80087d4 <_printf_float+0x2ec>)
 80085d6:	e7d1      	b.n	800857c <_printf_float+0x94>
 80085d8:	6863      	ldr	r3, [r4, #4]
 80085da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80085de:	9206      	str	r2, [sp, #24]
 80085e0:	1c5a      	adds	r2, r3, #1
 80085e2:	d13f      	bne.n	8008664 <_printf_float+0x17c>
 80085e4:	2306      	movs	r3, #6
 80085e6:	6063      	str	r3, [r4, #4]
 80085e8:	9b05      	ldr	r3, [sp, #20]
 80085ea:	6861      	ldr	r1, [r4, #4]
 80085ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80085f0:	2300      	movs	r3, #0
 80085f2:	9303      	str	r3, [sp, #12]
 80085f4:	ab0a      	add	r3, sp, #40	; 0x28
 80085f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80085fa:	ab09      	add	r3, sp, #36	; 0x24
 80085fc:	ec49 8b10 	vmov	d0, r8, r9
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	6022      	str	r2, [r4, #0]
 8008604:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008608:	4628      	mov	r0, r5
 800860a:	f7ff fecd 	bl	80083a8 <__cvt>
 800860e:	9b06      	ldr	r3, [sp, #24]
 8008610:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008612:	2b47      	cmp	r3, #71	; 0x47
 8008614:	4680      	mov	r8, r0
 8008616:	d108      	bne.n	800862a <_printf_float+0x142>
 8008618:	1cc8      	adds	r0, r1, #3
 800861a:	db02      	blt.n	8008622 <_printf_float+0x13a>
 800861c:	6863      	ldr	r3, [r4, #4]
 800861e:	4299      	cmp	r1, r3
 8008620:	dd41      	ble.n	80086a6 <_printf_float+0x1be>
 8008622:	f1ab 0b02 	sub.w	fp, fp, #2
 8008626:	fa5f fb8b 	uxtb.w	fp, fp
 800862a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800862e:	d820      	bhi.n	8008672 <_printf_float+0x18a>
 8008630:	3901      	subs	r1, #1
 8008632:	465a      	mov	r2, fp
 8008634:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008638:	9109      	str	r1, [sp, #36]	; 0x24
 800863a:	f7ff ff17 	bl	800846c <__exponent>
 800863e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008640:	1813      	adds	r3, r2, r0
 8008642:	2a01      	cmp	r2, #1
 8008644:	4681      	mov	r9, r0
 8008646:	6123      	str	r3, [r4, #16]
 8008648:	dc02      	bgt.n	8008650 <_printf_float+0x168>
 800864a:	6822      	ldr	r2, [r4, #0]
 800864c:	07d2      	lsls	r2, r2, #31
 800864e:	d501      	bpl.n	8008654 <_printf_float+0x16c>
 8008650:	3301      	adds	r3, #1
 8008652:	6123      	str	r3, [r4, #16]
 8008654:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008658:	2b00      	cmp	r3, #0
 800865a:	d09c      	beq.n	8008596 <_printf_float+0xae>
 800865c:	232d      	movs	r3, #45	; 0x2d
 800865e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008662:	e798      	b.n	8008596 <_printf_float+0xae>
 8008664:	9a06      	ldr	r2, [sp, #24]
 8008666:	2a47      	cmp	r2, #71	; 0x47
 8008668:	d1be      	bne.n	80085e8 <_printf_float+0x100>
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1bc      	bne.n	80085e8 <_printf_float+0x100>
 800866e:	2301      	movs	r3, #1
 8008670:	e7b9      	b.n	80085e6 <_printf_float+0xfe>
 8008672:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008676:	d118      	bne.n	80086aa <_printf_float+0x1c2>
 8008678:	2900      	cmp	r1, #0
 800867a:	6863      	ldr	r3, [r4, #4]
 800867c:	dd0b      	ble.n	8008696 <_printf_float+0x1ae>
 800867e:	6121      	str	r1, [r4, #16]
 8008680:	b913      	cbnz	r3, 8008688 <_printf_float+0x1a0>
 8008682:	6822      	ldr	r2, [r4, #0]
 8008684:	07d0      	lsls	r0, r2, #31
 8008686:	d502      	bpl.n	800868e <_printf_float+0x1a6>
 8008688:	3301      	adds	r3, #1
 800868a:	440b      	add	r3, r1
 800868c:	6123      	str	r3, [r4, #16]
 800868e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008690:	f04f 0900 	mov.w	r9, #0
 8008694:	e7de      	b.n	8008654 <_printf_float+0x16c>
 8008696:	b913      	cbnz	r3, 800869e <_printf_float+0x1b6>
 8008698:	6822      	ldr	r2, [r4, #0]
 800869a:	07d2      	lsls	r2, r2, #31
 800869c:	d501      	bpl.n	80086a2 <_printf_float+0x1ba>
 800869e:	3302      	adds	r3, #2
 80086a0:	e7f4      	b.n	800868c <_printf_float+0x1a4>
 80086a2:	2301      	movs	r3, #1
 80086a4:	e7f2      	b.n	800868c <_printf_float+0x1a4>
 80086a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80086aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ac:	4299      	cmp	r1, r3
 80086ae:	db05      	blt.n	80086bc <_printf_float+0x1d4>
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	6121      	str	r1, [r4, #16]
 80086b4:	07d8      	lsls	r0, r3, #31
 80086b6:	d5ea      	bpl.n	800868e <_printf_float+0x1a6>
 80086b8:	1c4b      	adds	r3, r1, #1
 80086ba:	e7e7      	b.n	800868c <_printf_float+0x1a4>
 80086bc:	2900      	cmp	r1, #0
 80086be:	bfd4      	ite	le
 80086c0:	f1c1 0202 	rsble	r2, r1, #2
 80086c4:	2201      	movgt	r2, #1
 80086c6:	4413      	add	r3, r2
 80086c8:	e7e0      	b.n	800868c <_printf_float+0x1a4>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	055a      	lsls	r2, r3, #21
 80086ce:	d407      	bmi.n	80086e0 <_printf_float+0x1f8>
 80086d0:	6923      	ldr	r3, [r4, #16]
 80086d2:	4642      	mov	r2, r8
 80086d4:	4631      	mov	r1, r6
 80086d6:	4628      	mov	r0, r5
 80086d8:	47b8      	blx	r7
 80086da:	3001      	adds	r0, #1
 80086dc:	d12c      	bne.n	8008738 <_printf_float+0x250>
 80086de:	e764      	b.n	80085aa <_printf_float+0xc2>
 80086e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80086e4:	f240 80e0 	bls.w	80088a8 <_printf_float+0x3c0>
 80086e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086ec:	2200      	movs	r2, #0
 80086ee:	2300      	movs	r3, #0
 80086f0:	f7f8 fa02 	bl	8000af8 <__aeabi_dcmpeq>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d034      	beq.n	8008762 <_printf_float+0x27a>
 80086f8:	4a37      	ldr	r2, [pc, #220]	; (80087d8 <_printf_float+0x2f0>)
 80086fa:	2301      	movs	r3, #1
 80086fc:	4631      	mov	r1, r6
 80086fe:	4628      	mov	r0, r5
 8008700:	47b8      	blx	r7
 8008702:	3001      	adds	r0, #1
 8008704:	f43f af51 	beq.w	80085aa <_printf_float+0xc2>
 8008708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800870c:	429a      	cmp	r2, r3
 800870e:	db02      	blt.n	8008716 <_printf_float+0x22e>
 8008710:	6823      	ldr	r3, [r4, #0]
 8008712:	07d8      	lsls	r0, r3, #31
 8008714:	d510      	bpl.n	8008738 <_printf_float+0x250>
 8008716:	ee18 3a10 	vmov	r3, s16
 800871a:	4652      	mov	r2, sl
 800871c:	4631      	mov	r1, r6
 800871e:	4628      	mov	r0, r5
 8008720:	47b8      	blx	r7
 8008722:	3001      	adds	r0, #1
 8008724:	f43f af41 	beq.w	80085aa <_printf_float+0xc2>
 8008728:	f04f 0800 	mov.w	r8, #0
 800872c:	f104 091a 	add.w	r9, r4, #26
 8008730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008732:	3b01      	subs	r3, #1
 8008734:	4543      	cmp	r3, r8
 8008736:	dc09      	bgt.n	800874c <_printf_float+0x264>
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	079b      	lsls	r3, r3, #30
 800873c:	f100 8105 	bmi.w	800894a <_printf_float+0x462>
 8008740:	68e0      	ldr	r0, [r4, #12]
 8008742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008744:	4298      	cmp	r0, r3
 8008746:	bfb8      	it	lt
 8008748:	4618      	movlt	r0, r3
 800874a:	e730      	b.n	80085ae <_printf_float+0xc6>
 800874c:	2301      	movs	r3, #1
 800874e:	464a      	mov	r2, r9
 8008750:	4631      	mov	r1, r6
 8008752:	4628      	mov	r0, r5
 8008754:	47b8      	blx	r7
 8008756:	3001      	adds	r0, #1
 8008758:	f43f af27 	beq.w	80085aa <_printf_float+0xc2>
 800875c:	f108 0801 	add.w	r8, r8, #1
 8008760:	e7e6      	b.n	8008730 <_printf_float+0x248>
 8008762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008764:	2b00      	cmp	r3, #0
 8008766:	dc39      	bgt.n	80087dc <_printf_float+0x2f4>
 8008768:	4a1b      	ldr	r2, [pc, #108]	; (80087d8 <_printf_float+0x2f0>)
 800876a:	2301      	movs	r3, #1
 800876c:	4631      	mov	r1, r6
 800876e:	4628      	mov	r0, r5
 8008770:	47b8      	blx	r7
 8008772:	3001      	adds	r0, #1
 8008774:	f43f af19 	beq.w	80085aa <_printf_float+0xc2>
 8008778:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800877c:	4313      	orrs	r3, r2
 800877e:	d102      	bne.n	8008786 <_printf_float+0x29e>
 8008780:	6823      	ldr	r3, [r4, #0]
 8008782:	07d9      	lsls	r1, r3, #31
 8008784:	d5d8      	bpl.n	8008738 <_printf_float+0x250>
 8008786:	ee18 3a10 	vmov	r3, s16
 800878a:	4652      	mov	r2, sl
 800878c:	4631      	mov	r1, r6
 800878e:	4628      	mov	r0, r5
 8008790:	47b8      	blx	r7
 8008792:	3001      	adds	r0, #1
 8008794:	f43f af09 	beq.w	80085aa <_printf_float+0xc2>
 8008798:	f04f 0900 	mov.w	r9, #0
 800879c:	f104 0a1a 	add.w	sl, r4, #26
 80087a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a2:	425b      	negs	r3, r3
 80087a4:	454b      	cmp	r3, r9
 80087a6:	dc01      	bgt.n	80087ac <_printf_float+0x2c4>
 80087a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087aa:	e792      	b.n	80086d2 <_printf_float+0x1ea>
 80087ac:	2301      	movs	r3, #1
 80087ae:	4652      	mov	r2, sl
 80087b0:	4631      	mov	r1, r6
 80087b2:	4628      	mov	r0, r5
 80087b4:	47b8      	blx	r7
 80087b6:	3001      	adds	r0, #1
 80087b8:	f43f aef7 	beq.w	80085aa <_printf_float+0xc2>
 80087bc:	f109 0901 	add.w	r9, r9, #1
 80087c0:	e7ee      	b.n	80087a0 <_printf_float+0x2b8>
 80087c2:	bf00      	nop
 80087c4:	7fefffff 	.word	0x7fefffff
 80087c8:	0800b064 	.word	0x0800b064
 80087cc:	0800b068 	.word	0x0800b068
 80087d0:	0800b070 	.word	0x0800b070
 80087d4:	0800b06c 	.word	0x0800b06c
 80087d8:	0800b074 	.word	0x0800b074
 80087dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087e0:	429a      	cmp	r2, r3
 80087e2:	bfa8      	it	ge
 80087e4:	461a      	movge	r2, r3
 80087e6:	2a00      	cmp	r2, #0
 80087e8:	4691      	mov	r9, r2
 80087ea:	dc37      	bgt.n	800885c <_printf_float+0x374>
 80087ec:	f04f 0b00 	mov.w	fp, #0
 80087f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087f4:	f104 021a 	add.w	r2, r4, #26
 80087f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087fa:	9305      	str	r3, [sp, #20]
 80087fc:	eba3 0309 	sub.w	r3, r3, r9
 8008800:	455b      	cmp	r3, fp
 8008802:	dc33      	bgt.n	800886c <_printf_float+0x384>
 8008804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008808:	429a      	cmp	r2, r3
 800880a:	db3b      	blt.n	8008884 <_printf_float+0x39c>
 800880c:	6823      	ldr	r3, [r4, #0]
 800880e:	07da      	lsls	r2, r3, #31
 8008810:	d438      	bmi.n	8008884 <_printf_float+0x39c>
 8008812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008814:	9a05      	ldr	r2, [sp, #20]
 8008816:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008818:	1a9a      	subs	r2, r3, r2
 800881a:	eba3 0901 	sub.w	r9, r3, r1
 800881e:	4591      	cmp	r9, r2
 8008820:	bfa8      	it	ge
 8008822:	4691      	movge	r9, r2
 8008824:	f1b9 0f00 	cmp.w	r9, #0
 8008828:	dc35      	bgt.n	8008896 <_printf_float+0x3ae>
 800882a:	f04f 0800 	mov.w	r8, #0
 800882e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008832:	f104 0a1a 	add.w	sl, r4, #26
 8008836:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800883a:	1a9b      	subs	r3, r3, r2
 800883c:	eba3 0309 	sub.w	r3, r3, r9
 8008840:	4543      	cmp	r3, r8
 8008842:	f77f af79 	ble.w	8008738 <_printf_float+0x250>
 8008846:	2301      	movs	r3, #1
 8008848:	4652      	mov	r2, sl
 800884a:	4631      	mov	r1, r6
 800884c:	4628      	mov	r0, r5
 800884e:	47b8      	blx	r7
 8008850:	3001      	adds	r0, #1
 8008852:	f43f aeaa 	beq.w	80085aa <_printf_float+0xc2>
 8008856:	f108 0801 	add.w	r8, r8, #1
 800885a:	e7ec      	b.n	8008836 <_printf_float+0x34e>
 800885c:	4613      	mov	r3, r2
 800885e:	4631      	mov	r1, r6
 8008860:	4642      	mov	r2, r8
 8008862:	4628      	mov	r0, r5
 8008864:	47b8      	blx	r7
 8008866:	3001      	adds	r0, #1
 8008868:	d1c0      	bne.n	80087ec <_printf_float+0x304>
 800886a:	e69e      	b.n	80085aa <_printf_float+0xc2>
 800886c:	2301      	movs	r3, #1
 800886e:	4631      	mov	r1, r6
 8008870:	4628      	mov	r0, r5
 8008872:	9205      	str	r2, [sp, #20]
 8008874:	47b8      	blx	r7
 8008876:	3001      	adds	r0, #1
 8008878:	f43f ae97 	beq.w	80085aa <_printf_float+0xc2>
 800887c:	9a05      	ldr	r2, [sp, #20]
 800887e:	f10b 0b01 	add.w	fp, fp, #1
 8008882:	e7b9      	b.n	80087f8 <_printf_float+0x310>
 8008884:	ee18 3a10 	vmov	r3, s16
 8008888:	4652      	mov	r2, sl
 800888a:	4631      	mov	r1, r6
 800888c:	4628      	mov	r0, r5
 800888e:	47b8      	blx	r7
 8008890:	3001      	adds	r0, #1
 8008892:	d1be      	bne.n	8008812 <_printf_float+0x32a>
 8008894:	e689      	b.n	80085aa <_printf_float+0xc2>
 8008896:	9a05      	ldr	r2, [sp, #20]
 8008898:	464b      	mov	r3, r9
 800889a:	4442      	add	r2, r8
 800889c:	4631      	mov	r1, r6
 800889e:	4628      	mov	r0, r5
 80088a0:	47b8      	blx	r7
 80088a2:	3001      	adds	r0, #1
 80088a4:	d1c1      	bne.n	800882a <_printf_float+0x342>
 80088a6:	e680      	b.n	80085aa <_printf_float+0xc2>
 80088a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088aa:	2a01      	cmp	r2, #1
 80088ac:	dc01      	bgt.n	80088b2 <_printf_float+0x3ca>
 80088ae:	07db      	lsls	r3, r3, #31
 80088b0:	d538      	bpl.n	8008924 <_printf_float+0x43c>
 80088b2:	2301      	movs	r3, #1
 80088b4:	4642      	mov	r2, r8
 80088b6:	4631      	mov	r1, r6
 80088b8:	4628      	mov	r0, r5
 80088ba:	47b8      	blx	r7
 80088bc:	3001      	adds	r0, #1
 80088be:	f43f ae74 	beq.w	80085aa <_printf_float+0xc2>
 80088c2:	ee18 3a10 	vmov	r3, s16
 80088c6:	4652      	mov	r2, sl
 80088c8:	4631      	mov	r1, r6
 80088ca:	4628      	mov	r0, r5
 80088cc:	47b8      	blx	r7
 80088ce:	3001      	adds	r0, #1
 80088d0:	f43f ae6b 	beq.w	80085aa <_printf_float+0xc2>
 80088d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088d8:	2200      	movs	r2, #0
 80088da:	2300      	movs	r3, #0
 80088dc:	f7f8 f90c 	bl	8000af8 <__aeabi_dcmpeq>
 80088e0:	b9d8      	cbnz	r0, 800891a <_printf_float+0x432>
 80088e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088e4:	f108 0201 	add.w	r2, r8, #1
 80088e8:	3b01      	subs	r3, #1
 80088ea:	4631      	mov	r1, r6
 80088ec:	4628      	mov	r0, r5
 80088ee:	47b8      	blx	r7
 80088f0:	3001      	adds	r0, #1
 80088f2:	d10e      	bne.n	8008912 <_printf_float+0x42a>
 80088f4:	e659      	b.n	80085aa <_printf_float+0xc2>
 80088f6:	2301      	movs	r3, #1
 80088f8:	4652      	mov	r2, sl
 80088fa:	4631      	mov	r1, r6
 80088fc:	4628      	mov	r0, r5
 80088fe:	47b8      	blx	r7
 8008900:	3001      	adds	r0, #1
 8008902:	f43f ae52 	beq.w	80085aa <_printf_float+0xc2>
 8008906:	f108 0801 	add.w	r8, r8, #1
 800890a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800890c:	3b01      	subs	r3, #1
 800890e:	4543      	cmp	r3, r8
 8008910:	dcf1      	bgt.n	80088f6 <_printf_float+0x40e>
 8008912:	464b      	mov	r3, r9
 8008914:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008918:	e6dc      	b.n	80086d4 <_printf_float+0x1ec>
 800891a:	f04f 0800 	mov.w	r8, #0
 800891e:	f104 0a1a 	add.w	sl, r4, #26
 8008922:	e7f2      	b.n	800890a <_printf_float+0x422>
 8008924:	2301      	movs	r3, #1
 8008926:	4642      	mov	r2, r8
 8008928:	e7df      	b.n	80088ea <_printf_float+0x402>
 800892a:	2301      	movs	r3, #1
 800892c:	464a      	mov	r2, r9
 800892e:	4631      	mov	r1, r6
 8008930:	4628      	mov	r0, r5
 8008932:	47b8      	blx	r7
 8008934:	3001      	adds	r0, #1
 8008936:	f43f ae38 	beq.w	80085aa <_printf_float+0xc2>
 800893a:	f108 0801 	add.w	r8, r8, #1
 800893e:	68e3      	ldr	r3, [r4, #12]
 8008940:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008942:	1a5b      	subs	r3, r3, r1
 8008944:	4543      	cmp	r3, r8
 8008946:	dcf0      	bgt.n	800892a <_printf_float+0x442>
 8008948:	e6fa      	b.n	8008740 <_printf_float+0x258>
 800894a:	f04f 0800 	mov.w	r8, #0
 800894e:	f104 0919 	add.w	r9, r4, #25
 8008952:	e7f4      	b.n	800893e <_printf_float+0x456>

08008954 <_printf_common>:
 8008954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008958:	4616      	mov	r6, r2
 800895a:	4699      	mov	r9, r3
 800895c:	688a      	ldr	r2, [r1, #8]
 800895e:	690b      	ldr	r3, [r1, #16]
 8008960:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008964:	4293      	cmp	r3, r2
 8008966:	bfb8      	it	lt
 8008968:	4613      	movlt	r3, r2
 800896a:	6033      	str	r3, [r6, #0]
 800896c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008970:	4607      	mov	r7, r0
 8008972:	460c      	mov	r4, r1
 8008974:	b10a      	cbz	r2, 800897a <_printf_common+0x26>
 8008976:	3301      	adds	r3, #1
 8008978:	6033      	str	r3, [r6, #0]
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	0699      	lsls	r1, r3, #26
 800897e:	bf42      	ittt	mi
 8008980:	6833      	ldrmi	r3, [r6, #0]
 8008982:	3302      	addmi	r3, #2
 8008984:	6033      	strmi	r3, [r6, #0]
 8008986:	6825      	ldr	r5, [r4, #0]
 8008988:	f015 0506 	ands.w	r5, r5, #6
 800898c:	d106      	bne.n	800899c <_printf_common+0x48>
 800898e:	f104 0a19 	add.w	sl, r4, #25
 8008992:	68e3      	ldr	r3, [r4, #12]
 8008994:	6832      	ldr	r2, [r6, #0]
 8008996:	1a9b      	subs	r3, r3, r2
 8008998:	42ab      	cmp	r3, r5
 800899a:	dc26      	bgt.n	80089ea <_printf_common+0x96>
 800899c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089a0:	1e13      	subs	r3, r2, #0
 80089a2:	6822      	ldr	r2, [r4, #0]
 80089a4:	bf18      	it	ne
 80089a6:	2301      	movne	r3, #1
 80089a8:	0692      	lsls	r2, r2, #26
 80089aa:	d42b      	bmi.n	8008a04 <_printf_common+0xb0>
 80089ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089b0:	4649      	mov	r1, r9
 80089b2:	4638      	mov	r0, r7
 80089b4:	47c0      	blx	r8
 80089b6:	3001      	adds	r0, #1
 80089b8:	d01e      	beq.n	80089f8 <_printf_common+0xa4>
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	68e5      	ldr	r5, [r4, #12]
 80089be:	6832      	ldr	r2, [r6, #0]
 80089c0:	f003 0306 	and.w	r3, r3, #6
 80089c4:	2b04      	cmp	r3, #4
 80089c6:	bf08      	it	eq
 80089c8:	1aad      	subeq	r5, r5, r2
 80089ca:	68a3      	ldr	r3, [r4, #8]
 80089cc:	6922      	ldr	r2, [r4, #16]
 80089ce:	bf0c      	ite	eq
 80089d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089d4:	2500      	movne	r5, #0
 80089d6:	4293      	cmp	r3, r2
 80089d8:	bfc4      	itt	gt
 80089da:	1a9b      	subgt	r3, r3, r2
 80089dc:	18ed      	addgt	r5, r5, r3
 80089de:	2600      	movs	r6, #0
 80089e0:	341a      	adds	r4, #26
 80089e2:	42b5      	cmp	r5, r6
 80089e4:	d11a      	bne.n	8008a1c <_printf_common+0xc8>
 80089e6:	2000      	movs	r0, #0
 80089e8:	e008      	b.n	80089fc <_printf_common+0xa8>
 80089ea:	2301      	movs	r3, #1
 80089ec:	4652      	mov	r2, sl
 80089ee:	4649      	mov	r1, r9
 80089f0:	4638      	mov	r0, r7
 80089f2:	47c0      	blx	r8
 80089f4:	3001      	adds	r0, #1
 80089f6:	d103      	bne.n	8008a00 <_printf_common+0xac>
 80089f8:	f04f 30ff 	mov.w	r0, #4294967295
 80089fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a00:	3501      	adds	r5, #1
 8008a02:	e7c6      	b.n	8008992 <_printf_common+0x3e>
 8008a04:	18e1      	adds	r1, r4, r3
 8008a06:	1c5a      	adds	r2, r3, #1
 8008a08:	2030      	movs	r0, #48	; 0x30
 8008a0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a0e:	4422      	add	r2, r4
 8008a10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a18:	3302      	adds	r3, #2
 8008a1a:	e7c7      	b.n	80089ac <_printf_common+0x58>
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	4622      	mov	r2, r4
 8008a20:	4649      	mov	r1, r9
 8008a22:	4638      	mov	r0, r7
 8008a24:	47c0      	blx	r8
 8008a26:	3001      	adds	r0, #1
 8008a28:	d0e6      	beq.n	80089f8 <_printf_common+0xa4>
 8008a2a:	3601      	adds	r6, #1
 8008a2c:	e7d9      	b.n	80089e2 <_printf_common+0x8e>
	...

08008a30 <_printf_i>:
 8008a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a34:	7e0f      	ldrb	r7, [r1, #24]
 8008a36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a38:	2f78      	cmp	r7, #120	; 0x78
 8008a3a:	4691      	mov	r9, r2
 8008a3c:	4680      	mov	r8, r0
 8008a3e:	460c      	mov	r4, r1
 8008a40:	469a      	mov	sl, r3
 8008a42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a46:	d807      	bhi.n	8008a58 <_printf_i+0x28>
 8008a48:	2f62      	cmp	r7, #98	; 0x62
 8008a4a:	d80a      	bhi.n	8008a62 <_printf_i+0x32>
 8008a4c:	2f00      	cmp	r7, #0
 8008a4e:	f000 80d8 	beq.w	8008c02 <_printf_i+0x1d2>
 8008a52:	2f58      	cmp	r7, #88	; 0x58
 8008a54:	f000 80a3 	beq.w	8008b9e <_printf_i+0x16e>
 8008a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a60:	e03a      	b.n	8008ad8 <_printf_i+0xa8>
 8008a62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a66:	2b15      	cmp	r3, #21
 8008a68:	d8f6      	bhi.n	8008a58 <_printf_i+0x28>
 8008a6a:	a101      	add	r1, pc, #4	; (adr r1, 8008a70 <_printf_i+0x40>)
 8008a6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a70:	08008ac9 	.word	0x08008ac9
 8008a74:	08008add 	.word	0x08008add
 8008a78:	08008a59 	.word	0x08008a59
 8008a7c:	08008a59 	.word	0x08008a59
 8008a80:	08008a59 	.word	0x08008a59
 8008a84:	08008a59 	.word	0x08008a59
 8008a88:	08008add 	.word	0x08008add
 8008a8c:	08008a59 	.word	0x08008a59
 8008a90:	08008a59 	.word	0x08008a59
 8008a94:	08008a59 	.word	0x08008a59
 8008a98:	08008a59 	.word	0x08008a59
 8008a9c:	08008be9 	.word	0x08008be9
 8008aa0:	08008b0d 	.word	0x08008b0d
 8008aa4:	08008bcb 	.word	0x08008bcb
 8008aa8:	08008a59 	.word	0x08008a59
 8008aac:	08008a59 	.word	0x08008a59
 8008ab0:	08008c0b 	.word	0x08008c0b
 8008ab4:	08008a59 	.word	0x08008a59
 8008ab8:	08008b0d 	.word	0x08008b0d
 8008abc:	08008a59 	.word	0x08008a59
 8008ac0:	08008a59 	.word	0x08008a59
 8008ac4:	08008bd3 	.word	0x08008bd3
 8008ac8:	682b      	ldr	r3, [r5, #0]
 8008aca:	1d1a      	adds	r2, r3, #4
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	602a      	str	r2, [r5, #0]
 8008ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e0a3      	b.n	8008c24 <_printf_i+0x1f4>
 8008adc:	6820      	ldr	r0, [r4, #0]
 8008ade:	6829      	ldr	r1, [r5, #0]
 8008ae0:	0606      	lsls	r6, r0, #24
 8008ae2:	f101 0304 	add.w	r3, r1, #4
 8008ae6:	d50a      	bpl.n	8008afe <_printf_i+0xce>
 8008ae8:	680e      	ldr	r6, [r1, #0]
 8008aea:	602b      	str	r3, [r5, #0]
 8008aec:	2e00      	cmp	r6, #0
 8008aee:	da03      	bge.n	8008af8 <_printf_i+0xc8>
 8008af0:	232d      	movs	r3, #45	; 0x2d
 8008af2:	4276      	negs	r6, r6
 8008af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008af8:	485e      	ldr	r0, [pc, #376]	; (8008c74 <_printf_i+0x244>)
 8008afa:	230a      	movs	r3, #10
 8008afc:	e019      	b.n	8008b32 <_printf_i+0x102>
 8008afe:	680e      	ldr	r6, [r1, #0]
 8008b00:	602b      	str	r3, [r5, #0]
 8008b02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b06:	bf18      	it	ne
 8008b08:	b236      	sxthne	r6, r6
 8008b0a:	e7ef      	b.n	8008aec <_printf_i+0xbc>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	6820      	ldr	r0, [r4, #0]
 8008b10:	1d19      	adds	r1, r3, #4
 8008b12:	6029      	str	r1, [r5, #0]
 8008b14:	0601      	lsls	r1, r0, #24
 8008b16:	d501      	bpl.n	8008b1c <_printf_i+0xec>
 8008b18:	681e      	ldr	r6, [r3, #0]
 8008b1a:	e002      	b.n	8008b22 <_printf_i+0xf2>
 8008b1c:	0646      	lsls	r6, r0, #25
 8008b1e:	d5fb      	bpl.n	8008b18 <_printf_i+0xe8>
 8008b20:	881e      	ldrh	r6, [r3, #0]
 8008b22:	4854      	ldr	r0, [pc, #336]	; (8008c74 <_printf_i+0x244>)
 8008b24:	2f6f      	cmp	r7, #111	; 0x6f
 8008b26:	bf0c      	ite	eq
 8008b28:	2308      	moveq	r3, #8
 8008b2a:	230a      	movne	r3, #10
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b32:	6865      	ldr	r5, [r4, #4]
 8008b34:	60a5      	str	r5, [r4, #8]
 8008b36:	2d00      	cmp	r5, #0
 8008b38:	bfa2      	ittt	ge
 8008b3a:	6821      	ldrge	r1, [r4, #0]
 8008b3c:	f021 0104 	bicge.w	r1, r1, #4
 8008b40:	6021      	strge	r1, [r4, #0]
 8008b42:	b90e      	cbnz	r6, 8008b48 <_printf_i+0x118>
 8008b44:	2d00      	cmp	r5, #0
 8008b46:	d04d      	beq.n	8008be4 <_printf_i+0x1b4>
 8008b48:	4615      	mov	r5, r2
 8008b4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b4e:	fb03 6711 	mls	r7, r3, r1, r6
 8008b52:	5dc7      	ldrb	r7, [r0, r7]
 8008b54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b58:	4637      	mov	r7, r6
 8008b5a:	42bb      	cmp	r3, r7
 8008b5c:	460e      	mov	r6, r1
 8008b5e:	d9f4      	bls.n	8008b4a <_printf_i+0x11a>
 8008b60:	2b08      	cmp	r3, #8
 8008b62:	d10b      	bne.n	8008b7c <_printf_i+0x14c>
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	07de      	lsls	r6, r3, #31
 8008b68:	d508      	bpl.n	8008b7c <_printf_i+0x14c>
 8008b6a:	6923      	ldr	r3, [r4, #16]
 8008b6c:	6861      	ldr	r1, [r4, #4]
 8008b6e:	4299      	cmp	r1, r3
 8008b70:	bfde      	ittt	le
 8008b72:	2330      	movle	r3, #48	; 0x30
 8008b74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b7c:	1b52      	subs	r2, r2, r5
 8008b7e:	6122      	str	r2, [r4, #16]
 8008b80:	f8cd a000 	str.w	sl, [sp]
 8008b84:	464b      	mov	r3, r9
 8008b86:	aa03      	add	r2, sp, #12
 8008b88:	4621      	mov	r1, r4
 8008b8a:	4640      	mov	r0, r8
 8008b8c:	f7ff fee2 	bl	8008954 <_printf_common>
 8008b90:	3001      	adds	r0, #1
 8008b92:	d14c      	bne.n	8008c2e <_printf_i+0x1fe>
 8008b94:	f04f 30ff 	mov.w	r0, #4294967295
 8008b98:	b004      	add	sp, #16
 8008b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b9e:	4835      	ldr	r0, [pc, #212]	; (8008c74 <_printf_i+0x244>)
 8008ba0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ba4:	6829      	ldr	r1, [r5, #0]
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bac:	6029      	str	r1, [r5, #0]
 8008bae:	061d      	lsls	r5, r3, #24
 8008bb0:	d514      	bpl.n	8008bdc <_printf_i+0x1ac>
 8008bb2:	07df      	lsls	r7, r3, #31
 8008bb4:	bf44      	itt	mi
 8008bb6:	f043 0320 	orrmi.w	r3, r3, #32
 8008bba:	6023      	strmi	r3, [r4, #0]
 8008bbc:	b91e      	cbnz	r6, 8008bc6 <_printf_i+0x196>
 8008bbe:	6823      	ldr	r3, [r4, #0]
 8008bc0:	f023 0320 	bic.w	r3, r3, #32
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	2310      	movs	r3, #16
 8008bc8:	e7b0      	b.n	8008b2c <_printf_i+0xfc>
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	f043 0320 	orr.w	r3, r3, #32
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	2378      	movs	r3, #120	; 0x78
 8008bd4:	4828      	ldr	r0, [pc, #160]	; (8008c78 <_printf_i+0x248>)
 8008bd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bda:	e7e3      	b.n	8008ba4 <_printf_i+0x174>
 8008bdc:	0659      	lsls	r1, r3, #25
 8008bde:	bf48      	it	mi
 8008be0:	b2b6      	uxthmi	r6, r6
 8008be2:	e7e6      	b.n	8008bb2 <_printf_i+0x182>
 8008be4:	4615      	mov	r5, r2
 8008be6:	e7bb      	b.n	8008b60 <_printf_i+0x130>
 8008be8:	682b      	ldr	r3, [r5, #0]
 8008bea:	6826      	ldr	r6, [r4, #0]
 8008bec:	6961      	ldr	r1, [r4, #20]
 8008bee:	1d18      	adds	r0, r3, #4
 8008bf0:	6028      	str	r0, [r5, #0]
 8008bf2:	0635      	lsls	r5, r6, #24
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	d501      	bpl.n	8008bfc <_printf_i+0x1cc>
 8008bf8:	6019      	str	r1, [r3, #0]
 8008bfa:	e002      	b.n	8008c02 <_printf_i+0x1d2>
 8008bfc:	0670      	lsls	r0, r6, #25
 8008bfe:	d5fb      	bpl.n	8008bf8 <_printf_i+0x1c8>
 8008c00:	8019      	strh	r1, [r3, #0]
 8008c02:	2300      	movs	r3, #0
 8008c04:	6123      	str	r3, [r4, #16]
 8008c06:	4615      	mov	r5, r2
 8008c08:	e7ba      	b.n	8008b80 <_printf_i+0x150>
 8008c0a:	682b      	ldr	r3, [r5, #0]
 8008c0c:	1d1a      	adds	r2, r3, #4
 8008c0e:	602a      	str	r2, [r5, #0]
 8008c10:	681d      	ldr	r5, [r3, #0]
 8008c12:	6862      	ldr	r2, [r4, #4]
 8008c14:	2100      	movs	r1, #0
 8008c16:	4628      	mov	r0, r5
 8008c18:	f7f7 fafa 	bl	8000210 <memchr>
 8008c1c:	b108      	cbz	r0, 8008c22 <_printf_i+0x1f2>
 8008c1e:	1b40      	subs	r0, r0, r5
 8008c20:	6060      	str	r0, [r4, #4]
 8008c22:	6863      	ldr	r3, [r4, #4]
 8008c24:	6123      	str	r3, [r4, #16]
 8008c26:	2300      	movs	r3, #0
 8008c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c2c:	e7a8      	b.n	8008b80 <_printf_i+0x150>
 8008c2e:	6923      	ldr	r3, [r4, #16]
 8008c30:	462a      	mov	r2, r5
 8008c32:	4649      	mov	r1, r9
 8008c34:	4640      	mov	r0, r8
 8008c36:	47d0      	blx	sl
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d0ab      	beq.n	8008b94 <_printf_i+0x164>
 8008c3c:	6823      	ldr	r3, [r4, #0]
 8008c3e:	079b      	lsls	r3, r3, #30
 8008c40:	d413      	bmi.n	8008c6a <_printf_i+0x23a>
 8008c42:	68e0      	ldr	r0, [r4, #12]
 8008c44:	9b03      	ldr	r3, [sp, #12]
 8008c46:	4298      	cmp	r0, r3
 8008c48:	bfb8      	it	lt
 8008c4a:	4618      	movlt	r0, r3
 8008c4c:	e7a4      	b.n	8008b98 <_printf_i+0x168>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	4632      	mov	r2, r6
 8008c52:	4649      	mov	r1, r9
 8008c54:	4640      	mov	r0, r8
 8008c56:	47d0      	blx	sl
 8008c58:	3001      	adds	r0, #1
 8008c5a:	d09b      	beq.n	8008b94 <_printf_i+0x164>
 8008c5c:	3501      	adds	r5, #1
 8008c5e:	68e3      	ldr	r3, [r4, #12]
 8008c60:	9903      	ldr	r1, [sp, #12]
 8008c62:	1a5b      	subs	r3, r3, r1
 8008c64:	42ab      	cmp	r3, r5
 8008c66:	dcf2      	bgt.n	8008c4e <_printf_i+0x21e>
 8008c68:	e7eb      	b.n	8008c42 <_printf_i+0x212>
 8008c6a:	2500      	movs	r5, #0
 8008c6c:	f104 0619 	add.w	r6, r4, #25
 8008c70:	e7f5      	b.n	8008c5e <_printf_i+0x22e>
 8008c72:	bf00      	nop
 8008c74:	0800b076 	.word	0x0800b076
 8008c78:	0800b087 	.word	0x0800b087

08008c7c <iprintf>:
 8008c7c:	b40f      	push	{r0, r1, r2, r3}
 8008c7e:	4b0a      	ldr	r3, [pc, #40]	; (8008ca8 <iprintf+0x2c>)
 8008c80:	b513      	push	{r0, r1, r4, lr}
 8008c82:	681c      	ldr	r4, [r3, #0]
 8008c84:	b124      	cbz	r4, 8008c90 <iprintf+0x14>
 8008c86:	69a3      	ldr	r3, [r4, #24]
 8008c88:	b913      	cbnz	r3, 8008c90 <iprintf+0x14>
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f001 f8d8 	bl	8009e40 <__sinit>
 8008c90:	ab05      	add	r3, sp, #20
 8008c92:	9a04      	ldr	r2, [sp, #16]
 8008c94:	68a1      	ldr	r1, [r4, #8]
 8008c96:	9301      	str	r3, [sp, #4]
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f001 fe87 	bl	800a9ac <_vfiprintf_r>
 8008c9e:	b002      	add	sp, #8
 8008ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ca4:	b004      	add	sp, #16
 8008ca6:	4770      	bx	lr
 8008ca8:	200000d0 	.word	0x200000d0

08008cac <_puts_r>:
 8008cac:	b570      	push	{r4, r5, r6, lr}
 8008cae:	460e      	mov	r6, r1
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	b118      	cbz	r0, 8008cbc <_puts_r+0x10>
 8008cb4:	6983      	ldr	r3, [r0, #24]
 8008cb6:	b90b      	cbnz	r3, 8008cbc <_puts_r+0x10>
 8008cb8:	f001 f8c2 	bl	8009e40 <__sinit>
 8008cbc:	69ab      	ldr	r3, [r5, #24]
 8008cbe:	68ac      	ldr	r4, [r5, #8]
 8008cc0:	b913      	cbnz	r3, 8008cc8 <_puts_r+0x1c>
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	f001 f8bc 	bl	8009e40 <__sinit>
 8008cc8:	4b2c      	ldr	r3, [pc, #176]	; (8008d7c <_puts_r+0xd0>)
 8008cca:	429c      	cmp	r4, r3
 8008ccc:	d120      	bne.n	8008d10 <_puts_r+0x64>
 8008cce:	686c      	ldr	r4, [r5, #4]
 8008cd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cd2:	07db      	lsls	r3, r3, #31
 8008cd4:	d405      	bmi.n	8008ce2 <_puts_r+0x36>
 8008cd6:	89a3      	ldrh	r3, [r4, #12]
 8008cd8:	0598      	lsls	r0, r3, #22
 8008cda:	d402      	bmi.n	8008ce2 <_puts_r+0x36>
 8008cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cde:	f001 f952 	bl	8009f86 <__retarget_lock_acquire_recursive>
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	0719      	lsls	r1, r3, #28
 8008ce6:	d51d      	bpl.n	8008d24 <_puts_r+0x78>
 8008ce8:	6923      	ldr	r3, [r4, #16]
 8008cea:	b1db      	cbz	r3, 8008d24 <_puts_r+0x78>
 8008cec:	3e01      	subs	r6, #1
 8008cee:	68a3      	ldr	r3, [r4, #8]
 8008cf0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	60a3      	str	r3, [r4, #8]
 8008cf8:	bb39      	cbnz	r1, 8008d4a <_puts_r+0x9e>
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	da38      	bge.n	8008d70 <_puts_r+0xc4>
 8008cfe:	4622      	mov	r2, r4
 8008d00:	210a      	movs	r1, #10
 8008d02:	4628      	mov	r0, r5
 8008d04:	f000 f848 	bl	8008d98 <__swbuf_r>
 8008d08:	3001      	adds	r0, #1
 8008d0a:	d011      	beq.n	8008d30 <_puts_r+0x84>
 8008d0c:	250a      	movs	r5, #10
 8008d0e:	e011      	b.n	8008d34 <_puts_r+0x88>
 8008d10:	4b1b      	ldr	r3, [pc, #108]	; (8008d80 <_puts_r+0xd4>)
 8008d12:	429c      	cmp	r4, r3
 8008d14:	d101      	bne.n	8008d1a <_puts_r+0x6e>
 8008d16:	68ac      	ldr	r4, [r5, #8]
 8008d18:	e7da      	b.n	8008cd0 <_puts_r+0x24>
 8008d1a:	4b1a      	ldr	r3, [pc, #104]	; (8008d84 <_puts_r+0xd8>)
 8008d1c:	429c      	cmp	r4, r3
 8008d1e:	bf08      	it	eq
 8008d20:	68ec      	ldreq	r4, [r5, #12]
 8008d22:	e7d5      	b.n	8008cd0 <_puts_r+0x24>
 8008d24:	4621      	mov	r1, r4
 8008d26:	4628      	mov	r0, r5
 8008d28:	f000 f888 	bl	8008e3c <__swsetup_r>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	d0dd      	beq.n	8008cec <_puts_r+0x40>
 8008d30:	f04f 35ff 	mov.w	r5, #4294967295
 8008d34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d36:	07da      	lsls	r2, r3, #31
 8008d38:	d405      	bmi.n	8008d46 <_puts_r+0x9a>
 8008d3a:	89a3      	ldrh	r3, [r4, #12]
 8008d3c:	059b      	lsls	r3, r3, #22
 8008d3e:	d402      	bmi.n	8008d46 <_puts_r+0x9a>
 8008d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d42:	f001 f921 	bl	8009f88 <__retarget_lock_release_recursive>
 8008d46:	4628      	mov	r0, r5
 8008d48:	bd70      	pop	{r4, r5, r6, pc}
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	da04      	bge.n	8008d58 <_puts_r+0xac>
 8008d4e:	69a2      	ldr	r2, [r4, #24]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	dc06      	bgt.n	8008d62 <_puts_r+0xb6>
 8008d54:	290a      	cmp	r1, #10
 8008d56:	d004      	beq.n	8008d62 <_puts_r+0xb6>
 8008d58:	6823      	ldr	r3, [r4, #0]
 8008d5a:	1c5a      	adds	r2, r3, #1
 8008d5c:	6022      	str	r2, [r4, #0]
 8008d5e:	7019      	strb	r1, [r3, #0]
 8008d60:	e7c5      	b.n	8008cee <_puts_r+0x42>
 8008d62:	4622      	mov	r2, r4
 8008d64:	4628      	mov	r0, r5
 8008d66:	f000 f817 	bl	8008d98 <__swbuf_r>
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	d1bf      	bne.n	8008cee <_puts_r+0x42>
 8008d6e:	e7df      	b.n	8008d30 <_puts_r+0x84>
 8008d70:	6823      	ldr	r3, [r4, #0]
 8008d72:	250a      	movs	r5, #10
 8008d74:	1c5a      	adds	r2, r3, #1
 8008d76:	6022      	str	r2, [r4, #0]
 8008d78:	701d      	strb	r5, [r3, #0]
 8008d7a:	e7db      	b.n	8008d34 <_puts_r+0x88>
 8008d7c:	0800b148 	.word	0x0800b148
 8008d80:	0800b168 	.word	0x0800b168
 8008d84:	0800b128 	.word	0x0800b128

08008d88 <puts>:
 8008d88:	4b02      	ldr	r3, [pc, #8]	; (8008d94 <puts+0xc>)
 8008d8a:	4601      	mov	r1, r0
 8008d8c:	6818      	ldr	r0, [r3, #0]
 8008d8e:	f7ff bf8d 	b.w	8008cac <_puts_r>
 8008d92:	bf00      	nop
 8008d94:	200000d0 	.word	0x200000d0

08008d98 <__swbuf_r>:
 8008d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9a:	460e      	mov	r6, r1
 8008d9c:	4614      	mov	r4, r2
 8008d9e:	4605      	mov	r5, r0
 8008da0:	b118      	cbz	r0, 8008daa <__swbuf_r+0x12>
 8008da2:	6983      	ldr	r3, [r0, #24]
 8008da4:	b90b      	cbnz	r3, 8008daa <__swbuf_r+0x12>
 8008da6:	f001 f84b 	bl	8009e40 <__sinit>
 8008daa:	4b21      	ldr	r3, [pc, #132]	; (8008e30 <__swbuf_r+0x98>)
 8008dac:	429c      	cmp	r4, r3
 8008dae:	d12b      	bne.n	8008e08 <__swbuf_r+0x70>
 8008db0:	686c      	ldr	r4, [r5, #4]
 8008db2:	69a3      	ldr	r3, [r4, #24]
 8008db4:	60a3      	str	r3, [r4, #8]
 8008db6:	89a3      	ldrh	r3, [r4, #12]
 8008db8:	071a      	lsls	r2, r3, #28
 8008dba:	d52f      	bpl.n	8008e1c <__swbuf_r+0x84>
 8008dbc:	6923      	ldr	r3, [r4, #16]
 8008dbe:	b36b      	cbz	r3, 8008e1c <__swbuf_r+0x84>
 8008dc0:	6923      	ldr	r3, [r4, #16]
 8008dc2:	6820      	ldr	r0, [r4, #0]
 8008dc4:	1ac0      	subs	r0, r0, r3
 8008dc6:	6963      	ldr	r3, [r4, #20]
 8008dc8:	b2f6      	uxtb	r6, r6
 8008dca:	4283      	cmp	r3, r0
 8008dcc:	4637      	mov	r7, r6
 8008dce:	dc04      	bgt.n	8008dda <__swbuf_r+0x42>
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	f000 ffa0 	bl	8009d18 <_fflush_r>
 8008dd8:	bb30      	cbnz	r0, 8008e28 <__swbuf_r+0x90>
 8008dda:	68a3      	ldr	r3, [r4, #8]
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	60a3      	str	r3, [r4, #8]
 8008de0:	6823      	ldr	r3, [r4, #0]
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	6022      	str	r2, [r4, #0]
 8008de6:	701e      	strb	r6, [r3, #0]
 8008de8:	6963      	ldr	r3, [r4, #20]
 8008dea:	3001      	adds	r0, #1
 8008dec:	4283      	cmp	r3, r0
 8008dee:	d004      	beq.n	8008dfa <__swbuf_r+0x62>
 8008df0:	89a3      	ldrh	r3, [r4, #12]
 8008df2:	07db      	lsls	r3, r3, #31
 8008df4:	d506      	bpl.n	8008e04 <__swbuf_r+0x6c>
 8008df6:	2e0a      	cmp	r6, #10
 8008df8:	d104      	bne.n	8008e04 <__swbuf_r+0x6c>
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	f000 ff8b 	bl	8009d18 <_fflush_r>
 8008e02:	b988      	cbnz	r0, 8008e28 <__swbuf_r+0x90>
 8008e04:	4638      	mov	r0, r7
 8008e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e08:	4b0a      	ldr	r3, [pc, #40]	; (8008e34 <__swbuf_r+0x9c>)
 8008e0a:	429c      	cmp	r4, r3
 8008e0c:	d101      	bne.n	8008e12 <__swbuf_r+0x7a>
 8008e0e:	68ac      	ldr	r4, [r5, #8]
 8008e10:	e7cf      	b.n	8008db2 <__swbuf_r+0x1a>
 8008e12:	4b09      	ldr	r3, [pc, #36]	; (8008e38 <__swbuf_r+0xa0>)
 8008e14:	429c      	cmp	r4, r3
 8008e16:	bf08      	it	eq
 8008e18:	68ec      	ldreq	r4, [r5, #12]
 8008e1a:	e7ca      	b.n	8008db2 <__swbuf_r+0x1a>
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	4628      	mov	r0, r5
 8008e20:	f000 f80c 	bl	8008e3c <__swsetup_r>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	d0cb      	beq.n	8008dc0 <__swbuf_r+0x28>
 8008e28:	f04f 37ff 	mov.w	r7, #4294967295
 8008e2c:	e7ea      	b.n	8008e04 <__swbuf_r+0x6c>
 8008e2e:	bf00      	nop
 8008e30:	0800b148 	.word	0x0800b148
 8008e34:	0800b168 	.word	0x0800b168
 8008e38:	0800b128 	.word	0x0800b128

08008e3c <__swsetup_r>:
 8008e3c:	4b32      	ldr	r3, [pc, #200]	; (8008f08 <__swsetup_r+0xcc>)
 8008e3e:	b570      	push	{r4, r5, r6, lr}
 8008e40:	681d      	ldr	r5, [r3, #0]
 8008e42:	4606      	mov	r6, r0
 8008e44:	460c      	mov	r4, r1
 8008e46:	b125      	cbz	r5, 8008e52 <__swsetup_r+0x16>
 8008e48:	69ab      	ldr	r3, [r5, #24]
 8008e4a:	b913      	cbnz	r3, 8008e52 <__swsetup_r+0x16>
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	f000 fff7 	bl	8009e40 <__sinit>
 8008e52:	4b2e      	ldr	r3, [pc, #184]	; (8008f0c <__swsetup_r+0xd0>)
 8008e54:	429c      	cmp	r4, r3
 8008e56:	d10f      	bne.n	8008e78 <__swsetup_r+0x3c>
 8008e58:	686c      	ldr	r4, [r5, #4]
 8008e5a:	89a3      	ldrh	r3, [r4, #12]
 8008e5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e60:	0719      	lsls	r1, r3, #28
 8008e62:	d42c      	bmi.n	8008ebe <__swsetup_r+0x82>
 8008e64:	06dd      	lsls	r5, r3, #27
 8008e66:	d411      	bmi.n	8008e8c <__swsetup_r+0x50>
 8008e68:	2309      	movs	r3, #9
 8008e6a:	6033      	str	r3, [r6, #0]
 8008e6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e70:	81a3      	strh	r3, [r4, #12]
 8008e72:	f04f 30ff 	mov.w	r0, #4294967295
 8008e76:	e03e      	b.n	8008ef6 <__swsetup_r+0xba>
 8008e78:	4b25      	ldr	r3, [pc, #148]	; (8008f10 <__swsetup_r+0xd4>)
 8008e7a:	429c      	cmp	r4, r3
 8008e7c:	d101      	bne.n	8008e82 <__swsetup_r+0x46>
 8008e7e:	68ac      	ldr	r4, [r5, #8]
 8008e80:	e7eb      	b.n	8008e5a <__swsetup_r+0x1e>
 8008e82:	4b24      	ldr	r3, [pc, #144]	; (8008f14 <__swsetup_r+0xd8>)
 8008e84:	429c      	cmp	r4, r3
 8008e86:	bf08      	it	eq
 8008e88:	68ec      	ldreq	r4, [r5, #12]
 8008e8a:	e7e6      	b.n	8008e5a <__swsetup_r+0x1e>
 8008e8c:	0758      	lsls	r0, r3, #29
 8008e8e:	d512      	bpl.n	8008eb6 <__swsetup_r+0x7a>
 8008e90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e92:	b141      	cbz	r1, 8008ea6 <__swsetup_r+0x6a>
 8008e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e98:	4299      	cmp	r1, r3
 8008e9a:	d002      	beq.n	8008ea2 <__swsetup_r+0x66>
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f001 fc7b 	bl	800a798 <_free_r>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	6363      	str	r3, [r4, #52]	; 0x34
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008eac:	81a3      	strh	r3, [r4, #12]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	6063      	str	r3, [r4, #4]
 8008eb2:	6923      	ldr	r3, [r4, #16]
 8008eb4:	6023      	str	r3, [r4, #0]
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	f043 0308 	orr.w	r3, r3, #8
 8008ebc:	81a3      	strh	r3, [r4, #12]
 8008ebe:	6923      	ldr	r3, [r4, #16]
 8008ec0:	b94b      	cbnz	r3, 8008ed6 <__swsetup_r+0x9a>
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ecc:	d003      	beq.n	8008ed6 <__swsetup_r+0x9a>
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f001 f87f 	bl	8009fd4 <__smakebuf_r>
 8008ed6:	89a0      	ldrh	r0, [r4, #12]
 8008ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008edc:	f010 0301 	ands.w	r3, r0, #1
 8008ee0:	d00a      	beq.n	8008ef8 <__swsetup_r+0xbc>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60a3      	str	r3, [r4, #8]
 8008ee6:	6963      	ldr	r3, [r4, #20]
 8008ee8:	425b      	negs	r3, r3
 8008eea:	61a3      	str	r3, [r4, #24]
 8008eec:	6923      	ldr	r3, [r4, #16]
 8008eee:	b943      	cbnz	r3, 8008f02 <__swsetup_r+0xc6>
 8008ef0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ef4:	d1ba      	bne.n	8008e6c <__swsetup_r+0x30>
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}
 8008ef8:	0781      	lsls	r1, r0, #30
 8008efa:	bf58      	it	pl
 8008efc:	6963      	ldrpl	r3, [r4, #20]
 8008efe:	60a3      	str	r3, [r4, #8]
 8008f00:	e7f4      	b.n	8008eec <__swsetup_r+0xb0>
 8008f02:	2000      	movs	r0, #0
 8008f04:	e7f7      	b.n	8008ef6 <__swsetup_r+0xba>
 8008f06:	bf00      	nop
 8008f08:	200000d0 	.word	0x200000d0
 8008f0c:	0800b148 	.word	0x0800b148
 8008f10:	0800b168 	.word	0x0800b168
 8008f14:	0800b128 	.word	0x0800b128

08008f18 <quorem>:
 8008f18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	6903      	ldr	r3, [r0, #16]
 8008f1e:	690c      	ldr	r4, [r1, #16]
 8008f20:	42a3      	cmp	r3, r4
 8008f22:	4607      	mov	r7, r0
 8008f24:	f2c0 8081 	blt.w	800902a <quorem+0x112>
 8008f28:	3c01      	subs	r4, #1
 8008f2a:	f101 0814 	add.w	r8, r1, #20
 8008f2e:	f100 0514 	add.w	r5, r0, #20
 8008f32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f36:	9301      	str	r3, [sp, #4]
 8008f38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f40:	3301      	adds	r3, #1
 8008f42:	429a      	cmp	r2, r3
 8008f44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008f48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f50:	d331      	bcc.n	8008fb6 <quorem+0x9e>
 8008f52:	f04f 0e00 	mov.w	lr, #0
 8008f56:	4640      	mov	r0, r8
 8008f58:	46ac      	mov	ip, r5
 8008f5a:	46f2      	mov	sl, lr
 8008f5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f60:	b293      	uxth	r3, r2
 8008f62:	fb06 e303 	mla	r3, r6, r3, lr
 8008f66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	ebaa 0303 	sub.w	r3, sl, r3
 8008f70:	f8dc a000 	ldr.w	sl, [ip]
 8008f74:	0c12      	lsrs	r2, r2, #16
 8008f76:	fa13 f38a 	uxtah	r3, r3, sl
 8008f7a:	fb06 e202 	mla	r2, r6, r2, lr
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	9b00      	ldr	r3, [sp, #0]
 8008f82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f86:	b292      	uxth	r2, r2
 8008f88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f90:	f8bd 3000 	ldrh.w	r3, [sp]
 8008f94:	4581      	cmp	r9, r0
 8008f96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f9a:	f84c 3b04 	str.w	r3, [ip], #4
 8008f9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008fa2:	d2db      	bcs.n	8008f5c <quorem+0x44>
 8008fa4:	f855 300b 	ldr.w	r3, [r5, fp]
 8008fa8:	b92b      	cbnz	r3, 8008fb6 <quorem+0x9e>
 8008faa:	9b01      	ldr	r3, [sp, #4]
 8008fac:	3b04      	subs	r3, #4
 8008fae:	429d      	cmp	r5, r3
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	d32e      	bcc.n	8009012 <quorem+0xfa>
 8008fb4:	613c      	str	r4, [r7, #16]
 8008fb6:	4638      	mov	r0, r7
 8008fb8:	f001 fad6 	bl	800a568 <__mcmp>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	db24      	blt.n	800900a <quorem+0xf2>
 8008fc0:	3601      	adds	r6, #1
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f04f 0c00 	mov.w	ip, #0
 8008fc8:	f858 2b04 	ldr.w	r2, [r8], #4
 8008fcc:	f8d0 e000 	ldr.w	lr, [r0]
 8008fd0:	b293      	uxth	r3, r2
 8008fd2:	ebac 0303 	sub.w	r3, ip, r3
 8008fd6:	0c12      	lsrs	r2, r2, #16
 8008fd8:	fa13 f38e 	uxtah	r3, r3, lr
 8008fdc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008fe0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fea:	45c1      	cmp	r9, r8
 8008fec:	f840 3b04 	str.w	r3, [r0], #4
 8008ff0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ff4:	d2e8      	bcs.n	8008fc8 <quorem+0xb0>
 8008ff6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ffe:	b922      	cbnz	r2, 800900a <quorem+0xf2>
 8009000:	3b04      	subs	r3, #4
 8009002:	429d      	cmp	r5, r3
 8009004:	461a      	mov	r2, r3
 8009006:	d30a      	bcc.n	800901e <quorem+0x106>
 8009008:	613c      	str	r4, [r7, #16]
 800900a:	4630      	mov	r0, r6
 800900c:	b003      	add	sp, #12
 800900e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009012:	6812      	ldr	r2, [r2, #0]
 8009014:	3b04      	subs	r3, #4
 8009016:	2a00      	cmp	r2, #0
 8009018:	d1cc      	bne.n	8008fb4 <quorem+0x9c>
 800901a:	3c01      	subs	r4, #1
 800901c:	e7c7      	b.n	8008fae <quorem+0x96>
 800901e:	6812      	ldr	r2, [r2, #0]
 8009020:	3b04      	subs	r3, #4
 8009022:	2a00      	cmp	r2, #0
 8009024:	d1f0      	bne.n	8009008 <quorem+0xf0>
 8009026:	3c01      	subs	r4, #1
 8009028:	e7eb      	b.n	8009002 <quorem+0xea>
 800902a:	2000      	movs	r0, #0
 800902c:	e7ee      	b.n	800900c <quorem+0xf4>
	...

08009030 <_dtoa_r>:
 8009030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009034:	ed2d 8b04 	vpush	{d8-d9}
 8009038:	ec57 6b10 	vmov	r6, r7, d0
 800903c:	b093      	sub	sp, #76	; 0x4c
 800903e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009040:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009044:	9106      	str	r1, [sp, #24]
 8009046:	ee10 aa10 	vmov	sl, s0
 800904a:	4604      	mov	r4, r0
 800904c:	9209      	str	r2, [sp, #36]	; 0x24
 800904e:	930c      	str	r3, [sp, #48]	; 0x30
 8009050:	46bb      	mov	fp, r7
 8009052:	b975      	cbnz	r5, 8009072 <_dtoa_r+0x42>
 8009054:	2010      	movs	r0, #16
 8009056:	f000 fffd 	bl	800a054 <malloc>
 800905a:	4602      	mov	r2, r0
 800905c:	6260      	str	r0, [r4, #36]	; 0x24
 800905e:	b920      	cbnz	r0, 800906a <_dtoa_r+0x3a>
 8009060:	4ba7      	ldr	r3, [pc, #668]	; (8009300 <_dtoa_r+0x2d0>)
 8009062:	21ea      	movs	r1, #234	; 0xea
 8009064:	48a7      	ldr	r0, [pc, #668]	; (8009304 <_dtoa_r+0x2d4>)
 8009066:	f001 fe37 	bl	800acd8 <__assert_func>
 800906a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800906e:	6005      	str	r5, [r0, #0]
 8009070:	60c5      	str	r5, [r0, #12]
 8009072:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009074:	6819      	ldr	r1, [r3, #0]
 8009076:	b151      	cbz	r1, 800908e <_dtoa_r+0x5e>
 8009078:	685a      	ldr	r2, [r3, #4]
 800907a:	604a      	str	r2, [r1, #4]
 800907c:	2301      	movs	r3, #1
 800907e:	4093      	lsls	r3, r2
 8009080:	608b      	str	r3, [r1, #8]
 8009082:	4620      	mov	r0, r4
 8009084:	f001 f82e 	bl	800a0e4 <_Bfree>
 8009088:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800908a:	2200      	movs	r2, #0
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	1e3b      	subs	r3, r7, #0
 8009090:	bfaa      	itet	ge
 8009092:	2300      	movge	r3, #0
 8009094:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009098:	f8c8 3000 	strge.w	r3, [r8]
 800909c:	4b9a      	ldr	r3, [pc, #616]	; (8009308 <_dtoa_r+0x2d8>)
 800909e:	bfbc      	itt	lt
 80090a0:	2201      	movlt	r2, #1
 80090a2:	f8c8 2000 	strlt.w	r2, [r8]
 80090a6:	ea33 030b 	bics.w	r3, r3, fp
 80090aa:	d11b      	bne.n	80090e4 <_dtoa_r+0xb4>
 80090ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80090b2:	6013      	str	r3, [r2, #0]
 80090b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090b8:	4333      	orrs	r3, r6
 80090ba:	f000 8592 	beq.w	8009be2 <_dtoa_r+0xbb2>
 80090be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090c0:	b963      	cbnz	r3, 80090dc <_dtoa_r+0xac>
 80090c2:	4b92      	ldr	r3, [pc, #584]	; (800930c <_dtoa_r+0x2dc>)
 80090c4:	e022      	b.n	800910c <_dtoa_r+0xdc>
 80090c6:	4b92      	ldr	r3, [pc, #584]	; (8009310 <_dtoa_r+0x2e0>)
 80090c8:	9301      	str	r3, [sp, #4]
 80090ca:	3308      	adds	r3, #8
 80090cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80090ce:	6013      	str	r3, [r2, #0]
 80090d0:	9801      	ldr	r0, [sp, #4]
 80090d2:	b013      	add	sp, #76	; 0x4c
 80090d4:	ecbd 8b04 	vpop	{d8-d9}
 80090d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090dc:	4b8b      	ldr	r3, [pc, #556]	; (800930c <_dtoa_r+0x2dc>)
 80090de:	9301      	str	r3, [sp, #4]
 80090e0:	3303      	adds	r3, #3
 80090e2:	e7f3      	b.n	80090cc <_dtoa_r+0x9c>
 80090e4:	2200      	movs	r2, #0
 80090e6:	2300      	movs	r3, #0
 80090e8:	4650      	mov	r0, sl
 80090ea:	4659      	mov	r1, fp
 80090ec:	f7f7 fd04 	bl	8000af8 <__aeabi_dcmpeq>
 80090f0:	ec4b ab19 	vmov	d9, sl, fp
 80090f4:	4680      	mov	r8, r0
 80090f6:	b158      	cbz	r0, 8009110 <_dtoa_r+0xe0>
 80090f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090fa:	2301      	movs	r3, #1
 80090fc:	6013      	str	r3, [r2, #0]
 80090fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 856b 	beq.w	8009bdc <_dtoa_r+0xbac>
 8009106:	4883      	ldr	r0, [pc, #524]	; (8009314 <_dtoa_r+0x2e4>)
 8009108:	6018      	str	r0, [r3, #0]
 800910a:	1e43      	subs	r3, r0, #1
 800910c:	9301      	str	r3, [sp, #4]
 800910e:	e7df      	b.n	80090d0 <_dtoa_r+0xa0>
 8009110:	ec4b ab10 	vmov	d0, sl, fp
 8009114:	aa10      	add	r2, sp, #64	; 0x40
 8009116:	a911      	add	r1, sp, #68	; 0x44
 8009118:	4620      	mov	r0, r4
 800911a:	f001 facb 	bl	800a6b4 <__d2b>
 800911e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009122:	ee08 0a10 	vmov	s16, r0
 8009126:	2d00      	cmp	r5, #0
 8009128:	f000 8084 	beq.w	8009234 <_dtoa_r+0x204>
 800912c:	ee19 3a90 	vmov	r3, s19
 8009130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009134:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009138:	4656      	mov	r6, sl
 800913a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800913e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009142:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009146:	4b74      	ldr	r3, [pc, #464]	; (8009318 <_dtoa_r+0x2e8>)
 8009148:	2200      	movs	r2, #0
 800914a:	4630      	mov	r0, r6
 800914c:	4639      	mov	r1, r7
 800914e:	f7f7 f8b3 	bl	80002b8 <__aeabi_dsub>
 8009152:	a365      	add	r3, pc, #404	; (adr r3, 80092e8 <_dtoa_r+0x2b8>)
 8009154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009158:	f7f7 fa66 	bl	8000628 <__aeabi_dmul>
 800915c:	a364      	add	r3, pc, #400	; (adr r3, 80092f0 <_dtoa_r+0x2c0>)
 800915e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009162:	f7f7 f8ab 	bl	80002bc <__adddf3>
 8009166:	4606      	mov	r6, r0
 8009168:	4628      	mov	r0, r5
 800916a:	460f      	mov	r7, r1
 800916c:	f7f7 f9f2 	bl	8000554 <__aeabi_i2d>
 8009170:	a361      	add	r3, pc, #388	; (adr r3, 80092f8 <_dtoa_r+0x2c8>)
 8009172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009176:	f7f7 fa57 	bl	8000628 <__aeabi_dmul>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4630      	mov	r0, r6
 8009180:	4639      	mov	r1, r7
 8009182:	f7f7 f89b 	bl	80002bc <__adddf3>
 8009186:	4606      	mov	r6, r0
 8009188:	460f      	mov	r7, r1
 800918a:	f7f7 fcfd 	bl	8000b88 <__aeabi_d2iz>
 800918e:	2200      	movs	r2, #0
 8009190:	9000      	str	r0, [sp, #0]
 8009192:	2300      	movs	r3, #0
 8009194:	4630      	mov	r0, r6
 8009196:	4639      	mov	r1, r7
 8009198:	f7f7 fcb8 	bl	8000b0c <__aeabi_dcmplt>
 800919c:	b150      	cbz	r0, 80091b4 <_dtoa_r+0x184>
 800919e:	9800      	ldr	r0, [sp, #0]
 80091a0:	f7f7 f9d8 	bl	8000554 <__aeabi_i2d>
 80091a4:	4632      	mov	r2, r6
 80091a6:	463b      	mov	r3, r7
 80091a8:	f7f7 fca6 	bl	8000af8 <__aeabi_dcmpeq>
 80091ac:	b910      	cbnz	r0, 80091b4 <_dtoa_r+0x184>
 80091ae:	9b00      	ldr	r3, [sp, #0]
 80091b0:	3b01      	subs	r3, #1
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	9b00      	ldr	r3, [sp, #0]
 80091b6:	2b16      	cmp	r3, #22
 80091b8:	d85a      	bhi.n	8009270 <_dtoa_r+0x240>
 80091ba:	9a00      	ldr	r2, [sp, #0]
 80091bc:	4b57      	ldr	r3, [pc, #348]	; (800931c <_dtoa_r+0x2ec>)
 80091be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c6:	ec51 0b19 	vmov	r0, r1, d9
 80091ca:	f7f7 fc9f 	bl	8000b0c <__aeabi_dcmplt>
 80091ce:	2800      	cmp	r0, #0
 80091d0:	d050      	beq.n	8009274 <_dtoa_r+0x244>
 80091d2:	9b00      	ldr	r3, [sp, #0]
 80091d4:	3b01      	subs	r3, #1
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	2300      	movs	r3, #0
 80091da:	930b      	str	r3, [sp, #44]	; 0x2c
 80091dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091de:	1b5d      	subs	r5, r3, r5
 80091e0:	1e6b      	subs	r3, r5, #1
 80091e2:	9305      	str	r3, [sp, #20]
 80091e4:	bf45      	ittet	mi
 80091e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80091ea:	9304      	strmi	r3, [sp, #16]
 80091ec:	2300      	movpl	r3, #0
 80091ee:	2300      	movmi	r3, #0
 80091f0:	bf4c      	ite	mi
 80091f2:	9305      	strmi	r3, [sp, #20]
 80091f4:	9304      	strpl	r3, [sp, #16]
 80091f6:	9b00      	ldr	r3, [sp, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	db3d      	blt.n	8009278 <_dtoa_r+0x248>
 80091fc:	9b05      	ldr	r3, [sp, #20]
 80091fe:	9a00      	ldr	r2, [sp, #0]
 8009200:	920a      	str	r2, [sp, #40]	; 0x28
 8009202:	4413      	add	r3, r2
 8009204:	9305      	str	r3, [sp, #20]
 8009206:	2300      	movs	r3, #0
 8009208:	9307      	str	r3, [sp, #28]
 800920a:	9b06      	ldr	r3, [sp, #24]
 800920c:	2b09      	cmp	r3, #9
 800920e:	f200 8089 	bhi.w	8009324 <_dtoa_r+0x2f4>
 8009212:	2b05      	cmp	r3, #5
 8009214:	bfc4      	itt	gt
 8009216:	3b04      	subgt	r3, #4
 8009218:	9306      	strgt	r3, [sp, #24]
 800921a:	9b06      	ldr	r3, [sp, #24]
 800921c:	f1a3 0302 	sub.w	r3, r3, #2
 8009220:	bfcc      	ite	gt
 8009222:	2500      	movgt	r5, #0
 8009224:	2501      	movle	r5, #1
 8009226:	2b03      	cmp	r3, #3
 8009228:	f200 8087 	bhi.w	800933a <_dtoa_r+0x30a>
 800922c:	e8df f003 	tbb	[pc, r3]
 8009230:	59383a2d 	.word	0x59383a2d
 8009234:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009238:	441d      	add	r5, r3
 800923a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800923e:	2b20      	cmp	r3, #32
 8009240:	bfc1      	itttt	gt
 8009242:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009246:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800924a:	fa0b f303 	lslgt.w	r3, fp, r3
 800924e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009252:	bfda      	itte	le
 8009254:	f1c3 0320 	rsble	r3, r3, #32
 8009258:	fa06 f003 	lslle.w	r0, r6, r3
 800925c:	4318      	orrgt	r0, r3
 800925e:	f7f7 f969 	bl	8000534 <__aeabi_ui2d>
 8009262:	2301      	movs	r3, #1
 8009264:	4606      	mov	r6, r0
 8009266:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800926a:	3d01      	subs	r5, #1
 800926c:	930e      	str	r3, [sp, #56]	; 0x38
 800926e:	e76a      	b.n	8009146 <_dtoa_r+0x116>
 8009270:	2301      	movs	r3, #1
 8009272:	e7b2      	b.n	80091da <_dtoa_r+0x1aa>
 8009274:	900b      	str	r0, [sp, #44]	; 0x2c
 8009276:	e7b1      	b.n	80091dc <_dtoa_r+0x1ac>
 8009278:	9b04      	ldr	r3, [sp, #16]
 800927a:	9a00      	ldr	r2, [sp, #0]
 800927c:	1a9b      	subs	r3, r3, r2
 800927e:	9304      	str	r3, [sp, #16]
 8009280:	4253      	negs	r3, r2
 8009282:	9307      	str	r3, [sp, #28]
 8009284:	2300      	movs	r3, #0
 8009286:	930a      	str	r3, [sp, #40]	; 0x28
 8009288:	e7bf      	b.n	800920a <_dtoa_r+0x1da>
 800928a:	2300      	movs	r3, #0
 800928c:	9308      	str	r3, [sp, #32]
 800928e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009290:	2b00      	cmp	r3, #0
 8009292:	dc55      	bgt.n	8009340 <_dtoa_r+0x310>
 8009294:	2301      	movs	r3, #1
 8009296:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800929a:	461a      	mov	r2, r3
 800929c:	9209      	str	r2, [sp, #36]	; 0x24
 800929e:	e00c      	b.n	80092ba <_dtoa_r+0x28a>
 80092a0:	2301      	movs	r3, #1
 80092a2:	e7f3      	b.n	800928c <_dtoa_r+0x25c>
 80092a4:	2300      	movs	r3, #0
 80092a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092a8:	9308      	str	r3, [sp, #32]
 80092aa:	9b00      	ldr	r3, [sp, #0]
 80092ac:	4413      	add	r3, r2
 80092ae:	9302      	str	r3, [sp, #8]
 80092b0:	3301      	adds	r3, #1
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	9303      	str	r3, [sp, #12]
 80092b6:	bfb8      	it	lt
 80092b8:	2301      	movlt	r3, #1
 80092ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80092bc:	2200      	movs	r2, #0
 80092be:	6042      	str	r2, [r0, #4]
 80092c0:	2204      	movs	r2, #4
 80092c2:	f102 0614 	add.w	r6, r2, #20
 80092c6:	429e      	cmp	r6, r3
 80092c8:	6841      	ldr	r1, [r0, #4]
 80092ca:	d93d      	bls.n	8009348 <_dtoa_r+0x318>
 80092cc:	4620      	mov	r0, r4
 80092ce:	f000 fec9 	bl	800a064 <_Balloc>
 80092d2:	9001      	str	r0, [sp, #4]
 80092d4:	2800      	cmp	r0, #0
 80092d6:	d13b      	bne.n	8009350 <_dtoa_r+0x320>
 80092d8:	4b11      	ldr	r3, [pc, #68]	; (8009320 <_dtoa_r+0x2f0>)
 80092da:	4602      	mov	r2, r0
 80092dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80092e0:	e6c0      	b.n	8009064 <_dtoa_r+0x34>
 80092e2:	2301      	movs	r3, #1
 80092e4:	e7df      	b.n	80092a6 <_dtoa_r+0x276>
 80092e6:	bf00      	nop
 80092e8:	636f4361 	.word	0x636f4361
 80092ec:	3fd287a7 	.word	0x3fd287a7
 80092f0:	8b60c8b3 	.word	0x8b60c8b3
 80092f4:	3fc68a28 	.word	0x3fc68a28
 80092f8:	509f79fb 	.word	0x509f79fb
 80092fc:	3fd34413 	.word	0x3fd34413
 8009300:	0800b0a5 	.word	0x0800b0a5
 8009304:	0800b0bc 	.word	0x0800b0bc
 8009308:	7ff00000 	.word	0x7ff00000
 800930c:	0800b0a1 	.word	0x0800b0a1
 8009310:	0800b098 	.word	0x0800b098
 8009314:	0800b075 	.word	0x0800b075
 8009318:	3ff80000 	.word	0x3ff80000
 800931c:	0800b210 	.word	0x0800b210
 8009320:	0800b117 	.word	0x0800b117
 8009324:	2501      	movs	r5, #1
 8009326:	2300      	movs	r3, #0
 8009328:	9306      	str	r3, [sp, #24]
 800932a:	9508      	str	r5, [sp, #32]
 800932c:	f04f 33ff 	mov.w	r3, #4294967295
 8009330:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009334:	2200      	movs	r2, #0
 8009336:	2312      	movs	r3, #18
 8009338:	e7b0      	b.n	800929c <_dtoa_r+0x26c>
 800933a:	2301      	movs	r3, #1
 800933c:	9308      	str	r3, [sp, #32]
 800933e:	e7f5      	b.n	800932c <_dtoa_r+0x2fc>
 8009340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009342:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009346:	e7b8      	b.n	80092ba <_dtoa_r+0x28a>
 8009348:	3101      	adds	r1, #1
 800934a:	6041      	str	r1, [r0, #4]
 800934c:	0052      	lsls	r2, r2, #1
 800934e:	e7b8      	b.n	80092c2 <_dtoa_r+0x292>
 8009350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009352:	9a01      	ldr	r2, [sp, #4]
 8009354:	601a      	str	r2, [r3, #0]
 8009356:	9b03      	ldr	r3, [sp, #12]
 8009358:	2b0e      	cmp	r3, #14
 800935a:	f200 809d 	bhi.w	8009498 <_dtoa_r+0x468>
 800935e:	2d00      	cmp	r5, #0
 8009360:	f000 809a 	beq.w	8009498 <_dtoa_r+0x468>
 8009364:	9b00      	ldr	r3, [sp, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	dd32      	ble.n	80093d0 <_dtoa_r+0x3a0>
 800936a:	4ab7      	ldr	r2, [pc, #732]	; (8009648 <_dtoa_r+0x618>)
 800936c:	f003 030f 	and.w	r3, r3, #15
 8009370:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009374:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009378:	9b00      	ldr	r3, [sp, #0]
 800937a:	05d8      	lsls	r0, r3, #23
 800937c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009380:	d516      	bpl.n	80093b0 <_dtoa_r+0x380>
 8009382:	4bb2      	ldr	r3, [pc, #712]	; (800964c <_dtoa_r+0x61c>)
 8009384:	ec51 0b19 	vmov	r0, r1, d9
 8009388:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800938c:	f7f7 fa76 	bl	800087c <__aeabi_ddiv>
 8009390:	f007 070f 	and.w	r7, r7, #15
 8009394:	4682      	mov	sl, r0
 8009396:	468b      	mov	fp, r1
 8009398:	2503      	movs	r5, #3
 800939a:	4eac      	ldr	r6, [pc, #688]	; (800964c <_dtoa_r+0x61c>)
 800939c:	b957      	cbnz	r7, 80093b4 <_dtoa_r+0x384>
 800939e:	4642      	mov	r2, r8
 80093a0:	464b      	mov	r3, r9
 80093a2:	4650      	mov	r0, sl
 80093a4:	4659      	mov	r1, fp
 80093a6:	f7f7 fa69 	bl	800087c <__aeabi_ddiv>
 80093aa:	4682      	mov	sl, r0
 80093ac:	468b      	mov	fp, r1
 80093ae:	e028      	b.n	8009402 <_dtoa_r+0x3d2>
 80093b0:	2502      	movs	r5, #2
 80093b2:	e7f2      	b.n	800939a <_dtoa_r+0x36a>
 80093b4:	07f9      	lsls	r1, r7, #31
 80093b6:	d508      	bpl.n	80093ca <_dtoa_r+0x39a>
 80093b8:	4640      	mov	r0, r8
 80093ba:	4649      	mov	r1, r9
 80093bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80093c0:	f7f7 f932 	bl	8000628 <__aeabi_dmul>
 80093c4:	3501      	adds	r5, #1
 80093c6:	4680      	mov	r8, r0
 80093c8:	4689      	mov	r9, r1
 80093ca:	107f      	asrs	r7, r7, #1
 80093cc:	3608      	adds	r6, #8
 80093ce:	e7e5      	b.n	800939c <_dtoa_r+0x36c>
 80093d0:	f000 809b 	beq.w	800950a <_dtoa_r+0x4da>
 80093d4:	9b00      	ldr	r3, [sp, #0]
 80093d6:	4f9d      	ldr	r7, [pc, #628]	; (800964c <_dtoa_r+0x61c>)
 80093d8:	425e      	negs	r6, r3
 80093da:	4b9b      	ldr	r3, [pc, #620]	; (8009648 <_dtoa_r+0x618>)
 80093dc:	f006 020f 	and.w	r2, r6, #15
 80093e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e8:	ec51 0b19 	vmov	r0, r1, d9
 80093ec:	f7f7 f91c 	bl	8000628 <__aeabi_dmul>
 80093f0:	1136      	asrs	r6, r6, #4
 80093f2:	4682      	mov	sl, r0
 80093f4:	468b      	mov	fp, r1
 80093f6:	2300      	movs	r3, #0
 80093f8:	2502      	movs	r5, #2
 80093fa:	2e00      	cmp	r6, #0
 80093fc:	d17a      	bne.n	80094f4 <_dtoa_r+0x4c4>
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1d3      	bne.n	80093aa <_dtoa_r+0x37a>
 8009402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 8082 	beq.w	800950e <_dtoa_r+0x4de>
 800940a:	4b91      	ldr	r3, [pc, #580]	; (8009650 <_dtoa_r+0x620>)
 800940c:	2200      	movs	r2, #0
 800940e:	4650      	mov	r0, sl
 8009410:	4659      	mov	r1, fp
 8009412:	f7f7 fb7b 	bl	8000b0c <__aeabi_dcmplt>
 8009416:	2800      	cmp	r0, #0
 8009418:	d079      	beq.n	800950e <_dtoa_r+0x4de>
 800941a:	9b03      	ldr	r3, [sp, #12]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d076      	beq.n	800950e <_dtoa_r+0x4de>
 8009420:	9b02      	ldr	r3, [sp, #8]
 8009422:	2b00      	cmp	r3, #0
 8009424:	dd36      	ble.n	8009494 <_dtoa_r+0x464>
 8009426:	9b00      	ldr	r3, [sp, #0]
 8009428:	4650      	mov	r0, sl
 800942a:	4659      	mov	r1, fp
 800942c:	1e5f      	subs	r7, r3, #1
 800942e:	2200      	movs	r2, #0
 8009430:	4b88      	ldr	r3, [pc, #544]	; (8009654 <_dtoa_r+0x624>)
 8009432:	f7f7 f8f9 	bl	8000628 <__aeabi_dmul>
 8009436:	9e02      	ldr	r6, [sp, #8]
 8009438:	4682      	mov	sl, r0
 800943a:	468b      	mov	fp, r1
 800943c:	3501      	adds	r5, #1
 800943e:	4628      	mov	r0, r5
 8009440:	f7f7 f888 	bl	8000554 <__aeabi_i2d>
 8009444:	4652      	mov	r2, sl
 8009446:	465b      	mov	r3, fp
 8009448:	f7f7 f8ee 	bl	8000628 <__aeabi_dmul>
 800944c:	4b82      	ldr	r3, [pc, #520]	; (8009658 <_dtoa_r+0x628>)
 800944e:	2200      	movs	r2, #0
 8009450:	f7f6 ff34 	bl	80002bc <__adddf3>
 8009454:	46d0      	mov	r8, sl
 8009456:	46d9      	mov	r9, fp
 8009458:	4682      	mov	sl, r0
 800945a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800945e:	2e00      	cmp	r6, #0
 8009460:	d158      	bne.n	8009514 <_dtoa_r+0x4e4>
 8009462:	4b7e      	ldr	r3, [pc, #504]	; (800965c <_dtoa_r+0x62c>)
 8009464:	2200      	movs	r2, #0
 8009466:	4640      	mov	r0, r8
 8009468:	4649      	mov	r1, r9
 800946a:	f7f6 ff25 	bl	80002b8 <__aeabi_dsub>
 800946e:	4652      	mov	r2, sl
 8009470:	465b      	mov	r3, fp
 8009472:	4680      	mov	r8, r0
 8009474:	4689      	mov	r9, r1
 8009476:	f7f7 fb67 	bl	8000b48 <__aeabi_dcmpgt>
 800947a:	2800      	cmp	r0, #0
 800947c:	f040 8295 	bne.w	80099aa <_dtoa_r+0x97a>
 8009480:	4652      	mov	r2, sl
 8009482:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009486:	4640      	mov	r0, r8
 8009488:	4649      	mov	r1, r9
 800948a:	f7f7 fb3f 	bl	8000b0c <__aeabi_dcmplt>
 800948e:	2800      	cmp	r0, #0
 8009490:	f040 8289 	bne.w	80099a6 <_dtoa_r+0x976>
 8009494:	ec5b ab19 	vmov	sl, fp, d9
 8009498:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800949a:	2b00      	cmp	r3, #0
 800949c:	f2c0 8148 	blt.w	8009730 <_dtoa_r+0x700>
 80094a0:	9a00      	ldr	r2, [sp, #0]
 80094a2:	2a0e      	cmp	r2, #14
 80094a4:	f300 8144 	bgt.w	8009730 <_dtoa_r+0x700>
 80094a8:	4b67      	ldr	r3, [pc, #412]	; (8009648 <_dtoa_r+0x618>)
 80094aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f280 80d5 	bge.w	8009664 <_dtoa_r+0x634>
 80094ba:	9b03      	ldr	r3, [sp, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f300 80d1 	bgt.w	8009664 <_dtoa_r+0x634>
 80094c2:	f040 826f 	bne.w	80099a4 <_dtoa_r+0x974>
 80094c6:	4b65      	ldr	r3, [pc, #404]	; (800965c <_dtoa_r+0x62c>)
 80094c8:	2200      	movs	r2, #0
 80094ca:	4640      	mov	r0, r8
 80094cc:	4649      	mov	r1, r9
 80094ce:	f7f7 f8ab 	bl	8000628 <__aeabi_dmul>
 80094d2:	4652      	mov	r2, sl
 80094d4:	465b      	mov	r3, fp
 80094d6:	f7f7 fb2d 	bl	8000b34 <__aeabi_dcmpge>
 80094da:	9e03      	ldr	r6, [sp, #12]
 80094dc:	4637      	mov	r7, r6
 80094de:	2800      	cmp	r0, #0
 80094e0:	f040 8245 	bne.w	800996e <_dtoa_r+0x93e>
 80094e4:	9d01      	ldr	r5, [sp, #4]
 80094e6:	2331      	movs	r3, #49	; 0x31
 80094e8:	f805 3b01 	strb.w	r3, [r5], #1
 80094ec:	9b00      	ldr	r3, [sp, #0]
 80094ee:	3301      	adds	r3, #1
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	e240      	b.n	8009976 <_dtoa_r+0x946>
 80094f4:	07f2      	lsls	r2, r6, #31
 80094f6:	d505      	bpl.n	8009504 <_dtoa_r+0x4d4>
 80094f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094fc:	f7f7 f894 	bl	8000628 <__aeabi_dmul>
 8009500:	3501      	adds	r5, #1
 8009502:	2301      	movs	r3, #1
 8009504:	1076      	asrs	r6, r6, #1
 8009506:	3708      	adds	r7, #8
 8009508:	e777      	b.n	80093fa <_dtoa_r+0x3ca>
 800950a:	2502      	movs	r5, #2
 800950c:	e779      	b.n	8009402 <_dtoa_r+0x3d2>
 800950e:	9f00      	ldr	r7, [sp, #0]
 8009510:	9e03      	ldr	r6, [sp, #12]
 8009512:	e794      	b.n	800943e <_dtoa_r+0x40e>
 8009514:	9901      	ldr	r1, [sp, #4]
 8009516:	4b4c      	ldr	r3, [pc, #304]	; (8009648 <_dtoa_r+0x618>)
 8009518:	4431      	add	r1, r6
 800951a:	910d      	str	r1, [sp, #52]	; 0x34
 800951c:	9908      	ldr	r1, [sp, #32]
 800951e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009522:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009526:	2900      	cmp	r1, #0
 8009528:	d043      	beq.n	80095b2 <_dtoa_r+0x582>
 800952a:	494d      	ldr	r1, [pc, #308]	; (8009660 <_dtoa_r+0x630>)
 800952c:	2000      	movs	r0, #0
 800952e:	f7f7 f9a5 	bl	800087c <__aeabi_ddiv>
 8009532:	4652      	mov	r2, sl
 8009534:	465b      	mov	r3, fp
 8009536:	f7f6 febf 	bl	80002b8 <__aeabi_dsub>
 800953a:	9d01      	ldr	r5, [sp, #4]
 800953c:	4682      	mov	sl, r0
 800953e:	468b      	mov	fp, r1
 8009540:	4649      	mov	r1, r9
 8009542:	4640      	mov	r0, r8
 8009544:	f7f7 fb20 	bl	8000b88 <__aeabi_d2iz>
 8009548:	4606      	mov	r6, r0
 800954a:	f7f7 f803 	bl	8000554 <__aeabi_i2d>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	4640      	mov	r0, r8
 8009554:	4649      	mov	r1, r9
 8009556:	f7f6 feaf 	bl	80002b8 <__aeabi_dsub>
 800955a:	3630      	adds	r6, #48	; 0x30
 800955c:	f805 6b01 	strb.w	r6, [r5], #1
 8009560:	4652      	mov	r2, sl
 8009562:	465b      	mov	r3, fp
 8009564:	4680      	mov	r8, r0
 8009566:	4689      	mov	r9, r1
 8009568:	f7f7 fad0 	bl	8000b0c <__aeabi_dcmplt>
 800956c:	2800      	cmp	r0, #0
 800956e:	d163      	bne.n	8009638 <_dtoa_r+0x608>
 8009570:	4642      	mov	r2, r8
 8009572:	464b      	mov	r3, r9
 8009574:	4936      	ldr	r1, [pc, #216]	; (8009650 <_dtoa_r+0x620>)
 8009576:	2000      	movs	r0, #0
 8009578:	f7f6 fe9e 	bl	80002b8 <__aeabi_dsub>
 800957c:	4652      	mov	r2, sl
 800957e:	465b      	mov	r3, fp
 8009580:	f7f7 fac4 	bl	8000b0c <__aeabi_dcmplt>
 8009584:	2800      	cmp	r0, #0
 8009586:	f040 80b5 	bne.w	80096f4 <_dtoa_r+0x6c4>
 800958a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800958c:	429d      	cmp	r5, r3
 800958e:	d081      	beq.n	8009494 <_dtoa_r+0x464>
 8009590:	4b30      	ldr	r3, [pc, #192]	; (8009654 <_dtoa_r+0x624>)
 8009592:	2200      	movs	r2, #0
 8009594:	4650      	mov	r0, sl
 8009596:	4659      	mov	r1, fp
 8009598:	f7f7 f846 	bl	8000628 <__aeabi_dmul>
 800959c:	4b2d      	ldr	r3, [pc, #180]	; (8009654 <_dtoa_r+0x624>)
 800959e:	4682      	mov	sl, r0
 80095a0:	468b      	mov	fp, r1
 80095a2:	4640      	mov	r0, r8
 80095a4:	4649      	mov	r1, r9
 80095a6:	2200      	movs	r2, #0
 80095a8:	f7f7 f83e 	bl	8000628 <__aeabi_dmul>
 80095ac:	4680      	mov	r8, r0
 80095ae:	4689      	mov	r9, r1
 80095b0:	e7c6      	b.n	8009540 <_dtoa_r+0x510>
 80095b2:	4650      	mov	r0, sl
 80095b4:	4659      	mov	r1, fp
 80095b6:	f7f7 f837 	bl	8000628 <__aeabi_dmul>
 80095ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095bc:	9d01      	ldr	r5, [sp, #4]
 80095be:	930f      	str	r3, [sp, #60]	; 0x3c
 80095c0:	4682      	mov	sl, r0
 80095c2:	468b      	mov	fp, r1
 80095c4:	4649      	mov	r1, r9
 80095c6:	4640      	mov	r0, r8
 80095c8:	f7f7 fade 	bl	8000b88 <__aeabi_d2iz>
 80095cc:	4606      	mov	r6, r0
 80095ce:	f7f6 ffc1 	bl	8000554 <__aeabi_i2d>
 80095d2:	3630      	adds	r6, #48	; 0x30
 80095d4:	4602      	mov	r2, r0
 80095d6:	460b      	mov	r3, r1
 80095d8:	4640      	mov	r0, r8
 80095da:	4649      	mov	r1, r9
 80095dc:	f7f6 fe6c 	bl	80002b8 <__aeabi_dsub>
 80095e0:	f805 6b01 	strb.w	r6, [r5], #1
 80095e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095e6:	429d      	cmp	r5, r3
 80095e8:	4680      	mov	r8, r0
 80095ea:	4689      	mov	r9, r1
 80095ec:	f04f 0200 	mov.w	r2, #0
 80095f0:	d124      	bne.n	800963c <_dtoa_r+0x60c>
 80095f2:	4b1b      	ldr	r3, [pc, #108]	; (8009660 <_dtoa_r+0x630>)
 80095f4:	4650      	mov	r0, sl
 80095f6:	4659      	mov	r1, fp
 80095f8:	f7f6 fe60 	bl	80002bc <__adddf3>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	4640      	mov	r0, r8
 8009602:	4649      	mov	r1, r9
 8009604:	f7f7 faa0 	bl	8000b48 <__aeabi_dcmpgt>
 8009608:	2800      	cmp	r0, #0
 800960a:	d173      	bne.n	80096f4 <_dtoa_r+0x6c4>
 800960c:	4652      	mov	r2, sl
 800960e:	465b      	mov	r3, fp
 8009610:	4913      	ldr	r1, [pc, #76]	; (8009660 <_dtoa_r+0x630>)
 8009612:	2000      	movs	r0, #0
 8009614:	f7f6 fe50 	bl	80002b8 <__aeabi_dsub>
 8009618:	4602      	mov	r2, r0
 800961a:	460b      	mov	r3, r1
 800961c:	4640      	mov	r0, r8
 800961e:	4649      	mov	r1, r9
 8009620:	f7f7 fa74 	bl	8000b0c <__aeabi_dcmplt>
 8009624:	2800      	cmp	r0, #0
 8009626:	f43f af35 	beq.w	8009494 <_dtoa_r+0x464>
 800962a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800962c:	1e6b      	subs	r3, r5, #1
 800962e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009630:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009634:	2b30      	cmp	r3, #48	; 0x30
 8009636:	d0f8      	beq.n	800962a <_dtoa_r+0x5fa>
 8009638:	9700      	str	r7, [sp, #0]
 800963a:	e049      	b.n	80096d0 <_dtoa_r+0x6a0>
 800963c:	4b05      	ldr	r3, [pc, #20]	; (8009654 <_dtoa_r+0x624>)
 800963e:	f7f6 fff3 	bl	8000628 <__aeabi_dmul>
 8009642:	4680      	mov	r8, r0
 8009644:	4689      	mov	r9, r1
 8009646:	e7bd      	b.n	80095c4 <_dtoa_r+0x594>
 8009648:	0800b210 	.word	0x0800b210
 800964c:	0800b1e8 	.word	0x0800b1e8
 8009650:	3ff00000 	.word	0x3ff00000
 8009654:	40240000 	.word	0x40240000
 8009658:	401c0000 	.word	0x401c0000
 800965c:	40140000 	.word	0x40140000
 8009660:	3fe00000 	.word	0x3fe00000
 8009664:	9d01      	ldr	r5, [sp, #4]
 8009666:	4656      	mov	r6, sl
 8009668:	465f      	mov	r7, fp
 800966a:	4642      	mov	r2, r8
 800966c:	464b      	mov	r3, r9
 800966e:	4630      	mov	r0, r6
 8009670:	4639      	mov	r1, r7
 8009672:	f7f7 f903 	bl	800087c <__aeabi_ddiv>
 8009676:	f7f7 fa87 	bl	8000b88 <__aeabi_d2iz>
 800967a:	4682      	mov	sl, r0
 800967c:	f7f6 ff6a 	bl	8000554 <__aeabi_i2d>
 8009680:	4642      	mov	r2, r8
 8009682:	464b      	mov	r3, r9
 8009684:	f7f6 ffd0 	bl	8000628 <__aeabi_dmul>
 8009688:	4602      	mov	r2, r0
 800968a:	460b      	mov	r3, r1
 800968c:	4630      	mov	r0, r6
 800968e:	4639      	mov	r1, r7
 8009690:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009694:	f7f6 fe10 	bl	80002b8 <__aeabi_dsub>
 8009698:	f805 6b01 	strb.w	r6, [r5], #1
 800969c:	9e01      	ldr	r6, [sp, #4]
 800969e:	9f03      	ldr	r7, [sp, #12]
 80096a0:	1bae      	subs	r6, r5, r6
 80096a2:	42b7      	cmp	r7, r6
 80096a4:	4602      	mov	r2, r0
 80096a6:	460b      	mov	r3, r1
 80096a8:	d135      	bne.n	8009716 <_dtoa_r+0x6e6>
 80096aa:	f7f6 fe07 	bl	80002bc <__adddf3>
 80096ae:	4642      	mov	r2, r8
 80096b0:	464b      	mov	r3, r9
 80096b2:	4606      	mov	r6, r0
 80096b4:	460f      	mov	r7, r1
 80096b6:	f7f7 fa47 	bl	8000b48 <__aeabi_dcmpgt>
 80096ba:	b9d0      	cbnz	r0, 80096f2 <_dtoa_r+0x6c2>
 80096bc:	4642      	mov	r2, r8
 80096be:	464b      	mov	r3, r9
 80096c0:	4630      	mov	r0, r6
 80096c2:	4639      	mov	r1, r7
 80096c4:	f7f7 fa18 	bl	8000af8 <__aeabi_dcmpeq>
 80096c8:	b110      	cbz	r0, 80096d0 <_dtoa_r+0x6a0>
 80096ca:	f01a 0f01 	tst.w	sl, #1
 80096ce:	d110      	bne.n	80096f2 <_dtoa_r+0x6c2>
 80096d0:	4620      	mov	r0, r4
 80096d2:	ee18 1a10 	vmov	r1, s16
 80096d6:	f000 fd05 	bl	800a0e4 <_Bfree>
 80096da:	2300      	movs	r3, #0
 80096dc:	9800      	ldr	r0, [sp, #0]
 80096de:	702b      	strb	r3, [r5, #0]
 80096e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096e2:	3001      	adds	r0, #1
 80096e4:	6018      	str	r0, [r3, #0]
 80096e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f43f acf1 	beq.w	80090d0 <_dtoa_r+0xa0>
 80096ee:	601d      	str	r5, [r3, #0]
 80096f0:	e4ee      	b.n	80090d0 <_dtoa_r+0xa0>
 80096f2:	9f00      	ldr	r7, [sp, #0]
 80096f4:	462b      	mov	r3, r5
 80096f6:	461d      	mov	r5, r3
 80096f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096fc:	2a39      	cmp	r2, #57	; 0x39
 80096fe:	d106      	bne.n	800970e <_dtoa_r+0x6de>
 8009700:	9a01      	ldr	r2, [sp, #4]
 8009702:	429a      	cmp	r2, r3
 8009704:	d1f7      	bne.n	80096f6 <_dtoa_r+0x6c6>
 8009706:	9901      	ldr	r1, [sp, #4]
 8009708:	2230      	movs	r2, #48	; 0x30
 800970a:	3701      	adds	r7, #1
 800970c:	700a      	strb	r2, [r1, #0]
 800970e:	781a      	ldrb	r2, [r3, #0]
 8009710:	3201      	adds	r2, #1
 8009712:	701a      	strb	r2, [r3, #0]
 8009714:	e790      	b.n	8009638 <_dtoa_r+0x608>
 8009716:	4ba6      	ldr	r3, [pc, #664]	; (80099b0 <_dtoa_r+0x980>)
 8009718:	2200      	movs	r2, #0
 800971a:	f7f6 ff85 	bl	8000628 <__aeabi_dmul>
 800971e:	2200      	movs	r2, #0
 8009720:	2300      	movs	r3, #0
 8009722:	4606      	mov	r6, r0
 8009724:	460f      	mov	r7, r1
 8009726:	f7f7 f9e7 	bl	8000af8 <__aeabi_dcmpeq>
 800972a:	2800      	cmp	r0, #0
 800972c:	d09d      	beq.n	800966a <_dtoa_r+0x63a>
 800972e:	e7cf      	b.n	80096d0 <_dtoa_r+0x6a0>
 8009730:	9a08      	ldr	r2, [sp, #32]
 8009732:	2a00      	cmp	r2, #0
 8009734:	f000 80d7 	beq.w	80098e6 <_dtoa_r+0x8b6>
 8009738:	9a06      	ldr	r2, [sp, #24]
 800973a:	2a01      	cmp	r2, #1
 800973c:	f300 80ba 	bgt.w	80098b4 <_dtoa_r+0x884>
 8009740:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009742:	2a00      	cmp	r2, #0
 8009744:	f000 80b2 	beq.w	80098ac <_dtoa_r+0x87c>
 8009748:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800974c:	9e07      	ldr	r6, [sp, #28]
 800974e:	9d04      	ldr	r5, [sp, #16]
 8009750:	9a04      	ldr	r2, [sp, #16]
 8009752:	441a      	add	r2, r3
 8009754:	9204      	str	r2, [sp, #16]
 8009756:	9a05      	ldr	r2, [sp, #20]
 8009758:	2101      	movs	r1, #1
 800975a:	441a      	add	r2, r3
 800975c:	4620      	mov	r0, r4
 800975e:	9205      	str	r2, [sp, #20]
 8009760:	f000 fd78 	bl	800a254 <__i2b>
 8009764:	4607      	mov	r7, r0
 8009766:	2d00      	cmp	r5, #0
 8009768:	dd0c      	ble.n	8009784 <_dtoa_r+0x754>
 800976a:	9b05      	ldr	r3, [sp, #20]
 800976c:	2b00      	cmp	r3, #0
 800976e:	dd09      	ble.n	8009784 <_dtoa_r+0x754>
 8009770:	42ab      	cmp	r3, r5
 8009772:	9a04      	ldr	r2, [sp, #16]
 8009774:	bfa8      	it	ge
 8009776:	462b      	movge	r3, r5
 8009778:	1ad2      	subs	r2, r2, r3
 800977a:	9204      	str	r2, [sp, #16]
 800977c:	9a05      	ldr	r2, [sp, #20]
 800977e:	1aed      	subs	r5, r5, r3
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	9305      	str	r3, [sp, #20]
 8009784:	9b07      	ldr	r3, [sp, #28]
 8009786:	b31b      	cbz	r3, 80097d0 <_dtoa_r+0x7a0>
 8009788:	9b08      	ldr	r3, [sp, #32]
 800978a:	2b00      	cmp	r3, #0
 800978c:	f000 80af 	beq.w	80098ee <_dtoa_r+0x8be>
 8009790:	2e00      	cmp	r6, #0
 8009792:	dd13      	ble.n	80097bc <_dtoa_r+0x78c>
 8009794:	4639      	mov	r1, r7
 8009796:	4632      	mov	r2, r6
 8009798:	4620      	mov	r0, r4
 800979a:	f000 fe1b 	bl	800a3d4 <__pow5mult>
 800979e:	ee18 2a10 	vmov	r2, s16
 80097a2:	4601      	mov	r1, r0
 80097a4:	4607      	mov	r7, r0
 80097a6:	4620      	mov	r0, r4
 80097a8:	f000 fd6a 	bl	800a280 <__multiply>
 80097ac:	ee18 1a10 	vmov	r1, s16
 80097b0:	4680      	mov	r8, r0
 80097b2:	4620      	mov	r0, r4
 80097b4:	f000 fc96 	bl	800a0e4 <_Bfree>
 80097b8:	ee08 8a10 	vmov	s16, r8
 80097bc:	9b07      	ldr	r3, [sp, #28]
 80097be:	1b9a      	subs	r2, r3, r6
 80097c0:	d006      	beq.n	80097d0 <_dtoa_r+0x7a0>
 80097c2:	ee18 1a10 	vmov	r1, s16
 80097c6:	4620      	mov	r0, r4
 80097c8:	f000 fe04 	bl	800a3d4 <__pow5mult>
 80097cc:	ee08 0a10 	vmov	s16, r0
 80097d0:	2101      	movs	r1, #1
 80097d2:	4620      	mov	r0, r4
 80097d4:	f000 fd3e 	bl	800a254 <__i2b>
 80097d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097da:	2b00      	cmp	r3, #0
 80097dc:	4606      	mov	r6, r0
 80097de:	f340 8088 	ble.w	80098f2 <_dtoa_r+0x8c2>
 80097e2:	461a      	mov	r2, r3
 80097e4:	4601      	mov	r1, r0
 80097e6:	4620      	mov	r0, r4
 80097e8:	f000 fdf4 	bl	800a3d4 <__pow5mult>
 80097ec:	9b06      	ldr	r3, [sp, #24]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	4606      	mov	r6, r0
 80097f2:	f340 8081 	ble.w	80098f8 <_dtoa_r+0x8c8>
 80097f6:	f04f 0800 	mov.w	r8, #0
 80097fa:	6933      	ldr	r3, [r6, #16]
 80097fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009800:	6918      	ldr	r0, [r3, #16]
 8009802:	f000 fcd7 	bl	800a1b4 <__hi0bits>
 8009806:	f1c0 0020 	rsb	r0, r0, #32
 800980a:	9b05      	ldr	r3, [sp, #20]
 800980c:	4418      	add	r0, r3
 800980e:	f010 001f 	ands.w	r0, r0, #31
 8009812:	f000 8092 	beq.w	800993a <_dtoa_r+0x90a>
 8009816:	f1c0 0320 	rsb	r3, r0, #32
 800981a:	2b04      	cmp	r3, #4
 800981c:	f340 808a 	ble.w	8009934 <_dtoa_r+0x904>
 8009820:	f1c0 001c 	rsb	r0, r0, #28
 8009824:	9b04      	ldr	r3, [sp, #16]
 8009826:	4403      	add	r3, r0
 8009828:	9304      	str	r3, [sp, #16]
 800982a:	9b05      	ldr	r3, [sp, #20]
 800982c:	4403      	add	r3, r0
 800982e:	4405      	add	r5, r0
 8009830:	9305      	str	r3, [sp, #20]
 8009832:	9b04      	ldr	r3, [sp, #16]
 8009834:	2b00      	cmp	r3, #0
 8009836:	dd07      	ble.n	8009848 <_dtoa_r+0x818>
 8009838:	ee18 1a10 	vmov	r1, s16
 800983c:	461a      	mov	r2, r3
 800983e:	4620      	mov	r0, r4
 8009840:	f000 fe22 	bl	800a488 <__lshift>
 8009844:	ee08 0a10 	vmov	s16, r0
 8009848:	9b05      	ldr	r3, [sp, #20]
 800984a:	2b00      	cmp	r3, #0
 800984c:	dd05      	ble.n	800985a <_dtoa_r+0x82a>
 800984e:	4631      	mov	r1, r6
 8009850:	461a      	mov	r2, r3
 8009852:	4620      	mov	r0, r4
 8009854:	f000 fe18 	bl	800a488 <__lshift>
 8009858:	4606      	mov	r6, r0
 800985a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800985c:	2b00      	cmp	r3, #0
 800985e:	d06e      	beq.n	800993e <_dtoa_r+0x90e>
 8009860:	ee18 0a10 	vmov	r0, s16
 8009864:	4631      	mov	r1, r6
 8009866:	f000 fe7f 	bl	800a568 <__mcmp>
 800986a:	2800      	cmp	r0, #0
 800986c:	da67      	bge.n	800993e <_dtoa_r+0x90e>
 800986e:	9b00      	ldr	r3, [sp, #0]
 8009870:	3b01      	subs	r3, #1
 8009872:	ee18 1a10 	vmov	r1, s16
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	220a      	movs	r2, #10
 800987a:	2300      	movs	r3, #0
 800987c:	4620      	mov	r0, r4
 800987e:	f000 fc53 	bl	800a128 <__multadd>
 8009882:	9b08      	ldr	r3, [sp, #32]
 8009884:	ee08 0a10 	vmov	s16, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	f000 81b1 	beq.w	8009bf0 <_dtoa_r+0xbc0>
 800988e:	2300      	movs	r3, #0
 8009890:	4639      	mov	r1, r7
 8009892:	220a      	movs	r2, #10
 8009894:	4620      	mov	r0, r4
 8009896:	f000 fc47 	bl	800a128 <__multadd>
 800989a:	9b02      	ldr	r3, [sp, #8]
 800989c:	2b00      	cmp	r3, #0
 800989e:	4607      	mov	r7, r0
 80098a0:	f300 808e 	bgt.w	80099c0 <_dtoa_r+0x990>
 80098a4:	9b06      	ldr	r3, [sp, #24]
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	dc51      	bgt.n	800994e <_dtoa_r+0x91e>
 80098aa:	e089      	b.n	80099c0 <_dtoa_r+0x990>
 80098ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80098b2:	e74b      	b.n	800974c <_dtoa_r+0x71c>
 80098b4:	9b03      	ldr	r3, [sp, #12]
 80098b6:	1e5e      	subs	r6, r3, #1
 80098b8:	9b07      	ldr	r3, [sp, #28]
 80098ba:	42b3      	cmp	r3, r6
 80098bc:	bfbf      	itttt	lt
 80098be:	9b07      	ldrlt	r3, [sp, #28]
 80098c0:	9607      	strlt	r6, [sp, #28]
 80098c2:	1af2      	sublt	r2, r6, r3
 80098c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80098c6:	bfb6      	itet	lt
 80098c8:	189b      	addlt	r3, r3, r2
 80098ca:	1b9e      	subge	r6, r3, r6
 80098cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80098ce:	9b03      	ldr	r3, [sp, #12]
 80098d0:	bfb8      	it	lt
 80098d2:	2600      	movlt	r6, #0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	bfb7      	itett	lt
 80098d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80098dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80098e0:	1a9d      	sublt	r5, r3, r2
 80098e2:	2300      	movlt	r3, #0
 80098e4:	e734      	b.n	8009750 <_dtoa_r+0x720>
 80098e6:	9e07      	ldr	r6, [sp, #28]
 80098e8:	9d04      	ldr	r5, [sp, #16]
 80098ea:	9f08      	ldr	r7, [sp, #32]
 80098ec:	e73b      	b.n	8009766 <_dtoa_r+0x736>
 80098ee:	9a07      	ldr	r2, [sp, #28]
 80098f0:	e767      	b.n	80097c2 <_dtoa_r+0x792>
 80098f2:	9b06      	ldr	r3, [sp, #24]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	dc18      	bgt.n	800992a <_dtoa_r+0x8fa>
 80098f8:	f1ba 0f00 	cmp.w	sl, #0
 80098fc:	d115      	bne.n	800992a <_dtoa_r+0x8fa>
 80098fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009902:	b993      	cbnz	r3, 800992a <_dtoa_r+0x8fa>
 8009904:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009908:	0d1b      	lsrs	r3, r3, #20
 800990a:	051b      	lsls	r3, r3, #20
 800990c:	b183      	cbz	r3, 8009930 <_dtoa_r+0x900>
 800990e:	9b04      	ldr	r3, [sp, #16]
 8009910:	3301      	adds	r3, #1
 8009912:	9304      	str	r3, [sp, #16]
 8009914:	9b05      	ldr	r3, [sp, #20]
 8009916:	3301      	adds	r3, #1
 8009918:	9305      	str	r3, [sp, #20]
 800991a:	f04f 0801 	mov.w	r8, #1
 800991e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009920:	2b00      	cmp	r3, #0
 8009922:	f47f af6a 	bne.w	80097fa <_dtoa_r+0x7ca>
 8009926:	2001      	movs	r0, #1
 8009928:	e76f      	b.n	800980a <_dtoa_r+0x7da>
 800992a:	f04f 0800 	mov.w	r8, #0
 800992e:	e7f6      	b.n	800991e <_dtoa_r+0x8ee>
 8009930:	4698      	mov	r8, r3
 8009932:	e7f4      	b.n	800991e <_dtoa_r+0x8ee>
 8009934:	f43f af7d 	beq.w	8009832 <_dtoa_r+0x802>
 8009938:	4618      	mov	r0, r3
 800993a:	301c      	adds	r0, #28
 800993c:	e772      	b.n	8009824 <_dtoa_r+0x7f4>
 800993e:	9b03      	ldr	r3, [sp, #12]
 8009940:	2b00      	cmp	r3, #0
 8009942:	dc37      	bgt.n	80099b4 <_dtoa_r+0x984>
 8009944:	9b06      	ldr	r3, [sp, #24]
 8009946:	2b02      	cmp	r3, #2
 8009948:	dd34      	ble.n	80099b4 <_dtoa_r+0x984>
 800994a:	9b03      	ldr	r3, [sp, #12]
 800994c:	9302      	str	r3, [sp, #8]
 800994e:	9b02      	ldr	r3, [sp, #8]
 8009950:	b96b      	cbnz	r3, 800996e <_dtoa_r+0x93e>
 8009952:	4631      	mov	r1, r6
 8009954:	2205      	movs	r2, #5
 8009956:	4620      	mov	r0, r4
 8009958:	f000 fbe6 	bl	800a128 <__multadd>
 800995c:	4601      	mov	r1, r0
 800995e:	4606      	mov	r6, r0
 8009960:	ee18 0a10 	vmov	r0, s16
 8009964:	f000 fe00 	bl	800a568 <__mcmp>
 8009968:	2800      	cmp	r0, #0
 800996a:	f73f adbb 	bgt.w	80094e4 <_dtoa_r+0x4b4>
 800996e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009970:	9d01      	ldr	r5, [sp, #4]
 8009972:	43db      	mvns	r3, r3
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	f04f 0800 	mov.w	r8, #0
 800997a:	4631      	mov	r1, r6
 800997c:	4620      	mov	r0, r4
 800997e:	f000 fbb1 	bl	800a0e4 <_Bfree>
 8009982:	2f00      	cmp	r7, #0
 8009984:	f43f aea4 	beq.w	80096d0 <_dtoa_r+0x6a0>
 8009988:	f1b8 0f00 	cmp.w	r8, #0
 800998c:	d005      	beq.n	800999a <_dtoa_r+0x96a>
 800998e:	45b8      	cmp	r8, r7
 8009990:	d003      	beq.n	800999a <_dtoa_r+0x96a>
 8009992:	4641      	mov	r1, r8
 8009994:	4620      	mov	r0, r4
 8009996:	f000 fba5 	bl	800a0e4 <_Bfree>
 800999a:	4639      	mov	r1, r7
 800999c:	4620      	mov	r0, r4
 800999e:	f000 fba1 	bl	800a0e4 <_Bfree>
 80099a2:	e695      	b.n	80096d0 <_dtoa_r+0x6a0>
 80099a4:	2600      	movs	r6, #0
 80099a6:	4637      	mov	r7, r6
 80099a8:	e7e1      	b.n	800996e <_dtoa_r+0x93e>
 80099aa:	9700      	str	r7, [sp, #0]
 80099ac:	4637      	mov	r7, r6
 80099ae:	e599      	b.n	80094e4 <_dtoa_r+0x4b4>
 80099b0:	40240000 	.word	0x40240000
 80099b4:	9b08      	ldr	r3, [sp, #32]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f000 80ca 	beq.w	8009b50 <_dtoa_r+0xb20>
 80099bc:	9b03      	ldr	r3, [sp, #12]
 80099be:	9302      	str	r3, [sp, #8]
 80099c0:	2d00      	cmp	r5, #0
 80099c2:	dd05      	ble.n	80099d0 <_dtoa_r+0x9a0>
 80099c4:	4639      	mov	r1, r7
 80099c6:	462a      	mov	r2, r5
 80099c8:	4620      	mov	r0, r4
 80099ca:	f000 fd5d 	bl	800a488 <__lshift>
 80099ce:	4607      	mov	r7, r0
 80099d0:	f1b8 0f00 	cmp.w	r8, #0
 80099d4:	d05b      	beq.n	8009a8e <_dtoa_r+0xa5e>
 80099d6:	6879      	ldr	r1, [r7, #4]
 80099d8:	4620      	mov	r0, r4
 80099da:	f000 fb43 	bl	800a064 <_Balloc>
 80099de:	4605      	mov	r5, r0
 80099e0:	b928      	cbnz	r0, 80099ee <_dtoa_r+0x9be>
 80099e2:	4b87      	ldr	r3, [pc, #540]	; (8009c00 <_dtoa_r+0xbd0>)
 80099e4:	4602      	mov	r2, r0
 80099e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80099ea:	f7ff bb3b 	b.w	8009064 <_dtoa_r+0x34>
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	3202      	adds	r2, #2
 80099f2:	0092      	lsls	r2, r2, #2
 80099f4:	f107 010c 	add.w	r1, r7, #12
 80099f8:	300c      	adds	r0, #12
 80099fa:	f7fe fcbf 	bl	800837c <memcpy>
 80099fe:	2201      	movs	r2, #1
 8009a00:	4629      	mov	r1, r5
 8009a02:	4620      	mov	r0, r4
 8009a04:	f000 fd40 	bl	800a488 <__lshift>
 8009a08:	9b01      	ldr	r3, [sp, #4]
 8009a0a:	f103 0901 	add.w	r9, r3, #1
 8009a0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009a12:	4413      	add	r3, r2
 8009a14:	9305      	str	r3, [sp, #20]
 8009a16:	f00a 0301 	and.w	r3, sl, #1
 8009a1a:	46b8      	mov	r8, r7
 8009a1c:	9304      	str	r3, [sp, #16]
 8009a1e:	4607      	mov	r7, r0
 8009a20:	4631      	mov	r1, r6
 8009a22:	ee18 0a10 	vmov	r0, s16
 8009a26:	f7ff fa77 	bl	8008f18 <quorem>
 8009a2a:	4641      	mov	r1, r8
 8009a2c:	9002      	str	r0, [sp, #8]
 8009a2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009a32:	ee18 0a10 	vmov	r0, s16
 8009a36:	f000 fd97 	bl	800a568 <__mcmp>
 8009a3a:	463a      	mov	r2, r7
 8009a3c:	9003      	str	r0, [sp, #12]
 8009a3e:	4631      	mov	r1, r6
 8009a40:	4620      	mov	r0, r4
 8009a42:	f000 fdad 	bl	800a5a0 <__mdiff>
 8009a46:	68c2      	ldr	r2, [r0, #12]
 8009a48:	f109 3bff 	add.w	fp, r9, #4294967295
 8009a4c:	4605      	mov	r5, r0
 8009a4e:	bb02      	cbnz	r2, 8009a92 <_dtoa_r+0xa62>
 8009a50:	4601      	mov	r1, r0
 8009a52:	ee18 0a10 	vmov	r0, s16
 8009a56:	f000 fd87 	bl	800a568 <__mcmp>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	4620      	mov	r0, r4
 8009a60:	9207      	str	r2, [sp, #28]
 8009a62:	f000 fb3f 	bl	800a0e4 <_Bfree>
 8009a66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009a6a:	ea43 0102 	orr.w	r1, r3, r2
 8009a6e:	9b04      	ldr	r3, [sp, #16]
 8009a70:	430b      	orrs	r3, r1
 8009a72:	464d      	mov	r5, r9
 8009a74:	d10f      	bne.n	8009a96 <_dtoa_r+0xa66>
 8009a76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009a7a:	d02a      	beq.n	8009ad2 <_dtoa_r+0xaa2>
 8009a7c:	9b03      	ldr	r3, [sp, #12]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	dd02      	ble.n	8009a88 <_dtoa_r+0xa58>
 8009a82:	9b02      	ldr	r3, [sp, #8]
 8009a84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009a88:	f88b a000 	strb.w	sl, [fp]
 8009a8c:	e775      	b.n	800997a <_dtoa_r+0x94a>
 8009a8e:	4638      	mov	r0, r7
 8009a90:	e7ba      	b.n	8009a08 <_dtoa_r+0x9d8>
 8009a92:	2201      	movs	r2, #1
 8009a94:	e7e2      	b.n	8009a5c <_dtoa_r+0xa2c>
 8009a96:	9b03      	ldr	r3, [sp, #12]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	db04      	blt.n	8009aa6 <_dtoa_r+0xa76>
 8009a9c:	9906      	ldr	r1, [sp, #24]
 8009a9e:	430b      	orrs	r3, r1
 8009aa0:	9904      	ldr	r1, [sp, #16]
 8009aa2:	430b      	orrs	r3, r1
 8009aa4:	d122      	bne.n	8009aec <_dtoa_r+0xabc>
 8009aa6:	2a00      	cmp	r2, #0
 8009aa8:	ddee      	ble.n	8009a88 <_dtoa_r+0xa58>
 8009aaa:	ee18 1a10 	vmov	r1, s16
 8009aae:	2201      	movs	r2, #1
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f000 fce9 	bl	800a488 <__lshift>
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	ee08 0a10 	vmov	s16, r0
 8009abc:	f000 fd54 	bl	800a568 <__mcmp>
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	dc03      	bgt.n	8009acc <_dtoa_r+0xa9c>
 8009ac4:	d1e0      	bne.n	8009a88 <_dtoa_r+0xa58>
 8009ac6:	f01a 0f01 	tst.w	sl, #1
 8009aca:	d0dd      	beq.n	8009a88 <_dtoa_r+0xa58>
 8009acc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ad0:	d1d7      	bne.n	8009a82 <_dtoa_r+0xa52>
 8009ad2:	2339      	movs	r3, #57	; 0x39
 8009ad4:	f88b 3000 	strb.w	r3, [fp]
 8009ad8:	462b      	mov	r3, r5
 8009ada:	461d      	mov	r5, r3
 8009adc:	3b01      	subs	r3, #1
 8009ade:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ae2:	2a39      	cmp	r2, #57	; 0x39
 8009ae4:	d071      	beq.n	8009bca <_dtoa_r+0xb9a>
 8009ae6:	3201      	adds	r2, #1
 8009ae8:	701a      	strb	r2, [r3, #0]
 8009aea:	e746      	b.n	800997a <_dtoa_r+0x94a>
 8009aec:	2a00      	cmp	r2, #0
 8009aee:	dd07      	ble.n	8009b00 <_dtoa_r+0xad0>
 8009af0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009af4:	d0ed      	beq.n	8009ad2 <_dtoa_r+0xaa2>
 8009af6:	f10a 0301 	add.w	r3, sl, #1
 8009afa:	f88b 3000 	strb.w	r3, [fp]
 8009afe:	e73c      	b.n	800997a <_dtoa_r+0x94a>
 8009b00:	9b05      	ldr	r3, [sp, #20]
 8009b02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009b06:	4599      	cmp	r9, r3
 8009b08:	d047      	beq.n	8009b9a <_dtoa_r+0xb6a>
 8009b0a:	ee18 1a10 	vmov	r1, s16
 8009b0e:	2300      	movs	r3, #0
 8009b10:	220a      	movs	r2, #10
 8009b12:	4620      	mov	r0, r4
 8009b14:	f000 fb08 	bl	800a128 <__multadd>
 8009b18:	45b8      	cmp	r8, r7
 8009b1a:	ee08 0a10 	vmov	s16, r0
 8009b1e:	f04f 0300 	mov.w	r3, #0
 8009b22:	f04f 020a 	mov.w	r2, #10
 8009b26:	4641      	mov	r1, r8
 8009b28:	4620      	mov	r0, r4
 8009b2a:	d106      	bne.n	8009b3a <_dtoa_r+0xb0a>
 8009b2c:	f000 fafc 	bl	800a128 <__multadd>
 8009b30:	4680      	mov	r8, r0
 8009b32:	4607      	mov	r7, r0
 8009b34:	f109 0901 	add.w	r9, r9, #1
 8009b38:	e772      	b.n	8009a20 <_dtoa_r+0x9f0>
 8009b3a:	f000 faf5 	bl	800a128 <__multadd>
 8009b3e:	4639      	mov	r1, r7
 8009b40:	4680      	mov	r8, r0
 8009b42:	2300      	movs	r3, #0
 8009b44:	220a      	movs	r2, #10
 8009b46:	4620      	mov	r0, r4
 8009b48:	f000 faee 	bl	800a128 <__multadd>
 8009b4c:	4607      	mov	r7, r0
 8009b4e:	e7f1      	b.n	8009b34 <_dtoa_r+0xb04>
 8009b50:	9b03      	ldr	r3, [sp, #12]
 8009b52:	9302      	str	r3, [sp, #8]
 8009b54:	9d01      	ldr	r5, [sp, #4]
 8009b56:	ee18 0a10 	vmov	r0, s16
 8009b5a:	4631      	mov	r1, r6
 8009b5c:	f7ff f9dc 	bl	8008f18 <quorem>
 8009b60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009b64:	9b01      	ldr	r3, [sp, #4]
 8009b66:	f805 ab01 	strb.w	sl, [r5], #1
 8009b6a:	1aea      	subs	r2, r5, r3
 8009b6c:	9b02      	ldr	r3, [sp, #8]
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	dd09      	ble.n	8009b86 <_dtoa_r+0xb56>
 8009b72:	ee18 1a10 	vmov	r1, s16
 8009b76:	2300      	movs	r3, #0
 8009b78:	220a      	movs	r2, #10
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f000 fad4 	bl	800a128 <__multadd>
 8009b80:	ee08 0a10 	vmov	s16, r0
 8009b84:	e7e7      	b.n	8009b56 <_dtoa_r+0xb26>
 8009b86:	9b02      	ldr	r3, [sp, #8]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	bfc8      	it	gt
 8009b8c:	461d      	movgt	r5, r3
 8009b8e:	9b01      	ldr	r3, [sp, #4]
 8009b90:	bfd8      	it	le
 8009b92:	2501      	movle	r5, #1
 8009b94:	441d      	add	r5, r3
 8009b96:	f04f 0800 	mov.w	r8, #0
 8009b9a:	ee18 1a10 	vmov	r1, s16
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f000 fc71 	bl	800a488 <__lshift>
 8009ba6:	4631      	mov	r1, r6
 8009ba8:	ee08 0a10 	vmov	s16, r0
 8009bac:	f000 fcdc 	bl	800a568 <__mcmp>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	dc91      	bgt.n	8009ad8 <_dtoa_r+0xaa8>
 8009bb4:	d102      	bne.n	8009bbc <_dtoa_r+0xb8c>
 8009bb6:	f01a 0f01 	tst.w	sl, #1
 8009bba:	d18d      	bne.n	8009ad8 <_dtoa_r+0xaa8>
 8009bbc:	462b      	mov	r3, r5
 8009bbe:	461d      	mov	r5, r3
 8009bc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bc4:	2a30      	cmp	r2, #48	; 0x30
 8009bc6:	d0fa      	beq.n	8009bbe <_dtoa_r+0xb8e>
 8009bc8:	e6d7      	b.n	800997a <_dtoa_r+0x94a>
 8009bca:	9a01      	ldr	r2, [sp, #4]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d184      	bne.n	8009ada <_dtoa_r+0xaaa>
 8009bd0:	9b00      	ldr	r3, [sp, #0]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	2331      	movs	r3, #49	; 0x31
 8009bd8:	7013      	strb	r3, [r2, #0]
 8009bda:	e6ce      	b.n	800997a <_dtoa_r+0x94a>
 8009bdc:	4b09      	ldr	r3, [pc, #36]	; (8009c04 <_dtoa_r+0xbd4>)
 8009bde:	f7ff ba95 	b.w	800910c <_dtoa_r+0xdc>
 8009be2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f47f aa6e 	bne.w	80090c6 <_dtoa_r+0x96>
 8009bea:	4b07      	ldr	r3, [pc, #28]	; (8009c08 <_dtoa_r+0xbd8>)
 8009bec:	f7ff ba8e 	b.w	800910c <_dtoa_r+0xdc>
 8009bf0:	9b02      	ldr	r3, [sp, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	dcae      	bgt.n	8009b54 <_dtoa_r+0xb24>
 8009bf6:	9b06      	ldr	r3, [sp, #24]
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	f73f aea8 	bgt.w	800994e <_dtoa_r+0x91e>
 8009bfe:	e7a9      	b.n	8009b54 <_dtoa_r+0xb24>
 8009c00:	0800b117 	.word	0x0800b117
 8009c04:	0800b074 	.word	0x0800b074
 8009c08:	0800b098 	.word	0x0800b098

08009c0c <__sflush_r>:
 8009c0c:	898a      	ldrh	r2, [r1, #12]
 8009c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c12:	4605      	mov	r5, r0
 8009c14:	0710      	lsls	r0, r2, #28
 8009c16:	460c      	mov	r4, r1
 8009c18:	d458      	bmi.n	8009ccc <__sflush_r+0xc0>
 8009c1a:	684b      	ldr	r3, [r1, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	dc05      	bgt.n	8009c2c <__sflush_r+0x20>
 8009c20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	dc02      	bgt.n	8009c2c <__sflush_r+0x20>
 8009c26:	2000      	movs	r0, #0
 8009c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c2e:	2e00      	cmp	r6, #0
 8009c30:	d0f9      	beq.n	8009c26 <__sflush_r+0x1a>
 8009c32:	2300      	movs	r3, #0
 8009c34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c38:	682f      	ldr	r7, [r5, #0]
 8009c3a:	602b      	str	r3, [r5, #0]
 8009c3c:	d032      	beq.n	8009ca4 <__sflush_r+0x98>
 8009c3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	075a      	lsls	r2, r3, #29
 8009c44:	d505      	bpl.n	8009c52 <__sflush_r+0x46>
 8009c46:	6863      	ldr	r3, [r4, #4]
 8009c48:	1ac0      	subs	r0, r0, r3
 8009c4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c4c:	b10b      	cbz	r3, 8009c52 <__sflush_r+0x46>
 8009c4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c50:	1ac0      	subs	r0, r0, r3
 8009c52:	2300      	movs	r3, #0
 8009c54:	4602      	mov	r2, r0
 8009c56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c58:	6a21      	ldr	r1, [r4, #32]
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	47b0      	blx	r6
 8009c5e:	1c43      	adds	r3, r0, #1
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	d106      	bne.n	8009c72 <__sflush_r+0x66>
 8009c64:	6829      	ldr	r1, [r5, #0]
 8009c66:	291d      	cmp	r1, #29
 8009c68:	d82c      	bhi.n	8009cc4 <__sflush_r+0xb8>
 8009c6a:	4a2a      	ldr	r2, [pc, #168]	; (8009d14 <__sflush_r+0x108>)
 8009c6c:	40ca      	lsrs	r2, r1
 8009c6e:	07d6      	lsls	r6, r2, #31
 8009c70:	d528      	bpl.n	8009cc4 <__sflush_r+0xb8>
 8009c72:	2200      	movs	r2, #0
 8009c74:	6062      	str	r2, [r4, #4]
 8009c76:	04d9      	lsls	r1, r3, #19
 8009c78:	6922      	ldr	r2, [r4, #16]
 8009c7a:	6022      	str	r2, [r4, #0]
 8009c7c:	d504      	bpl.n	8009c88 <__sflush_r+0x7c>
 8009c7e:	1c42      	adds	r2, r0, #1
 8009c80:	d101      	bne.n	8009c86 <__sflush_r+0x7a>
 8009c82:	682b      	ldr	r3, [r5, #0]
 8009c84:	b903      	cbnz	r3, 8009c88 <__sflush_r+0x7c>
 8009c86:	6560      	str	r0, [r4, #84]	; 0x54
 8009c88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c8a:	602f      	str	r7, [r5, #0]
 8009c8c:	2900      	cmp	r1, #0
 8009c8e:	d0ca      	beq.n	8009c26 <__sflush_r+0x1a>
 8009c90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c94:	4299      	cmp	r1, r3
 8009c96:	d002      	beq.n	8009c9e <__sflush_r+0x92>
 8009c98:	4628      	mov	r0, r5
 8009c9a:	f000 fd7d 	bl	800a798 <_free_r>
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	6360      	str	r0, [r4, #52]	; 0x34
 8009ca2:	e7c1      	b.n	8009c28 <__sflush_r+0x1c>
 8009ca4:	6a21      	ldr	r1, [r4, #32]
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	4628      	mov	r0, r5
 8009caa:	47b0      	blx	r6
 8009cac:	1c41      	adds	r1, r0, #1
 8009cae:	d1c7      	bne.n	8009c40 <__sflush_r+0x34>
 8009cb0:	682b      	ldr	r3, [r5, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d0c4      	beq.n	8009c40 <__sflush_r+0x34>
 8009cb6:	2b1d      	cmp	r3, #29
 8009cb8:	d001      	beq.n	8009cbe <__sflush_r+0xb2>
 8009cba:	2b16      	cmp	r3, #22
 8009cbc:	d101      	bne.n	8009cc2 <__sflush_r+0xb6>
 8009cbe:	602f      	str	r7, [r5, #0]
 8009cc0:	e7b1      	b.n	8009c26 <__sflush_r+0x1a>
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cc8:	81a3      	strh	r3, [r4, #12]
 8009cca:	e7ad      	b.n	8009c28 <__sflush_r+0x1c>
 8009ccc:	690f      	ldr	r7, [r1, #16]
 8009cce:	2f00      	cmp	r7, #0
 8009cd0:	d0a9      	beq.n	8009c26 <__sflush_r+0x1a>
 8009cd2:	0793      	lsls	r3, r2, #30
 8009cd4:	680e      	ldr	r6, [r1, #0]
 8009cd6:	bf08      	it	eq
 8009cd8:	694b      	ldreq	r3, [r1, #20]
 8009cda:	600f      	str	r7, [r1, #0]
 8009cdc:	bf18      	it	ne
 8009cde:	2300      	movne	r3, #0
 8009ce0:	eba6 0807 	sub.w	r8, r6, r7
 8009ce4:	608b      	str	r3, [r1, #8]
 8009ce6:	f1b8 0f00 	cmp.w	r8, #0
 8009cea:	dd9c      	ble.n	8009c26 <__sflush_r+0x1a>
 8009cec:	6a21      	ldr	r1, [r4, #32]
 8009cee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009cf0:	4643      	mov	r3, r8
 8009cf2:	463a      	mov	r2, r7
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	47b0      	blx	r6
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	dc06      	bgt.n	8009d0a <__sflush_r+0xfe>
 8009cfc:	89a3      	ldrh	r3, [r4, #12]
 8009cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d02:	81a3      	strh	r3, [r4, #12]
 8009d04:	f04f 30ff 	mov.w	r0, #4294967295
 8009d08:	e78e      	b.n	8009c28 <__sflush_r+0x1c>
 8009d0a:	4407      	add	r7, r0
 8009d0c:	eba8 0800 	sub.w	r8, r8, r0
 8009d10:	e7e9      	b.n	8009ce6 <__sflush_r+0xda>
 8009d12:	bf00      	nop
 8009d14:	20400001 	.word	0x20400001

08009d18 <_fflush_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	690b      	ldr	r3, [r1, #16]
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	460c      	mov	r4, r1
 8009d20:	b913      	cbnz	r3, 8009d28 <_fflush_r+0x10>
 8009d22:	2500      	movs	r5, #0
 8009d24:	4628      	mov	r0, r5
 8009d26:	bd38      	pop	{r3, r4, r5, pc}
 8009d28:	b118      	cbz	r0, 8009d32 <_fflush_r+0x1a>
 8009d2a:	6983      	ldr	r3, [r0, #24]
 8009d2c:	b90b      	cbnz	r3, 8009d32 <_fflush_r+0x1a>
 8009d2e:	f000 f887 	bl	8009e40 <__sinit>
 8009d32:	4b14      	ldr	r3, [pc, #80]	; (8009d84 <_fflush_r+0x6c>)
 8009d34:	429c      	cmp	r4, r3
 8009d36:	d11b      	bne.n	8009d70 <_fflush_r+0x58>
 8009d38:	686c      	ldr	r4, [r5, #4]
 8009d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d0ef      	beq.n	8009d22 <_fflush_r+0xa>
 8009d42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d44:	07d0      	lsls	r0, r2, #31
 8009d46:	d404      	bmi.n	8009d52 <_fflush_r+0x3a>
 8009d48:	0599      	lsls	r1, r3, #22
 8009d4a:	d402      	bmi.n	8009d52 <_fflush_r+0x3a>
 8009d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d4e:	f000 f91a 	bl	8009f86 <__retarget_lock_acquire_recursive>
 8009d52:	4628      	mov	r0, r5
 8009d54:	4621      	mov	r1, r4
 8009d56:	f7ff ff59 	bl	8009c0c <__sflush_r>
 8009d5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d5c:	07da      	lsls	r2, r3, #31
 8009d5e:	4605      	mov	r5, r0
 8009d60:	d4e0      	bmi.n	8009d24 <_fflush_r+0xc>
 8009d62:	89a3      	ldrh	r3, [r4, #12]
 8009d64:	059b      	lsls	r3, r3, #22
 8009d66:	d4dd      	bmi.n	8009d24 <_fflush_r+0xc>
 8009d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d6a:	f000 f90d 	bl	8009f88 <__retarget_lock_release_recursive>
 8009d6e:	e7d9      	b.n	8009d24 <_fflush_r+0xc>
 8009d70:	4b05      	ldr	r3, [pc, #20]	; (8009d88 <_fflush_r+0x70>)
 8009d72:	429c      	cmp	r4, r3
 8009d74:	d101      	bne.n	8009d7a <_fflush_r+0x62>
 8009d76:	68ac      	ldr	r4, [r5, #8]
 8009d78:	e7df      	b.n	8009d3a <_fflush_r+0x22>
 8009d7a:	4b04      	ldr	r3, [pc, #16]	; (8009d8c <_fflush_r+0x74>)
 8009d7c:	429c      	cmp	r4, r3
 8009d7e:	bf08      	it	eq
 8009d80:	68ec      	ldreq	r4, [r5, #12]
 8009d82:	e7da      	b.n	8009d3a <_fflush_r+0x22>
 8009d84:	0800b148 	.word	0x0800b148
 8009d88:	0800b168 	.word	0x0800b168
 8009d8c:	0800b128 	.word	0x0800b128

08009d90 <std>:
 8009d90:	2300      	movs	r3, #0
 8009d92:	b510      	push	{r4, lr}
 8009d94:	4604      	mov	r4, r0
 8009d96:	e9c0 3300 	strd	r3, r3, [r0]
 8009d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d9e:	6083      	str	r3, [r0, #8]
 8009da0:	8181      	strh	r1, [r0, #12]
 8009da2:	6643      	str	r3, [r0, #100]	; 0x64
 8009da4:	81c2      	strh	r2, [r0, #14]
 8009da6:	6183      	str	r3, [r0, #24]
 8009da8:	4619      	mov	r1, r3
 8009daa:	2208      	movs	r2, #8
 8009dac:	305c      	adds	r0, #92	; 0x5c
 8009dae:	f7fe faf3 	bl	8008398 <memset>
 8009db2:	4b05      	ldr	r3, [pc, #20]	; (8009dc8 <std+0x38>)
 8009db4:	6263      	str	r3, [r4, #36]	; 0x24
 8009db6:	4b05      	ldr	r3, [pc, #20]	; (8009dcc <std+0x3c>)
 8009db8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009dba:	4b05      	ldr	r3, [pc, #20]	; (8009dd0 <std+0x40>)
 8009dbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009dbe:	4b05      	ldr	r3, [pc, #20]	; (8009dd4 <std+0x44>)
 8009dc0:	6224      	str	r4, [r4, #32]
 8009dc2:	6323      	str	r3, [r4, #48]	; 0x30
 8009dc4:	bd10      	pop	{r4, pc}
 8009dc6:	bf00      	nop
 8009dc8:	0800ac2d 	.word	0x0800ac2d
 8009dcc:	0800ac4f 	.word	0x0800ac4f
 8009dd0:	0800ac87 	.word	0x0800ac87
 8009dd4:	0800acab 	.word	0x0800acab

08009dd8 <_cleanup_r>:
 8009dd8:	4901      	ldr	r1, [pc, #4]	; (8009de0 <_cleanup_r+0x8>)
 8009dda:	f000 b8af 	b.w	8009f3c <_fwalk_reent>
 8009dde:	bf00      	nop
 8009de0:	08009d19 	.word	0x08009d19

08009de4 <__sfmoreglue>:
 8009de4:	b570      	push	{r4, r5, r6, lr}
 8009de6:	2268      	movs	r2, #104	; 0x68
 8009de8:	1e4d      	subs	r5, r1, #1
 8009dea:	4355      	muls	r5, r2
 8009dec:	460e      	mov	r6, r1
 8009dee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009df2:	f000 fd3d 	bl	800a870 <_malloc_r>
 8009df6:	4604      	mov	r4, r0
 8009df8:	b140      	cbz	r0, 8009e0c <__sfmoreglue+0x28>
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	e9c0 1600 	strd	r1, r6, [r0]
 8009e00:	300c      	adds	r0, #12
 8009e02:	60a0      	str	r0, [r4, #8]
 8009e04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e08:	f7fe fac6 	bl	8008398 <memset>
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	bd70      	pop	{r4, r5, r6, pc}

08009e10 <__sfp_lock_acquire>:
 8009e10:	4801      	ldr	r0, [pc, #4]	; (8009e18 <__sfp_lock_acquire+0x8>)
 8009e12:	f000 b8b8 	b.w	8009f86 <__retarget_lock_acquire_recursive>
 8009e16:	bf00      	nop
 8009e18:	20000561 	.word	0x20000561

08009e1c <__sfp_lock_release>:
 8009e1c:	4801      	ldr	r0, [pc, #4]	; (8009e24 <__sfp_lock_release+0x8>)
 8009e1e:	f000 b8b3 	b.w	8009f88 <__retarget_lock_release_recursive>
 8009e22:	bf00      	nop
 8009e24:	20000561 	.word	0x20000561

08009e28 <__sinit_lock_acquire>:
 8009e28:	4801      	ldr	r0, [pc, #4]	; (8009e30 <__sinit_lock_acquire+0x8>)
 8009e2a:	f000 b8ac 	b.w	8009f86 <__retarget_lock_acquire_recursive>
 8009e2e:	bf00      	nop
 8009e30:	20000562 	.word	0x20000562

08009e34 <__sinit_lock_release>:
 8009e34:	4801      	ldr	r0, [pc, #4]	; (8009e3c <__sinit_lock_release+0x8>)
 8009e36:	f000 b8a7 	b.w	8009f88 <__retarget_lock_release_recursive>
 8009e3a:	bf00      	nop
 8009e3c:	20000562 	.word	0x20000562

08009e40 <__sinit>:
 8009e40:	b510      	push	{r4, lr}
 8009e42:	4604      	mov	r4, r0
 8009e44:	f7ff fff0 	bl	8009e28 <__sinit_lock_acquire>
 8009e48:	69a3      	ldr	r3, [r4, #24]
 8009e4a:	b11b      	cbz	r3, 8009e54 <__sinit+0x14>
 8009e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e50:	f7ff bff0 	b.w	8009e34 <__sinit_lock_release>
 8009e54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e58:	6523      	str	r3, [r4, #80]	; 0x50
 8009e5a:	4b13      	ldr	r3, [pc, #76]	; (8009ea8 <__sinit+0x68>)
 8009e5c:	4a13      	ldr	r2, [pc, #76]	; (8009eac <__sinit+0x6c>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e62:	42a3      	cmp	r3, r4
 8009e64:	bf04      	itt	eq
 8009e66:	2301      	moveq	r3, #1
 8009e68:	61a3      	streq	r3, [r4, #24]
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f000 f820 	bl	8009eb0 <__sfp>
 8009e70:	6060      	str	r0, [r4, #4]
 8009e72:	4620      	mov	r0, r4
 8009e74:	f000 f81c 	bl	8009eb0 <__sfp>
 8009e78:	60a0      	str	r0, [r4, #8]
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f000 f818 	bl	8009eb0 <__sfp>
 8009e80:	2200      	movs	r2, #0
 8009e82:	60e0      	str	r0, [r4, #12]
 8009e84:	2104      	movs	r1, #4
 8009e86:	6860      	ldr	r0, [r4, #4]
 8009e88:	f7ff ff82 	bl	8009d90 <std>
 8009e8c:	68a0      	ldr	r0, [r4, #8]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	2109      	movs	r1, #9
 8009e92:	f7ff ff7d 	bl	8009d90 <std>
 8009e96:	68e0      	ldr	r0, [r4, #12]
 8009e98:	2202      	movs	r2, #2
 8009e9a:	2112      	movs	r1, #18
 8009e9c:	f7ff ff78 	bl	8009d90 <std>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	61a3      	str	r3, [r4, #24]
 8009ea4:	e7d2      	b.n	8009e4c <__sinit+0xc>
 8009ea6:	bf00      	nop
 8009ea8:	0800b060 	.word	0x0800b060
 8009eac:	08009dd9 	.word	0x08009dd9

08009eb0 <__sfp>:
 8009eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb2:	4607      	mov	r7, r0
 8009eb4:	f7ff ffac 	bl	8009e10 <__sfp_lock_acquire>
 8009eb8:	4b1e      	ldr	r3, [pc, #120]	; (8009f34 <__sfp+0x84>)
 8009eba:	681e      	ldr	r6, [r3, #0]
 8009ebc:	69b3      	ldr	r3, [r6, #24]
 8009ebe:	b913      	cbnz	r3, 8009ec6 <__sfp+0x16>
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	f7ff ffbd 	bl	8009e40 <__sinit>
 8009ec6:	3648      	adds	r6, #72	; 0x48
 8009ec8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	d503      	bpl.n	8009ed8 <__sfp+0x28>
 8009ed0:	6833      	ldr	r3, [r6, #0]
 8009ed2:	b30b      	cbz	r3, 8009f18 <__sfp+0x68>
 8009ed4:	6836      	ldr	r6, [r6, #0]
 8009ed6:	e7f7      	b.n	8009ec8 <__sfp+0x18>
 8009ed8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009edc:	b9d5      	cbnz	r5, 8009f14 <__sfp+0x64>
 8009ede:	4b16      	ldr	r3, [pc, #88]	; (8009f38 <__sfp+0x88>)
 8009ee0:	60e3      	str	r3, [r4, #12]
 8009ee2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ee6:	6665      	str	r5, [r4, #100]	; 0x64
 8009ee8:	f000 f84c 	bl	8009f84 <__retarget_lock_init_recursive>
 8009eec:	f7ff ff96 	bl	8009e1c <__sfp_lock_release>
 8009ef0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ef4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ef8:	6025      	str	r5, [r4, #0]
 8009efa:	61a5      	str	r5, [r4, #24]
 8009efc:	2208      	movs	r2, #8
 8009efe:	4629      	mov	r1, r5
 8009f00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f04:	f7fe fa48 	bl	8008398 <memset>
 8009f08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f10:	4620      	mov	r0, r4
 8009f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f14:	3468      	adds	r4, #104	; 0x68
 8009f16:	e7d9      	b.n	8009ecc <__sfp+0x1c>
 8009f18:	2104      	movs	r1, #4
 8009f1a:	4638      	mov	r0, r7
 8009f1c:	f7ff ff62 	bl	8009de4 <__sfmoreglue>
 8009f20:	4604      	mov	r4, r0
 8009f22:	6030      	str	r0, [r6, #0]
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d1d5      	bne.n	8009ed4 <__sfp+0x24>
 8009f28:	f7ff ff78 	bl	8009e1c <__sfp_lock_release>
 8009f2c:	230c      	movs	r3, #12
 8009f2e:	603b      	str	r3, [r7, #0]
 8009f30:	e7ee      	b.n	8009f10 <__sfp+0x60>
 8009f32:	bf00      	nop
 8009f34:	0800b060 	.word	0x0800b060
 8009f38:	ffff0001 	.word	0xffff0001

08009f3c <_fwalk_reent>:
 8009f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f40:	4606      	mov	r6, r0
 8009f42:	4688      	mov	r8, r1
 8009f44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f48:	2700      	movs	r7, #0
 8009f4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f4e:	f1b9 0901 	subs.w	r9, r9, #1
 8009f52:	d505      	bpl.n	8009f60 <_fwalk_reent+0x24>
 8009f54:	6824      	ldr	r4, [r4, #0]
 8009f56:	2c00      	cmp	r4, #0
 8009f58:	d1f7      	bne.n	8009f4a <_fwalk_reent+0xe>
 8009f5a:	4638      	mov	r0, r7
 8009f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f60:	89ab      	ldrh	r3, [r5, #12]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d907      	bls.n	8009f76 <_fwalk_reent+0x3a>
 8009f66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	d003      	beq.n	8009f76 <_fwalk_reent+0x3a>
 8009f6e:	4629      	mov	r1, r5
 8009f70:	4630      	mov	r0, r6
 8009f72:	47c0      	blx	r8
 8009f74:	4307      	orrs	r7, r0
 8009f76:	3568      	adds	r5, #104	; 0x68
 8009f78:	e7e9      	b.n	8009f4e <_fwalk_reent+0x12>
	...

08009f7c <_localeconv_r>:
 8009f7c:	4800      	ldr	r0, [pc, #0]	; (8009f80 <_localeconv_r+0x4>)
 8009f7e:	4770      	bx	lr
 8009f80:	20000224 	.word	0x20000224

08009f84 <__retarget_lock_init_recursive>:
 8009f84:	4770      	bx	lr

08009f86 <__retarget_lock_acquire_recursive>:
 8009f86:	4770      	bx	lr

08009f88 <__retarget_lock_release_recursive>:
 8009f88:	4770      	bx	lr

08009f8a <__swhatbuf_r>:
 8009f8a:	b570      	push	{r4, r5, r6, lr}
 8009f8c:	460e      	mov	r6, r1
 8009f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f92:	2900      	cmp	r1, #0
 8009f94:	b096      	sub	sp, #88	; 0x58
 8009f96:	4614      	mov	r4, r2
 8009f98:	461d      	mov	r5, r3
 8009f9a:	da08      	bge.n	8009fae <__swhatbuf_r+0x24>
 8009f9c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	602a      	str	r2, [r5, #0]
 8009fa4:	061a      	lsls	r2, r3, #24
 8009fa6:	d410      	bmi.n	8009fca <__swhatbuf_r+0x40>
 8009fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fac:	e00e      	b.n	8009fcc <__swhatbuf_r+0x42>
 8009fae:	466a      	mov	r2, sp
 8009fb0:	f000 fed2 	bl	800ad58 <_fstat_r>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	dbf1      	blt.n	8009f9c <__swhatbuf_r+0x12>
 8009fb8:	9a01      	ldr	r2, [sp, #4]
 8009fba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009fbe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009fc2:	425a      	negs	r2, r3
 8009fc4:	415a      	adcs	r2, r3
 8009fc6:	602a      	str	r2, [r5, #0]
 8009fc8:	e7ee      	b.n	8009fa8 <__swhatbuf_r+0x1e>
 8009fca:	2340      	movs	r3, #64	; 0x40
 8009fcc:	2000      	movs	r0, #0
 8009fce:	6023      	str	r3, [r4, #0]
 8009fd0:	b016      	add	sp, #88	; 0x58
 8009fd2:	bd70      	pop	{r4, r5, r6, pc}

08009fd4 <__smakebuf_r>:
 8009fd4:	898b      	ldrh	r3, [r1, #12]
 8009fd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fd8:	079d      	lsls	r5, r3, #30
 8009fda:	4606      	mov	r6, r0
 8009fdc:	460c      	mov	r4, r1
 8009fde:	d507      	bpl.n	8009ff0 <__smakebuf_r+0x1c>
 8009fe0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	6123      	str	r3, [r4, #16]
 8009fe8:	2301      	movs	r3, #1
 8009fea:	6163      	str	r3, [r4, #20]
 8009fec:	b002      	add	sp, #8
 8009fee:	bd70      	pop	{r4, r5, r6, pc}
 8009ff0:	ab01      	add	r3, sp, #4
 8009ff2:	466a      	mov	r2, sp
 8009ff4:	f7ff ffc9 	bl	8009f8a <__swhatbuf_r>
 8009ff8:	9900      	ldr	r1, [sp, #0]
 8009ffa:	4605      	mov	r5, r0
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	f000 fc37 	bl	800a870 <_malloc_r>
 800a002:	b948      	cbnz	r0, 800a018 <__smakebuf_r+0x44>
 800a004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a008:	059a      	lsls	r2, r3, #22
 800a00a:	d4ef      	bmi.n	8009fec <__smakebuf_r+0x18>
 800a00c:	f023 0303 	bic.w	r3, r3, #3
 800a010:	f043 0302 	orr.w	r3, r3, #2
 800a014:	81a3      	strh	r3, [r4, #12]
 800a016:	e7e3      	b.n	8009fe0 <__smakebuf_r+0xc>
 800a018:	4b0d      	ldr	r3, [pc, #52]	; (800a050 <__smakebuf_r+0x7c>)
 800a01a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a01c:	89a3      	ldrh	r3, [r4, #12]
 800a01e:	6020      	str	r0, [r4, #0]
 800a020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a024:	81a3      	strh	r3, [r4, #12]
 800a026:	9b00      	ldr	r3, [sp, #0]
 800a028:	6163      	str	r3, [r4, #20]
 800a02a:	9b01      	ldr	r3, [sp, #4]
 800a02c:	6120      	str	r0, [r4, #16]
 800a02e:	b15b      	cbz	r3, 800a048 <__smakebuf_r+0x74>
 800a030:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a034:	4630      	mov	r0, r6
 800a036:	f000 fea1 	bl	800ad7c <_isatty_r>
 800a03a:	b128      	cbz	r0, 800a048 <__smakebuf_r+0x74>
 800a03c:	89a3      	ldrh	r3, [r4, #12]
 800a03e:	f023 0303 	bic.w	r3, r3, #3
 800a042:	f043 0301 	orr.w	r3, r3, #1
 800a046:	81a3      	strh	r3, [r4, #12]
 800a048:	89a0      	ldrh	r0, [r4, #12]
 800a04a:	4305      	orrs	r5, r0
 800a04c:	81a5      	strh	r5, [r4, #12]
 800a04e:	e7cd      	b.n	8009fec <__smakebuf_r+0x18>
 800a050:	08009dd9 	.word	0x08009dd9

0800a054 <malloc>:
 800a054:	4b02      	ldr	r3, [pc, #8]	; (800a060 <malloc+0xc>)
 800a056:	4601      	mov	r1, r0
 800a058:	6818      	ldr	r0, [r3, #0]
 800a05a:	f000 bc09 	b.w	800a870 <_malloc_r>
 800a05e:	bf00      	nop
 800a060:	200000d0 	.word	0x200000d0

0800a064 <_Balloc>:
 800a064:	b570      	push	{r4, r5, r6, lr}
 800a066:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a068:	4604      	mov	r4, r0
 800a06a:	460d      	mov	r5, r1
 800a06c:	b976      	cbnz	r6, 800a08c <_Balloc+0x28>
 800a06e:	2010      	movs	r0, #16
 800a070:	f7ff fff0 	bl	800a054 <malloc>
 800a074:	4602      	mov	r2, r0
 800a076:	6260      	str	r0, [r4, #36]	; 0x24
 800a078:	b920      	cbnz	r0, 800a084 <_Balloc+0x20>
 800a07a:	4b18      	ldr	r3, [pc, #96]	; (800a0dc <_Balloc+0x78>)
 800a07c:	4818      	ldr	r0, [pc, #96]	; (800a0e0 <_Balloc+0x7c>)
 800a07e:	2166      	movs	r1, #102	; 0x66
 800a080:	f000 fe2a 	bl	800acd8 <__assert_func>
 800a084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a088:	6006      	str	r6, [r0, #0]
 800a08a:	60c6      	str	r6, [r0, #12]
 800a08c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a08e:	68f3      	ldr	r3, [r6, #12]
 800a090:	b183      	cbz	r3, 800a0b4 <_Balloc+0x50>
 800a092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a09a:	b9b8      	cbnz	r0, 800a0cc <_Balloc+0x68>
 800a09c:	2101      	movs	r1, #1
 800a09e:	fa01 f605 	lsl.w	r6, r1, r5
 800a0a2:	1d72      	adds	r2, r6, #5
 800a0a4:	0092      	lsls	r2, r2, #2
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f000 fb60 	bl	800a76c <_calloc_r>
 800a0ac:	b160      	cbz	r0, 800a0c8 <_Balloc+0x64>
 800a0ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a0b2:	e00e      	b.n	800a0d2 <_Balloc+0x6e>
 800a0b4:	2221      	movs	r2, #33	; 0x21
 800a0b6:	2104      	movs	r1, #4
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f000 fb57 	bl	800a76c <_calloc_r>
 800a0be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0c0:	60f0      	str	r0, [r6, #12]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d1e4      	bne.n	800a092 <_Balloc+0x2e>
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	bd70      	pop	{r4, r5, r6, pc}
 800a0cc:	6802      	ldr	r2, [r0, #0]
 800a0ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0d8:	e7f7      	b.n	800a0ca <_Balloc+0x66>
 800a0da:	bf00      	nop
 800a0dc:	0800b0a5 	.word	0x0800b0a5
 800a0e0:	0800b188 	.word	0x0800b188

0800a0e4 <_Bfree>:
 800a0e4:	b570      	push	{r4, r5, r6, lr}
 800a0e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a0e8:	4605      	mov	r5, r0
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	b976      	cbnz	r6, 800a10c <_Bfree+0x28>
 800a0ee:	2010      	movs	r0, #16
 800a0f0:	f7ff ffb0 	bl	800a054 <malloc>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	6268      	str	r0, [r5, #36]	; 0x24
 800a0f8:	b920      	cbnz	r0, 800a104 <_Bfree+0x20>
 800a0fa:	4b09      	ldr	r3, [pc, #36]	; (800a120 <_Bfree+0x3c>)
 800a0fc:	4809      	ldr	r0, [pc, #36]	; (800a124 <_Bfree+0x40>)
 800a0fe:	218a      	movs	r1, #138	; 0x8a
 800a100:	f000 fdea 	bl	800acd8 <__assert_func>
 800a104:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a108:	6006      	str	r6, [r0, #0]
 800a10a:	60c6      	str	r6, [r0, #12]
 800a10c:	b13c      	cbz	r4, 800a11e <_Bfree+0x3a>
 800a10e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a110:	6862      	ldr	r2, [r4, #4]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a118:	6021      	str	r1, [r4, #0]
 800a11a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a11e:	bd70      	pop	{r4, r5, r6, pc}
 800a120:	0800b0a5 	.word	0x0800b0a5
 800a124:	0800b188 	.word	0x0800b188

0800a128 <__multadd>:
 800a128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a12c:	690d      	ldr	r5, [r1, #16]
 800a12e:	4607      	mov	r7, r0
 800a130:	460c      	mov	r4, r1
 800a132:	461e      	mov	r6, r3
 800a134:	f101 0c14 	add.w	ip, r1, #20
 800a138:	2000      	movs	r0, #0
 800a13a:	f8dc 3000 	ldr.w	r3, [ip]
 800a13e:	b299      	uxth	r1, r3
 800a140:	fb02 6101 	mla	r1, r2, r1, r6
 800a144:	0c1e      	lsrs	r6, r3, #16
 800a146:	0c0b      	lsrs	r3, r1, #16
 800a148:	fb02 3306 	mla	r3, r2, r6, r3
 800a14c:	b289      	uxth	r1, r1
 800a14e:	3001      	adds	r0, #1
 800a150:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a154:	4285      	cmp	r5, r0
 800a156:	f84c 1b04 	str.w	r1, [ip], #4
 800a15a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a15e:	dcec      	bgt.n	800a13a <__multadd+0x12>
 800a160:	b30e      	cbz	r6, 800a1a6 <__multadd+0x7e>
 800a162:	68a3      	ldr	r3, [r4, #8]
 800a164:	42ab      	cmp	r3, r5
 800a166:	dc19      	bgt.n	800a19c <__multadd+0x74>
 800a168:	6861      	ldr	r1, [r4, #4]
 800a16a:	4638      	mov	r0, r7
 800a16c:	3101      	adds	r1, #1
 800a16e:	f7ff ff79 	bl	800a064 <_Balloc>
 800a172:	4680      	mov	r8, r0
 800a174:	b928      	cbnz	r0, 800a182 <__multadd+0x5a>
 800a176:	4602      	mov	r2, r0
 800a178:	4b0c      	ldr	r3, [pc, #48]	; (800a1ac <__multadd+0x84>)
 800a17a:	480d      	ldr	r0, [pc, #52]	; (800a1b0 <__multadd+0x88>)
 800a17c:	21b5      	movs	r1, #181	; 0xb5
 800a17e:	f000 fdab 	bl	800acd8 <__assert_func>
 800a182:	6922      	ldr	r2, [r4, #16]
 800a184:	3202      	adds	r2, #2
 800a186:	f104 010c 	add.w	r1, r4, #12
 800a18a:	0092      	lsls	r2, r2, #2
 800a18c:	300c      	adds	r0, #12
 800a18e:	f7fe f8f5 	bl	800837c <memcpy>
 800a192:	4621      	mov	r1, r4
 800a194:	4638      	mov	r0, r7
 800a196:	f7ff ffa5 	bl	800a0e4 <_Bfree>
 800a19a:	4644      	mov	r4, r8
 800a19c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a1a0:	3501      	adds	r5, #1
 800a1a2:	615e      	str	r6, [r3, #20]
 800a1a4:	6125      	str	r5, [r4, #16]
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ac:	0800b117 	.word	0x0800b117
 800a1b0:	0800b188 	.word	0x0800b188

0800a1b4 <__hi0bits>:
 800a1b4:	0c03      	lsrs	r3, r0, #16
 800a1b6:	041b      	lsls	r3, r3, #16
 800a1b8:	b9d3      	cbnz	r3, 800a1f0 <__hi0bits+0x3c>
 800a1ba:	0400      	lsls	r0, r0, #16
 800a1bc:	2310      	movs	r3, #16
 800a1be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a1c2:	bf04      	itt	eq
 800a1c4:	0200      	lsleq	r0, r0, #8
 800a1c6:	3308      	addeq	r3, #8
 800a1c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a1cc:	bf04      	itt	eq
 800a1ce:	0100      	lsleq	r0, r0, #4
 800a1d0:	3304      	addeq	r3, #4
 800a1d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a1d6:	bf04      	itt	eq
 800a1d8:	0080      	lsleq	r0, r0, #2
 800a1da:	3302      	addeq	r3, #2
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	db05      	blt.n	800a1ec <__hi0bits+0x38>
 800a1e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a1e4:	f103 0301 	add.w	r3, r3, #1
 800a1e8:	bf08      	it	eq
 800a1ea:	2320      	moveq	r3, #32
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	4770      	bx	lr
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	e7e4      	b.n	800a1be <__hi0bits+0xa>

0800a1f4 <__lo0bits>:
 800a1f4:	6803      	ldr	r3, [r0, #0]
 800a1f6:	f013 0207 	ands.w	r2, r3, #7
 800a1fa:	4601      	mov	r1, r0
 800a1fc:	d00b      	beq.n	800a216 <__lo0bits+0x22>
 800a1fe:	07da      	lsls	r2, r3, #31
 800a200:	d423      	bmi.n	800a24a <__lo0bits+0x56>
 800a202:	0798      	lsls	r0, r3, #30
 800a204:	bf49      	itett	mi
 800a206:	085b      	lsrmi	r3, r3, #1
 800a208:	089b      	lsrpl	r3, r3, #2
 800a20a:	2001      	movmi	r0, #1
 800a20c:	600b      	strmi	r3, [r1, #0]
 800a20e:	bf5c      	itt	pl
 800a210:	600b      	strpl	r3, [r1, #0]
 800a212:	2002      	movpl	r0, #2
 800a214:	4770      	bx	lr
 800a216:	b298      	uxth	r0, r3
 800a218:	b9a8      	cbnz	r0, 800a246 <__lo0bits+0x52>
 800a21a:	0c1b      	lsrs	r3, r3, #16
 800a21c:	2010      	movs	r0, #16
 800a21e:	b2da      	uxtb	r2, r3
 800a220:	b90a      	cbnz	r2, 800a226 <__lo0bits+0x32>
 800a222:	3008      	adds	r0, #8
 800a224:	0a1b      	lsrs	r3, r3, #8
 800a226:	071a      	lsls	r2, r3, #28
 800a228:	bf04      	itt	eq
 800a22a:	091b      	lsreq	r3, r3, #4
 800a22c:	3004      	addeq	r0, #4
 800a22e:	079a      	lsls	r2, r3, #30
 800a230:	bf04      	itt	eq
 800a232:	089b      	lsreq	r3, r3, #2
 800a234:	3002      	addeq	r0, #2
 800a236:	07da      	lsls	r2, r3, #31
 800a238:	d403      	bmi.n	800a242 <__lo0bits+0x4e>
 800a23a:	085b      	lsrs	r3, r3, #1
 800a23c:	f100 0001 	add.w	r0, r0, #1
 800a240:	d005      	beq.n	800a24e <__lo0bits+0x5a>
 800a242:	600b      	str	r3, [r1, #0]
 800a244:	4770      	bx	lr
 800a246:	4610      	mov	r0, r2
 800a248:	e7e9      	b.n	800a21e <__lo0bits+0x2a>
 800a24a:	2000      	movs	r0, #0
 800a24c:	4770      	bx	lr
 800a24e:	2020      	movs	r0, #32
 800a250:	4770      	bx	lr
	...

0800a254 <__i2b>:
 800a254:	b510      	push	{r4, lr}
 800a256:	460c      	mov	r4, r1
 800a258:	2101      	movs	r1, #1
 800a25a:	f7ff ff03 	bl	800a064 <_Balloc>
 800a25e:	4602      	mov	r2, r0
 800a260:	b928      	cbnz	r0, 800a26e <__i2b+0x1a>
 800a262:	4b05      	ldr	r3, [pc, #20]	; (800a278 <__i2b+0x24>)
 800a264:	4805      	ldr	r0, [pc, #20]	; (800a27c <__i2b+0x28>)
 800a266:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a26a:	f000 fd35 	bl	800acd8 <__assert_func>
 800a26e:	2301      	movs	r3, #1
 800a270:	6144      	str	r4, [r0, #20]
 800a272:	6103      	str	r3, [r0, #16]
 800a274:	bd10      	pop	{r4, pc}
 800a276:	bf00      	nop
 800a278:	0800b117 	.word	0x0800b117
 800a27c:	0800b188 	.word	0x0800b188

0800a280 <__multiply>:
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	4691      	mov	r9, r2
 800a286:	690a      	ldr	r2, [r1, #16]
 800a288:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	bfb8      	it	lt
 800a290:	460b      	movlt	r3, r1
 800a292:	460c      	mov	r4, r1
 800a294:	bfbc      	itt	lt
 800a296:	464c      	movlt	r4, r9
 800a298:	4699      	movlt	r9, r3
 800a29a:	6927      	ldr	r7, [r4, #16]
 800a29c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a2a0:	68a3      	ldr	r3, [r4, #8]
 800a2a2:	6861      	ldr	r1, [r4, #4]
 800a2a4:	eb07 060a 	add.w	r6, r7, sl
 800a2a8:	42b3      	cmp	r3, r6
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	bfb8      	it	lt
 800a2ae:	3101      	addlt	r1, #1
 800a2b0:	f7ff fed8 	bl	800a064 <_Balloc>
 800a2b4:	b930      	cbnz	r0, 800a2c4 <__multiply+0x44>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	4b44      	ldr	r3, [pc, #272]	; (800a3cc <__multiply+0x14c>)
 800a2ba:	4845      	ldr	r0, [pc, #276]	; (800a3d0 <__multiply+0x150>)
 800a2bc:	f240 115d 	movw	r1, #349	; 0x15d
 800a2c0:	f000 fd0a 	bl	800acd8 <__assert_func>
 800a2c4:	f100 0514 	add.w	r5, r0, #20
 800a2c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a2cc:	462b      	mov	r3, r5
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	4543      	cmp	r3, r8
 800a2d2:	d321      	bcc.n	800a318 <__multiply+0x98>
 800a2d4:	f104 0314 	add.w	r3, r4, #20
 800a2d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a2dc:	f109 0314 	add.w	r3, r9, #20
 800a2e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a2e4:	9202      	str	r2, [sp, #8]
 800a2e6:	1b3a      	subs	r2, r7, r4
 800a2e8:	3a15      	subs	r2, #21
 800a2ea:	f022 0203 	bic.w	r2, r2, #3
 800a2ee:	3204      	adds	r2, #4
 800a2f0:	f104 0115 	add.w	r1, r4, #21
 800a2f4:	428f      	cmp	r7, r1
 800a2f6:	bf38      	it	cc
 800a2f8:	2204      	movcc	r2, #4
 800a2fa:	9201      	str	r2, [sp, #4]
 800a2fc:	9a02      	ldr	r2, [sp, #8]
 800a2fe:	9303      	str	r3, [sp, #12]
 800a300:	429a      	cmp	r2, r3
 800a302:	d80c      	bhi.n	800a31e <__multiply+0x9e>
 800a304:	2e00      	cmp	r6, #0
 800a306:	dd03      	ble.n	800a310 <__multiply+0x90>
 800a308:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d05a      	beq.n	800a3c6 <__multiply+0x146>
 800a310:	6106      	str	r6, [r0, #16]
 800a312:	b005      	add	sp, #20
 800a314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a318:	f843 2b04 	str.w	r2, [r3], #4
 800a31c:	e7d8      	b.n	800a2d0 <__multiply+0x50>
 800a31e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a322:	f1ba 0f00 	cmp.w	sl, #0
 800a326:	d024      	beq.n	800a372 <__multiply+0xf2>
 800a328:	f104 0e14 	add.w	lr, r4, #20
 800a32c:	46a9      	mov	r9, r5
 800a32e:	f04f 0c00 	mov.w	ip, #0
 800a332:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a336:	f8d9 1000 	ldr.w	r1, [r9]
 800a33a:	fa1f fb82 	uxth.w	fp, r2
 800a33e:	b289      	uxth	r1, r1
 800a340:	fb0a 110b 	mla	r1, sl, fp, r1
 800a344:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a348:	f8d9 2000 	ldr.w	r2, [r9]
 800a34c:	4461      	add	r1, ip
 800a34e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a352:	fb0a c20b 	mla	r2, sl, fp, ip
 800a356:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a35a:	b289      	uxth	r1, r1
 800a35c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a360:	4577      	cmp	r7, lr
 800a362:	f849 1b04 	str.w	r1, [r9], #4
 800a366:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a36a:	d8e2      	bhi.n	800a332 <__multiply+0xb2>
 800a36c:	9a01      	ldr	r2, [sp, #4]
 800a36e:	f845 c002 	str.w	ip, [r5, r2]
 800a372:	9a03      	ldr	r2, [sp, #12]
 800a374:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a378:	3304      	adds	r3, #4
 800a37a:	f1b9 0f00 	cmp.w	r9, #0
 800a37e:	d020      	beq.n	800a3c2 <__multiply+0x142>
 800a380:	6829      	ldr	r1, [r5, #0]
 800a382:	f104 0c14 	add.w	ip, r4, #20
 800a386:	46ae      	mov	lr, r5
 800a388:	f04f 0a00 	mov.w	sl, #0
 800a38c:	f8bc b000 	ldrh.w	fp, [ip]
 800a390:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a394:	fb09 220b 	mla	r2, r9, fp, r2
 800a398:	4492      	add	sl, r2
 800a39a:	b289      	uxth	r1, r1
 800a39c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a3a0:	f84e 1b04 	str.w	r1, [lr], #4
 800a3a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a3a8:	f8be 1000 	ldrh.w	r1, [lr]
 800a3ac:	0c12      	lsrs	r2, r2, #16
 800a3ae:	fb09 1102 	mla	r1, r9, r2, r1
 800a3b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a3b6:	4567      	cmp	r7, ip
 800a3b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a3bc:	d8e6      	bhi.n	800a38c <__multiply+0x10c>
 800a3be:	9a01      	ldr	r2, [sp, #4]
 800a3c0:	50a9      	str	r1, [r5, r2]
 800a3c2:	3504      	adds	r5, #4
 800a3c4:	e79a      	b.n	800a2fc <__multiply+0x7c>
 800a3c6:	3e01      	subs	r6, #1
 800a3c8:	e79c      	b.n	800a304 <__multiply+0x84>
 800a3ca:	bf00      	nop
 800a3cc:	0800b117 	.word	0x0800b117
 800a3d0:	0800b188 	.word	0x0800b188

0800a3d4 <__pow5mult>:
 800a3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3d8:	4615      	mov	r5, r2
 800a3da:	f012 0203 	ands.w	r2, r2, #3
 800a3de:	4606      	mov	r6, r0
 800a3e0:	460f      	mov	r7, r1
 800a3e2:	d007      	beq.n	800a3f4 <__pow5mult+0x20>
 800a3e4:	4c25      	ldr	r4, [pc, #148]	; (800a47c <__pow5mult+0xa8>)
 800a3e6:	3a01      	subs	r2, #1
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3ee:	f7ff fe9b 	bl	800a128 <__multadd>
 800a3f2:	4607      	mov	r7, r0
 800a3f4:	10ad      	asrs	r5, r5, #2
 800a3f6:	d03d      	beq.n	800a474 <__pow5mult+0xa0>
 800a3f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a3fa:	b97c      	cbnz	r4, 800a41c <__pow5mult+0x48>
 800a3fc:	2010      	movs	r0, #16
 800a3fe:	f7ff fe29 	bl	800a054 <malloc>
 800a402:	4602      	mov	r2, r0
 800a404:	6270      	str	r0, [r6, #36]	; 0x24
 800a406:	b928      	cbnz	r0, 800a414 <__pow5mult+0x40>
 800a408:	4b1d      	ldr	r3, [pc, #116]	; (800a480 <__pow5mult+0xac>)
 800a40a:	481e      	ldr	r0, [pc, #120]	; (800a484 <__pow5mult+0xb0>)
 800a40c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a410:	f000 fc62 	bl	800acd8 <__assert_func>
 800a414:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a418:	6004      	str	r4, [r0, #0]
 800a41a:	60c4      	str	r4, [r0, #12]
 800a41c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a420:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a424:	b94c      	cbnz	r4, 800a43a <__pow5mult+0x66>
 800a426:	f240 2171 	movw	r1, #625	; 0x271
 800a42a:	4630      	mov	r0, r6
 800a42c:	f7ff ff12 	bl	800a254 <__i2b>
 800a430:	2300      	movs	r3, #0
 800a432:	f8c8 0008 	str.w	r0, [r8, #8]
 800a436:	4604      	mov	r4, r0
 800a438:	6003      	str	r3, [r0, #0]
 800a43a:	f04f 0900 	mov.w	r9, #0
 800a43e:	07eb      	lsls	r3, r5, #31
 800a440:	d50a      	bpl.n	800a458 <__pow5mult+0x84>
 800a442:	4639      	mov	r1, r7
 800a444:	4622      	mov	r2, r4
 800a446:	4630      	mov	r0, r6
 800a448:	f7ff ff1a 	bl	800a280 <__multiply>
 800a44c:	4639      	mov	r1, r7
 800a44e:	4680      	mov	r8, r0
 800a450:	4630      	mov	r0, r6
 800a452:	f7ff fe47 	bl	800a0e4 <_Bfree>
 800a456:	4647      	mov	r7, r8
 800a458:	106d      	asrs	r5, r5, #1
 800a45a:	d00b      	beq.n	800a474 <__pow5mult+0xa0>
 800a45c:	6820      	ldr	r0, [r4, #0]
 800a45e:	b938      	cbnz	r0, 800a470 <__pow5mult+0x9c>
 800a460:	4622      	mov	r2, r4
 800a462:	4621      	mov	r1, r4
 800a464:	4630      	mov	r0, r6
 800a466:	f7ff ff0b 	bl	800a280 <__multiply>
 800a46a:	6020      	str	r0, [r4, #0]
 800a46c:	f8c0 9000 	str.w	r9, [r0]
 800a470:	4604      	mov	r4, r0
 800a472:	e7e4      	b.n	800a43e <__pow5mult+0x6a>
 800a474:	4638      	mov	r0, r7
 800a476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a47a:	bf00      	nop
 800a47c:	0800b2d8 	.word	0x0800b2d8
 800a480:	0800b0a5 	.word	0x0800b0a5
 800a484:	0800b188 	.word	0x0800b188

0800a488 <__lshift>:
 800a488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a48c:	460c      	mov	r4, r1
 800a48e:	6849      	ldr	r1, [r1, #4]
 800a490:	6923      	ldr	r3, [r4, #16]
 800a492:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a496:	68a3      	ldr	r3, [r4, #8]
 800a498:	4607      	mov	r7, r0
 800a49a:	4691      	mov	r9, r2
 800a49c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4a0:	f108 0601 	add.w	r6, r8, #1
 800a4a4:	42b3      	cmp	r3, r6
 800a4a6:	db0b      	blt.n	800a4c0 <__lshift+0x38>
 800a4a8:	4638      	mov	r0, r7
 800a4aa:	f7ff fddb 	bl	800a064 <_Balloc>
 800a4ae:	4605      	mov	r5, r0
 800a4b0:	b948      	cbnz	r0, 800a4c6 <__lshift+0x3e>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	4b2a      	ldr	r3, [pc, #168]	; (800a560 <__lshift+0xd8>)
 800a4b6:	482b      	ldr	r0, [pc, #172]	; (800a564 <__lshift+0xdc>)
 800a4b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a4bc:	f000 fc0c 	bl	800acd8 <__assert_func>
 800a4c0:	3101      	adds	r1, #1
 800a4c2:	005b      	lsls	r3, r3, #1
 800a4c4:	e7ee      	b.n	800a4a4 <__lshift+0x1c>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	f100 0114 	add.w	r1, r0, #20
 800a4cc:	f100 0210 	add.w	r2, r0, #16
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	4553      	cmp	r3, sl
 800a4d4:	db37      	blt.n	800a546 <__lshift+0xbe>
 800a4d6:	6920      	ldr	r0, [r4, #16]
 800a4d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4dc:	f104 0314 	add.w	r3, r4, #20
 800a4e0:	f019 091f 	ands.w	r9, r9, #31
 800a4e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a4ec:	d02f      	beq.n	800a54e <__lshift+0xc6>
 800a4ee:	f1c9 0e20 	rsb	lr, r9, #32
 800a4f2:	468a      	mov	sl, r1
 800a4f4:	f04f 0c00 	mov.w	ip, #0
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	fa02 f209 	lsl.w	r2, r2, r9
 800a4fe:	ea42 020c 	orr.w	r2, r2, ip
 800a502:	f84a 2b04 	str.w	r2, [sl], #4
 800a506:	f853 2b04 	ldr.w	r2, [r3], #4
 800a50a:	4298      	cmp	r0, r3
 800a50c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a510:	d8f2      	bhi.n	800a4f8 <__lshift+0x70>
 800a512:	1b03      	subs	r3, r0, r4
 800a514:	3b15      	subs	r3, #21
 800a516:	f023 0303 	bic.w	r3, r3, #3
 800a51a:	3304      	adds	r3, #4
 800a51c:	f104 0215 	add.w	r2, r4, #21
 800a520:	4290      	cmp	r0, r2
 800a522:	bf38      	it	cc
 800a524:	2304      	movcc	r3, #4
 800a526:	f841 c003 	str.w	ip, [r1, r3]
 800a52a:	f1bc 0f00 	cmp.w	ip, #0
 800a52e:	d001      	beq.n	800a534 <__lshift+0xac>
 800a530:	f108 0602 	add.w	r6, r8, #2
 800a534:	3e01      	subs	r6, #1
 800a536:	4638      	mov	r0, r7
 800a538:	612e      	str	r6, [r5, #16]
 800a53a:	4621      	mov	r1, r4
 800a53c:	f7ff fdd2 	bl	800a0e4 <_Bfree>
 800a540:	4628      	mov	r0, r5
 800a542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a546:	f842 0f04 	str.w	r0, [r2, #4]!
 800a54a:	3301      	adds	r3, #1
 800a54c:	e7c1      	b.n	800a4d2 <__lshift+0x4a>
 800a54e:	3904      	subs	r1, #4
 800a550:	f853 2b04 	ldr.w	r2, [r3], #4
 800a554:	f841 2f04 	str.w	r2, [r1, #4]!
 800a558:	4298      	cmp	r0, r3
 800a55a:	d8f9      	bhi.n	800a550 <__lshift+0xc8>
 800a55c:	e7ea      	b.n	800a534 <__lshift+0xac>
 800a55e:	bf00      	nop
 800a560:	0800b117 	.word	0x0800b117
 800a564:	0800b188 	.word	0x0800b188

0800a568 <__mcmp>:
 800a568:	b530      	push	{r4, r5, lr}
 800a56a:	6902      	ldr	r2, [r0, #16]
 800a56c:	690c      	ldr	r4, [r1, #16]
 800a56e:	1b12      	subs	r2, r2, r4
 800a570:	d10e      	bne.n	800a590 <__mcmp+0x28>
 800a572:	f100 0314 	add.w	r3, r0, #20
 800a576:	3114      	adds	r1, #20
 800a578:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a57c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a580:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a584:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a588:	42a5      	cmp	r5, r4
 800a58a:	d003      	beq.n	800a594 <__mcmp+0x2c>
 800a58c:	d305      	bcc.n	800a59a <__mcmp+0x32>
 800a58e:	2201      	movs	r2, #1
 800a590:	4610      	mov	r0, r2
 800a592:	bd30      	pop	{r4, r5, pc}
 800a594:	4283      	cmp	r3, r0
 800a596:	d3f3      	bcc.n	800a580 <__mcmp+0x18>
 800a598:	e7fa      	b.n	800a590 <__mcmp+0x28>
 800a59a:	f04f 32ff 	mov.w	r2, #4294967295
 800a59e:	e7f7      	b.n	800a590 <__mcmp+0x28>

0800a5a0 <__mdiff>:
 800a5a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a4:	460c      	mov	r4, r1
 800a5a6:	4606      	mov	r6, r0
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	4690      	mov	r8, r2
 800a5ae:	f7ff ffdb 	bl	800a568 <__mcmp>
 800a5b2:	1e05      	subs	r5, r0, #0
 800a5b4:	d110      	bne.n	800a5d8 <__mdiff+0x38>
 800a5b6:	4629      	mov	r1, r5
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	f7ff fd53 	bl	800a064 <_Balloc>
 800a5be:	b930      	cbnz	r0, 800a5ce <__mdiff+0x2e>
 800a5c0:	4b3a      	ldr	r3, [pc, #232]	; (800a6ac <__mdiff+0x10c>)
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	f240 2132 	movw	r1, #562	; 0x232
 800a5c8:	4839      	ldr	r0, [pc, #228]	; (800a6b0 <__mdiff+0x110>)
 800a5ca:	f000 fb85 	bl	800acd8 <__assert_func>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a5d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d8:	bfa4      	itt	ge
 800a5da:	4643      	movge	r3, r8
 800a5dc:	46a0      	movge	r8, r4
 800a5de:	4630      	mov	r0, r6
 800a5e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a5e4:	bfa6      	itte	ge
 800a5e6:	461c      	movge	r4, r3
 800a5e8:	2500      	movge	r5, #0
 800a5ea:	2501      	movlt	r5, #1
 800a5ec:	f7ff fd3a 	bl	800a064 <_Balloc>
 800a5f0:	b920      	cbnz	r0, 800a5fc <__mdiff+0x5c>
 800a5f2:	4b2e      	ldr	r3, [pc, #184]	; (800a6ac <__mdiff+0x10c>)
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a5fa:	e7e5      	b.n	800a5c8 <__mdiff+0x28>
 800a5fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a600:	6926      	ldr	r6, [r4, #16]
 800a602:	60c5      	str	r5, [r0, #12]
 800a604:	f104 0914 	add.w	r9, r4, #20
 800a608:	f108 0514 	add.w	r5, r8, #20
 800a60c:	f100 0e14 	add.w	lr, r0, #20
 800a610:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a614:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a618:	f108 0210 	add.w	r2, r8, #16
 800a61c:	46f2      	mov	sl, lr
 800a61e:	2100      	movs	r1, #0
 800a620:	f859 3b04 	ldr.w	r3, [r9], #4
 800a624:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a628:	fa1f f883 	uxth.w	r8, r3
 800a62c:	fa11 f18b 	uxtah	r1, r1, fp
 800a630:	0c1b      	lsrs	r3, r3, #16
 800a632:	eba1 0808 	sub.w	r8, r1, r8
 800a636:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a63a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a63e:	fa1f f888 	uxth.w	r8, r8
 800a642:	1419      	asrs	r1, r3, #16
 800a644:	454e      	cmp	r6, r9
 800a646:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a64a:	f84a 3b04 	str.w	r3, [sl], #4
 800a64e:	d8e7      	bhi.n	800a620 <__mdiff+0x80>
 800a650:	1b33      	subs	r3, r6, r4
 800a652:	3b15      	subs	r3, #21
 800a654:	f023 0303 	bic.w	r3, r3, #3
 800a658:	3304      	adds	r3, #4
 800a65a:	3415      	adds	r4, #21
 800a65c:	42a6      	cmp	r6, r4
 800a65e:	bf38      	it	cc
 800a660:	2304      	movcc	r3, #4
 800a662:	441d      	add	r5, r3
 800a664:	4473      	add	r3, lr
 800a666:	469e      	mov	lr, r3
 800a668:	462e      	mov	r6, r5
 800a66a:	4566      	cmp	r6, ip
 800a66c:	d30e      	bcc.n	800a68c <__mdiff+0xec>
 800a66e:	f10c 0203 	add.w	r2, ip, #3
 800a672:	1b52      	subs	r2, r2, r5
 800a674:	f022 0203 	bic.w	r2, r2, #3
 800a678:	3d03      	subs	r5, #3
 800a67a:	45ac      	cmp	ip, r5
 800a67c:	bf38      	it	cc
 800a67e:	2200      	movcc	r2, #0
 800a680:	441a      	add	r2, r3
 800a682:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a686:	b17b      	cbz	r3, 800a6a8 <__mdiff+0x108>
 800a688:	6107      	str	r7, [r0, #16]
 800a68a:	e7a3      	b.n	800a5d4 <__mdiff+0x34>
 800a68c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a690:	fa11 f288 	uxtah	r2, r1, r8
 800a694:	1414      	asrs	r4, r2, #16
 800a696:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a69a:	b292      	uxth	r2, r2
 800a69c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a6a0:	f84e 2b04 	str.w	r2, [lr], #4
 800a6a4:	1421      	asrs	r1, r4, #16
 800a6a6:	e7e0      	b.n	800a66a <__mdiff+0xca>
 800a6a8:	3f01      	subs	r7, #1
 800a6aa:	e7ea      	b.n	800a682 <__mdiff+0xe2>
 800a6ac:	0800b117 	.word	0x0800b117
 800a6b0:	0800b188 	.word	0x0800b188

0800a6b4 <__d2b>:
 800a6b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6b8:	4689      	mov	r9, r1
 800a6ba:	2101      	movs	r1, #1
 800a6bc:	ec57 6b10 	vmov	r6, r7, d0
 800a6c0:	4690      	mov	r8, r2
 800a6c2:	f7ff fccf 	bl	800a064 <_Balloc>
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	b930      	cbnz	r0, 800a6d8 <__d2b+0x24>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	4b25      	ldr	r3, [pc, #148]	; (800a764 <__d2b+0xb0>)
 800a6ce:	4826      	ldr	r0, [pc, #152]	; (800a768 <__d2b+0xb4>)
 800a6d0:	f240 310a 	movw	r1, #778	; 0x30a
 800a6d4:	f000 fb00 	bl	800acd8 <__assert_func>
 800a6d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a6dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a6e0:	bb35      	cbnz	r5, 800a730 <__d2b+0x7c>
 800a6e2:	2e00      	cmp	r6, #0
 800a6e4:	9301      	str	r3, [sp, #4]
 800a6e6:	d028      	beq.n	800a73a <__d2b+0x86>
 800a6e8:	4668      	mov	r0, sp
 800a6ea:	9600      	str	r6, [sp, #0]
 800a6ec:	f7ff fd82 	bl	800a1f4 <__lo0bits>
 800a6f0:	9900      	ldr	r1, [sp, #0]
 800a6f2:	b300      	cbz	r0, 800a736 <__d2b+0x82>
 800a6f4:	9a01      	ldr	r2, [sp, #4]
 800a6f6:	f1c0 0320 	rsb	r3, r0, #32
 800a6fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a6fe:	430b      	orrs	r3, r1
 800a700:	40c2      	lsrs	r2, r0
 800a702:	6163      	str	r3, [r4, #20]
 800a704:	9201      	str	r2, [sp, #4]
 800a706:	9b01      	ldr	r3, [sp, #4]
 800a708:	61a3      	str	r3, [r4, #24]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	bf14      	ite	ne
 800a70e:	2202      	movne	r2, #2
 800a710:	2201      	moveq	r2, #1
 800a712:	6122      	str	r2, [r4, #16]
 800a714:	b1d5      	cbz	r5, 800a74c <__d2b+0x98>
 800a716:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a71a:	4405      	add	r5, r0
 800a71c:	f8c9 5000 	str.w	r5, [r9]
 800a720:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a724:	f8c8 0000 	str.w	r0, [r8]
 800a728:	4620      	mov	r0, r4
 800a72a:	b003      	add	sp, #12
 800a72c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a734:	e7d5      	b.n	800a6e2 <__d2b+0x2e>
 800a736:	6161      	str	r1, [r4, #20]
 800a738:	e7e5      	b.n	800a706 <__d2b+0x52>
 800a73a:	a801      	add	r0, sp, #4
 800a73c:	f7ff fd5a 	bl	800a1f4 <__lo0bits>
 800a740:	9b01      	ldr	r3, [sp, #4]
 800a742:	6163      	str	r3, [r4, #20]
 800a744:	2201      	movs	r2, #1
 800a746:	6122      	str	r2, [r4, #16]
 800a748:	3020      	adds	r0, #32
 800a74a:	e7e3      	b.n	800a714 <__d2b+0x60>
 800a74c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a750:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a754:	f8c9 0000 	str.w	r0, [r9]
 800a758:	6918      	ldr	r0, [r3, #16]
 800a75a:	f7ff fd2b 	bl	800a1b4 <__hi0bits>
 800a75e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a762:	e7df      	b.n	800a724 <__d2b+0x70>
 800a764:	0800b117 	.word	0x0800b117
 800a768:	0800b188 	.word	0x0800b188

0800a76c <_calloc_r>:
 800a76c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a76e:	fba1 2402 	umull	r2, r4, r1, r2
 800a772:	b94c      	cbnz	r4, 800a788 <_calloc_r+0x1c>
 800a774:	4611      	mov	r1, r2
 800a776:	9201      	str	r2, [sp, #4]
 800a778:	f000 f87a 	bl	800a870 <_malloc_r>
 800a77c:	9a01      	ldr	r2, [sp, #4]
 800a77e:	4605      	mov	r5, r0
 800a780:	b930      	cbnz	r0, 800a790 <_calloc_r+0x24>
 800a782:	4628      	mov	r0, r5
 800a784:	b003      	add	sp, #12
 800a786:	bd30      	pop	{r4, r5, pc}
 800a788:	220c      	movs	r2, #12
 800a78a:	6002      	str	r2, [r0, #0]
 800a78c:	2500      	movs	r5, #0
 800a78e:	e7f8      	b.n	800a782 <_calloc_r+0x16>
 800a790:	4621      	mov	r1, r4
 800a792:	f7fd fe01 	bl	8008398 <memset>
 800a796:	e7f4      	b.n	800a782 <_calloc_r+0x16>

0800a798 <_free_r>:
 800a798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a79a:	2900      	cmp	r1, #0
 800a79c:	d044      	beq.n	800a828 <_free_r+0x90>
 800a79e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7a2:	9001      	str	r0, [sp, #4]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f1a1 0404 	sub.w	r4, r1, #4
 800a7aa:	bfb8      	it	lt
 800a7ac:	18e4      	addlt	r4, r4, r3
 800a7ae:	f000 fb19 	bl	800ade4 <__malloc_lock>
 800a7b2:	4a1e      	ldr	r2, [pc, #120]	; (800a82c <_free_r+0x94>)
 800a7b4:	9801      	ldr	r0, [sp, #4]
 800a7b6:	6813      	ldr	r3, [r2, #0]
 800a7b8:	b933      	cbnz	r3, 800a7c8 <_free_r+0x30>
 800a7ba:	6063      	str	r3, [r4, #4]
 800a7bc:	6014      	str	r4, [r2, #0]
 800a7be:	b003      	add	sp, #12
 800a7c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7c4:	f000 bb14 	b.w	800adf0 <__malloc_unlock>
 800a7c8:	42a3      	cmp	r3, r4
 800a7ca:	d908      	bls.n	800a7de <_free_r+0x46>
 800a7cc:	6825      	ldr	r5, [r4, #0]
 800a7ce:	1961      	adds	r1, r4, r5
 800a7d0:	428b      	cmp	r3, r1
 800a7d2:	bf01      	itttt	eq
 800a7d4:	6819      	ldreq	r1, [r3, #0]
 800a7d6:	685b      	ldreq	r3, [r3, #4]
 800a7d8:	1949      	addeq	r1, r1, r5
 800a7da:	6021      	streq	r1, [r4, #0]
 800a7dc:	e7ed      	b.n	800a7ba <_free_r+0x22>
 800a7de:	461a      	mov	r2, r3
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	b10b      	cbz	r3, 800a7e8 <_free_r+0x50>
 800a7e4:	42a3      	cmp	r3, r4
 800a7e6:	d9fa      	bls.n	800a7de <_free_r+0x46>
 800a7e8:	6811      	ldr	r1, [r2, #0]
 800a7ea:	1855      	adds	r5, r2, r1
 800a7ec:	42a5      	cmp	r5, r4
 800a7ee:	d10b      	bne.n	800a808 <_free_r+0x70>
 800a7f0:	6824      	ldr	r4, [r4, #0]
 800a7f2:	4421      	add	r1, r4
 800a7f4:	1854      	adds	r4, r2, r1
 800a7f6:	42a3      	cmp	r3, r4
 800a7f8:	6011      	str	r1, [r2, #0]
 800a7fa:	d1e0      	bne.n	800a7be <_free_r+0x26>
 800a7fc:	681c      	ldr	r4, [r3, #0]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	6053      	str	r3, [r2, #4]
 800a802:	4421      	add	r1, r4
 800a804:	6011      	str	r1, [r2, #0]
 800a806:	e7da      	b.n	800a7be <_free_r+0x26>
 800a808:	d902      	bls.n	800a810 <_free_r+0x78>
 800a80a:	230c      	movs	r3, #12
 800a80c:	6003      	str	r3, [r0, #0]
 800a80e:	e7d6      	b.n	800a7be <_free_r+0x26>
 800a810:	6825      	ldr	r5, [r4, #0]
 800a812:	1961      	adds	r1, r4, r5
 800a814:	428b      	cmp	r3, r1
 800a816:	bf04      	itt	eq
 800a818:	6819      	ldreq	r1, [r3, #0]
 800a81a:	685b      	ldreq	r3, [r3, #4]
 800a81c:	6063      	str	r3, [r4, #4]
 800a81e:	bf04      	itt	eq
 800a820:	1949      	addeq	r1, r1, r5
 800a822:	6021      	streq	r1, [r4, #0]
 800a824:	6054      	str	r4, [r2, #4]
 800a826:	e7ca      	b.n	800a7be <_free_r+0x26>
 800a828:	b003      	add	sp, #12
 800a82a:	bd30      	pop	{r4, r5, pc}
 800a82c:	20000564 	.word	0x20000564

0800a830 <sbrk_aligned>:
 800a830:	b570      	push	{r4, r5, r6, lr}
 800a832:	4e0e      	ldr	r6, [pc, #56]	; (800a86c <sbrk_aligned+0x3c>)
 800a834:	460c      	mov	r4, r1
 800a836:	6831      	ldr	r1, [r6, #0]
 800a838:	4605      	mov	r5, r0
 800a83a:	b911      	cbnz	r1, 800a842 <sbrk_aligned+0x12>
 800a83c:	f000 f9e6 	bl	800ac0c <_sbrk_r>
 800a840:	6030      	str	r0, [r6, #0]
 800a842:	4621      	mov	r1, r4
 800a844:	4628      	mov	r0, r5
 800a846:	f000 f9e1 	bl	800ac0c <_sbrk_r>
 800a84a:	1c43      	adds	r3, r0, #1
 800a84c:	d00a      	beq.n	800a864 <sbrk_aligned+0x34>
 800a84e:	1cc4      	adds	r4, r0, #3
 800a850:	f024 0403 	bic.w	r4, r4, #3
 800a854:	42a0      	cmp	r0, r4
 800a856:	d007      	beq.n	800a868 <sbrk_aligned+0x38>
 800a858:	1a21      	subs	r1, r4, r0
 800a85a:	4628      	mov	r0, r5
 800a85c:	f000 f9d6 	bl	800ac0c <_sbrk_r>
 800a860:	3001      	adds	r0, #1
 800a862:	d101      	bne.n	800a868 <sbrk_aligned+0x38>
 800a864:	f04f 34ff 	mov.w	r4, #4294967295
 800a868:	4620      	mov	r0, r4
 800a86a:	bd70      	pop	{r4, r5, r6, pc}
 800a86c:	20000568 	.word	0x20000568

0800a870 <_malloc_r>:
 800a870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a874:	1ccd      	adds	r5, r1, #3
 800a876:	f025 0503 	bic.w	r5, r5, #3
 800a87a:	3508      	adds	r5, #8
 800a87c:	2d0c      	cmp	r5, #12
 800a87e:	bf38      	it	cc
 800a880:	250c      	movcc	r5, #12
 800a882:	2d00      	cmp	r5, #0
 800a884:	4607      	mov	r7, r0
 800a886:	db01      	blt.n	800a88c <_malloc_r+0x1c>
 800a888:	42a9      	cmp	r1, r5
 800a88a:	d905      	bls.n	800a898 <_malloc_r+0x28>
 800a88c:	230c      	movs	r3, #12
 800a88e:	603b      	str	r3, [r7, #0]
 800a890:	2600      	movs	r6, #0
 800a892:	4630      	mov	r0, r6
 800a894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a898:	4e2e      	ldr	r6, [pc, #184]	; (800a954 <_malloc_r+0xe4>)
 800a89a:	f000 faa3 	bl	800ade4 <__malloc_lock>
 800a89e:	6833      	ldr	r3, [r6, #0]
 800a8a0:	461c      	mov	r4, r3
 800a8a2:	bb34      	cbnz	r4, 800a8f2 <_malloc_r+0x82>
 800a8a4:	4629      	mov	r1, r5
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	f7ff ffc2 	bl	800a830 <sbrk_aligned>
 800a8ac:	1c43      	adds	r3, r0, #1
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	d14d      	bne.n	800a94e <_malloc_r+0xde>
 800a8b2:	6834      	ldr	r4, [r6, #0]
 800a8b4:	4626      	mov	r6, r4
 800a8b6:	2e00      	cmp	r6, #0
 800a8b8:	d140      	bne.n	800a93c <_malloc_r+0xcc>
 800a8ba:	6823      	ldr	r3, [r4, #0]
 800a8bc:	4631      	mov	r1, r6
 800a8be:	4638      	mov	r0, r7
 800a8c0:	eb04 0803 	add.w	r8, r4, r3
 800a8c4:	f000 f9a2 	bl	800ac0c <_sbrk_r>
 800a8c8:	4580      	cmp	r8, r0
 800a8ca:	d13a      	bne.n	800a942 <_malloc_r+0xd2>
 800a8cc:	6821      	ldr	r1, [r4, #0]
 800a8ce:	3503      	adds	r5, #3
 800a8d0:	1a6d      	subs	r5, r5, r1
 800a8d2:	f025 0503 	bic.w	r5, r5, #3
 800a8d6:	3508      	adds	r5, #8
 800a8d8:	2d0c      	cmp	r5, #12
 800a8da:	bf38      	it	cc
 800a8dc:	250c      	movcc	r5, #12
 800a8de:	4629      	mov	r1, r5
 800a8e0:	4638      	mov	r0, r7
 800a8e2:	f7ff ffa5 	bl	800a830 <sbrk_aligned>
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	d02b      	beq.n	800a942 <_malloc_r+0xd2>
 800a8ea:	6823      	ldr	r3, [r4, #0]
 800a8ec:	442b      	add	r3, r5
 800a8ee:	6023      	str	r3, [r4, #0]
 800a8f0:	e00e      	b.n	800a910 <_malloc_r+0xa0>
 800a8f2:	6822      	ldr	r2, [r4, #0]
 800a8f4:	1b52      	subs	r2, r2, r5
 800a8f6:	d41e      	bmi.n	800a936 <_malloc_r+0xc6>
 800a8f8:	2a0b      	cmp	r2, #11
 800a8fa:	d916      	bls.n	800a92a <_malloc_r+0xba>
 800a8fc:	1961      	adds	r1, r4, r5
 800a8fe:	42a3      	cmp	r3, r4
 800a900:	6025      	str	r5, [r4, #0]
 800a902:	bf18      	it	ne
 800a904:	6059      	strne	r1, [r3, #4]
 800a906:	6863      	ldr	r3, [r4, #4]
 800a908:	bf08      	it	eq
 800a90a:	6031      	streq	r1, [r6, #0]
 800a90c:	5162      	str	r2, [r4, r5]
 800a90e:	604b      	str	r3, [r1, #4]
 800a910:	4638      	mov	r0, r7
 800a912:	f104 060b 	add.w	r6, r4, #11
 800a916:	f000 fa6b 	bl	800adf0 <__malloc_unlock>
 800a91a:	f026 0607 	bic.w	r6, r6, #7
 800a91e:	1d23      	adds	r3, r4, #4
 800a920:	1af2      	subs	r2, r6, r3
 800a922:	d0b6      	beq.n	800a892 <_malloc_r+0x22>
 800a924:	1b9b      	subs	r3, r3, r6
 800a926:	50a3      	str	r3, [r4, r2]
 800a928:	e7b3      	b.n	800a892 <_malloc_r+0x22>
 800a92a:	6862      	ldr	r2, [r4, #4]
 800a92c:	42a3      	cmp	r3, r4
 800a92e:	bf0c      	ite	eq
 800a930:	6032      	streq	r2, [r6, #0]
 800a932:	605a      	strne	r2, [r3, #4]
 800a934:	e7ec      	b.n	800a910 <_malloc_r+0xa0>
 800a936:	4623      	mov	r3, r4
 800a938:	6864      	ldr	r4, [r4, #4]
 800a93a:	e7b2      	b.n	800a8a2 <_malloc_r+0x32>
 800a93c:	4634      	mov	r4, r6
 800a93e:	6876      	ldr	r6, [r6, #4]
 800a940:	e7b9      	b.n	800a8b6 <_malloc_r+0x46>
 800a942:	230c      	movs	r3, #12
 800a944:	603b      	str	r3, [r7, #0]
 800a946:	4638      	mov	r0, r7
 800a948:	f000 fa52 	bl	800adf0 <__malloc_unlock>
 800a94c:	e7a1      	b.n	800a892 <_malloc_r+0x22>
 800a94e:	6025      	str	r5, [r4, #0]
 800a950:	e7de      	b.n	800a910 <_malloc_r+0xa0>
 800a952:	bf00      	nop
 800a954:	20000564 	.word	0x20000564

0800a958 <__sfputc_r>:
 800a958:	6893      	ldr	r3, [r2, #8]
 800a95a:	3b01      	subs	r3, #1
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	b410      	push	{r4}
 800a960:	6093      	str	r3, [r2, #8]
 800a962:	da08      	bge.n	800a976 <__sfputc_r+0x1e>
 800a964:	6994      	ldr	r4, [r2, #24]
 800a966:	42a3      	cmp	r3, r4
 800a968:	db01      	blt.n	800a96e <__sfputc_r+0x16>
 800a96a:	290a      	cmp	r1, #10
 800a96c:	d103      	bne.n	800a976 <__sfputc_r+0x1e>
 800a96e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a972:	f7fe ba11 	b.w	8008d98 <__swbuf_r>
 800a976:	6813      	ldr	r3, [r2, #0]
 800a978:	1c58      	adds	r0, r3, #1
 800a97a:	6010      	str	r0, [r2, #0]
 800a97c:	7019      	strb	r1, [r3, #0]
 800a97e:	4608      	mov	r0, r1
 800a980:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <__sfputs_r>:
 800a986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a988:	4606      	mov	r6, r0
 800a98a:	460f      	mov	r7, r1
 800a98c:	4614      	mov	r4, r2
 800a98e:	18d5      	adds	r5, r2, r3
 800a990:	42ac      	cmp	r4, r5
 800a992:	d101      	bne.n	800a998 <__sfputs_r+0x12>
 800a994:	2000      	movs	r0, #0
 800a996:	e007      	b.n	800a9a8 <__sfputs_r+0x22>
 800a998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a99c:	463a      	mov	r2, r7
 800a99e:	4630      	mov	r0, r6
 800a9a0:	f7ff ffda 	bl	800a958 <__sfputc_r>
 800a9a4:	1c43      	adds	r3, r0, #1
 800a9a6:	d1f3      	bne.n	800a990 <__sfputs_r+0xa>
 800a9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9ac <_vfiprintf_r>:
 800a9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b0:	460d      	mov	r5, r1
 800a9b2:	b09d      	sub	sp, #116	; 0x74
 800a9b4:	4614      	mov	r4, r2
 800a9b6:	4698      	mov	r8, r3
 800a9b8:	4606      	mov	r6, r0
 800a9ba:	b118      	cbz	r0, 800a9c4 <_vfiprintf_r+0x18>
 800a9bc:	6983      	ldr	r3, [r0, #24]
 800a9be:	b90b      	cbnz	r3, 800a9c4 <_vfiprintf_r+0x18>
 800a9c0:	f7ff fa3e 	bl	8009e40 <__sinit>
 800a9c4:	4b89      	ldr	r3, [pc, #548]	; (800abec <_vfiprintf_r+0x240>)
 800a9c6:	429d      	cmp	r5, r3
 800a9c8:	d11b      	bne.n	800aa02 <_vfiprintf_r+0x56>
 800a9ca:	6875      	ldr	r5, [r6, #4]
 800a9cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9ce:	07d9      	lsls	r1, r3, #31
 800a9d0:	d405      	bmi.n	800a9de <_vfiprintf_r+0x32>
 800a9d2:	89ab      	ldrh	r3, [r5, #12]
 800a9d4:	059a      	lsls	r2, r3, #22
 800a9d6:	d402      	bmi.n	800a9de <_vfiprintf_r+0x32>
 800a9d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9da:	f7ff fad4 	bl	8009f86 <__retarget_lock_acquire_recursive>
 800a9de:	89ab      	ldrh	r3, [r5, #12]
 800a9e0:	071b      	lsls	r3, r3, #28
 800a9e2:	d501      	bpl.n	800a9e8 <_vfiprintf_r+0x3c>
 800a9e4:	692b      	ldr	r3, [r5, #16]
 800a9e6:	b9eb      	cbnz	r3, 800aa24 <_vfiprintf_r+0x78>
 800a9e8:	4629      	mov	r1, r5
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	f7fe fa26 	bl	8008e3c <__swsetup_r>
 800a9f0:	b1c0      	cbz	r0, 800aa24 <_vfiprintf_r+0x78>
 800a9f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9f4:	07dc      	lsls	r4, r3, #31
 800a9f6:	d50e      	bpl.n	800aa16 <_vfiprintf_r+0x6a>
 800a9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9fc:	b01d      	add	sp, #116	; 0x74
 800a9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa02:	4b7b      	ldr	r3, [pc, #492]	; (800abf0 <_vfiprintf_r+0x244>)
 800aa04:	429d      	cmp	r5, r3
 800aa06:	d101      	bne.n	800aa0c <_vfiprintf_r+0x60>
 800aa08:	68b5      	ldr	r5, [r6, #8]
 800aa0a:	e7df      	b.n	800a9cc <_vfiprintf_r+0x20>
 800aa0c:	4b79      	ldr	r3, [pc, #484]	; (800abf4 <_vfiprintf_r+0x248>)
 800aa0e:	429d      	cmp	r5, r3
 800aa10:	bf08      	it	eq
 800aa12:	68f5      	ldreq	r5, [r6, #12]
 800aa14:	e7da      	b.n	800a9cc <_vfiprintf_r+0x20>
 800aa16:	89ab      	ldrh	r3, [r5, #12]
 800aa18:	0598      	lsls	r0, r3, #22
 800aa1a:	d4ed      	bmi.n	800a9f8 <_vfiprintf_r+0x4c>
 800aa1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa1e:	f7ff fab3 	bl	8009f88 <__retarget_lock_release_recursive>
 800aa22:	e7e9      	b.n	800a9f8 <_vfiprintf_r+0x4c>
 800aa24:	2300      	movs	r3, #0
 800aa26:	9309      	str	r3, [sp, #36]	; 0x24
 800aa28:	2320      	movs	r3, #32
 800aa2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa32:	2330      	movs	r3, #48	; 0x30
 800aa34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800abf8 <_vfiprintf_r+0x24c>
 800aa38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa3c:	f04f 0901 	mov.w	r9, #1
 800aa40:	4623      	mov	r3, r4
 800aa42:	469a      	mov	sl, r3
 800aa44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa48:	b10a      	cbz	r2, 800aa4e <_vfiprintf_r+0xa2>
 800aa4a:	2a25      	cmp	r2, #37	; 0x25
 800aa4c:	d1f9      	bne.n	800aa42 <_vfiprintf_r+0x96>
 800aa4e:	ebba 0b04 	subs.w	fp, sl, r4
 800aa52:	d00b      	beq.n	800aa6c <_vfiprintf_r+0xc0>
 800aa54:	465b      	mov	r3, fp
 800aa56:	4622      	mov	r2, r4
 800aa58:	4629      	mov	r1, r5
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	f7ff ff93 	bl	800a986 <__sfputs_r>
 800aa60:	3001      	adds	r0, #1
 800aa62:	f000 80aa 	beq.w	800abba <_vfiprintf_r+0x20e>
 800aa66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa68:	445a      	add	r2, fp
 800aa6a:	9209      	str	r2, [sp, #36]	; 0x24
 800aa6c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 80a2 	beq.w	800abba <_vfiprintf_r+0x20e>
 800aa76:	2300      	movs	r3, #0
 800aa78:	f04f 32ff 	mov.w	r2, #4294967295
 800aa7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa80:	f10a 0a01 	add.w	sl, sl, #1
 800aa84:	9304      	str	r3, [sp, #16]
 800aa86:	9307      	str	r3, [sp, #28]
 800aa88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa8c:	931a      	str	r3, [sp, #104]	; 0x68
 800aa8e:	4654      	mov	r4, sl
 800aa90:	2205      	movs	r2, #5
 800aa92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa96:	4858      	ldr	r0, [pc, #352]	; (800abf8 <_vfiprintf_r+0x24c>)
 800aa98:	f7f5 fbba 	bl	8000210 <memchr>
 800aa9c:	9a04      	ldr	r2, [sp, #16]
 800aa9e:	b9d8      	cbnz	r0, 800aad8 <_vfiprintf_r+0x12c>
 800aaa0:	06d1      	lsls	r1, r2, #27
 800aaa2:	bf44      	itt	mi
 800aaa4:	2320      	movmi	r3, #32
 800aaa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaaa:	0713      	lsls	r3, r2, #28
 800aaac:	bf44      	itt	mi
 800aaae:	232b      	movmi	r3, #43	; 0x2b
 800aab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aab4:	f89a 3000 	ldrb.w	r3, [sl]
 800aab8:	2b2a      	cmp	r3, #42	; 0x2a
 800aaba:	d015      	beq.n	800aae8 <_vfiprintf_r+0x13c>
 800aabc:	9a07      	ldr	r2, [sp, #28]
 800aabe:	4654      	mov	r4, sl
 800aac0:	2000      	movs	r0, #0
 800aac2:	f04f 0c0a 	mov.w	ip, #10
 800aac6:	4621      	mov	r1, r4
 800aac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aacc:	3b30      	subs	r3, #48	; 0x30
 800aace:	2b09      	cmp	r3, #9
 800aad0:	d94e      	bls.n	800ab70 <_vfiprintf_r+0x1c4>
 800aad2:	b1b0      	cbz	r0, 800ab02 <_vfiprintf_r+0x156>
 800aad4:	9207      	str	r2, [sp, #28]
 800aad6:	e014      	b.n	800ab02 <_vfiprintf_r+0x156>
 800aad8:	eba0 0308 	sub.w	r3, r0, r8
 800aadc:	fa09 f303 	lsl.w	r3, r9, r3
 800aae0:	4313      	orrs	r3, r2
 800aae2:	9304      	str	r3, [sp, #16]
 800aae4:	46a2      	mov	sl, r4
 800aae6:	e7d2      	b.n	800aa8e <_vfiprintf_r+0xe2>
 800aae8:	9b03      	ldr	r3, [sp, #12]
 800aaea:	1d19      	adds	r1, r3, #4
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	9103      	str	r1, [sp, #12]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	bfbb      	ittet	lt
 800aaf4:	425b      	neglt	r3, r3
 800aaf6:	f042 0202 	orrlt.w	r2, r2, #2
 800aafa:	9307      	strge	r3, [sp, #28]
 800aafc:	9307      	strlt	r3, [sp, #28]
 800aafe:	bfb8      	it	lt
 800ab00:	9204      	strlt	r2, [sp, #16]
 800ab02:	7823      	ldrb	r3, [r4, #0]
 800ab04:	2b2e      	cmp	r3, #46	; 0x2e
 800ab06:	d10c      	bne.n	800ab22 <_vfiprintf_r+0x176>
 800ab08:	7863      	ldrb	r3, [r4, #1]
 800ab0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab0c:	d135      	bne.n	800ab7a <_vfiprintf_r+0x1ce>
 800ab0e:	9b03      	ldr	r3, [sp, #12]
 800ab10:	1d1a      	adds	r2, r3, #4
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	9203      	str	r2, [sp, #12]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	bfb8      	it	lt
 800ab1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab1e:	3402      	adds	r4, #2
 800ab20:	9305      	str	r3, [sp, #20]
 800ab22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ac08 <_vfiprintf_r+0x25c>
 800ab26:	7821      	ldrb	r1, [r4, #0]
 800ab28:	2203      	movs	r2, #3
 800ab2a:	4650      	mov	r0, sl
 800ab2c:	f7f5 fb70 	bl	8000210 <memchr>
 800ab30:	b140      	cbz	r0, 800ab44 <_vfiprintf_r+0x198>
 800ab32:	2340      	movs	r3, #64	; 0x40
 800ab34:	eba0 000a 	sub.w	r0, r0, sl
 800ab38:	fa03 f000 	lsl.w	r0, r3, r0
 800ab3c:	9b04      	ldr	r3, [sp, #16]
 800ab3e:	4303      	orrs	r3, r0
 800ab40:	3401      	adds	r4, #1
 800ab42:	9304      	str	r3, [sp, #16]
 800ab44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab48:	482c      	ldr	r0, [pc, #176]	; (800abfc <_vfiprintf_r+0x250>)
 800ab4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab4e:	2206      	movs	r2, #6
 800ab50:	f7f5 fb5e 	bl	8000210 <memchr>
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d03f      	beq.n	800abd8 <_vfiprintf_r+0x22c>
 800ab58:	4b29      	ldr	r3, [pc, #164]	; (800ac00 <_vfiprintf_r+0x254>)
 800ab5a:	bb1b      	cbnz	r3, 800aba4 <_vfiprintf_r+0x1f8>
 800ab5c:	9b03      	ldr	r3, [sp, #12]
 800ab5e:	3307      	adds	r3, #7
 800ab60:	f023 0307 	bic.w	r3, r3, #7
 800ab64:	3308      	adds	r3, #8
 800ab66:	9303      	str	r3, [sp, #12]
 800ab68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab6a:	443b      	add	r3, r7
 800ab6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab6e:	e767      	b.n	800aa40 <_vfiprintf_r+0x94>
 800ab70:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab74:	460c      	mov	r4, r1
 800ab76:	2001      	movs	r0, #1
 800ab78:	e7a5      	b.n	800aac6 <_vfiprintf_r+0x11a>
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	3401      	adds	r4, #1
 800ab7e:	9305      	str	r3, [sp, #20]
 800ab80:	4619      	mov	r1, r3
 800ab82:	f04f 0c0a 	mov.w	ip, #10
 800ab86:	4620      	mov	r0, r4
 800ab88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab8c:	3a30      	subs	r2, #48	; 0x30
 800ab8e:	2a09      	cmp	r2, #9
 800ab90:	d903      	bls.n	800ab9a <_vfiprintf_r+0x1ee>
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d0c5      	beq.n	800ab22 <_vfiprintf_r+0x176>
 800ab96:	9105      	str	r1, [sp, #20]
 800ab98:	e7c3      	b.n	800ab22 <_vfiprintf_r+0x176>
 800ab9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab9e:	4604      	mov	r4, r0
 800aba0:	2301      	movs	r3, #1
 800aba2:	e7f0      	b.n	800ab86 <_vfiprintf_r+0x1da>
 800aba4:	ab03      	add	r3, sp, #12
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	462a      	mov	r2, r5
 800abaa:	4b16      	ldr	r3, [pc, #88]	; (800ac04 <_vfiprintf_r+0x258>)
 800abac:	a904      	add	r1, sp, #16
 800abae:	4630      	mov	r0, r6
 800abb0:	f7fd fc9a 	bl	80084e8 <_printf_float>
 800abb4:	4607      	mov	r7, r0
 800abb6:	1c78      	adds	r0, r7, #1
 800abb8:	d1d6      	bne.n	800ab68 <_vfiprintf_r+0x1bc>
 800abba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abbc:	07d9      	lsls	r1, r3, #31
 800abbe:	d405      	bmi.n	800abcc <_vfiprintf_r+0x220>
 800abc0:	89ab      	ldrh	r3, [r5, #12]
 800abc2:	059a      	lsls	r2, r3, #22
 800abc4:	d402      	bmi.n	800abcc <_vfiprintf_r+0x220>
 800abc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abc8:	f7ff f9de 	bl	8009f88 <__retarget_lock_release_recursive>
 800abcc:	89ab      	ldrh	r3, [r5, #12]
 800abce:	065b      	lsls	r3, r3, #25
 800abd0:	f53f af12 	bmi.w	800a9f8 <_vfiprintf_r+0x4c>
 800abd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abd6:	e711      	b.n	800a9fc <_vfiprintf_r+0x50>
 800abd8:	ab03      	add	r3, sp, #12
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	462a      	mov	r2, r5
 800abde:	4b09      	ldr	r3, [pc, #36]	; (800ac04 <_vfiprintf_r+0x258>)
 800abe0:	a904      	add	r1, sp, #16
 800abe2:	4630      	mov	r0, r6
 800abe4:	f7fd ff24 	bl	8008a30 <_printf_i>
 800abe8:	e7e4      	b.n	800abb4 <_vfiprintf_r+0x208>
 800abea:	bf00      	nop
 800abec:	0800b148 	.word	0x0800b148
 800abf0:	0800b168 	.word	0x0800b168
 800abf4:	0800b128 	.word	0x0800b128
 800abf8:	0800b2e4 	.word	0x0800b2e4
 800abfc:	0800b2ee 	.word	0x0800b2ee
 800ac00:	080084e9 	.word	0x080084e9
 800ac04:	0800a987 	.word	0x0800a987
 800ac08:	0800b2ea 	.word	0x0800b2ea

0800ac0c <_sbrk_r>:
 800ac0c:	b538      	push	{r3, r4, r5, lr}
 800ac0e:	4d06      	ldr	r5, [pc, #24]	; (800ac28 <_sbrk_r+0x1c>)
 800ac10:	2300      	movs	r3, #0
 800ac12:	4604      	mov	r4, r0
 800ac14:	4608      	mov	r0, r1
 800ac16:	602b      	str	r3, [r5, #0]
 800ac18:	f7fd fb14 	bl	8008244 <_sbrk>
 800ac1c:	1c43      	adds	r3, r0, #1
 800ac1e:	d102      	bne.n	800ac26 <_sbrk_r+0x1a>
 800ac20:	682b      	ldr	r3, [r5, #0]
 800ac22:	b103      	cbz	r3, 800ac26 <_sbrk_r+0x1a>
 800ac24:	6023      	str	r3, [r4, #0]
 800ac26:	bd38      	pop	{r3, r4, r5, pc}
 800ac28:	2000056c 	.word	0x2000056c

0800ac2c <__sread>:
 800ac2c:	b510      	push	{r4, lr}
 800ac2e:	460c      	mov	r4, r1
 800ac30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac34:	f000 f8e2 	bl	800adfc <_read_r>
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	bfab      	itete	ge
 800ac3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac3e:	89a3      	ldrhlt	r3, [r4, #12]
 800ac40:	181b      	addge	r3, r3, r0
 800ac42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac46:	bfac      	ite	ge
 800ac48:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac4a:	81a3      	strhlt	r3, [r4, #12]
 800ac4c:	bd10      	pop	{r4, pc}

0800ac4e <__swrite>:
 800ac4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac52:	461f      	mov	r7, r3
 800ac54:	898b      	ldrh	r3, [r1, #12]
 800ac56:	05db      	lsls	r3, r3, #23
 800ac58:	4605      	mov	r5, r0
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	4616      	mov	r6, r2
 800ac5e:	d505      	bpl.n	800ac6c <__swrite+0x1e>
 800ac60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac64:	2302      	movs	r3, #2
 800ac66:	2200      	movs	r2, #0
 800ac68:	f000 f898 	bl	800ad9c <_lseek_r>
 800ac6c:	89a3      	ldrh	r3, [r4, #12]
 800ac6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac76:	81a3      	strh	r3, [r4, #12]
 800ac78:	4632      	mov	r2, r6
 800ac7a:	463b      	mov	r3, r7
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac82:	f000 b817 	b.w	800acb4 <_write_r>

0800ac86 <__sseek>:
 800ac86:	b510      	push	{r4, lr}
 800ac88:	460c      	mov	r4, r1
 800ac8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac8e:	f000 f885 	bl	800ad9c <_lseek_r>
 800ac92:	1c43      	adds	r3, r0, #1
 800ac94:	89a3      	ldrh	r3, [r4, #12]
 800ac96:	bf15      	itete	ne
 800ac98:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aca2:	81a3      	strheq	r3, [r4, #12]
 800aca4:	bf18      	it	ne
 800aca6:	81a3      	strhne	r3, [r4, #12]
 800aca8:	bd10      	pop	{r4, pc}

0800acaa <__sclose>:
 800acaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acae:	f000 b831 	b.w	800ad14 <_close_r>
	...

0800acb4 <_write_r>:
 800acb4:	b538      	push	{r3, r4, r5, lr}
 800acb6:	4d07      	ldr	r5, [pc, #28]	; (800acd4 <_write_r+0x20>)
 800acb8:	4604      	mov	r4, r0
 800acba:	4608      	mov	r0, r1
 800acbc:	4611      	mov	r1, r2
 800acbe:	2200      	movs	r2, #0
 800acc0:	602a      	str	r2, [r5, #0]
 800acc2:	461a      	mov	r2, r3
 800acc4:	f7fc fd40 	bl	8007748 <_write>
 800acc8:	1c43      	adds	r3, r0, #1
 800acca:	d102      	bne.n	800acd2 <_write_r+0x1e>
 800accc:	682b      	ldr	r3, [r5, #0]
 800acce:	b103      	cbz	r3, 800acd2 <_write_r+0x1e>
 800acd0:	6023      	str	r3, [r4, #0]
 800acd2:	bd38      	pop	{r3, r4, r5, pc}
 800acd4:	2000056c 	.word	0x2000056c

0800acd8 <__assert_func>:
 800acd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acda:	4614      	mov	r4, r2
 800acdc:	461a      	mov	r2, r3
 800acde:	4b09      	ldr	r3, [pc, #36]	; (800ad04 <__assert_func+0x2c>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4605      	mov	r5, r0
 800ace4:	68d8      	ldr	r0, [r3, #12]
 800ace6:	b14c      	cbz	r4, 800acfc <__assert_func+0x24>
 800ace8:	4b07      	ldr	r3, [pc, #28]	; (800ad08 <__assert_func+0x30>)
 800acea:	9100      	str	r1, [sp, #0]
 800acec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800acf0:	4906      	ldr	r1, [pc, #24]	; (800ad0c <__assert_func+0x34>)
 800acf2:	462b      	mov	r3, r5
 800acf4:	f000 f81e 	bl	800ad34 <fiprintf>
 800acf8:	f000 f89f 	bl	800ae3a <abort>
 800acfc:	4b04      	ldr	r3, [pc, #16]	; (800ad10 <__assert_func+0x38>)
 800acfe:	461c      	mov	r4, r3
 800ad00:	e7f3      	b.n	800acea <__assert_func+0x12>
 800ad02:	bf00      	nop
 800ad04:	200000d0 	.word	0x200000d0
 800ad08:	0800b2f5 	.word	0x0800b2f5
 800ad0c:	0800b302 	.word	0x0800b302
 800ad10:	0800b330 	.word	0x0800b330

0800ad14 <_close_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4d06      	ldr	r5, [pc, #24]	; (800ad30 <_close_r+0x1c>)
 800ad18:	2300      	movs	r3, #0
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	4608      	mov	r0, r1
 800ad1e:	602b      	str	r3, [r5, #0]
 800ad20:	f7fd fa5b 	bl	80081da <_close>
 800ad24:	1c43      	adds	r3, r0, #1
 800ad26:	d102      	bne.n	800ad2e <_close_r+0x1a>
 800ad28:	682b      	ldr	r3, [r5, #0]
 800ad2a:	b103      	cbz	r3, 800ad2e <_close_r+0x1a>
 800ad2c:	6023      	str	r3, [r4, #0]
 800ad2e:	bd38      	pop	{r3, r4, r5, pc}
 800ad30:	2000056c 	.word	0x2000056c

0800ad34 <fiprintf>:
 800ad34:	b40e      	push	{r1, r2, r3}
 800ad36:	b503      	push	{r0, r1, lr}
 800ad38:	4601      	mov	r1, r0
 800ad3a:	ab03      	add	r3, sp, #12
 800ad3c:	4805      	ldr	r0, [pc, #20]	; (800ad54 <fiprintf+0x20>)
 800ad3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad42:	6800      	ldr	r0, [r0, #0]
 800ad44:	9301      	str	r3, [sp, #4]
 800ad46:	f7ff fe31 	bl	800a9ac <_vfiprintf_r>
 800ad4a:	b002      	add	sp, #8
 800ad4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad50:	b003      	add	sp, #12
 800ad52:	4770      	bx	lr
 800ad54:	200000d0 	.word	0x200000d0

0800ad58 <_fstat_r>:
 800ad58:	b538      	push	{r3, r4, r5, lr}
 800ad5a:	4d07      	ldr	r5, [pc, #28]	; (800ad78 <_fstat_r+0x20>)
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	4604      	mov	r4, r0
 800ad60:	4608      	mov	r0, r1
 800ad62:	4611      	mov	r1, r2
 800ad64:	602b      	str	r3, [r5, #0]
 800ad66:	f7fd fa44 	bl	80081f2 <_fstat>
 800ad6a:	1c43      	adds	r3, r0, #1
 800ad6c:	d102      	bne.n	800ad74 <_fstat_r+0x1c>
 800ad6e:	682b      	ldr	r3, [r5, #0]
 800ad70:	b103      	cbz	r3, 800ad74 <_fstat_r+0x1c>
 800ad72:	6023      	str	r3, [r4, #0]
 800ad74:	bd38      	pop	{r3, r4, r5, pc}
 800ad76:	bf00      	nop
 800ad78:	2000056c 	.word	0x2000056c

0800ad7c <_isatty_r>:
 800ad7c:	b538      	push	{r3, r4, r5, lr}
 800ad7e:	4d06      	ldr	r5, [pc, #24]	; (800ad98 <_isatty_r+0x1c>)
 800ad80:	2300      	movs	r3, #0
 800ad82:	4604      	mov	r4, r0
 800ad84:	4608      	mov	r0, r1
 800ad86:	602b      	str	r3, [r5, #0]
 800ad88:	f7fd fa43 	bl	8008212 <_isatty>
 800ad8c:	1c43      	adds	r3, r0, #1
 800ad8e:	d102      	bne.n	800ad96 <_isatty_r+0x1a>
 800ad90:	682b      	ldr	r3, [r5, #0]
 800ad92:	b103      	cbz	r3, 800ad96 <_isatty_r+0x1a>
 800ad94:	6023      	str	r3, [r4, #0]
 800ad96:	bd38      	pop	{r3, r4, r5, pc}
 800ad98:	2000056c 	.word	0x2000056c

0800ad9c <_lseek_r>:
 800ad9c:	b538      	push	{r3, r4, r5, lr}
 800ad9e:	4d07      	ldr	r5, [pc, #28]	; (800adbc <_lseek_r+0x20>)
 800ada0:	4604      	mov	r4, r0
 800ada2:	4608      	mov	r0, r1
 800ada4:	4611      	mov	r1, r2
 800ada6:	2200      	movs	r2, #0
 800ada8:	602a      	str	r2, [r5, #0]
 800adaa:	461a      	mov	r2, r3
 800adac:	f7fd fa3c 	bl	8008228 <_lseek>
 800adb0:	1c43      	adds	r3, r0, #1
 800adb2:	d102      	bne.n	800adba <_lseek_r+0x1e>
 800adb4:	682b      	ldr	r3, [r5, #0]
 800adb6:	b103      	cbz	r3, 800adba <_lseek_r+0x1e>
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	bd38      	pop	{r3, r4, r5, pc}
 800adbc:	2000056c 	.word	0x2000056c

0800adc0 <__ascii_mbtowc>:
 800adc0:	b082      	sub	sp, #8
 800adc2:	b901      	cbnz	r1, 800adc6 <__ascii_mbtowc+0x6>
 800adc4:	a901      	add	r1, sp, #4
 800adc6:	b142      	cbz	r2, 800adda <__ascii_mbtowc+0x1a>
 800adc8:	b14b      	cbz	r3, 800adde <__ascii_mbtowc+0x1e>
 800adca:	7813      	ldrb	r3, [r2, #0]
 800adcc:	600b      	str	r3, [r1, #0]
 800adce:	7812      	ldrb	r2, [r2, #0]
 800add0:	1e10      	subs	r0, r2, #0
 800add2:	bf18      	it	ne
 800add4:	2001      	movne	r0, #1
 800add6:	b002      	add	sp, #8
 800add8:	4770      	bx	lr
 800adda:	4610      	mov	r0, r2
 800addc:	e7fb      	b.n	800add6 <__ascii_mbtowc+0x16>
 800adde:	f06f 0001 	mvn.w	r0, #1
 800ade2:	e7f8      	b.n	800add6 <__ascii_mbtowc+0x16>

0800ade4 <__malloc_lock>:
 800ade4:	4801      	ldr	r0, [pc, #4]	; (800adec <__malloc_lock+0x8>)
 800ade6:	f7ff b8ce 	b.w	8009f86 <__retarget_lock_acquire_recursive>
 800adea:	bf00      	nop
 800adec:	20000560 	.word	0x20000560

0800adf0 <__malloc_unlock>:
 800adf0:	4801      	ldr	r0, [pc, #4]	; (800adf8 <__malloc_unlock+0x8>)
 800adf2:	f7ff b8c9 	b.w	8009f88 <__retarget_lock_release_recursive>
 800adf6:	bf00      	nop
 800adf8:	20000560 	.word	0x20000560

0800adfc <_read_r>:
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	4d07      	ldr	r5, [pc, #28]	; (800ae1c <_read_r+0x20>)
 800ae00:	4604      	mov	r4, r0
 800ae02:	4608      	mov	r0, r1
 800ae04:	4611      	mov	r1, r2
 800ae06:	2200      	movs	r2, #0
 800ae08:	602a      	str	r2, [r5, #0]
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	f7fd f9c8 	bl	80081a0 <_read>
 800ae10:	1c43      	adds	r3, r0, #1
 800ae12:	d102      	bne.n	800ae1a <_read_r+0x1e>
 800ae14:	682b      	ldr	r3, [r5, #0]
 800ae16:	b103      	cbz	r3, 800ae1a <_read_r+0x1e>
 800ae18:	6023      	str	r3, [r4, #0]
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}
 800ae1c:	2000056c 	.word	0x2000056c

0800ae20 <__ascii_wctomb>:
 800ae20:	b149      	cbz	r1, 800ae36 <__ascii_wctomb+0x16>
 800ae22:	2aff      	cmp	r2, #255	; 0xff
 800ae24:	bf85      	ittet	hi
 800ae26:	238a      	movhi	r3, #138	; 0x8a
 800ae28:	6003      	strhi	r3, [r0, #0]
 800ae2a:	700a      	strbls	r2, [r1, #0]
 800ae2c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ae30:	bf98      	it	ls
 800ae32:	2001      	movls	r0, #1
 800ae34:	4770      	bx	lr
 800ae36:	4608      	mov	r0, r1
 800ae38:	4770      	bx	lr

0800ae3a <abort>:
 800ae3a:	b508      	push	{r3, lr}
 800ae3c:	2006      	movs	r0, #6
 800ae3e:	f000 f82b 	bl	800ae98 <raise>
 800ae42:	2001      	movs	r0, #1
 800ae44:	f7fd f9a2 	bl	800818c <_exit>

0800ae48 <_raise_r>:
 800ae48:	291f      	cmp	r1, #31
 800ae4a:	b538      	push	{r3, r4, r5, lr}
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	460d      	mov	r5, r1
 800ae50:	d904      	bls.n	800ae5c <_raise_r+0x14>
 800ae52:	2316      	movs	r3, #22
 800ae54:	6003      	str	r3, [r0, #0]
 800ae56:	f04f 30ff 	mov.w	r0, #4294967295
 800ae5a:	bd38      	pop	{r3, r4, r5, pc}
 800ae5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae5e:	b112      	cbz	r2, 800ae66 <_raise_r+0x1e>
 800ae60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae64:	b94b      	cbnz	r3, 800ae7a <_raise_r+0x32>
 800ae66:	4620      	mov	r0, r4
 800ae68:	f000 f830 	bl	800aecc <_getpid_r>
 800ae6c:	462a      	mov	r2, r5
 800ae6e:	4601      	mov	r1, r0
 800ae70:	4620      	mov	r0, r4
 800ae72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae76:	f000 b817 	b.w	800aea8 <_kill_r>
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d00a      	beq.n	800ae94 <_raise_r+0x4c>
 800ae7e:	1c59      	adds	r1, r3, #1
 800ae80:	d103      	bne.n	800ae8a <_raise_r+0x42>
 800ae82:	2316      	movs	r3, #22
 800ae84:	6003      	str	r3, [r0, #0]
 800ae86:	2001      	movs	r0, #1
 800ae88:	e7e7      	b.n	800ae5a <_raise_r+0x12>
 800ae8a:	2400      	movs	r4, #0
 800ae8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae90:	4628      	mov	r0, r5
 800ae92:	4798      	blx	r3
 800ae94:	2000      	movs	r0, #0
 800ae96:	e7e0      	b.n	800ae5a <_raise_r+0x12>

0800ae98 <raise>:
 800ae98:	4b02      	ldr	r3, [pc, #8]	; (800aea4 <raise+0xc>)
 800ae9a:	4601      	mov	r1, r0
 800ae9c:	6818      	ldr	r0, [r3, #0]
 800ae9e:	f7ff bfd3 	b.w	800ae48 <_raise_r>
 800aea2:	bf00      	nop
 800aea4:	200000d0 	.word	0x200000d0

0800aea8 <_kill_r>:
 800aea8:	b538      	push	{r3, r4, r5, lr}
 800aeaa:	4d07      	ldr	r5, [pc, #28]	; (800aec8 <_kill_r+0x20>)
 800aeac:	2300      	movs	r3, #0
 800aeae:	4604      	mov	r4, r0
 800aeb0:	4608      	mov	r0, r1
 800aeb2:	4611      	mov	r1, r2
 800aeb4:	602b      	str	r3, [r5, #0]
 800aeb6:	f7fd f959 	bl	800816c <_kill>
 800aeba:	1c43      	adds	r3, r0, #1
 800aebc:	d102      	bne.n	800aec4 <_kill_r+0x1c>
 800aebe:	682b      	ldr	r3, [r5, #0]
 800aec0:	b103      	cbz	r3, 800aec4 <_kill_r+0x1c>
 800aec2:	6023      	str	r3, [r4, #0]
 800aec4:	bd38      	pop	{r3, r4, r5, pc}
 800aec6:	bf00      	nop
 800aec8:	2000056c 	.word	0x2000056c

0800aecc <_getpid_r>:
 800aecc:	f7fd b946 	b.w	800815c <_getpid>

0800aed0 <_init>:
 800aed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed2:	bf00      	nop
 800aed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aed6:	bc08      	pop	{r3}
 800aed8:	469e      	mov	lr, r3
 800aeda:	4770      	bx	lr

0800aedc <_fini>:
 800aedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aede:	bf00      	nop
 800aee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aee2:	bc08      	pop	{r3}
 800aee4:	469e      	mov	lr, r3
 800aee6:	4770      	bx	lr
