
lab_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0b0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800a270  0800a270  0001a270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a764  0800a764  0002029c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a764  0800a764  0001a764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a76c  0800a76c  0002029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a76c  0800a76c  0001a76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a770  0800a770  0001a770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  0800a774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  2000029c  0800aa10  0002029c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  0800aa10  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000209b2  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004396  00000000  00000000  00040c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b78  00000000  00000000  00045018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001980  00000000  00000000  00046b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eb92  00000000  00000000  00048510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024168  00000000  00000000  000770a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012ce7d  00000000  00000000  0009b20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c8087  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008338  00000000  00000000  001c80d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000029c 	.word	0x2000029c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a258 	.word	0x0800a258

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200002a0 	.word	0x200002a0
 80001fc:	0800a258 	.word	0x0800a258

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2120      	movs	r1, #32
 8000eec:	4618      	mov	r0, r3
 8000eee:	f005 fef7 	bl	8006ce0 <SENSOR_IO_Read>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	f023 0304 	bic.w	r3, r3, #4
 8000efc:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	f023 0303 	bic.w	r3, r3, #3
 8000f0c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f1c:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	2120      	movs	r1, #32
 8000f26:	4618      	mov	r0, r3
 8000f28:	f005 fec0 	bl	8006cac <SENSOR_IO_Write>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8000f42:	f005 fea9 	bl	8006c98 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f005 fec7 	bl	8006ce0 <SENSOR_IO_Read>
 8000f52:	4603      	mov	r3, r0
 8000f54:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	b2d8      	uxtb	r0, r3
 8000f6e:	f107 020c 	add.w	r2, r7, #12
 8000f72:	2302      	movs	r3, #2
 8000f74:	21b0      	movs	r1, #176	; 0xb0
 8000f76:	f005 fed1 	bl	8006d1c <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8000f7a:	7b3b      	ldrb	r3, [r7, #12]
 8000f7c:	085b      	lsrs	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8000f82:	7b7b      	ldrb	r3, [r7, #13]
 8000f84:	085b      	lsrs	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	b2d8      	uxtb	r0, r3
 8000f8e:	f107 020c 	add.w	r2, r7, #12
 8000f92:	2302      	movs	r3, #2
 8000f94:	21b6      	movs	r1, #182	; 0xb6
 8000f96:	f005 fec1 	bl	8006d1c <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000f9a:	7b7b      	ldrb	r3, [r7, #13]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	b21a      	sxth	r2, r3
 8000fa0:	7b3b      	ldrb	r3, [r7, #12]
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	b2d8      	uxtb	r0, r3
 8000fac:	f107 020c 	add.w	r2, r7, #12
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	21ba      	movs	r1, #186	; 0xba
 8000fb4:	f005 feb2 	bl	8006d1c <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000fb8:	7b7b      	ldrb	r3, [r7, #13]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	7b3b      	ldrb	r3, [r7, #12]
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	b2d8      	uxtb	r0, r3
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2302      	movs	r3, #2
 8000fd0:	21a8      	movs	r1, #168	; 0xa8
 8000fd2:	f005 fea3 	bl	8006d1c <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000fd6:	7b7b      	ldrb	r3, [r7, #13]
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	7b3b      	ldrb	r3, [r7, #12]
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8000fe4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000fe8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	ee07 3a90 	vmov	s15, r3
 8000ff2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000ffa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	ee07 3a90 	vmov	s15, r3
 8001004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001008:	ee67 6a27 	vmul.f32	s13, s14, s15
 800100c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001010:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001022:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001032:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001036:	edd7 7a04 	vldr	s15, [r7, #16]
 800103a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800103e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001042:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001046:	edd7 7a04 	vldr	s15, [r7, #16]
 800104a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001090 <HTS221_H_ReadHumidity+0x130>
 800104e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001056:	dd01      	ble.n	800105c <HTS221_H_ReadHumidity+0xfc>
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HTS221_H_ReadHumidity+0x134>)
 800105a:	e00a      	b.n	8001072 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 800105c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001060:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	d502      	bpl.n	8001070 <HTS221_H_ReadHumidity+0x110>
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	e000      	b.n	8001072 <HTS221_H_ReadHumidity+0x112>
 8001070:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001072:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001074:	edd7 7a04 	vldr	s15, [r7, #16]
 8001078:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800107c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001080:	eef0 7a66 	vmov.f32	s15, s13
}
 8001084:	eeb0 0a67 	vmov.f32	s0, s15
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	447a0000 	.word	0x447a0000
 8001094:	447a0000 	.word	0x447a0000

08001098 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80010a4:	88fb      	ldrh	r3, [r7, #6]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2120      	movs	r1, #32
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 fe18 	bl	8006ce0 <SENSOR_IO_Read>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	f023 0304 	bic.w	r3, r3, #4
 80010ba:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	f023 0303 	bic.w	r3, r3, #3
 80010ca:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010da:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	2120      	movs	r1, #32
 80010e4:	4618      	mov	r0, r3
 80010e6:	f005 fde1 	bl	8006cac <SENSOR_IO_Write>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b088      	sub	sp, #32
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	b2d8      	uxtb	r0, r3
 8001100:	f107 0208 	add.w	r2, r7, #8
 8001104:	2302      	movs	r3, #2
 8001106:	21b2      	movs	r1, #178	; 0xb2
 8001108:	f005 fe08 	bl	8006d1c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2135      	movs	r1, #53	; 0x35
 8001112:	4618      	mov	r0, r3
 8001114:	f005 fde4 	bl	8006ce0 <SENSOR_IO_Read>
 8001118:	4603      	mov	r3, r0
 800111a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800111c:	7ffb      	ldrb	r3, [r7, #31]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21b      	sxth	r3, r3
 8001122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001126:	b21a      	sxth	r2, r3
 8001128:	7a3b      	ldrb	r3, [r7, #8]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001130:	7ffb      	ldrb	r3, [r7, #31]
 8001132:	019b      	lsls	r3, r3, #6
 8001134:	b21b      	sxth	r3, r3
 8001136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800113a:	b21a      	sxth	r2, r3
 800113c:	7a7b      	ldrb	r3, [r7, #9]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001144:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001148:	10db      	asrs	r3, r3, #3
 800114a:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800114c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001150:	10db      	asrs	r3, r3, #3
 8001152:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	b2d8      	uxtb	r0, r3
 8001158:	f107 0208 	add.w	r2, r7, #8
 800115c:	2304      	movs	r3, #4
 800115e:	21bc      	movs	r1, #188	; 0xbc
 8001160:	f005 fddc 	bl	8006d1c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001164:	7a7b      	ldrb	r3, [r7, #9]
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	b21a      	sxth	r2, r3
 800116a:	7a3b      	ldrb	r3, [r7, #8]
 800116c:	b21b      	sxth	r3, r3
 800116e:	4313      	orrs	r3, r2
 8001170:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001172:	7afb      	ldrb	r3, [r7, #11]
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	b21a      	sxth	r2, r3
 8001178:	7abb      	ldrb	r3, [r7, #10]
 800117a:	b21b      	sxth	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	b2d8      	uxtb	r0, r3
 8001184:	f107 0208 	add.w	r2, r7, #8
 8001188:	2302      	movs	r3, #2
 800118a:	21aa      	movs	r1, #170	; 0xaa
 800118c:	f005 fdc6 	bl	8006d1c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001190:	7a7b      	ldrb	r3, [r7, #9]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b21a      	sxth	r2, r3
 8001196:	7a3b      	ldrb	r3, [r7, #8]
 8001198:	b21b      	sxth	r3, r3
 800119a:	4313      	orrs	r3, r2
 800119c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800119e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80011a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80011b4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80011c6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80011ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	ee07 3a90 	vmov	s15, r3
 80011d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011dc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	ee07 3a90 	vmov	s15, r3
}
 80011f6:	eeb0 0a67 	vmov.f32	s0, s15
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	463b      	mov	r3, r7
 8001208:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 800120c:	783b      	ldrb	r3, [r7, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	2120      	movs	r1, #32
 8001212:	203c      	movs	r0, #60	; 0x3c
 8001214:	f005 fd4a 	bl	8006cac <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001218:	787b      	ldrb	r3, [r7, #1]
 800121a:	461a      	mov	r2, r3
 800121c:	2121      	movs	r1, #33	; 0x21
 800121e:	203c      	movs	r0, #60	; 0x3c
 8001220:	f005 fd44 	bl	8006cac <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001224:	78bb      	ldrb	r3, [r7, #2]
 8001226:	461a      	mov	r2, r3
 8001228:	2122      	movs	r1, #34	; 0x22
 800122a:	203c      	movs	r0, #60	; 0x3c
 800122c:	f005 fd3e 	bl	8006cac <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	461a      	mov	r2, r3
 8001234:	2123      	movs	r1, #35	; 0x23
 8001236:	203c      	movs	r0, #60	; 0x3c
 8001238:	f005 fd38 	bl	8006cac <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 800123c:	793b      	ldrb	r3, [r7, #4]
 800123e:	461a      	mov	r2, r3
 8001240:	2124      	movs	r1, #36	; 0x24
 8001242:	203c      	movs	r0, #60	; 0x3c
 8001244:	f005 fd32 	bl	8006cac <SENSOR_IO_Write>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001256:	2300      	movs	r3, #0
 8001258:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800125a:	2122      	movs	r1, #34	; 0x22
 800125c:	203c      	movs	r0, #60	; 0x3c
 800125e:	f005 fd3f 	bl	8006ce0 <SENSOR_IO_Read>
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f023 0303 	bic.w	r3, r3, #3
 800126c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f043 0303 	orr.w	r3, r3, #3
 8001274:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	461a      	mov	r2, r3
 800127a:	2122      	movs	r1, #34	; 0x22
 800127c:	203c      	movs	r0, #60	; 0x3c
 800127e:	f005 fd15 	bl	8006cac <SENSOR_IO_Write>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800128e:	f005 fd03 	bl	8006c98 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8001292:	210f      	movs	r1, #15
 8001294:	203c      	movs	r0, #60	; 0x3c
 8001296:	f005 fd23 	bl	8006ce0 <SENSOR_IO_Read>
 800129a:	4603      	mov	r3, r0
}
 800129c:	4618      	mov	r0, r3
 800129e:	bd80      	pop	{r7, pc}

080012a0 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80012ae:	2122      	movs	r1, #34	; 0x22
 80012b0:	203c      	movs	r0, #60	; 0x3c
 80012b2:	f005 fd15 	bl	8006ce0 <SENSOR_IO_Read>
 80012b6:	4603      	mov	r3, r0
 80012b8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	f023 0320 	bic.w	r3, r3, #32
 80012c0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	f043 0320 	orr.w	r3, r3, #32
 80012ce:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	461a      	mov	r2, r3
 80012d4:	2122      	movs	r1, #34	; 0x22
 80012d6:	203c      	movs	r0, #60	; 0x3c
 80012d8:	f005 fce8 	bl	8006cac <SENSOR_IO_Write>
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80012fa:	2121      	movs	r1, #33	; 0x21
 80012fc:	203c      	movs	r0, #60	; 0x3c
 80012fe:	f005 fcef 	bl	8006ce0 <SENSOR_IO_Read>
 8001302:	4603      	mov	r3, r0
 8001304:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001306:	f107 0208 	add.w	r2, r7, #8
 800130a:	2306      	movs	r3, #6
 800130c:	21a8      	movs	r1, #168	; 0xa8
 800130e:	203c      	movs	r0, #60	; 0x3c
 8001310:	f005 fd04 	bl	8006d1c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001314:	2300      	movs	r3, #0
 8001316:	77fb      	strb	r3, [r7, #31]
 8001318:	e01c      	b.n	8001354 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800131a:	7ffb      	ldrb	r3, [r7, #31]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	3301      	adds	r3, #1
 8001320:	3320      	adds	r3, #32
 8001322:	443b      	add	r3, r7
 8001324:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001328:	b29b      	uxth	r3, r3
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b29a      	uxth	r2, r3
 800132e:	7ffb      	ldrb	r3, [r7, #31]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	3320      	adds	r3, #32
 8001334:	443b      	add	r3, r7
 8001336:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800133a:	b29b      	uxth	r3, r3
 800133c:	4413      	add	r3, r2
 800133e:	b29a      	uxth	r2, r3
 8001340:	7ffb      	ldrb	r3, [r7, #31]
 8001342:	b212      	sxth	r2, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	3320      	adds	r3, #32
 8001348:	443b      	add	r3, r7
 800134a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800134e:	7ffb      	ldrb	r3, [r7, #31]
 8001350:	3301      	adds	r3, #1
 8001352:	77fb      	strb	r3, [r7, #31]
 8001354:	7ffb      	ldrb	r3, [r7, #31]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d9df      	bls.n	800131a <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 800135a:	7dfb      	ldrb	r3, [r7, #23]
 800135c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001360:	2b60      	cmp	r3, #96	; 0x60
 8001362:	d013      	beq.n	800138c <LIS3MDL_MagReadXYZ+0xa8>
 8001364:	2b60      	cmp	r3, #96	; 0x60
 8001366:	dc14      	bgt.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
 8001368:	2b40      	cmp	r3, #64	; 0x40
 800136a:	d00c      	beq.n	8001386 <LIS3MDL_MagReadXYZ+0xa2>
 800136c:	2b40      	cmp	r3, #64	; 0x40
 800136e:	dc10      	bgt.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <LIS3MDL_MagReadXYZ+0x96>
 8001374:	2b20      	cmp	r3, #32
 8001376:	d003      	beq.n	8001380 <LIS3MDL_MagReadXYZ+0x9c>
 8001378:	e00b      	b.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <LIS3MDL_MagReadXYZ+0xfc>)
 800137c:	61bb      	str	r3, [r7, #24]
    break;
 800137e:	e008      	b.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <LIS3MDL_MagReadXYZ+0x100>)
 8001382:	61bb      	str	r3, [r7, #24]
    break;
 8001384:	e005      	b.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <LIS3MDL_MagReadXYZ+0x104>)
 8001388:	61bb      	str	r3, [r7, #24]
    break;
 800138a:	e002      	b.n	8001392 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <LIS3MDL_MagReadXYZ+0x108>)
 800138e:	61bb      	str	r3, [r7, #24]
    break;    
 8001390:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8001392:	2300      	movs	r3, #0
 8001394:	77fb      	strb	r3, [r7, #31]
 8001396:	e01a      	b.n	80013ce <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001398:	7ffb      	ldrb	r3, [r7, #31]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	3320      	adds	r3, #32
 800139e:	443b      	add	r3, r7
 80013a0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80013b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b4:	7ffb      	ldrb	r3, [r7, #31]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c0:	ee17 2a90 	vmov	r2, s15
 80013c4:	b212      	sxth	r2, r2
 80013c6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80013c8:	7ffb      	ldrb	r3, [r7, #31]
 80013ca:	3301      	adds	r3, #1
 80013cc:	77fb      	strb	r3, [r7, #31]
 80013ce:	7ffb      	ldrb	r3, [r7, #31]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d9e1      	bls.n	8001398 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3720      	adds	r7, #32
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	3e0f5c29 	.word	0x3e0f5c29
 80013e4:	3e947ae1 	.word	0x3e947ae1
 80013e8:	3edc28f6 	.word	0x3edc28f6
 80013ec:	3f147ae1 	.word	0x3f147ae1

080013f0 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 f879 	bl	80014f4 <LPS22HB_Init>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001418:	f005 fc3e 	bl	8006c98 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	210f      	movs	r1, #15
 8001422:	4618      	mov	r0, r3
 8001424:	f005 fc5c 	bl	8006ce0 <SENSOR_IO_Read>
 8001428:	4603      	mov	r3, r0
 800142a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800142c:	7bfb      	ldrb	r3, [r7, #15]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8001446:	2300      	movs	r3, #0
 8001448:	74fb      	strb	r3, [r7, #19]
 800144a:	e013      	b.n	8001474 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	7cfb      	ldrb	r3, [r7, #19]
 8001452:	3328      	adds	r3, #40	; 0x28
 8001454:	b2db      	uxtb	r3, r3
 8001456:	7cfc      	ldrb	r4, [r7, #19]
 8001458:	4619      	mov	r1, r3
 800145a:	4610      	mov	r0, r2
 800145c:	f005 fc40 	bl	8006ce0 <SENSOR_IO_Read>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	f104 0318 	add.w	r3, r4, #24
 8001468:	443b      	add	r3, r7
 800146a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800146e:	7cfb      	ldrb	r3, [r7, #19]
 8001470:	3301      	adds	r3, #1
 8001472:	74fb      	strb	r3, [r7, #19]
 8001474:	7cfb      	ldrb	r3, [r7, #19]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d9e8      	bls.n	800144c <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800147a:	2300      	movs	r3, #0
 800147c:	74fb      	strb	r3, [r7, #19]
 800147e:	e00f      	b.n	80014a0 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8001480:	7cfb      	ldrb	r3, [r7, #19]
 8001482:	3318      	adds	r3, #24
 8001484:	443b      	add	r3, r7
 8001486:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800148a:	461a      	mov	r2, r3
 800148c:	7cfb      	ldrb	r3, [r7, #19]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	4313      	orrs	r3, r2
 8001498:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800149a:	7cfb      	ldrb	r3, [r7, #19]
 800149c:	3301      	adds	r3, #1
 800149e:	74fb      	strb	r3, [r7, #19]
 80014a0:	7cfb      	ldrb	r3, [r7, #19]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d9ec      	bls.n	8001480 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80014b6:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2264      	movs	r2, #100	; 0x64
 80014c0:	fb02 f303 	mul.w	r3, r2, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	da01      	bge.n	80014cc <LPS22HB_P_ReadPressure+0x94>
 80014c8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80014cc:	131b      	asrs	r3, r3, #12
 80014ce:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014da:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014f0 <LPS22HB_P_ReadPressure+0xb8>
 80014de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014e2:	eef0 7a66 	vmov.f32	s15, s13
}
 80014e6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ea:	371c      	adds	r7, #28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd90      	pop	{r4, r7, pc}
 80014f0:	42c80000 	.word	0x42c80000

080014f4 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	211a      	movs	r1, #26
 8001504:	4618      	mov	r0, r3
 8001506:	f005 fbeb 	bl	8006ce0 <SENSOR_IO_Read>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	211a      	movs	r1, #26
 8001526:	4618      	mov	r0, r3
 8001528:	f005 fbc0 	bl	8006cac <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2110      	movs	r1, #16
 8001532:	4618      	mov	r0, r3
 8001534:	f005 fbd4 	bl	8006ce0 <SENSOR_IO_Read>
 8001538:	4603      	mov	r3, r0
 800153a:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001542:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800154a:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	f023 0302 	bic.w	r3, r3, #2
 8001552:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	2110      	movs	r1, #16
 8001564:	4618      	mov	r0, r3
 8001566:	f005 fba1 	bl	8006cac <SENSOR_IO_Write>
}  
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001580:	2110      	movs	r1, #16
 8001582:	20d4      	movs	r0, #212	; 0xd4
 8001584:	f005 fbac 	bl	8006ce0 <SENSOR_IO_Read>
 8001588:	4603      	mov	r3, r0
 800158a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001590:	7bbb      	ldrb	r3, [r7, #14]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001598:	7bba      	ldrb	r2, [r7, #14]
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	4313      	orrs	r3, r2
 800159e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80015a0:	7bbb      	ldrb	r3, [r7, #14]
 80015a2:	461a      	mov	r2, r3
 80015a4:	2110      	movs	r1, #16
 80015a6:	20d4      	movs	r0, #212	; 0xd4
 80015a8:	f005 fb80 	bl	8006cac <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80015ac:	2112      	movs	r1, #18
 80015ae:	20d4      	movs	r0, #212	; 0xd4
 80015b0:	f005 fb96 	bl	8006ce0 <SENSOR_IO_Read>
 80015b4:	4603      	mov	r3, r0
 80015b6:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	b29b      	uxth	r3, r3
 80015be:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80015c0:	7bbb      	ldrb	r3, [r7, #14]
 80015c2:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80015c6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80015c8:	7bba      	ldrb	r2, [r7, #14]
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80015d0:	7bbb      	ldrb	r3, [r7, #14]
 80015d2:	461a      	mov	r2, r3
 80015d4:	2112      	movs	r1, #18
 80015d6:	20d4      	movs	r0, #212	; 0xd4
 80015d8:	f005 fb68 	bl	8006cac <SENSOR_IO_Write>
}
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80015ea:	2300      	movs	r3, #0
 80015ec:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80015ee:	2110      	movs	r1, #16
 80015f0:	20d4      	movs	r0, #212	; 0xd4
 80015f2:	f005 fb75 	bl	8006ce0 <SENSOR_IO_Read>
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 030f 	and.w	r3, r3, #15
 8001600:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	461a      	mov	r2, r3
 8001606:	2110      	movs	r1, #16
 8001608:	20d4      	movs	r0, #212	; 0xd4
 800160a:	f005 fb4f 	bl	8006cac <SENSOR_IO_Write>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001616:	b580      	push	{r7, lr}
 8001618:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800161a:	f005 fb3d 	bl	8006c98 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800161e:	210f      	movs	r1, #15
 8001620:	20d4      	movs	r0, #212	; 0xd4
 8001622:	f005 fb5d 	bl	8006ce0 <SENSOR_IO_Read>
 8001626:	4603      	mov	r3, r0
}
 8001628:	4618      	mov	r0, r3
 800162a:	bd80      	pop	{r7, pc}

0800162c <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001636:	2300      	movs	r3, #0
 8001638:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800163a:	2115      	movs	r1, #21
 800163c:	20d4      	movs	r0, #212	; 0xd4
 800163e:	f005 fb4f 	bl	8006ce0 <SENSOR_IO_Read>
 8001642:	4603      	mov	r3, r0
 8001644:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	f023 0310 	bic.w	r3, r3, #16
 800164c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	f043 0310 	orr.w	r3, r3, #16
 800165a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	461a      	mov	r2, r3
 8001660:	2115      	movs	r1, #21
 8001662:	20d4      	movs	r0, #212	; 0xd4
 8001664:	f005 fb22 	bl	8006cac <SENSOR_IO_Write>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001678:	2300      	movs	r3, #0
 800167a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001686:	2110      	movs	r1, #16
 8001688:	20d4      	movs	r0, #212	; 0xd4
 800168a:	f005 fb29 	bl	8006ce0 <SENSOR_IO_Read>
 800168e:	4603      	mov	r3, r0
 8001690:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001692:	f107 0208 	add.w	r2, r7, #8
 8001696:	2306      	movs	r3, #6
 8001698:	2128      	movs	r1, #40	; 0x28
 800169a:	20d4      	movs	r0, #212	; 0xd4
 800169c:	f005 fb3e 	bl	8006d1c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	77fb      	strb	r3, [r7, #31]
 80016a4:	e01c      	b.n	80016e0 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80016a6:	7ffb      	ldrb	r3, [r7, #31]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	3301      	adds	r3, #1
 80016ac:	3320      	adds	r3, #32
 80016ae:	443b      	add	r3, r7
 80016b0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	7ffb      	ldrb	r3, [r7, #31]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	3320      	adds	r3, #32
 80016c0:	443b      	add	r3, r7
 80016c2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4413      	add	r3, r2
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	7ffb      	ldrb	r3, [r7, #31]
 80016ce:	b212      	sxth	r2, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	3320      	adds	r3, #32
 80016d4:	443b      	add	r3, r7
 80016d6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80016da:	7ffb      	ldrb	r3, [r7, #31]
 80016dc:	3301      	adds	r3, #1
 80016de:	77fb      	strb	r3, [r7, #31]
 80016e0:	7ffb      	ldrb	r3, [r7, #31]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d9df      	bls.n	80016a6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80016e6:	7dfb      	ldrb	r3, [r7, #23]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b0c      	cmp	r3, #12
 80016ee:	d829      	bhi.n	8001744 <LSM6DSL_AccReadXYZ+0xd4>
 80016f0:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <LSM6DSL_AccReadXYZ+0x88>)
 80016f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f6:	bf00      	nop
 80016f8:	0800172d 	.word	0x0800172d
 80016fc:	08001745 	.word	0x08001745
 8001700:	08001745 	.word	0x08001745
 8001704:	08001745 	.word	0x08001745
 8001708:	0800173f 	.word	0x0800173f
 800170c:	08001745 	.word	0x08001745
 8001710:	08001745 	.word	0x08001745
 8001714:	08001745 	.word	0x08001745
 8001718:	08001733 	.word	0x08001733
 800171c:	08001745 	.word	0x08001745
 8001720:	08001745 	.word	0x08001745
 8001724:	08001745 	.word	0x08001745
 8001728:	08001739 	.word	0x08001739
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <LSM6DSL_AccReadXYZ+0x120>)
 800172e:	61bb      	str	r3, [r7, #24]
    break;
 8001730:	e008      	b.n	8001744 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <LSM6DSL_AccReadXYZ+0x124>)
 8001734:	61bb      	str	r3, [r7, #24]
    break;
 8001736:	e005      	b.n	8001744 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001738:	4b17      	ldr	r3, [pc, #92]	; (8001798 <LSM6DSL_AccReadXYZ+0x128>)
 800173a:	61bb      	str	r3, [r7, #24]
    break;
 800173c:	e002      	b.n	8001744 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <LSM6DSL_AccReadXYZ+0x12c>)
 8001740:	61bb      	str	r3, [r7, #24]
    break;    
 8001742:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001744:	2300      	movs	r3, #0
 8001746:	77fb      	strb	r3, [r7, #31]
 8001748:	e01a      	b.n	8001780 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800174a:	7ffb      	ldrb	r3, [r7, #31]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	3320      	adds	r3, #32
 8001750:	443b      	add	r3, r7
 8001752:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800175e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001766:	7ffb      	ldrb	r3, [r7, #31]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001772:	ee17 2a90 	vmov	r2, s15
 8001776:	b212      	sxth	r2, r2
 8001778:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800177a:	7ffb      	ldrb	r3, [r7, #31]
 800177c:	3301      	adds	r3, #1
 800177e:	77fb      	strb	r3, [r7, #31]
 8001780:	7ffb      	ldrb	r3, [r7, #31]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d9e1      	bls.n	800174a <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8001786:	bf00      	nop
 8001788:	bf00      	nop
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	3d79db23 	.word	0x3d79db23
 8001794:	3df9db23 	.word	0x3df9db23
 8001798:	3e79db23 	.word	0x3e79db23
 800179c:	3ef9db23 	.word	0x3ef9db23

080017a0 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80017aa:	2300      	movs	r3, #0
 80017ac:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80017ae:	2111      	movs	r1, #17
 80017b0:	20d4      	movs	r0, #212	; 0xd4
 80017b2:	f005 fa95 	bl	8006ce0 <SENSOR_IO_Read>
 80017b6:	4603      	mov	r3, r0
 80017b8:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80017be:	7bbb      	ldrb	r3, [r7, #14]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80017c6:	7bba      	ldrb	r2, [r7, #14]
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80017ce:	7bbb      	ldrb	r3, [r7, #14]
 80017d0:	461a      	mov	r2, r3
 80017d2:	2111      	movs	r1, #17
 80017d4:	20d4      	movs	r0, #212	; 0xd4
 80017d6:	f005 fa69 	bl	8006cac <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80017da:	2112      	movs	r1, #18
 80017dc:	20d4      	movs	r0, #212	; 0xd4
 80017de:	f005 fa7f 	bl	8006ce0 <SENSOR_IO_Read>
 80017e2:	4603      	mov	r3, r0
 80017e4:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80017ee:	7bbb      	ldrb	r3, [r7, #14]
 80017f0:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80017f4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80017f6:	7bba      	ldrb	r2, [r7, #14]
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80017fe:	7bbb      	ldrb	r3, [r7, #14]
 8001800:	461a      	mov	r2, r3
 8001802:	2112      	movs	r1, #18
 8001804:	20d4      	movs	r0, #212	; 0xd4
 8001806:	f005 fa51 	bl	8006cac <SENSOR_IO_Write>
}
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001818:	2300      	movs	r3, #0
 800181a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800181c:	2111      	movs	r1, #17
 800181e:	20d4      	movs	r0, #212	; 0xd4
 8001820:	f005 fa5e 	bl	8006ce0 <SENSOR_IO_Read>
 8001824:	4603      	mov	r3, r0
 8001826:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	461a      	mov	r2, r3
 8001834:	2111      	movs	r1, #17
 8001836:	20d4      	movs	r0, #212	; 0xd4
 8001838:	f005 fa38 	bl	8006cac <SENSOR_IO_Write>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001848:	f005 fa26 	bl	8006c98 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 800184c:	210f      	movs	r1, #15
 800184e:	20d4      	movs	r0, #212	; 0xd4
 8001850:	f005 fa46 	bl	8006ce0 <SENSOR_IO_Read>
 8001854:	4603      	mov	r3, r0
}
 8001856:	4618      	mov	r0, r3
 8001858:	bd80      	pop	{r7, pc}

0800185a <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8001868:	2116      	movs	r1, #22
 800186a:	20d4      	movs	r0, #212	; 0xd4
 800186c:	f005 fa38 	bl	8006ce0 <SENSOR_IO_Read>
 8001870:	4603      	mov	r3, r0
 8001872:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800187a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001888:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	461a      	mov	r2, r3
 800188e:	2116      	movs	r1, #22
 8001890:	20d4      	movs	r0, #212	; 0xd4
 8001892:	f005 fa0b 	bl	8006cac <SENSOR_IO_Write>
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80018b6:	2111      	movs	r1, #17
 80018b8:	20d4      	movs	r0, #212	; 0xd4
 80018ba:	f005 fa11 	bl	8006ce0 <SENSOR_IO_Read>
 80018be:	4603      	mov	r3, r0
 80018c0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80018c2:	f107 0208 	add.w	r2, r7, #8
 80018c6:	2306      	movs	r3, #6
 80018c8:	2122      	movs	r1, #34	; 0x22
 80018ca:	20d4      	movs	r0, #212	; 0xd4
 80018cc:	f005 fa26 	bl	8006d1c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80018d0:	2300      	movs	r3, #0
 80018d2:	77fb      	strb	r3, [r7, #31]
 80018d4:	e01c      	b.n	8001910 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80018d6:	7ffb      	ldrb	r3, [r7, #31]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	3301      	adds	r3, #1
 80018dc:	3320      	adds	r3, #32
 80018de:	443b      	add	r3, r7
 80018e0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	7ffb      	ldrb	r3, [r7, #31]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	3320      	adds	r3, #32
 80018f0:	443b      	add	r3, r7
 80018f2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	7ffb      	ldrb	r3, [r7, #31]
 80018fe:	b212      	sxth	r2, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	3320      	adds	r3, #32
 8001904:	443b      	add	r3, r7
 8001906:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800190a:	7ffb      	ldrb	r3, [r7, #31]
 800190c:	3301      	adds	r3, #1
 800190e:	77fb      	strb	r3, [r7, #31]
 8001910:	7ffb      	ldrb	r3, [r7, #31]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d9df      	bls.n	80018d6 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8001916:	7dfb      	ldrb	r3, [r7, #23]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	2b0c      	cmp	r3, #12
 800191e:	d829      	bhi.n	8001974 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8001920:	a201      	add	r2, pc, #4	; (adr r2, 8001928 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8001922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001926:	bf00      	nop
 8001928:	0800195d 	.word	0x0800195d
 800192c:	08001975 	.word	0x08001975
 8001930:	08001975 	.word	0x08001975
 8001934:	08001975 	.word	0x08001975
 8001938:	08001963 	.word	0x08001963
 800193c:	08001975 	.word	0x08001975
 8001940:	08001975 	.word	0x08001975
 8001944:	08001975 	.word	0x08001975
 8001948:	08001969 	.word	0x08001969
 800194c:	08001975 	.word	0x08001975
 8001950:	08001975 	.word	0x08001975
 8001954:	08001975 	.word	0x08001975
 8001958:	0800196f 	.word	0x0800196f
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 800195c:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 800195e:	61bb      	str	r3, [r7, #24]
    break;
 8001960:	e008      	b.n	8001974 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8001964:	61bb      	str	r3, [r7, #24]
    break;
 8001966:	e005      	b.n	8001974 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 800196a:	61bb      	str	r3, [r7, #24]
    break;
 800196c:	e002      	b.n	8001974 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8001970:	61bb      	str	r3, [r7, #24]
    break;    
 8001972:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001974:	2300      	movs	r3, #0
 8001976:	77fb      	strb	r3, [r7, #31]
 8001978:	e016      	b.n	80019a8 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800197a:	7ffb      	ldrb	r3, [r7, #31]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	3320      	adds	r3, #32
 8001980:	443b      	add	r3, r7
 8001982:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800198e:	7ffb      	ldrb	r3, [r7, #31]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	edd7 7a06 	vldr	s15, [r7, #24]
 800199a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199e:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80019a2:	7ffb      	ldrb	r3, [r7, #31]
 80019a4:	3301      	adds	r3, #1
 80019a6:	77fb      	strb	r3, [r7, #31]
 80019a8:	7ffb      	ldrb	r3, [r7, #31]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d9e5      	bls.n	800197a <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 80019ae:	bf00      	nop
 80019b0:	bf00      	nop
 80019b2:	3720      	adds	r7, #32
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	410c0000 	.word	0x410c0000
 80019bc:	418c0000 	.word	0x418c0000
 80019c0:	420c0000 	.word	0x420c0000
 80019c4:	428c0000 	.word	0x428c0000

080019c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d2:	2003      	movs	r0, #3
 80019d4:	f000 faaf 	bl	8001f36 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019d8:	200f      	movs	r0, #15
 80019da:	f005 fc77 	bl	80072cc <HAL_InitTick>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	e001      	b.n	80019ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019ea:	f005 faff 	bl	8006fec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019ee:	79fb      	ldrb	r3, [r7, #7]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return uwTick;
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_GetTick+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	200002b8 	.word	0x200002b8

08001a10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	609a      	str	r2, [r3, #8]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6093      	str	r3, [r2, #8]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a6e:	d101      	bne.n	8001a74 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a96:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001abe:	d101      	bne.n	8001ac4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <LL_ADC_IsEnabled+0x18>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <LL_ADC_IsEnabled+0x1a>
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d101      	bne.n	8001b10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d101      	bne.n	8001b36 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e12f      	b.n	8001dbe <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d109      	bne.n	8001b80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f005 fa65 	bl	800703c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff68 	bl	8001a5a <LL_ADC_IsDeepPowerDownEnabled>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d004      	beq.n	8001b9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff4e 	bl	8001a36 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff83 	bl	8001aaa <LL_ADC_IsInternalRegulatorEnabled>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d115      	bne.n	8001bd6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ff67 	bl	8001a82 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bb4:	4b84      	ldr	r3, [pc, #528]	; (8001dc8 <HAL_ADC_Init+0x284>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	099b      	lsrs	r3, r3, #6
 8001bba:	4a84      	ldr	r2, [pc, #528]	; (8001dcc <HAL_ADC_Init+0x288>)
 8001bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc0:	099b      	lsrs	r3, r3, #6
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bc8:	e002      	b.n	8001bd0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f9      	bne.n	8001bca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ff65 	bl	8001aaa <LL_ADC_IsInternalRegulatorEnabled>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10d      	bne.n	8001c02 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f043 0210 	orr.w	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf6:	f043 0201 	orr.w	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff76 	bl	8001af8 <LL_ADC_REG_IsConversionOngoing>
 8001c0c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f040 80c8 	bne.w	8001dac <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f040 80c4 	bne.w	8001dac <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c28:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c2c:	f043 0202 	orr.w	r2, r3, #2
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff4a 	bl	8001ad2 <LL_ADC_IsEnabled>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10b      	bne.n	8001c5c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c44:	4862      	ldr	r0, [pc, #392]	; (8001dd0 <HAL_ADC_Init+0x28c>)
 8001c46:	f7ff ff44 	bl	8001ad2 <LL_ADC_IsEnabled>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d105      	bne.n	8001c5c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	4619      	mov	r1, r3
 8001c56:	485f      	ldr	r0, [pc, #380]	; (8001dd4 <HAL_ADC_Init+0x290>)
 8001c58:	f7ff feda 	bl	8001a10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	7e5b      	ldrb	r3, [r3, #25]
 8001c60:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c66:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c6c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c72:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c7a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d106      	bne.n	8001c98 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	045b      	lsls	r3, r3, #17
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d009      	beq.n	8001cb4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <HAL_ADC_Init+0x294>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	69b9      	ldr	r1, [r7, #24]
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff13 	bl	8001af8 <LL_ADC_REG_IsConversionOngoing>
 8001cd2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff20 	bl	8001b1e <LL_ADC_INJ_IsConversionOngoing>
 8001cde:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d140      	bne.n	8001d68 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d13d      	bne.n	8001d68 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7e1b      	ldrb	r3, [r3, #24]
 8001cf4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cf6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cfe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d0e:	f023 0306 	bic.w	r3, r3, #6
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	69b9      	ldr	r1, [r7, #24]
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d118      	bne.n	8001d58 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d30:	f023 0304 	bic.w	r3, r3, #4
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d3c:	4311      	orrs	r1, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d42:	4311      	orrs	r1, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0201 	orr.w	r2, r2, #1
 8001d54:	611a      	str	r2, [r3, #16]
 8001d56:	e007      	b.n	8001d68 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0201 	bic.w	r2, r2, #1
 8001d66:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d10c      	bne.n	8001d8a <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f023 010f 	bic.w	r1, r3, #15
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	1e5a      	subs	r2, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	631a      	str	r2, [r3, #48]	; 0x30
 8001d88:	e007      	b.n	8001d9a <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 020f 	bic.w	r2, r2, #15
 8001d98:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	f023 0303 	bic.w	r3, r3, #3
 8001da2:	f043 0201 	orr.w	r2, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	659a      	str	r2, [r3, #88]	; 0x58
 8001daa:	e007      	b.n	8001dbc <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	f043 0210 	orr.w	r2, r3, #16
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3720      	adds	r7, #32
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200000c8 	.word	0x200000c8
 8001dcc:	053e2d63 	.word	0x053e2d63
 8001dd0:	50040000 	.word	0x50040000
 8001dd4:	50040300 	.word	0x50040300
 8001dd8:	fff0c007 	.word	0xfff0c007

08001ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0e:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	60d3      	str	r3, [r2, #12]
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <__NVIC_GetPriorityGrouping+0x18>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	f003 0307 	and.w	r3, r3, #7
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	db0b      	blt.n	8001e6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	f003 021f 	and.w	r2, r3, #31
 8001e58:	4907      	ldr	r1, [pc, #28]	; (8001e78 <__NVIC_EnableIRQ+0x38>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	2001      	movs	r0, #1
 8001e62:	fa00 f202 	lsl.w	r2, r0, r2
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000e100 	.word	0xe000e100

08001e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	db0a      	blt.n	8001ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	490c      	ldr	r1, [pc, #48]	; (8001ec8 <__NVIC_SetPriority+0x4c>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	0112      	lsls	r2, r2, #4
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea4:	e00a      	b.n	8001ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4908      	ldr	r1, [pc, #32]	; (8001ecc <__NVIC_SetPriority+0x50>)
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	3b04      	subs	r3, #4
 8001eb4:	0112      	lsls	r2, r2, #4
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	440b      	add	r3, r1
 8001eba:	761a      	strb	r2, [r3, #24]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000e100 	.word	0xe000e100
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f1c3 0307 	rsb	r3, r3, #7
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	bf28      	it	cs
 8001eee:	2304      	movcs	r3, #4
 8001ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d902      	bls.n	8001f00 <NVIC_EncodePriority+0x30>
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3b03      	subs	r3, #3
 8001efe:	e000      	b.n	8001f02 <NVIC_EncodePriority+0x32>
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	401a      	ands	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f18:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	43d9      	mvns	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	4313      	orrs	r3, r2
         );
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3724      	adds	r7, #36	; 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ff4c 	bl	8001ddc <__NVIC_SetPriorityGrouping>
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f5e:	f7ff ff61 	bl	8001e24 <__NVIC_GetPriorityGrouping>
 8001f62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	68b9      	ldr	r1, [r7, #8]
 8001f68:	6978      	ldr	r0, [r7, #20]
 8001f6a:	f7ff ffb1 	bl	8001ed0 <NVIC_EncodePriority>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff80 	bl	8001e7c <__NVIC_SetPriority>
}
 8001f7c:	bf00      	nop
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff54 	bl	8001e40 <__NVIC_EnableIRQ>
}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fae:	e166      	b.n	800227e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8158 	beq.w	8002278 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d005      	beq.n	8001fe0 <HAL_GPIO_Init+0x40>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d130      	bne.n	8002042 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	2203      	movs	r2, #3
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002016:	2201      	movs	r2, #1
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	f003 0201 	and.w	r2, r3, #1
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	2b03      	cmp	r3, #3
 800204c:	d017      	beq.n	800207e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	2203      	movs	r2, #3
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d123      	bne.n	80020d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	08da      	lsrs	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3208      	adds	r2, #8
 8002092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	220f      	movs	r2, #15
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	08da      	lsrs	r2, r3, #3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3208      	adds	r2, #8
 80020cc:	6939      	ldr	r1, [r7, #16]
 80020ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	2203      	movs	r2, #3
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0203 	and.w	r2, r3, #3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 80b2 	beq.w	8002278 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002114:	4b61      	ldr	r3, [pc, #388]	; (800229c <HAL_GPIO_Init+0x2fc>)
 8002116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002118:	4a60      	ldr	r2, [pc, #384]	; (800229c <HAL_GPIO_Init+0x2fc>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6613      	str	r3, [r2, #96]	; 0x60
 8002120:	4b5e      	ldr	r3, [pc, #376]	; (800229c <HAL_GPIO_Init+0x2fc>)
 8002122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800212c:	4a5c      	ldr	r2, [pc, #368]	; (80022a0 <HAL_GPIO_Init+0x300>)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	3302      	adds	r3, #2
 8002134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002138:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	220f      	movs	r2, #15
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002156:	d02b      	beq.n	80021b0 <HAL_GPIO_Init+0x210>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a52      	ldr	r2, [pc, #328]	; (80022a4 <HAL_GPIO_Init+0x304>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d025      	beq.n	80021ac <HAL_GPIO_Init+0x20c>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a51      	ldr	r2, [pc, #324]	; (80022a8 <HAL_GPIO_Init+0x308>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d01f      	beq.n	80021a8 <HAL_GPIO_Init+0x208>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a50      	ldr	r2, [pc, #320]	; (80022ac <HAL_GPIO_Init+0x30c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d019      	beq.n	80021a4 <HAL_GPIO_Init+0x204>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a4f      	ldr	r2, [pc, #316]	; (80022b0 <HAL_GPIO_Init+0x310>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d013      	beq.n	80021a0 <HAL_GPIO_Init+0x200>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a4e      	ldr	r2, [pc, #312]	; (80022b4 <HAL_GPIO_Init+0x314>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00d      	beq.n	800219c <HAL_GPIO_Init+0x1fc>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a4d      	ldr	r2, [pc, #308]	; (80022b8 <HAL_GPIO_Init+0x318>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d007      	beq.n	8002198 <HAL_GPIO_Init+0x1f8>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a4c      	ldr	r2, [pc, #304]	; (80022bc <HAL_GPIO_Init+0x31c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d101      	bne.n	8002194 <HAL_GPIO_Init+0x1f4>
 8002190:	2307      	movs	r3, #7
 8002192:	e00e      	b.n	80021b2 <HAL_GPIO_Init+0x212>
 8002194:	2308      	movs	r3, #8
 8002196:	e00c      	b.n	80021b2 <HAL_GPIO_Init+0x212>
 8002198:	2306      	movs	r3, #6
 800219a:	e00a      	b.n	80021b2 <HAL_GPIO_Init+0x212>
 800219c:	2305      	movs	r3, #5
 800219e:	e008      	b.n	80021b2 <HAL_GPIO_Init+0x212>
 80021a0:	2304      	movs	r3, #4
 80021a2:	e006      	b.n	80021b2 <HAL_GPIO_Init+0x212>
 80021a4:	2303      	movs	r3, #3
 80021a6:	e004      	b.n	80021b2 <HAL_GPIO_Init+0x212>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e002      	b.n	80021b2 <HAL_GPIO_Init+0x212>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <HAL_GPIO_Init+0x212>
 80021b0:	2300      	movs	r3, #0
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	f002 0203 	and.w	r2, r2, #3
 80021b8:	0092      	lsls	r2, r2, #2
 80021ba:	4093      	lsls	r3, r2
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021c2:	4937      	ldr	r1, [pc, #220]	; (80022a0 <HAL_GPIO_Init+0x300>)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	089b      	lsrs	r3, r3, #2
 80021c8:	3302      	adds	r3, #2
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021d0:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <HAL_GPIO_Init+0x320>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	43db      	mvns	r3, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021f4:	4a32      	ldr	r2, [pc, #200]	; (80022c0 <HAL_GPIO_Init+0x320>)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021fa:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <HAL_GPIO_Init+0x320>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800221e:	4a28      	ldr	r2, [pc, #160]	; (80022c0 <HAL_GPIO_Init+0x320>)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002224:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <HAL_GPIO_Init+0x320>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002248:	4a1d      	ldr	r2, [pc, #116]	; (80022c0 <HAL_GPIO_Init+0x320>)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <HAL_GPIO_Init+0x320>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002272:	4a13      	ldr	r2, [pc, #76]	; (80022c0 <HAL_GPIO_Init+0x320>)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	3301      	adds	r3, #1
 800227c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	fa22 f303 	lsr.w	r3, r2, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	f47f ae91 	bne.w	8001fb0 <HAL_GPIO_Init+0x10>
  }
}
 800228e:	bf00      	nop
 8002290:	bf00      	nop
 8002292:	371c      	adds	r7, #28
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010000 	.word	0x40010000
 80022a4:	48000400 	.word	0x48000400
 80022a8:	48000800 	.word	0x48000800
 80022ac:	48000c00 	.word	0x48000c00
 80022b0:	48001000 	.word	0x48001000
 80022b4:	48001400 	.word	0x48001400
 80022b8:	48001800 	.word	0x48001800
 80022bc:	48001c00 	.word	0x48001c00
 80022c0:	40010400 	.word	0x40010400

080022c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80022d2:	e0c9      	b.n	8002468 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80022d4:	2201      	movs	r2, #1
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	4013      	ands	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80bc 	beq.w	8002462 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80022ea:	4a66      	ldr	r2, [pc, #408]	; (8002484 <HAL_GPIO_DeInit+0x1c0>)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	3302      	adds	r3, #2
 80022f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	220f      	movs	r2, #15
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4013      	ands	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002312:	d02b      	beq.n	800236c <HAL_GPIO_DeInit+0xa8>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a5c      	ldr	r2, [pc, #368]	; (8002488 <HAL_GPIO_DeInit+0x1c4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d025      	beq.n	8002368 <HAL_GPIO_DeInit+0xa4>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a5b      	ldr	r2, [pc, #364]	; (800248c <HAL_GPIO_DeInit+0x1c8>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d01f      	beq.n	8002364 <HAL_GPIO_DeInit+0xa0>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a5a      	ldr	r2, [pc, #360]	; (8002490 <HAL_GPIO_DeInit+0x1cc>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d019      	beq.n	8002360 <HAL_GPIO_DeInit+0x9c>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a59      	ldr	r2, [pc, #356]	; (8002494 <HAL_GPIO_DeInit+0x1d0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d013      	beq.n	800235c <HAL_GPIO_DeInit+0x98>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a58      	ldr	r2, [pc, #352]	; (8002498 <HAL_GPIO_DeInit+0x1d4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00d      	beq.n	8002358 <HAL_GPIO_DeInit+0x94>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a57      	ldr	r2, [pc, #348]	; (800249c <HAL_GPIO_DeInit+0x1d8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d007      	beq.n	8002354 <HAL_GPIO_DeInit+0x90>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a56      	ldr	r2, [pc, #344]	; (80024a0 <HAL_GPIO_DeInit+0x1dc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d101      	bne.n	8002350 <HAL_GPIO_DeInit+0x8c>
 800234c:	2307      	movs	r3, #7
 800234e:	e00e      	b.n	800236e <HAL_GPIO_DeInit+0xaa>
 8002350:	2308      	movs	r3, #8
 8002352:	e00c      	b.n	800236e <HAL_GPIO_DeInit+0xaa>
 8002354:	2306      	movs	r3, #6
 8002356:	e00a      	b.n	800236e <HAL_GPIO_DeInit+0xaa>
 8002358:	2305      	movs	r3, #5
 800235a:	e008      	b.n	800236e <HAL_GPIO_DeInit+0xaa>
 800235c:	2304      	movs	r3, #4
 800235e:	e006      	b.n	800236e <HAL_GPIO_DeInit+0xaa>
 8002360:	2303      	movs	r3, #3
 8002362:	e004      	b.n	800236e <HAL_GPIO_DeInit+0xaa>
 8002364:	2302      	movs	r3, #2
 8002366:	e002      	b.n	800236e <HAL_GPIO_DeInit+0xaa>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <HAL_GPIO_DeInit+0xaa>
 800236c:	2300      	movs	r3, #0
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	f002 0203 	and.w	r2, r2, #3
 8002374:	0092      	lsls	r2, r2, #2
 8002376:	4093      	lsls	r3, r2
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	429a      	cmp	r2, r3
 800237c:	d132      	bne.n	80023e4 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800237e:	4b49      	ldr	r3, [pc, #292]	; (80024a4 <HAL_GPIO_DeInit+0x1e0>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	43db      	mvns	r3, r3
 8002386:	4947      	ldr	r1, [pc, #284]	; (80024a4 <HAL_GPIO_DeInit+0x1e0>)
 8002388:	4013      	ands	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800238c:	4b45      	ldr	r3, [pc, #276]	; (80024a4 <HAL_GPIO_DeInit+0x1e0>)
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	43db      	mvns	r3, r3
 8002394:	4943      	ldr	r1, [pc, #268]	; (80024a4 <HAL_GPIO_DeInit+0x1e0>)
 8002396:	4013      	ands	r3, r2
 8002398:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800239a:	4b42      	ldr	r3, [pc, #264]	; (80024a4 <HAL_GPIO_DeInit+0x1e0>)
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	4940      	ldr	r1, [pc, #256]	; (80024a4 <HAL_GPIO_DeInit+0x1e0>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80023a8:	4b3e      	ldr	r3, [pc, #248]	; (80024a4 <HAL_GPIO_DeInit+0x1e0>)
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	493c      	ldr	r1, [pc, #240]	; (80024a4 <HAL_GPIO_DeInit+0x1e0>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	220f      	movs	r2, #15
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80023c6:	4a2f      	ldr	r2, [pc, #188]	; (8002484 <HAL_GPIO_DeInit+0x1c0>)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	089b      	lsrs	r3, r3, #2
 80023cc:	3302      	adds	r3, #2
 80023ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	43da      	mvns	r2, r3
 80023d6:	482b      	ldr	r0, [pc, #172]	; (8002484 <HAL_GPIO_DeInit+0x1c0>)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	089b      	lsrs	r3, r3, #2
 80023dc:	400a      	ands	r2, r1
 80023de:	3302      	adds	r3, #2
 80023e0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	2103      	movs	r1, #3
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	08da      	lsrs	r2, r3, #3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3208      	adds	r2, #8
 8002400:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	220f      	movs	r2, #15
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	08d2      	lsrs	r2, r2, #3
 8002418:	4019      	ands	r1, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3208      	adds	r2, #8
 800241e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	2103      	movs	r1, #3
 800242c:	fa01 f303 	lsl.w	r3, r1, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	401a      	ands	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	2101      	movs	r1, #1
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	401a      	ands	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	2103      	movs	r1, #3
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	401a      	ands	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3301      	adds	r3, #1
 8002466:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	f47f af2f 	bne.w	80022d4 <HAL_GPIO_DeInit+0x10>
  }
}
 8002476:	bf00      	nop
 8002478:	bf00      	nop
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40010000 	.word	0x40010000
 8002488:	48000400 	.word	0x48000400
 800248c:	48000800 	.word	0x48000800
 8002490:	48000c00 	.word	0x48000c00
 8002494:	48001000 	.word	0x48001000
 8002498:	48001400 	.word	0x48001400
 800249c:	48001800 	.word	0x48001800
 80024a0:	48001c00 	.word	0x48001c00
 80024a4:	40010400 	.word	0x40010400

080024a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	807b      	strh	r3, [r7, #2]
 80024b4:	4613      	mov	r3, r2
 80024b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b8:	787b      	ldrb	r3, [r7, #1]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024be:	887a      	ldrh	r2, [r7, #2]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024c4:	e002      	b.n	80024cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024c6:	887a      	ldrh	r2, [r7, #2]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024ea:	887a      	ldrh	r2, [r7, #2]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4013      	ands	r3, r2
 80024f0:	041a      	lsls	r2, r3, #16
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	43d9      	mvns	r1, r3
 80024f6:	887b      	ldrh	r3, [r7, #2]
 80024f8:	400b      	ands	r3, r1
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	619a      	str	r2, [r3, #24]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002516:	4b08      	ldr	r3, [pc, #32]	; (8002538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002522:	4a05      	ldr	r2, [pc, #20]	; (8002538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	4618      	mov	r0, r3
 800252c:	f004 f9dc 	bl	80068e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40010400 	.word	0x40010400

0800253c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e081      	b.n	8002652 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f004 fdae 	bl	80070c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2224      	movs	r2, #36	; 0x24
 800256c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0201 	bic.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800258c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800259c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d107      	bne.n	80025b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	e006      	b.n	80025c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d104      	bne.n	80025d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69d9      	ldr	r1, [r3, #28]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1a      	ldr	r2, [r3, #32]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e021      	b.n	80026b0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2224      	movs	r2, #36	; 0x24
 8002670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f004 fd7b 	bl	8007180 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af02      	add	r7, sp, #8
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	4608      	mov	r0, r1
 80026c2:	4611      	mov	r1, r2
 80026c4:	461a      	mov	r2, r3
 80026c6:	4603      	mov	r3, r0
 80026c8:	817b      	strh	r3, [r7, #10]
 80026ca:	460b      	mov	r3, r1
 80026cc:	813b      	strh	r3, [r7, #8]
 80026ce:	4613      	mov	r3, r2
 80026d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b20      	cmp	r3, #32
 80026dc:	f040 80f9 	bne.w	80028d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_I2C_Mem_Write+0x34>
 80026e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d105      	bne.n	80026f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0ed      	b.n	80028d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_I2C_Mem_Write+0x4e>
 8002702:	2302      	movs	r3, #2
 8002704:	e0e6      	b.n	80028d4 <HAL_I2C_Mem_Write+0x21c>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800270e:	f7ff f973 	bl	80019f8 <HAL_GetTick>
 8002712:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	2319      	movs	r3, #25
 800271a:	2201      	movs	r2, #1
 800271c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 fac3 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0d1      	b.n	80028d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2221      	movs	r2, #33	; 0x21
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2240      	movs	r2, #64	; 0x40
 800273c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a3a      	ldr	r2, [r7, #32]
 800274a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002750:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002758:	88f8      	ldrh	r0, [r7, #6]
 800275a:	893a      	ldrh	r2, [r7, #8]
 800275c:	8979      	ldrh	r1, [r7, #10]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	4603      	mov	r3, r0
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f9d3 	bl	8002b14 <I2C_RequestMemoryWrite>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0a9      	b.n	80028d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	2bff      	cmp	r3, #255	; 0xff
 8002788:	d90e      	bls.n	80027a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	22ff      	movs	r2, #255	; 0xff
 800278e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002794:	b2da      	uxtb	r2, r3
 8002796:	8979      	ldrh	r1, [r7, #10]
 8002798:	2300      	movs	r3, #0
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 fc2b 	bl	8002ffc <I2C_TransferConfig>
 80027a6:	e00f      	b.n	80027c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	8979      	ldrh	r1, [r7, #10]
 80027ba:	2300      	movs	r3, #0
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 fc1a 	bl	8002ffc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 faad 	bl	8002d2c <I2C_WaitOnTXISFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e07b      	b.n	80028d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	781a      	ldrb	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d034      	beq.n	8002880 <HAL_I2C_Mem_Write+0x1c8>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281a:	2b00      	cmp	r3, #0
 800281c:	d130      	bne.n	8002880 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002824:	2200      	movs	r2, #0
 8002826:	2180      	movs	r1, #128	; 0x80
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 fa3f 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e04d      	b.n	80028d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	2bff      	cmp	r3, #255	; 0xff
 8002840:	d90e      	bls.n	8002860 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	22ff      	movs	r2, #255	; 0xff
 8002846:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284c:	b2da      	uxtb	r2, r3
 800284e:	8979      	ldrh	r1, [r7, #10]
 8002850:	2300      	movs	r3, #0
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 fbcf 	bl	8002ffc <I2C_TransferConfig>
 800285e:	e00f      	b.n	8002880 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286e:	b2da      	uxtb	r2, r3
 8002870:	8979      	ldrh	r1, [r7, #10]
 8002872:	2300      	movs	r3, #0
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 fbbe 	bl	8002ffc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d19e      	bne.n	80027c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 fa8c 	bl	8002dac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e01a      	b.n	80028d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2220      	movs	r2, #32
 80028a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6859      	ldr	r1, [r3, #4]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <HAL_I2C_Mem_Write+0x224>)
 80028b2:	400b      	ands	r3, r1
 80028b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e000      	b.n	80028d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80028d2:	2302      	movs	r3, #2
  }
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	fe00e800 	.word	0xfe00e800

080028e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	4608      	mov	r0, r1
 80028ea:	4611      	mov	r1, r2
 80028ec:	461a      	mov	r2, r3
 80028ee:	4603      	mov	r3, r0
 80028f0:	817b      	strh	r3, [r7, #10]
 80028f2:	460b      	mov	r3, r1
 80028f4:	813b      	strh	r3, [r7, #8]
 80028f6:	4613      	mov	r3, r2
 80028f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b20      	cmp	r3, #32
 8002904:	f040 80fd 	bne.w	8002b02 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_I2C_Mem_Read+0x34>
 800290e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002910:	2b00      	cmp	r3, #0
 8002912:	d105      	bne.n	8002920 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800291a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0f1      	b.n	8002b04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_I2C_Mem_Read+0x4e>
 800292a:	2302      	movs	r3, #2
 800292c:	e0ea      	b.n	8002b04 <HAL_I2C_Mem_Read+0x224>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002936:	f7ff f85f 	bl	80019f8 <HAL_GetTick>
 800293a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	2319      	movs	r3, #25
 8002942:	2201      	movs	r2, #1
 8002944:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f9af 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0d5      	b.n	8002b04 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2222      	movs	r2, #34	; 0x22
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2240      	movs	r2, #64	; 0x40
 8002964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a3a      	ldr	r2, [r7, #32]
 8002972:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002978:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002980:	88f8      	ldrh	r0, [r7, #6]
 8002982:	893a      	ldrh	r2, [r7, #8]
 8002984:	8979      	ldrh	r1, [r7, #10]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	4603      	mov	r3, r0
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f913 	bl	8002bbc <I2C_RequestMemoryRead>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0ad      	b.n	8002b04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2bff      	cmp	r3, #255	; 0xff
 80029b0:	d90e      	bls.n	80029d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	22ff      	movs	r2, #255	; 0xff
 80029b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	8979      	ldrh	r1, [r7, #10]
 80029c0:	4b52      	ldr	r3, [pc, #328]	; (8002b0c <HAL_I2C_Mem_Read+0x22c>)
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 fb17 	bl	8002ffc <I2C_TransferConfig>
 80029ce:	e00f      	b.n	80029f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	8979      	ldrh	r1, [r7, #10]
 80029e2:	4b4a      	ldr	r3, [pc, #296]	; (8002b0c <HAL_I2C_Mem_Read+0x22c>)
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fb06 	bl	8002ffc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	2200      	movs	r2, #0
 80029f8:	2104      	movs	r1, #4
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f956 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e07c      	b.n	8002b04 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d034      	beq.n	8002ab0 <HAL_I2C_Mem_Read+0x1d0>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d130      	bne.n	8002ab0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a54:	2200      	movs	r2, #0
 8002a56:	2180      	movs	r1, #128	; 0x80
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f927 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e04d      	b.n	8002b04 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2bff      	cmp	r3, #255	; 0xff
 8002a70:	d90e      	bls.n	8002a90 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	22ff      	movs	r2, #255	; 0xff
 8002a76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	8979      	ldrh	r1, [r7, #10]
 8002a80:	2300      	movs	r3, #0
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 fab7 	bl	8002ffc <I2C_TransferConfig>
 8002a8e:	e00f      	b.n	8002ab0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	8979      	ldrh	r1, [r7, #10]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 faa6 	bl	8002ffc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d19a      	bne.n	80029f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f974 	bl	8002dac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e01a      	b.n	8002b04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6859      	ldr	r1, [r3, #4]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_I2C_Mem_Read+0x230>)
 8002ae2:	400b      	ands	r3, r1
 8002ae4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e000      	b.n	8002b04 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b02:	2302      	movs	r3, #2
  }
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	80002400 	.word	0x80002400
 8002b10:	fe00e800 	.word	0xfe00e800

08002b14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	4608      	mov	r0, r1
 8002b1e:	4611      	mov	r1, r2
 8002b20:	461a      	mov	r2, r3
 8002b22:	4603      	mov	r3, r0
 8002b24:	817b      	strh	r3, [r7, #10]
 8002b26:	460b      	mov	r3, r1
 8002b28:	813b      	strh	r3, [r7, #8]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	8979      	ldrh	r1, [r7, #10]
 8002b34:	4b20      	ldr	r3, [pc, #128]	; (8002bb8 <I2C_RequestMemoryWrite+0xa4>)
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 fa5d 	bl	8002ffc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	69b9      	ldr	r1, [r7, #24]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f8f0 	bl	8002d2c <I2C_WaitOnTXISFlagUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e02c      	b.n	8002bb0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d105      	bne.n	8002b68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b5c:	893b      	ldrh	r3, [r7, #8]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	629a      	str	r2, [r3, #40]	; 0x28
 8002b66:	e015      	b.n	8002b94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b68:	893b      	ldrh	r3, [r7, #8]
 8002b6a:	0a1b      	lsrs	r3, r3, #8
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	69b9      	ldr	r1, [r7, #24]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f8d6 	bl	8002d2c <I2C_WaitOnTXISFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e012      	b.n	8002bb0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b8a:	893b      	ldrh	r3, [r7, #8]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2180      	movs	r1, #128	; 0x80
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 f884 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	80002000 	.word	0x80002000

08002bbc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	4608      	mov	r0, r1
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4603      	mov	r3, r0
 8002bcc:	817b      	strh	r3, [r7, #10]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	813b      	strh	r3, [r7, #8]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	8979      	ldrh	r1, [r7, #10]
 8002bdc:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <I2C_RequestMemoryRead+0xa4>)
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	2300      	movs	r3, #0
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 fa0a 	bl	8002ffc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	69b9      	ldr	r1, [r7, #24]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f89d 	bl	8002d2c <I2C_WaitOnTXISFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e02c      	b.n	8002c56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d105      	bne.n	8002c0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c02:	893b      	ldrh	r3, [r7, #8]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28
 8002c0c:	e015      	b.n	8002c3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c0e:	893b      	ldrh	r3, [r7, #8]
 8002c10:	0a1b      	lsrs	r3, r3, #8
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	69b9      	ldr	r1, [r7, #24]
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f883 	bl	8002d2c <I2C_WaitOnTXISFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e012      	b.n	8002c56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c30:	893b      	ldrh	r3, [r7, #8]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	2200      	movs	r2, #0
 8002c42:	2140      	movs	r1, #64	; 0x40
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 f831 	bl	8002cac <I2C_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	80002000 	.word	0x80002000

08002c64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d103      	bne.n	8002c82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d007      	beq.n	8002ca0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699a      	ldr	r2, [r3, #24]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0201 	orr.w	r2, r2, #1
 8002c9e:	619a      	str	r2, [r3, #24]
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cbc:	e022      	b.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d01e      	beq.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc6:	f7fe fe97 	bl	80019f8 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d302      	bcc.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d113      	bne.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce0:	f043 0220 	orr.w	r2, r3, #32
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e00f      	b.n	8002d24 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699a      	ldr	r2, [r3, #24]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d0cd      	beq.n	8002cbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d38:	e02c      	b.n	8002d94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f870 	bl	8002e24 <I2C_IsErrorOccurred>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e02a      	b.n	8002da4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d01e      	beq.n	8002d94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d56:	f7fe fe4f 	bl	80019f8 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d113      	bne.n	8002d94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d70:	f043 0220 	orr.w	r2, r3, #32
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e007      	b.n	8002da4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d1cb      	bne.n	8002d3a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002db8:	e028      	b.n	8002e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f830 	bl	8002e24 <I2C_IsErrorOccurred>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e026      	b.n	8002e1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dce:	f7fe fe13 	bl	80019f8 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d302      	bcc.n	8002de4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d113      	bne.n	8002e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	f043 0220 	orr.w	r2, r3, #32
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e007      	b.n	8002e1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	d1cf      	bne.n	8002dba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08a      	sub	sp, #40	; 0x28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d075      	beq.n	8002f3c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2210      	movs	r2, #16
 8002e56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e58:	e056      	b.n	8002f08 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d052      	beq.n	8002f08 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e62:	f7fe fdc9 	bl	80019f8 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d302      	bcc.n	8002e78 <I2C_IsErrorOccurred+0x54>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d147      	bne.n	8002f08 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e9a:	d12e      	bne.n	8002efa <I2C_IsErrorOccurred+0xd6>
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ea2:	d02a      	beq.n	8002efa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002ea4:	7cfb      	ldrb	r3, [r7, #19]
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	d027      	beq.n	8002efa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eb8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002eba:	f7fe fd9d 	bl	80019f8 <HAL_GetTick>
 8002ebe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ec0:	e01b      	b.n	8002efa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ec2:	f7fe fd99 	bl	80019f8 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b19      	cmp	r3, #25
 8002ece:	d914      	bls.n	8002efa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed4:	f043 0220 	orr.w	r2, r3, #32
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d1dc      	bne.n	8002ec2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	d003      	beq.n	8002f1e <I2C_IsErrorOccurred+0xfa>
 8002f16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d09d      	beq.n	8002e5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d103      	bne.n	8002f2e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	f043 0304 	orr.w	r3, r3, #4
 8002f34:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00b      	beq.n	8002f88 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	f043 0308 	orr.w	r3, r3, #8
 8002f76:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00b      	beq.n	8002faa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fa2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002faa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d01c      	beq.n	8002fec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f7ff fe56 	bl	8002c64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6859      	ldr	r1, [r3, #4]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <I2C_IsErrorOccurred+0x1d4>)
 8002fc4:	400b      	ands	r3, r1
 8002fc6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3728      	adds	r7, #40	; 0x28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	fe00e800 	.word	0xfe00e800

08002ffc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	607b      	str	r3, [r7, #4]
 8003006:	460b      	mov	r3, r1
 8003008:	817b      	strh	r3, [r7, #10]
 800300a:	4613      	mov	r3, r2
 800300c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800300e:	897b      	ldrh	r3, [r7, #10]
 8003010:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003014:	7a7b      	ldrb	r3, [r7, #9]
 8003016:	041b      	lsls	r3, r3, #16
 8003018:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800301c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	4313      	orrs	r3, r2
 8003026:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800302a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	0d5b      	lsrs	r3, r3, #21
 8003036:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800303a:	4b08      	ldr	r3, [pc, #32]	; (800305c <I2C_TransferConfig+0x60>)
 800303c:	430b      	orrs	r3, r1
 800303e:	43db      	mvns	r3, r3
 8003040:	ea02 0103 	and.w	r1, r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800304e:	bf00      	nop
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	03ff63ff 	.word	0x03ff63ff

08003060 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b20      	cmp	r3, #32
 8003074:	d138      	bne.n	80030e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003080:	2302      	movs	r3, #2
 8003082:	e032      	b.n	80030ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2224      	movs	r2, #36	; 0x24
 8003090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6819      	ldr	r1, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e000      	b.n	80030ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
  }
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b085      	sub	sp, #20
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b20      	cmp	r3, #32
 800310a:	d139      	bne.n	8003180 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003116:	2302      	movs	r3, #2
 8003118:	e033      	b.n	8003182 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2224      	movs	r2, #36	; 0x24
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0201 	bic.w	r2, r2, #1
 8003138:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003148:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0201 	orr.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	e000      	b.n	8003182 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003180:	2302      	movs	r3, #2
  }
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003194:	4b0d      	ldr	r3, [pc, #52]	; (80031cc <HAL_PWREx_GetVoltageRange+0x3c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800319c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a0:	d102      	bne.n	80031a8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80031a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031a6:	e00b      	b.n	80031c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80031a8:	4b08      	ldr	r3, [pc, #32]	; (80031cc <HAL_PWREx_GetVoltageRange+0x3c>)
 80031aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b6:	d102      	bne.n	80031be <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80031b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031bc:	e000      	b.n	80031c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80031be:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40007000 	.word	0x40007000

080031d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d141      	bne.n	8003262 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031de:	4b4b      	ldr	r3, [pc, #300]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ea:	d131      	bne.n	8003250 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031ec:	4b47      	ldr	r3, [pc, #284]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031f2:	4a46      	ldr	r2, [pc, #280]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031fc:	4b43      	ldr	r3, [pc, #268]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003204:	4a41      	ldr	r2, [pc, #260]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800320a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800320c:	4b40      	ldr	r3, [pc, #256]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2232      	movs	r2, #50	; 0x32
 8003212:	fb02 f303 	mul.w	r3, r2, r3
 8003216:	4a3f      	ldr	r2, [pc, #252]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	0c9b      	lsrs	r3, r3, #18
 800321e:	3301      	adds	r3, #1
 8003220:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003222:	e002      	b.n	800322a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	3b01      	subs	r3, #1
 8003228:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800322a:	4b38      	ldr	r3, [pc, #224]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003236:	d102      	bne.n	800323e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f2      	bne.n	8003224 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800323e:	4b33      	ldr	r3, [pc, #204]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324a:	d158      	bne.n	80032fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e057      	b.n	8003300 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003250:	4b2e      	ldr	r3, [pc, #184]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003256:	4a2d      	ldr	r2, [pc, #180]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800325c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003260:	e04d      	b.n	80032fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003268:	d141      	bne.n	80032ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800326a:	4b28      	ldr	r3, [pc, #160]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003276:	d131      	bne.n	80032dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003278:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800327e:	4a23      	ldr	r2, [pc, #140]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003284:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003288:	4b20      	ldr	r3, [pc, #128]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003290:	4a1e      	ldr	r2, [pc, #120]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003296:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003298:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2232      	movs	r2, #50	; 0x32
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	4a1c      	ldr	r2, [pc, #112]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	0c9b      	lsrs	r3, r3, #18
 80032aa:	3301      	adds	r3, #1
 80032ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ae:	e002      	b.n	80032b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b6:	4b15      	ldr	r3, [pc, #84]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c2:	d102      	bne.n	80032ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f2      	bne.n	80032b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ca:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d6:	d112      	bne.n	80032fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e011      	b.n	8003300 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032e2:	4a0a      	ldr	r2, [pc, #40]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032ec:	e007      	b.n	80032fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032ee:	4b07      	ldr	r3, [pc, #28]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032f6:	4a05      	ldr	r2, [pc, #20]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032fc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	40007000 	.word	0x40007000
 8003310:	200000c8 	.word	0x200000c8
 8003314:	431bde83 	.word	0x431bde83

08003318 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d102      	bne.n	800332c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	f000 bc08 	b.w	8003b3c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800332c:	4b96      	ldr	r3, [pc, #600]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 030c 	and.w	r3, r3, #12
 8003334:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003336:	4b94      	ldr	r3, [pc, #592]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80e4 	beq.w	8003516 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d007      	beq.n	8003364 <HAL_RCC_OscConfig+0x4c>
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	2b0c      	cmp	r3, #12
 8003358:	f040 808b 	bne.w	8003472 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	2b01      	cmp	r3, #1
 8003360:	f040 8087 	bne.w	8003472 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003364:	4b88      	ldr	r3, [pc, #544]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <HAL_RCC_OscConfig+0x64>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e3df      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1a      	ldr	r2, [r3, #32]
 8003380:	4b81      	ldr	r3, [pc, #516]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b00      	cmp	r3, #0
 800338a:	d004      	beq.n	8003396 <HAL_RCC_OscConfig+0x7e>
 800338c:	4b7e      	ldr	r3, [pc, #504]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003394:	e005      	b.n	80033a2 <HAL_RCC_OscConfig+0x8a>
 8003396:	4b7c      	ldr	r3, [pc, #496]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 8003398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d223      	bcs.n	80033ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fdfe 	bl	8003fac <RCC_SetFlashLatencyFromMSIRange>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e3c0      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033ba:	4b73      	ldr	r3, [pc, #460]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a72      	ldr	r2, [pc, #456]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 80033c0:	f043 0308 	orr.w	r3, r3, #8
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	4b70      	ldr	r3, [pc, #448]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	496d      	ldr	r1, [pc, #436]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033d8:	4b6b      	ldr	r3, [pc, #428]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	021b      	lsls	r3, r3, #8
 80033e6:	4968      	ldr	r1, [pc, #416]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	604b      	str	r3, [r1, #4]
 80033ec:	e025      	b.n	800343a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033ee:	4b66      	ldr	r3, [pc, #408]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a65      	ldr	r2, [pc, #404]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 80033f4:	f043 0308 	orr.w	r3, r3, #8
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	4b63      	ldr	r3, [pc, #396]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	4960      	ldr	r1, [pc, #384]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 8003408:	4313      	orrs	r3, r2
 800340a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800340c:	4b5e      	ldr	r3, [pc, #376]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	021b      	lsls	r3, r3, #8
 800341a:	495b      	ldr	r1, [pc, #364]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 800341c:	4313      	orrs	r3, r2
 800341e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fdbe 	bl	8003fac <RCC_SetFlashLatencyFromMSIRange>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e380      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800343a:	f000 fcc1 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 800343e:	4602      	mov	r2, r0
 8003440:	4b51      	ldr	r3, [pc, #324]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	4950      	ldr	r1, [pc, #320]	; (800358c <HAL_RCC_OscConfig+0x274>)
 800344c:	5ccb      	ldrb	r3, [r1, r3]
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	fa22 f303 	lsr.w	r3, r2, r3
 8003456:	4a4e      	ldr	r2, [pc, #312]	; (8003590 <HAL_RCC_OscConfig+0x278>)
 8003458:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800345a:	4b4e      	ldr	r3, [pc, #312]	; (8003594 <HAL_RCC_OscConfig+0x27c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f003 ff34 	bl	80072cc <HAL_InitTick>
 8003464:	4603      	mov	r3, r0
 8003466:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d052      	beq.n	8003514 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	e364      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d032      	beq.n	80034e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800347a:	4b43      	ldr	r3, [pc, #268]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a42      	ldr	r2, [pc, #264]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003486:	f7fe fab7 	bl	80019f8 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800348e:	f7fe fab3 	bl	80019f8 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e34d      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034a0:	4b39      	ldr	r3, [pc, #228]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034ac:	4b36      	ldr	r3, [pc, #216]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a35      	ldr	r2, [pc, #212]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 80034b2:	f043 0308 	orr.w	r3, r3, #8
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	4b33      	ldr	r3, [pc, #204]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	4930      	ldr	r1, [pc, #192]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ca:	4b2f      	ldr	r3, [pc, #188]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	021b      	lsls	r3, r3, #8
 80034d8:	492b      	ldr	r1, [pc, #172]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	604b      	str	r3, [r1, #4]
 80034de:	e01a      	b.n	8003516 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034e0:	4b29      	ldr	r3, [pc, #164]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a28      	ldr	r2, [pc, #160]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034ec:	f7fe fa84 	bl	80019f8 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034f4:	f7fe fa80 	bl	80019f8 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e31a      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003506:	4b20      	ldr	r3, [pc, #128]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x1dc>
 8003512:	e000      	b.n	8003516 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003514:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d073      	beq.n	800360a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2b08      	cmp	r3, #8
 8003526:	d005      	beq.n	8003534 <HAL_RCC_OscConfig+0x21c>
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	2b0c      	cmp	r3, #12
 800352c:	d10e      	bne.n	800354c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2b03      	cmp	r3, #3
 8003532:	d10b      	bne.n	800354c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	4b14      	ldr	r3, [pc, #80]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d063      	beq.n	8003608 <HAL_RCC_OscConfig+0x2f0>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d15f      	bne.n	8003608 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e2f7      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003554:	d106      	bne.n	8003564 <HAL_RCC_OscConfig+0x24c>
 8003556:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 800355c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	e025      	b.n	80035b0 <HAL_RCC_OscConfig+0x298>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800356c:	d114      	bne.n	8003598 <HAL_RCC_OscConfig+0x280>
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a05      	ldr	r2, [pc, #20]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 8003574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b03      	ldr	r3, [pc, #12]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a02      	ldr	r2, [pc, #8]	; (8003588 <HAL_RCC_OscConfig+0x270>)
 8003580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e013      	b.n	80035b0 <HAL_RCC_OscConfig+0x298>
 8003588:	40021000 	.word	0x40021000
 800358c:	0800a344 	.word	0x0800a344
 8003590:	200000c8 	.word	0x200000c8
 8003594:	200000c4 	.word	0x200000c4
 8003598:	4ba0      	ldr	r3, [pc, #640]	; (800381c <HAL_RCC_OscConfig+0x504>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a9f      	ldr	r2, [pc, #636]	; (800381c <HAL_RCC_OscConfig+0x504>)
 800359e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	4b9d      	ldr	r3, [pc, #628]	; (800381c <HAL_RCC_OscConfig+0x504>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a9c      	ldr	r2, [pc, #624]	; (800381c <HAL_RCC_OscConfig+0x504>)
 80035aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d013      	beq.n	80035e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fe fa1e 	bl	80019f8 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c0:	f7fe fa1a 	bl	80019f8 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b64      	cmp	r3, #100	; 0x64
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e2b4      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035d2:	4b92      	ldr	r3, [pc, #584]	; (800381c <HAL_RCC_OscConfig+0x504>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f0      	beq.n	80035c0 <HAL_RCC_OscConfig+0x2a8>
 80035de:	e014      	b.n	800360a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fe fa0a 	bl	80019f8 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e8:	f7fe fa06 	bl	80019f8 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b64      	cmp	r3, #100	; 0x64
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e2a0      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035fa:	4b88      	ldr	r3, [pc, #544]	; (800381c <HAL_RCC_OscConfig+0x504>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x2d0>
 8003606:	e000      	b.n	800360a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d060      	beq.n	80036d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	2b04      	cmp	r3, #4
 800361a:	d005      	beq.n	8003628 <HAL_RCC_OscConfig+0x310>
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2b0c      	cmp	r3, #12
 8003620:	d119      	bne.n	8003656 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2b02      	cmp	r3, #2
 8003626:	d116      	bne.n	8003656 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003628:	4b7c      	ldr	r3, [pc, #496]	; (800381c <HAL_RCC_OscConfig+0x504>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_RCC_OscConfig+0x328>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e27d      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003640:	4b76      	ldr	r3, [pc, #472]	; (800381c <HAL_RCC_OscConfig+0x504>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	061b      	lsls	r3, r3, #24
 800364e:	4973      	ldr	r1, [pc, #460]	; (800381c <HAL_RCC_OscConfig+0x504>)
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003654:	e040      	b.n	80036d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d023      	beq.n	80036a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800365e:	4b6f      	ldr	r3, [pc, #444]	; (800381c <HAL_RCC_OscConfig+0x504>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a6e      	ldr	r2, [pc, #440]	; (800381c <HAL_RCC_OscConfig+0x504>)
 8003664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366a:	f7fe f9c5 	bl	80019f8 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003672:	f7fe f9c1 	bl	80019f8 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e25b      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003684:	4b65      	ldr	r3, [pc, #404]	; (800381c <HAL_RCC_OscConfig+0x504>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003690:	4b62      	ldr	r3, [pc, #392]	; (800381c <HAL_RCC_OscConfig+0x504>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	061b      	lsls	r3, r3, #24
 800369e:	495f      	ldr	r1, [pc, #380]	; (800381c <HAL_RCC_OscConfig+0x504>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]
 80036a4:	e018      	b.n	80036d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a6:	4b5d      	ldr	r3, [pc, #372]	; (800381c <HAL_RCC_OscConfig+0x504>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a5c      	ldr	r2, [pc, #368]	; (800381c <HAL_RCC_OscConfig+0x504>)
 80036ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b2:	f7fe f9a1 	bl	80019f8 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ba:	f7fe f99d 	bl	80019f8 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e237      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036cc:	4b53      	ldr	r3, [pc, #332]	; (800381c <HAL_RCC_OscConfig+0x504>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1f0      	bne.n	80036ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d03c      	beq.n	800375e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d01c      	beq.n	8003726 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ec:	4b4b      	ldr	r3, [pc, #300]	; (800381c <HAL_RCC_OscConfig+0x504>)
 80036ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f2:	4a4a      	ldr	r2, [pc, #296]	; (800381c <HAL_RCC_OscConfig+0x504>)
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fc:	f7fe f97c 	bl	80019f8 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003704:	f7fe f978 	bl	80019f8 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e212      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003716:	4b41      	ldr	r3, [pc, #260]	; (800381c <HAL_RCC_OscConfig+0x504>)
 8003718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0ef      	beq.n	8003704 <HAL_RCC_OscConfig+0x3ec>
 8003724:	e01b      	b.n	800375e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003726:	4b3d      	ldr	r3, [pc, #244]	; (800381c <HAL_RCC_OscConfig+0x504>)
 8003728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800372c:	4a3b      	ldr	r2, [pc, #236]	; (800381c <HAL_RCC_OscConfig+0x504>)
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003736:	f7fe f95f 	bl	80019f8 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800373e:	f7fe f95b 	bl	80019f8 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e1f5      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003750:	4b32      	ldr	r3, [pc, #200]	; (800381c <HAL_RCC_OscConfig+0x504>)
 8003752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1ef      	bne.n	800373e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80a6 	beq.w	80038b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800376c:	2300      	movs	r3, #0
 800376e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003770:	4b2a      	ldr	r3, [pc, #168]	; (800381c <HAL_RCC_OscConfig+0x504>)
 8003772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10d      	bne.n	8003798 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800377c:	4b27      	ldr	r3, [pc, #156]	; (800381c <HAL_RCC_OscConfig+0x504>)
 800377e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003780:	4a26      	ldr	r2, [pc, #152]	; (800381c <HAL_RCC_OscConfig+0x504>)
 8003782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003786:	6593      	str	r3, [r2, #88]	; 0x58
 8003788:	4b24      	ldr	r3, [pc, #144]	; (800381c <HAL_RCC_OscConfig+0x504>)
 800378a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003794:	2301      	movs	r3, #1
 8003796:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003798:	4b21      	ldr	r3, [pc, #132]	; (8003820 <HAL_RCC_OscConfig+0x508>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d118      	bne.n	80037d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a4:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <HAL_RCC_OscConfig+0x508>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1d      	ldr	r2, [pc, #116]	; (8003820 <HAL_RCC_OscConfig+0x508>)
 80037aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b0:	f7fe f922 	bl	80019f8 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b8:	f7fe f91e 	bl	80019f8 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e1b8      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ca:	4b15      	ldr	r3, [pc, #84]	; (8003820 <HAL_RCC_OscConfig+0x508>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d108      	bne.n	80037f0 <HAL_RCC_OscConfig+0x4d8>
 80037de:	4b0f      	ldr	r3, [pc, #60]	; (800381c <HAL_RCC_OscConfig+0x504>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e4:	4a0d      	ldr	r2, [pc, #52]	; (800381c <HAL_RCC_OscConfig+0x504>)
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037ee:	e029      	b.n	8003844 <HAL_RCC_OscConfig+0x52c>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b05      	cmp	r3, #5
 80037f6:	d115      	bne.n	8003824 <HAL_RCC_OscConfig+0x50c>
 80037f8:	4b08      	ldr	r3, [pc, #32]	; (800381c <HAL_RCC_OscConfig+0x504>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fe:	4a07      	ldr	r2, [pc, #28]	; (800381c <HAL_RCC_OscConfig+0x504>)
 8003800:	f043 0304 	orr.w	r3, r3, #4
 8003804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003808:	4b04      	ldr	r3, [pc, #16]	; (800381c <HAL_RCC_OscConfig+0x504>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380e:	4a03      	ldr	r2, [pc, #12]	; (800381c <HAL_RCC_OscConfig+0x504>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003818:	e014      	b.n	8003844 <HAL_RCC_OscConfig+0x52c>
 800381a:	bf00      	nop
 800381c:	40021000 	.word	0x40021000
 8003820:	40007000 	.word	0x40007000
 8003824:	4b9d      	ldr	r3, [pc, #628]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	4a9c      	ldr	r2, [pc, #624]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 800382c:	f023 0301 	bic.w	r3, r3, #1
 8003830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003834:	4b99      	ldr	r3, [pc, #612]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383a:	4a98      	ldr	r2, [pc, #608]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 800383c:	f023 0304 	bic.w	r3, r3, #4
 8003840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d016      	beq.n	800387a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384c:	f7fe f8d4 	bl	80019f8 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003852:	e00a      	b.n	800386a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003854:	f7fe f8d0 	bl	80019f8 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e168      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800386a:	4b8c      	ldr	r3, [pc, #560]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0ed      	beq.n	8003854 <HAL_RCC_OscConfig+0x53c>
 8003878:	e015      	b.n	80038a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387a:	f7fe f8bd 	bl	80019f8 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003880:	e00a      	b.n	8003898 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003882:	f7fe f8b9 	bl	80019f8 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003890:	4293      	cmp	r3, r2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e151      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003898:	4b80      	ldr	r3, [pc, #512]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1ed      	bne.n	8003882 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038a6:	7ffb      	ldrb	r3, [r7, #31]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d105      	bne.n	80038b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ac:	4b7b      	ldr	r3, [pc, #492]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	4a7a      	ldr	r2, [pc, #488]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 80038b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d03c      	beq.n	800393e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01c      	beq.n	8003906 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038cc:	4b73      	ldr	r3, [pc, #460]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 80038ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038d2:	4a72      	ldr	r2, [pc, #456]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038dc:	f7fe f88c 	bl	80019f8 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038e4:	f7fe f888 	bl	80019f8 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e122      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038f6:	4b69      	ldr	r3, [pc, #420]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 80038f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0ef      	beq.n	80038e4 <HAL_RCC_OscConfig+0x5cc>
 8003904:	e01b      	b.n	800393e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003906:	4b65      	ldr	r3, [pc, #404]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 8003908:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800390c:	4a63      	ldr	r2, [pc, #396]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 800390e:	f023 0301 	bic.w	r3, r3, #1
 8003912:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003916:	f7fe f86f 	bl	80019f8 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800391e:	f7fe f86b 	bl	80019f8 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e105      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003930:	4b5a      	ldr	r3, [pc, #360]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 8003932:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1ef      	bne.n	800391e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 80f9 	beq.w	8003b3a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394c:	2b02      	cmp	r3, #2
 800394e:	f040 80cf 	bne.w	8003af0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003952:	4b52      	ldr	r3, [pc, #328]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f003 0203 	and.w	r2, r3, #3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	429a      	cmp	r2, r3
 8003964:	d12c      	bne.n	80039c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	3b01      	subs	r3, #1
 8003972:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003974:	429a      	cmp	r2, r3
 8003976:	d123      	bne.n	80039c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003982:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003984:	429a      	cmp	r2, r3
 8003986:	d11b      	bne.n	80039c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003992:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003994:	429a      	cmp	r2, r3
 8003996:	d113      	bne.n	80039c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a2:	085b      	lsrs	r3, r3, #1
 80039a4:	3b01      	subs	r3, #1
 80039a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d109      	bne.n	80039c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	3b01      	subs	r3, #1
 80039ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d071      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	2b0c      	cmp	r3, #12
 80039c4:	d068      	beq.n	8003a98 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039c6:	4b35      	ldr	r3, [pc, #212]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d105      	bne.n	80039de <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80039d2:	4b32      	ldr	r3, [pc, #200]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e0ac      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039e2:	4b2e      	ldr	r3, [pc, #184]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a2d      	ldr	r2, [pc, #180]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 80039e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039ee:	f7fe f803 	bl	80019f8 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f6:	f7fd ffff 	bl	80019f8 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e099      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a08:	4b24      	ldr	r3, [pc, #144]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f0      	bne.n	80039f6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a14:	4b21      	ldr	r3, [pc, #132]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	4b21      	ldr	r3, [pc, #132]	; (8003aa0 <HAL_RCC_OscConfig+0x788>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a24:	3a01      	subs	r2, #1
 8003a26:	0112      	lsls	r2, r2, #4
 8003a28:	4311      	orrs	r1, r2
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a2e:	0212      	lsls	r2, r2, #8
 8003a30:	4311      	orrs	r1, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a36:	0852      	lsrs	r2, r2, #1
 8003a38:	3a01      	subs	r2, #1
 8003a3a:	0552      	lsls	r2, r2, #21
 8003a3c:	4311      	orrs	r1, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a42:	0852      	lsrs	r2, r2, #1
 8003a44:	3a01      	subs	r2, #1
 8003a46:	0652      	lsls	r2, r2, #25
 8003a48:	4311      	orrs	r1, r2
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a4e:	06d2      	lsls	r2, r2, #27
 8003a50:	430a      	orrs	r2, r1
 8003a52:	4912      	ldr	r1, [pc, #72]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a58:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a0f      	ldr	r2, [pc, #60]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 8003a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a64:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	4a0c      	ldr	r2, [pc, #48]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 8003a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a70:	f7fd ffc2 	bl	80019f8 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a78:	f7fd ffbe 	bl	80019f8 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e058      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a8a:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <HAL_RCC_OscConfig+0x784>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a96:	e050      	b.n	8003b3a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e04f      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa4:	4b27      	ldr	r3, [pc, #156]	; (8003b44 <HAL_RCC_OscConfig+0x82c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d144      	bne.n	8003b3a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ab0:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <HAL_RCC_OscConfig+0x82c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a23      	ldr	r2, [pc, #140]	; (8003b44 <HAL_RCC_OscConfig+0x82c>)
 8003ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003abc:	4b21      	ldr	r3, [pc, #132]	; (8003b44 <HAL_RCC_OscConfig+0x82c>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4a20      	ldr	r2, [pc, #128]	; (8003b44 <HAL_RCC_OscConfig+0x82c>)
 8003ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ac6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ac8:	f7fd ff96 	bl	80019f8 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad0:	f7fd ff92 	bl	80019f8 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e02c      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae2:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <HAL_RCC_OscConfig+0x82c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x7b8>
 8003aee:	e024      	b.n	8003b3a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	2b0c      	cmp	r3, #12
 8003af4:	d01f      	beq.n	8003b36 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af6:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <HAL_RCC_OscConfig+0x82c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a12      	ldr	r2, [pc, #72]	; (8003b44 <HAL_RCC_OscConfig+0x82c>)
 8003afc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b02:	f7fd ff79 	bl	80019f8 <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0a:	f7fd ff75 	bl	80019f8 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e00f      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b1c:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <HAL_RCC_OscConfig+0x82c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f0      	bne.n	8003b0a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_RCC_OscConfig+0x82c>)
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	4905      	ldr	r1, [pc, #20]	; (8003b44 <HAL_RCC_OscConfig+0x82c>)
 8003b2e:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <HAL_RCC_OscConfig+0x830>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	60cb      	str	r3, [r1, #12]
 8003b34:	e001      	b.n	8003b3a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3720      	adds	r7, #32
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000
 8003b48:	feeefffc 	.word	0xfeeefffc

08003b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e11d      	b.n	8003da0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b64:	4b90      	ldr	r3, [pc, #576]	; (8003da8 <HAL_RCC_ClockConfig+0x25c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d910      	bls.n	8003b94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b72:	4b8d      	ldr	r3, [pc, #564]	; (8003da8 <HAL_RCC_ClockConfig+0x25c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 020f 	bic.w	r2, r3, #15
 8003b7a:	498b      	ldr	r1, [pc, #556]	; (8003da8 <HAL_RCC_ClockConfig+0x25c>)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b89      	ldr	r3, [pc, #548]	; (8003da8 <HAL_RCC_ClockConfig+0x25c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e105      	b.n	8003da0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d010      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	4b81      	ldr	r3, [pc, #516]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d908      	bls.n	8003bc2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb0:	4b7e      	ldr	r3, [pc, #504]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	497b      	ldr	r1, [pc, #492]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d079      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d11e      	bne.n	8003c14 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bd6:	4b75      	ldr	r3, [pc, #468]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e0dc      	b.n	8003da0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003be6:	f000 fa3b 	bl	8004060 <RCC_GetSysClockFreqFromPLLSource>
 8003bea:	4603      	mov	r3, r0
 8003bec:	4a70      	ldr	r2, [pc, #448]	; (8003db0 <HAL_RCC_ClockConfig+0x264>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d946      	bls.n	8003c80 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003bf2:	4b6e      	ldr	r3, [pc, #440]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d140      	bne.n	8003c80 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bfe:	4b6b      	ldr	r3, [pc, #428]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c06:	4a69      	ldr	r2, [pc, #420]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	e035      	b.n	8003c80 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d107      	bne.n	8003c2c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c1c:	4b63      	ldr	r3, [pc, #396]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d115      	bne.n	8003c54 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e0b9      	b.n	8003da0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d107      	bne.n	8003c44 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c34:	4b5d      	ldr	r3, [pc, #372]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d109      	bne.n	8003c54 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0ad      	b.n	8003da0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c44:	4b59      	ldr	r3, [pc, #356]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0a5      	b.n	8003da0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003c54:	f000 f8b4 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4a55      	ldr	r2, [pc, #340]	; (8003db0 <HAL_RCC_ClockConfig+0x264>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d90f      	bls.n	8003c80 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003c60:	4b52      	ldr	r3, [pc, #328]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d109      	bne.n	8003c80 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c6c:	4b4f      	ldr	r3, [pc, #316]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c74:	4a4d      	ldr	r2, [pc, #308]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c7a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c7c:	2380      	movs	r3, #128	; 0x80
 8003c7e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c80:	4b4a      	ldr	r3, [pc, #296]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f023 0203 	bic.w	r2, r3, #3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	4947      	ldr	r1, [pc, #284]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c92:	f7fd feb1 	bl	80019f8 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c98:	e00a      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c9a:	f7fd fead 	bl	80019f8 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e077      	b.n	8003da0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb0:	4b3e      	ldr	r3, [pc, #248]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 020c 	and.w	r2, r3, #12
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d1eb      	bne.n	8003c9a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b80      	cmp	r3, #128	; 0x80
 8003cc6:	d105      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003cc8:	4b38      	ldr	r3, [pc, #224]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	4a37      	ldr	r2, [pc, #220]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003cce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cd2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d010      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	4b31      	ldr	r3, [pc, #196]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d208      	bcs.n	8003d02 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf0:	4b2e      	ldr	r3, [pc, #184]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	492b      	ldr	r1, [pc, #172]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d02:	4b29      	ldr	r3, [pc, #164]	; (8003da8 <HAL_RCC_ClockConfig+0x25c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d210      	bcs.n	8003d32 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d10:	4b25      	ldr	r3, [pc, #148]	; (8003da8 <HAL_RCC_ClockConfig+0x25c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f023 020f 	bic.w	r2, r3, #15
 8003d18:	4923      	ldr	r1, [pc, #140]	; (8003da8 <HAL_RCC_ClockConfig+0x25c>)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d20:	4b21      	ldr	r3, [pc, #132]	; (8003da8 <HAL_RCC_ClockConfig+0x25c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e036      	b.n	8003da0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d008      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d3e:	4b1b      	ldr	r3, [pc, #108]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	4918      	ldr	r1, [pc, #96]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d009      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d5c:	4b13      	ldr	r3, [pc, #76]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4910      	ldr	r1, [pc, #64]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d70:	f000 f826 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 8003d74:	4602      	mov	r2, r0
 8003d76:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <HAL_RCC_ClockConfig+0x260>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	091b      	lsrs	r3, r3, #4
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	490c      	ldr	r1, [pc, #48]	; (8003db4 <HAL_RCC_ClockConfig+0x268>)
 8003d82:	5ccb      	ldrb	r3, [r1, r3]
 8003d84:	f003 031f 	and.w	r3, r3, #31
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8c:	4a0a      	ldr	r2, [pc, #40]	; (8003db8 <HAL_RCC_ClockConfig+0x26c>)
 8003d8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d90:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <HAL_RCC_ClockConfig+0x270>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f003 fa99 	bl	80072cc <HAL_InitTick>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	73fb      	strb	r3, [r7, #15]

  return status;
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40022000 	.word	0x40022000
 8003dac:	40021000 	.word	0x40021000
 8003db0:	04c4b400 	.word	0x04c4b400
 8003db4:	0800a344 	.word	0x0800a344
 8003db8:	200000c8 	.word	0x200000c8
 8003dbc:	200000c4 	.word	0x200000c4

08003dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b089      	sub	sp, #36	; 0x24
 8003dc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dce:	4b3e      	ldr	r3, [pc, #248]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dd8:	4b3b      	ldr	r3, [pc, #236]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0303 	and.w	r3, r3, #3
 8003de0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0x34>
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2b0c      	cmp	r3, #12
 8003dec:	d121      	bne.n	8003e32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d11e      	bne.n	8003e32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003df4:	4b34      	ldr	r3, [pc, #208]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e00:	4b31      	ldr	r3, [pc, #196]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e06:	0a1b      	lsrs	r3, r3, #8
 8003e08:	f003 030f 	and.w	r3, r3, #15
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	e005      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e10:	4b2d      	ldr	r3, [pc, #180]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e1c:	4a2b      	ldr	r2, [pc, #172]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10d      	bne.n	8003e48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e30:	e00a      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d102      	bne.n	8003e3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e38:	4b25      	ldr	r3, [pc, #148]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e3a:	61bb      	str	r3, [r7, #24]
 8003e3c:	e004      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d101      	bne.n	8003e48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e44:	4b23      	ldr	r3, [pc, #140]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	2b0c      	cmp	r3, #12
 8003e4c:	d134      	bne.n	8003eb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e4e:	4b1e      	ldr	r3, [pc, #120]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d003      	beq.n	8003e66 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d003      	beq.n	8003e6c <HAL_RCC_GetSysClockFreq+0xac>
 8003e64:	e005      	b.n	8003e72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e66:	4b1a      	ldr	r3, [pc, #104]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e68:	617b      	str	r3, [r7, #20]
      break;
 8003e6a:	e005      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e6c:	4b19      	ldr	r3, [pc, #100]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e6e:	617b      	str	r3, [r7, #20]
      break;
 8003e70:	e002      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	617b      	str	r3, [r7, #20]
      break;
 8003e76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e78:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	091b      	lsrs	r3, r3, #4
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	3301      	adds	r3, #1
 8003e84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e86:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	0a1b      	lsrs	r3, r3, #8
 8003e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	fb03 f202 	mul.w	r2, r3, r2
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	0e5b      	lsrs	r3, r3, #25
 8003ea4:	f003 0303 	and.w	r3, r3, #3
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003eb8:	69bb      	ldr	r3, [r7, #24]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3724      	adds	r7, #36	; 0x24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	0800a35c 	.word	0x0800a35c
 8003ed0:	00f42400 	.word	0x00f42400
 8003ed4:	007a1200 	.word	0x007a1200

08003ed8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003edc:	4b03      	ldr	r3, [pc, #12]	; (8003eec <HAL_RCC_GetHCLKFreq+0x14>)
 8003ede:	681b      	ldr	r3, [r3, #0]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	200000c8 	.word	0x200000c8

08003ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ef4:	f7ff fff0 	bl	8003ed8 <HAL_RCC_GetHCLKFreq>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	0a1b      	lsrs	r3, r3, #8
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	4904      	ldr	r1, [pc, #16]	; (8003f18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f06:	5ccb      	ldrb	r3, [r1, r3]
 8003f08:	f003 031f 	and.w	r3, r3, #31
 8003f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40021000 	.word	0x40021000
 8003f18:	0800a354 	.word	0x0800a354

08003f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f20:	f7ff ffda 	bl	8003ed8 <HAL_RCC_GetHCLKFreq>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	0adb      	lsrs	r3, r3, #11
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	4904      	ldr	r1, [pc, #16]	; (8003f44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f32:	5ccb      	ldrb	r3, [r1, r3]
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40021000 	.word	0x40021000
 8003f44:	0800a354 	.word	0x0800a354

08003f48 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	220f      	movs	r2, #15
 8003f56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003f58:	4b12      	ldr	r3, [pc, #72]	; (8003fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0203 	and.w	r2, r3, #3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003f64:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003f7c:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <HAL_RCC_GetClockConfig+0x5c>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	08db      	lsrs	r3, r3, #3
 8003f82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003f8a:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <HAL_RCC_GetClockConfig+0x60>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 020f 	and.w	r2, r3, #15
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	601a      	str	r2, [r3, #0]
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40022000 	.word	0x40022000

08003fac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fb8:	4b27      	ldr	r3, [pc, #156]	; (8004058 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fc4:	f7ff f8e4 	bl	8003190 <HAL_PWREx_GetVoltageRange>
 8003fc8:	6178      	str	r0, [r7, #20]
 8003fca:	e014      	b.n	8003ff6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fcc:	4b22      	ldr	r3, [pc, #136]	; (8004058 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd0:	4a21      	ldr	r2, [pc, #132]	; (8004058 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	6593      	str	r3, [r2, #88]	; 0x58
 8003fd8:	4b1f      	ldr	r3, [pc, #124]	; (8004058 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fe4:	f7ff f8d4 	bl	8003190 <HAL_PWREx_GetVoltageRange>
 8003fe8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fea:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fee:	4a1a      	ldr	r2, [pc, #104]	; (8004058 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ffc:	d10b      	bne.n	8004016 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b80      	cmp	r3, #128	; 0x80
 8004002:	d913      	bls.n	800402c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2ba0      	cmp	r3, #160	; 0xa0
 8004008:	d902      	bls.n	8004010 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800400a:	2302      	movs	r3, #2
 800400c:	613b      	str	r3, [r7, #16]
 800400e:	e00d      	b.n	800402c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004010:	2301      	movs	r3, #1
 8004012:	613b      	str	r3, [r7, #16]
 8004014:	e00a      	b.n	800402c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b7f      	cmp	r3, #127	; 0x7f
 800401a:	d902      	bls.n	8004022 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800401c:	2302      	movs	r3, #2
 800401e:	613b      	str	r3, [r7, #16]
 8004020:	e004      	b.n	800402c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b70      	cmp	r3, #112	; 0x70
 8004026:	d101      	bne.n	800402c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004028:	2301      	movs	r3, #1
 800402a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f023 020f 	bic.w	r2, r3, #15
 8004034:	4909      	ldr	r1, [pc, #36]	; (800405c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800403c:	4b07      	ldr	r3, [pc, #28]	; (800405c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	429a      	cmp	r2, r3
 8004048:	d001      	beq.n	800404e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40021000 	.word	0x40021000
 800405c:	40022000 	.word	0x40022000

08004060 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004066:	4b2d      	ldr	r3, [pc, #180]	; (800411c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b03      	cmp	r3, #3
 8004074:	d00b      	beq.n	800408e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d825      	bhi.n	80040c8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d008      	beq.n	8004094 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d11f      	bne.n	80040c8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004088:	4b25      	ldr	r3, [pc, #148]	; (8004120 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800408a:	613b      	str	r3, [r7, #16]
    break;
 800408c:	e01f      	b.n	80040ce <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800408e:	4b25      	ldr	r3, [pc, #148]	; (8004124 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004090:	613b      	str	r3, [r7, #16]
    break;
 8004092:	e01c      	b.n	80040ce <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004094:	4b21      	ldr	r3, [pc, #132]	; (800411c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b00      	cmp	r3, #0
 800409e:	d107      	bne.n	80040b0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040a0:	4b1e      	ldr	r3, [pc, #120]	; (800411c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a6:	0a1b      	lsrs	r3, r3, #8
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	e005      	b.n	80040bc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040b0:	4b1a      	ldr	r3, [pc, #104]	; (800411c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	091b      	lsrs	r3, r3, #4
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80040bc:	4a1a      	ldr	r2, [pc, #104]	; (8004128 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c4:	613b      	str	r3, [r7, #16]
    break;
 80040c6:	e002      	b.n	80040ce <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]
    break;
 80040cc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040ce:	4b13      	ldr	r3, [pc, #76]	; (800411c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	3301      	adds	r3, #1
 80040da:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040dc:	4b0f      	ldr	r3, [pc, #60]	; (800411c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	0a1b      	lsrs	r3, r3, #8
 80040e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	fb03 f202 	mul.w	r2, r3, r2
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040f4:	4b09      	ldr	r3, [pc, #36]	; (800411c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	0e5b      	lsrs	r3, r3, #25
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	3301      	adds	r3, #1
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800410e:	683b      	ldr	r3, [r7, #0]
}
 8004110:	4618      	mov	r0, r3
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	40021000 	.word	0x40021000
 8004120:	00f42400 	.word	0x00f42400
 8004124:	007a1200 	.word	0x007a1200
 8004128:	0800a35c 	.word	0x0800a35c

0800412c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004134:	2300      	movs	r3, #0
 8004136:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004138:	2300      	movs	r3, #0
 800413a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004144:	2b00      	cmp	r3, #0
 8004146:	d040      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800414c:	2b80      	cmp	r3, #128	; 0x80
 800414e:	d02a      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004150:	2b80      	cmp	r3, #128	; 0x80
 8004152:	d825      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004154:	2b60      	cmp	r3, #96	; 0x60
 8004156:	d026      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004158:	2b60      	cmp	r3, #96	; 0x60
 800415a:	d821      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800415c:	2b40      	cmp	r3, #64	; 0x40
 800415e:	d006      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004160:	2b40      	cmp	r3, #64	; 0x40
 8004162:	d81d      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004164:	2b00      	cmp	r3, #0
 8004166:	d009      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004168:	2b20      	cmp	r3, #32
 800416a:	d010      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800416c:	e018      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800416e:	4b89      	ldr	r3, [pc, #548]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	4a88      	ldr	r2, [pc, #544]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004178:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800417a:	e015      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3304      	adds	r3, #4
 8004180:	2100      	movs	r1, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fb02 	bl	800478c <RCCEx_PLLSAI1_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800418c:	e00c      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3320      	adds	r3, #32
 8004192:	2100      	movs	r1, #0
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fbed 	bl	8004974 <RCCEx_PLLSAI2_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800419e:	e003      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	74fb      	strb	r3, [r7, #19]
      break;
 80041a4:	e000      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80041a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a8:	7cfb      	ldrb	r3, [r7, #19]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10b      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041ae:	4b79      	ldr	r3, [pc, #484]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041b4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041bc:	4975      	ldr	r1, [pc, #468]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80041c4:	e001      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c6:	7cfb      	ldrb	r3, [r7, #19]
 80041c8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d047      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041de:	d030      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80041e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e4:	d82a      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80041e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ea:	d02a      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80041ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041f0:	d824      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80041f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f6:	d008      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80041f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041fc:	d81e      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004206:	d010      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004208:	e018      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800420a:	4b62      	ldr	r3, [pc, #392]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	4a61      	ldr	r2, [pc, #388]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004214:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004216:	e015      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	2100      	movs	r1, #0
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fab4 	bl	800478c <RCCEx_PLLSAI1_Config>
 8004224:	4603      	mov	r3, r0
 8004226:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004228:	e00c      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3320      	adds	r3, #32
 800422e:	2100      	movs	r1, #0
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fb9f 	bl	8004974 <RCCEx_PLLSAI2_Config>
 8004236:	4603      	mov	r3, r0
 8004238:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800423a:	e003      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	74fb      	strb	r3, [r7, #19]
      break;
 8004240:	e000      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004242:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004244:	7cfb      	ldrb	r3, [r7, #19]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10b      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800424a:	4b52      	ldr	r3, [pc, #328]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800424c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004250:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004258:	494e      	ldr	r1, [pc, #312]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004260:	e001      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004262:	7cfb      	ldrb	r3, [r7, #19]
 8004264:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 809f 	beq.w	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004274:	2300      	movs	r3, #0
 8004276:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004278:	4b46      	ldr	r3, [pc, #280]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004288:	2300      	movs	r3, #0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00d      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428e:	4b41      	ldr	r3, [pc, #260]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	4a40      	ldr	r2, [pc, #256]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004298:	6593      	str	r3, [r2, #88]	; 0x58
 800429a:	4b3e      	ldr	r3, [pc, #248]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800429c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a6:	2301      	movs	r3, #1
 80042a8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042aa:	4b3b      	ldr	r3, [pc, #236]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a3a      	ldr	r2, [pc, #232]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042b6:	f7fd fb9f 	bl	80019f8 <HAL_GetTick>
 80042ba:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042bc:	e009      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042be:	f7fd fb9b 	bl	80019f8 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d902      	bls.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	74fb      	strb	r3, [r7, #19]
        break;
 80042d0:	e005      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042d2:	4b31      	ldr	r3, [pc, #196]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0ef      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80042de:	7cfb      	ldrb	r3, [r7, #19]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d15b      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042e4:	4b2b      	ldr	r3, [pc, #172]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ee:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01f      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d019      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004302:	4b24      	ldr	r3, [pc, #144]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800430e:	4b21      	ldr	r3, [pc, #132]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004314:	4a1f      	ldr	r2, [pc, #124]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800431e:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004324:	4a1b      	ldr	r2, [pc, #108]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800432e:	4a19      	ldr	r2, [pc, #100]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d016      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004340:	f7fd fb5a 	bl	80019f8 <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004346:	e00b      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004348:	f7fd fb56 	bl	80019f8 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	; 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d902      	bls.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	74fb      	strb	r3, [r7, #19]
            break;
 800435e:	e006      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004360:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0ec      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800436e:	7cfb      	ldrb	r3, [r7, #19]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10c      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004374:	4b07      	ldr	r3, [pc, #28]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004384:	4903      	ldr	r1, [pc, #12]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800438c:	e008      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800438e:	7cfb      	ldrb	r3, [r7, #19]
 8004390:	74bb      	strb	r3, [r7, #18]
 8004392:	e005      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004394:	40021000 	.word	0x40021000
 8004398:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439c:	7cfb      	ldrb	r3, [r7, #19]
 800439e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043a0:	7c7b      	ldrb	r3, [r7, #17]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d105      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a6:	4ba0      	ldr	r3, [pc, #640]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043aa:	4a9f      	ldr	r2, [pc, #636]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043be:	4b9a      	ldr	r3, [pc, #616]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	f023 0203 	bic.w	r2, r3, #3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043cc:	4996      	ldr	r1, [pc, #600]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043e0:	4b91      	ldr	r3, [pc, #580]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e6:	f023 020c 	bic.w	r2, r3, #12
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	498e      	ldr	r1, [pc, #568]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004402:	4b89      	ldr	r3, [pc, #548]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004408:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004410:	4985      	ldr	r1, [pc, #532]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004424:	4b80      	ldr	r3, [pc, #512]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004432:	497d      	ldr	r1, [pc, #500]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0310 	and.w	r3, r3, #16
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004446:	4b78      	ldr	r3, [pc, #480]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004454:	4974      	ldr	r1, [pc, #464]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004468:	4b6f      	ldr	r3, [pc, #444]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004476:	496c      	ldr	r1, [pc, #432]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800448a:	4b67      	ldr	r3, [pc, #412]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004498:	4963      	ldr	r1, [pc, #396]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044ac:	4b5e      	ldr	r3, [pc, #376]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044ba:	495b      	ldr	r1, [pc, #364]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044ce:	4b56      	ldr	r3, [pc, #344]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044dc:	4952      	ldr	r1, [pc, #328]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044f0:	4b4d      	ldr	r3, [pc, #308]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fe:	494a      	ldr	r1, [pc, #296]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004512:	4b45      	ldr	r3, [pc, #276]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004518:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004520:	4941      	ldr	r1, [pc, #260]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004534:	4b3c      	ldr	r3, [pc, #240]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004536:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800453a:	f023 0203 	bic.w	r2, r3, #3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004542:	4939      	ldr	r1, [pc, #228]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d028      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004556:	4b34      	ldr	r3, [pc, #208]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004564:	4930      	ldr	r1, [pc, #192]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004574:	d106      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004576:	4b2c      	ldr	r3, [pc, #176]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	4a2b      	ldr	r2, [pc, #172]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800457c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004580:	60d3      	str	r3, [r2, #12]
 8004582:	e011      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800458c:	d10c      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3304      	adds	r3, #4
 8004592:	2101      	movs	r1, #1
 8004594:	4618      	mov	r0, r3
 8004596:	f000 f8f9 	bl	800478c <RCCEx_PLLSAI1_Config>
 800459a:	4603      	mov	r3, r0
 800459c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800459e:	7cfb      	ldrb	r3, [r7, #19]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80045a4:	7cfb      	ldrb	r3, [r7, #19]
 80045a6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d04d      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045bc:	d108      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80045be:	4b1a      	ldr	r3, [pc, #104]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045c4:	4a18      	ldr	r2, [pc, #96]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045ca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80045ce:	e012      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80045d0:	4b15      	ldr	r3, [pc, #84]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045d6:	4a14      	ldr	r2, [pc, #80]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045dc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80045e0:	4b11      	ldr	r3, [pc, #68]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ee:	490e      	ldr	r1, [pc, #56]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045fe:	d106      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004600:	4b09      	ldr	r3, [pc, #36]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	4a08      	ldr	r2, [pc, #32]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800460a:	60d3      	str	r3, [r2, #12]
 800460c:	e020      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004616:	d109      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004618:	4b03      	ldr	r3, [pc, #12]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4a02      	ldr	r2, [pc, #8]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800461e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004622:	60d3      	str	r3, [r2, #12]
 8004624:	e014      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004626:	bf00      	nop
 8004628:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004630:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004634:	d10c      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3304      	adds	r3, #4
 800463a:	2101      	movs	r1, #1
 800463c:	4618      	mov	r0, r3
 800463e:	f000 f8a5 	bl	800478c <RCCEx_PLLSAI1_Config>
 8004642:	4603      	mov	r3, r0
 8004644:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004646:	7cfb      	ldrb	r3, [r7, #19]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800464c:	7cfb      	ldrb	r3, [r7, #19]
 800464e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d028      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800465c:	4b4a      	ldr	r3, [pc, #296]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800466a:	4947      	ldr	r1, [pc, #284]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004676:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800467a:	d106      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800467c:	4b42      	ldr	r3, [pc, #264]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4a41      	ldr	r2, [pc, #260]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004686:	60d3      	str	r3, [r2, #12]
 8004688:	e011      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800468e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004692:	d10c      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3304      	adds	r3, #4
 8004698:	2101      	movs	r1, #1
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f876 	bl	800478c <RCCEx_PLLSAI1_Config>
 80046a0:	4603      	mov	r3, r0
 80046a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80046aa:	7cfb      	ldrb	r3, [r7, #19]
 80046ac:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d01e      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046ba:	4b33      	ldr	r3, [pc, #204]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ca:	492f      	ldr	r1, [pc, #188]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3304      	adds	r3, #4
 80046e2:	2102      	movs	r1, #2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 f851 	bl	800478c <RCCEx_PLLSAI1_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ee:	7cfb      	ldrb	r3, [r7, #19]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80046f4:	7cfb      	ldrb	r3, [r7, #19]
 80046f6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00b      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004704:	4b20      	ldr	r3, [pc, #128]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004706:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800470a:	f023 0204 	bic.w	r2, r3, #4
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004714:	491c      	ldr	r1, [pc, #112]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00b      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004728:	4b17      	ldr	r3, [pc, #92]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800472a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800472e:	f023 0218 	bic.w	r2, r3, #24
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004738:	4913      	ldr	r1, [pc, #76]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d017      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800474c:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800474e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004752:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800475c:	490a      	ldr	r1, [pc, #40]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800476a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800476e:	d105      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004770:	4b05      	ldr	r3, [pc, #20]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4a04      	ldr	r2, [pc, #16]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800477a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800477c:	7cbb      	ldrb	r3, [r7, #18]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40021000 	.word	0x40021000

0800478c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800479a:	4b72      	ldr	r3, [pc, #456]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00e      	beq.n	80047c4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047a6:	4b6f      	ldr	r3, [pc, #444]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f003 0203 	and.w	r2, r3, #3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d103      	bne.n	80047be <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
       ||
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d142      	bne.n	8004844 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	73fb      	strb	r3, [r7, #15]
 80047c2:	e03f      	b.n	8004844 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	d018      	beq.n	80047fe <RCCEx_PLLSAI1_Config+0x72>
 80047cc:	2b03      	cmp	r3, #3
 80047ce:	d825      	bhi.n	800481c <RCCEx_PLLSAI1_Config+0x90>
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d002      	beq.n	80047da <RCCEx_PLLSAI1_Config+0x4e>
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d009      	beq.n	80047ec <RCCEx_PLLSAI1_Config+0x60>
 80047d8:	e020      	b.n	800481c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047da:	4b62      	ldr	r3, [pc, #392]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d11d      	bne.n	8004822 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ea:	e01a      	b.n	8004822 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047ec:	4b5d      	ldr	r3, [pc, #372]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d116      	bne.n	8004826 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047fc:	e013      	b.n	8004826 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047fe:	4b59      	ldr	r3, [pc, #356]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10f      	bne.n	800482a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800480a:	4b56      	ldr	r3, [pc, #344]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800481a:	e006      	b.n	800482a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	73fb      	strb	r3, [r7, #15]
      break;
 8004820:	e004      	b.n	800482c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004822:	bf00      	nop
 8004824:	e002      	b.n	800482c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004826:	bf00      	nop
 8004828:	e000      	b.n	800482c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800482a:	bf00      	nop
    }

    if(status == HAL_OK)
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d108      	bne.n	8004844 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004832:	4b4c      	ldr	r3, [pc, #304]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f023 0203 	bic.w	r2, r3, #3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4949      	ldr	r1, [pc, #292]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004840:	4313      	orrs	r3, r2
 8004842:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	2b00      	cmp	r3, #0
 8004848:	f040 8086 	bne.w	8004958 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800484c:	4b45      	ldr	r3, [pc, #276]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a44      	ldr	r2, [pc, #272]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004852:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004856:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004858:	f7fd f8ce 	bl	80019f8 <HAL_GetTick>
 800485c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800485e:	e009      	b.n	8004874 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004860:	f7fd f8ca 	bl	80019f8 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d902      	bls.n	8004874 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	73fb      	strb	r3, [r7, #15]
        break;
 8004872:	e005      	b.n	8004880 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004874:	4b3b      	ldr	r3, [pc, #236]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1ef      	bne.n	8004860 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d168      	bne.n	8004958 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d113      	bne.n	80048b4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800488c:	4b35      	ldr	r3, [pc, #212]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	4b35      	ldr	r3, [pc, #212]	; (8004968 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004892:	4013      	ands	r3, r2
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6892      	ldr	r2, [r2, #8]
 8004898:	0211      	lsls	r1, r2, #8
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68d2      	ldr	r2, [r2, #12]
 800489e:	06d2      	lsls	r2, r2, #27
 80048a0:	4311      	orrs	r1, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6852      	ldr	r2, [r2, #4]
 80048a6:	3a01      	subs	r2, #1
 80048a8:	0112      	lsls	r2, r2, #4
 80048aa:	430a      	orrs	r2, r1
 80048ac:	492d      	ldr	r1, [pc, #180]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	610b      	str	r3, [r1, #16]
 80048b2:	e02d      	b.n	8004910 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d115      	bne.n	80048e6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048ba:	4b2a      	ldr	r3, [pc, #168]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	4b2b      	ldr	r3, [pc, #172]	; (800496c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6892      	ldr	r2, [r2, #8]
 80048c6:	0211      	lsls	r1, r2, #8
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6912      	ldr	r2, [r2, #16]
 80048cc:	0852      	lsrs	r2, r2, #1
 80048ce:	3a01      	subs	r2, #1
 80048d0:	0552      	lsls	r2, r2, #21
 80048d2:	4311      	orrs	r1, r2
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6852      	ldr	r2, [r2, #4]
 80048d8:	3a01      	subs	r2, #1
 80048da:	0112      	lsls	r2, r2, #4
 80048dc:	430a      	orrs	r2, r1
 80048de:	4921      	ldr	r1, [pc, #132]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	610b      	str	r3, [r1, #16]
 80048e4:	e014      	b.n	8004910 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048e6:	4b1f      	ldr	r3, [pc, #124]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	4b21      	ldr	r3, [pc, #132]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6892      	ldr	r2, [r2, #8]
 80048f2:	0211      	lsls	r1, r2, #8
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6952      	ldr	r2, [r2, #20]
 80048f8:	0852      	lsrs	r2, r2, #1
 80048fa:	3a01      	subs	r2, #1
 80048fc:	0652      	lsls	r2, r2, #25
 80048fe:	4311      	orrs	r1, r2
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6852      	ldr	r2, [r2, #4]
 8004904:	3a01      	subs	r2, #1
 8004906:	0112      	lsls	r2, r2, #4
 8004908:	430a      	orrs	r2, r1
 800490a:	4916      	ldr	r1, [pc, #88]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 800490c:	4313      	orrs	r3, r2
 800490e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004910:	4b14      	ldr	r3, [pc, #80]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a13      	ldr	r2, [pc, #76]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004916:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800491a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491c:	f7fd f86c 	bl	80019f8 <HAL_GetTick>
 8004920:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004922:	e009      	b.n	8004938 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004924:	f7fd f868 	bl	80019f8 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d902      	bls.n	8004938 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	73fb      	strb	r3, [r7, #15]
          break;
 8004936:	e005      	b.n	8004944 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004938:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0ef      	beq.n	8004924 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800494a:	4b06      	ldr	r3, [pc, #24]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 800494c:	691a      	ldr	r2, [r3, #16]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	4904      	ldr	r1, [pc, #16]	; (8004964 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004954:	4313      	orrs	r3, r2
 8004956:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004958:	7bfb      	ldrb	r3, [r7, #15]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40021000 	.word	0x40021000
 8004968:	07ff800f 	.word	0x07ff800f
 800496c:	ff9f800f 	.word	0xff9f800f
 8004970:	f9ff800f 	.word	0xf9ff800f

08004974 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004982:	4b72      	ldr	r3, [pc, #456]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00e      	beq.n	80049ac <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800498e:	4b6f      	ldr	r3, [pc, #444]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0203 	and.w	r2, r3, #3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d103      	bne.n	80049a6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
       ||
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d142      	bne.n	8004a2c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	73fb      	strb	r3, [r7, #15]
 80049aa:	e03f      	b.n	8004a2c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d018      	beq.n	80049e6 <RCCEx_PLLSAI2_Config+0x72>
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d825      	bhi.n	8004a04 <RCCEx_PLLSAI2_Config+0x90>
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d002      	beq.n	80049c2 <RCCEx_PLLSAI2_Config+0x4e>
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d009      	beq.n	80049d4 <RCCEx_PLLSAI2_Config+0x60>
 80049c0:	e020      	b.n	8004a04 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049c2:	4b62      	ldr	r3, [pc, #392]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d11d      	bne.n	8004a0a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049d2:	e01a      	b.n	8004a0a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049d4:	4b5d      	ldr	r3, [pc, #372]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d116      	bne.n	8004a0e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049e4:	e013      	b.n	8004a0e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049e6:	4b59      	ldr	r3, [pc, #356]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10f      	bne.n	8004a12 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049f2:	4b56      	ldr	r3, [pc, #344]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d109      	bne.n	8004a12 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a02:	e006      	b.n	8004a12 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]
      break;
 8004a08:	e004      	b.n	8004a14 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004a0a:	bf00      	nop
 8004a0c:	e002      	b.n	8004a14 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004a0e:	bf00      	nop
 8004a10:	e000      	b.n	8004a14 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004a12:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d108      	bne.n	8004a2c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004a1a:	4b4c      	ldr	r3, [pc, #304]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f023 0203 	bic.w	r2, r3, #3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4949      	ldr	r1, [pc, #292]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f040 8086 	bne.w	8004b40 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a34:	4b45      	ldr	r3, [pc, #276]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a44      	ldr	r2, [pc, #272]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a40:	f7fc ffda 	bl	80019f8 <HAL_GetTick>
 8004a44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a46:	e009      	b.n	8004a5c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a48:	f7fc ffd6 	bl	80019f8 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d902      	bls.n	8004a5c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	73fb      	strb	r3, [r7, #15]
        break;
 8004a5a:	e005      	b.n	8004a68 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a5c:	4b3b      	ldr	r3, [pc, #236]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1ef      	bne.n	8004a48 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d168      	bne.n	8004b40 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d113      	bne.n	8004a9c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a74:	4b35      	ldr	r3, [pc, #212]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a76:	695a      	ldr	r2, [r3, #20]
 8004a78:	4b35      	ldr	r3, [pc, #212]	; (8004b50 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6892      	ldr	r2, [r2, #8]
 8004a80:	0211      	lsls	r1, r2, #8
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	68d2      	ldr	r2, [r2, #12]
 8004a86:	06d2      	lsls	r2, r2, #27
 8004a88:	4311      	orrs	r1, r2
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6852      	ldr	r2, [r2, #4]
 8004a8e:	3a01      	subs	r2, #1
 8004a90:	0112      	lsls	r2, r2, #4
 8004a92:	430a      	orrs	r2, r1
 8004a94:	492d      	ldr	r1, [pc, #180]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	614b      	str	r3, [r1, #20]
 8004a9a:	e02d      	b.n	8004af8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d115      	bne.n	8004ace <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004aa2:	4b2a      	ldr	r3, [pc, #168]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aa4:	695a      	ldr	r2, [r3, #20]
 8004aa6:	4b2b      	ldr	r3, [pc, #172]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6892      	ldr	r2, [r2, #8]
 8004aae:	0211      	lsls	r1, r2, #8
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6912      	ldr	r2, [r2, #16]
 8004ab4:	0852      	lsrs	r2, r2, #1
 8004ab6:	3a01      	subs	r2, #1
 8004ab8:	0552      	lsls	r2, r2, #21
 8004aba:	4311      	orrs	r1, r2
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6852      	ldr	r2, [r2, #4]
 8004ac0:	3a01      	subs	r2, #1
 8004ac2:	0112      	lsls	r2, r2, #4
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	4921      	ldr	r1, [pc, #132]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	614b      	str	r3, [r1, #20]
 8004acc:	e014      	b.n	8004af8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ace:	4b1f      	ldr	r3, [pc, #124]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ad0:	695a      	ldr	r2, [r3, #20]
 8004ad2:	4b21      	ldr	r3, [pc, #132]	; (8004b58 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6892      	ldr	r2, [r2, #8]
 8004ada:	0211      	lsls	r1, r2, #8
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6952      	ldr	r2, [r2, #20]
 8004ae0:	0852      	lsrs	r2, r2, #1
 8004ae2:	3a01      	subs	r2, #1
 8004ae4:	0652      	lsls	r2, r2, #25
 8004ae6:	4311      	orrs	r1, r2
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6852      	ldr	r2, [r2, #4]
 8004aec:	3a01      	subs	r2, #1
 8004aee:	0112      	lsls	r2, r2, #4
 8004af0:	430a      	orrs	r2, r1
 8004af2:	4916      	ldr	r1, [pc, #88]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004af8:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a13      	ldr	r2, [pc, #76]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b04:	f7fc ff78 	bl	80019f8 <HAL_GetTick>
 8004b08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b0a:	e009      	b.n	8004b20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b0c:	f7fc ff74 	bl	80019f8 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d902      	bls.n	8004b20 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	73fb      	strb	r3, [r7, #15]
          break;
 8004b1e:	e005      	b.n	8004b2c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b20:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0ef      	beq.n	8004b0c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b32:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b34:	695a      	ldr	r2, [r3, #20]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	4904      	ldr	r1, [pc, #16]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	07ff800f 	.word	0x07ff800f
 8004b54:	ff9f800f 	.word	0xff9f800f
 8004b58:	f9ff800f 	.word	0xf9ff800f

08004b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e049      	b.n	8004c02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d106      	bne.n	8004b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f002 fb20 	bl	80071c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3304      	adds	r3, #4
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f000 fab6 	bl	800510c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d001      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e04f      	b.n	8004cc4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a23      	ldr	r2, [pc, #140]	; (8004cd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d01d      	beq.n	8004c82 <HAL_TIM_Base_Start_IT+0x76>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4e:	d018      	beq.n	8004c82 <HAL_TIM_Base_Start_IT+0x76>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1f      	ldr	r2, [pc, #124]	; (8004cd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <HAL_TIM_Base_Start_IT+0x76>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1e      	ldr	r2, [pc, #120]	; (8004cd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00e      	beq.n	8004c82 <HAL_TIM_Base_Start_IT+0x76>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1c      	ldr	r2, [pc, #112]	; (8004cdc <HAL_TIM_Base_Start_IT+0xd0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <HAL_TIM_Base_Start_IT+0x76>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1b      	ldr	r2, [pc, #108]	; (8004ce0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d004      	beq.n	8004c82 <HAL_TIM_Base_Start_IT+0x76>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a19      	ldr	r2, [pc, #100]	; (8004ce4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d115      	bne.n	8004cae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	4b17      	ldr	r3, [pc, #92]	; (8004ce8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b06      	cmp	r3, #6
 8004c92:	d015      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0xb4>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9a:	d011      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cac:	e008      	b.n	8004cc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 0201 	orr.w	r2, r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	e000      	b.n	8004cc2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	40012c00 	.word	0x40012c00
 8004cd4:	40000400 	.word	0x40000400
 8004cd8:	40000800 	.word	0x40000800
 8004cdc:	40000c00 	.word	0x40000c00
 8004ce0:	40013400 	.word	0x40013400
 8004ce4:	40014000 	.word	0x40014000
 8004ce8:	00010007 	.word	0x00010007

08004cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d122      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d11b      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0202 	mvn.w	r2, #2
 8004d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f9ce 	bl	80050d0 <HAL_TIM_IC_CaptureCallback>
 8004d34:	e005      	b.n	8004d42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f9c0 	bl	80050bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f9d1 	bl	80050e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d122      	bne.n	8004d9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d11b      	bne.n	8004d9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0204 	mvn.w	r2, #4
 8004d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f9a4 	bl	80050d0 <HAL_TIM_IC_CaptureCallback>
 8004d88:	e005      	b.n	8004d96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f996 	bl	80050bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f9a7 	bl	80050e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d122      	bne.n	8004df0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d11b      	bne.n	8004df0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0208 	mvn.w	r2, #8
 8004dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2204      	movs	r2, #4
 8004dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f97a 	bl	80050d0 <HAL_TIM_IC_CaptureCallback>
 8004ddc:	e005      	b.n	8004dea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f96c 	bl	80050bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f97d 	bl	80050e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f003 0310 	and.w	r3, r3, #16
 8004dfa:	2b10      	cmp	r3, #16
 8004dfc:	d122      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	2b10      	cmp	r3, #16
 8004e0a:	d11b      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f06f 0210 	mvn.w	r2, #16
 8004e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2208      	movs	r2, #8
 8004e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f950 	bl	80050d0 <HAL_TIM_IC_CaptureCallback>
 8004e30:	e005      	b.n	8004e3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f942 	bl	80050bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f953 	bl	80050e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d10e      	bne.n	8004e70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d107      	bne.n	8004e70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0201 	mvn.w	r2, #1
 8004e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f001 fd8e 	bl	800698c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7a:	2b80      	cmp	r3, #128	; 0x80
 8004e7c:	d10e      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e88:	2b80      	cmp	r3, #128	; 0x80
 8004e8a:	d107      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fafe 	bl	8005498 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eaa:	d10e      	bne.n	8004eca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb6:	2b80      	cmp	r3, #128	; 0x80
 8004eb8:	d107      	bne.n	8004eca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 faf1 	bl	80054ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed4:	2b40      	cmp	r3, #64	; 0x40
 8004ed6:	d10e      	bne.n	8004ef6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee2:	2b40      	cmp	r3, #64	; 0x40
 8004ee4:	d107      	bne.n	8004ef6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f901 	bl	80050f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d10e      	bne.n	8004f22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	d107      	bne.n	8004f22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f06f 0220 	mvn.w	r2, #32
 8004f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 fab1 	bl	8005484 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f22:	bf00      	nop
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_TIM_ConfigClockSource+0x1c>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e0b6      	b.n	80050b4 <HAL_TIM_ConfigClockSource+0x18a>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2202      	movs	r2, #2
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f64:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f68:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f70:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f82:	d03e      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0xd8>
 8004f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f88:	f200 8087 	bhi.w	800509a <HAL_TIM_ConfigClockSource+0x170>
 8004f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f90:	f000 8086 	beq.w	80050a0 <HAL_TIM_ConfigClockSource+0x176>
 8004f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f98:	d87f      	bhi.n	800509a <HAL_TIM_ConfigClockSource+0x170>
 8004f9a:	2b70      	cmp	r3, #112	; 0x70
 8004f9c:	d01a      	beq.n	8004fd4 <HAL_TIM_ConfigClockSource+0xaa>
 8004f9e:	2b70      	cmp	r3, #112	; 0x70
 8004fa0:	d87b      	bhi.n	800509a <HAL_TIM_ConfigClockSource+0x170>
 8004fa2:	2b60      	cmp	r3, #96	; 0x60
 8004fa4:	d050      	beq.n	8005048 <HAL_TIM_ConfigClockSource+0x11e>
 8004fa6:	2b60      	cmp	r3, #96	; 0x60
 8004fa8:	d877      	bhi.n	800509a <HAL_TIM_ConfigClockSource+0x170>
 8004faa:	2b50      	cmp	r3, #80	; 0x50
 8004fac:	d03c      	beq.n	8005028 <HAL_TIM_ConfigClockSource+0xfe>
 8004fae:	2b50      	cmp	r3, #80	; 0x50
 8004fb0:	d873      	bhi.n	800509a <HAL_TIM_ConfigClockSource+0x170>
 8004fb2:	2b40      	cmp	r3, #64	; 0x40
 8004fb4:	d058      	beq.n	8005068 <HAL_TIM_ConfigClockSource+0x13e>
 8004fb6:	2b40      	cmp	r3, #64	; 0x40
 8004fb8:	d86f      	bhi.n	800509a <HAL_TIM_ConfigClockSource+0x170>
 8004fba:	2b30      	cmp	r3, #48	; 0x30
 8004fbc:	d064      	beq.n	8005088 <HAL_TIM_ConfigClockSource+0x15e>
 8004fbe:	2b30      	cmp	r3, #48	; 0x30
 8004fc0:	d86b      	bhi.n	800509a <HAL_TIM_ConfigClockSource+0x170>
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	d060      	beq.n	8005088 <HAL_TIM_ConfigClockSource+0x15e>
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d867      	bhi.n	800509a <HAL_TIM_ConfigClockSource+0x170>
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d05c      	beq.n	8005088 <HAL_TIM_ConfigClockSource+0x15e>
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d05a      	beq.n	8005088 <HAL_TIM_ConfigClockSource+0x15e>
 8004fd2:	e062      	b.n	800509a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	6899      	ldr	r1, [r3, #8]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f000 f9a6 	bl	8005334 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ff6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	609a      	str	r2, [r3, #8]
      break;
 8005000:	e04f      	b.n	80050a2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	6899      	ldr	r1, [r3, #8]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f000 f98f 	bl	8005334 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005024:	609a      	str	r2, [r3, #8]
      break;
 8005026:	e03c      	b.n	80050a2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6818      	ldr	r0, [r3, #0]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	6859      	ldr	r1, [r3, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	461a      	mov	r2, r3
 8005036:	f000 f903 	bl	8005240 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2150      	movs	r1, #80	; 0x50
 8005040:	4618      	mov	r0, r3
 8005042:	f000 f95c 	bl	80052fe <TIM_ITRx_SetConfig>
      break;
 8005046:	e02c      	b.n	80050a2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6818      	ldr	r0, [r3, #0]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	6859      	ldr	r1, [r3, #4]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	461a      	mov	r2, r3
 8005056:	f000 f922 	bl	800529e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2160      	movs	r1, #96	; 0x60
 8005060:	4618      	mov	r0, r3
 8005062:	f000 f94c 	bl	80052fe <TIM_ITRx_SetConfig>
      break;
 8005066:	e01c      	b.n	80050a2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	6859      	ldr	r1, [r3, #4]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	461a      	mov	r2, r3
 8005076:	f000 f8e3 	bl	8005240 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2140      	movs	r1, #64	; 0x40
 8005080:	4618      	mov	r0, r3
 8005082:	f000 f93c 	bl	80052fe <TIM_ITRx_SetConfig>
      break;
 8005086:	e00c      	b.n	80050a2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4619      	mov	r1, r3
 8005092:	4610      	mov	r0, r2
 8005094:	f000 f933 	bl	80052fe <TIM_ITRx_SetConfig>
      break;
 8005098:	e003      	b.n	80050a2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	73fb      	strb	r3, [r7, #15]
      break;
 800509e:	e000      	b.n	80050a2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80050a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a40      	ldr	r2, [pc, #256]	; (8005220 <TIM_Base_SetConfig+0x114>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d013      	beq.n	800514c <TIM_Base_SetConfig+0x40>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512a:	d00f      	beq.n	800514c <TIM_Base_SetConfig+0x40>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a3d      	ldr	r2, [pc, #244]	; (8005224 <TIM_Base_SetConfig+0x118>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00b      	beq.n	800514c <TIM_Base_SetConfig+0x40>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a3c      	ldr	r2, [pc, #240]	; (8005228 <TIM_Base_SetConfig+0x11c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d007      	beq.n	800514c <TIM_Base_SetConfig+0x40>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a3b      	ldr	r2, [pc, #236]	; (800522c <TIM_Base_SetConfig+0x120>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d003      	beq.n	800514c <TIM_Base_SetConfig+0x40>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a3a      	ldr	r2, [pc, #232]	; (8005230 <TIM_Base_SetConfig+0x124>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d108      	bne.n	800515e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a2f      	ldr	r2, [pc, #188]	; (8005220 <TIM_Base_SetConfig+0x114>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d01f      	beq.n	80051a6 <TIM_Base_SetConfig+0x9a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516c:	d01b      	beq.n	80051a6 <TIM_Base_SetConfig+0x9a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2c      	ldr	r2, [pc, #176]	; (8005224 <TIM_Base_SetConfig+0x118>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d017      	beq.n	80051a6 <TIM_Base_SetConfig+0x9a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a2b      	ldr	r2, [pc, #172]	; (8005228 <TIM_Base_SetConfig+0x11c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d013      	beq.n	80051a6 <TIM_Base_SetConfig+0x9a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a2a      	ldr	r2, [pc, #168]	; (800522c <TIM_Base_SetConfig+0x120>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00f      	beq.n	80051a6 <TIM_Base_SetConfig+0x9a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a29      	ldr	r2, [pc, #164]	; (8005230 <TIM_Base_SetConfig+0x124>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00b      	beq.n	80051a6 <TIM_Base_SetConfig+0x9a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a28      	ldr	r2, [pc, #160]	; (8005234 <TIM_Base_SetConfig+0x128>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d007      	beq.n	80051a6 <TIM_Base_SetConfig+0x9a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a27      	ldr	r2, [pc, #156]	; (8005238 <TIM_Base_SetConfig+0x12c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d003      	beq.n	80051a6 <TIM_Base_SetConfig+0x9a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a26      	ldr	r2, [pc, #152]	; (800523c <TIM_Base_SetConfig+0x130>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d108      	bne.n	80051b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a10      	ldr	r2, [pc, #64]	; (8005220 <TIM_Base_SetConfig+0x114>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00f      	beq.n	8005204 <TIM_Base_SetConfig+0xf8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a12      	ldr	r2, [pc, #72]	; (8005230 <TIM_Base_SetConfig+0x124>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d00b      	beq.n	8005204 <TIM_Base_SetConfig+0xf8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a11      	ldr	r2, [pc, #68]	; (8005234 <TIM_Base_SetConfig+0x128>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d007      	beq.n	8005204 <TIM_Base_SetConfig+0xf8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a10      	ldr	r2, [pc, #64]	; (8005238 <TIM_Base_SetConfig+0x12c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d003      	beq.n	8005204 <TIM_Base_SetConfig+0xf8>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a0f      	ldr	r2, [pc, #60]	; (800523c <TIM_Base_SetConfig+0x130>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d103      	bne.n	800520c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	615a      	str	r2, [r3, #20]
}
 8005212:	bf00      	nop
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40012c00 	.word	0x40012c00
 8005224:	40000400 	.word	0x40000400
 8005228:	40000800 	.word	0x40000800
 800522c:	40000c00 	.word	0x40000c00
 8005230:	40013400 	.word	0x40013400
 8005234:	40014000 	.word	0x40014000
 8005238:	40014400 	.word	0x40014400
 800523c:	40014800 	.word	0x40014800

08005240 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f023 0201 	bic.w	r2, r3, #1
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800526a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f023 030a 	bic.w	r3, r3, #10
 800527c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	621a      	str	r2, [r3, #32]
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800529e:	b480      	push	{r7}
 80052a0:	b087      	sub	sp, #28
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	f023 0210 	bic.w	r2, r3, #16
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	031b      	lsls	r3, r3, #12
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	621a      	str	r2, [r3, #32]
}
 80052f2:	bf00      	nop
 80052f4:	371c      	adds	r7, #28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052fe:	b480      	push	{r7}
 8005300:	b085      	sub	sp, #20
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005314:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	f043 0307 	orr.w	r3, r3, #7
 8005320:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	609a      	str	r2, [r3, #8]
}
 8005328:	bf00      	nop
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800534e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	021a      	lsls	r2, r3, #8
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	431a      	orrs	r2, r3
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	4313      	orrs	r3, r2
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	609a      	str	r2, [r3, #8]
}
 8005368:	bf00      	nop
 800536a:	371c      	adds	r7, #28
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005388:	2302      	movs	r3, #2
 800538a:	e068      	b.n	800545e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a2e      	ldr	r2, [pc, #184]	; (800546c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d004      	beq.n	80053c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a2d      	ldr	r2, [pc, #180]	; (8005470 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d108      	bne.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a1e      	ldr	r2, [pc, #120]	; (800546c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d01d      	beq.n	8005432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fe:	d018      	beq.n	8005432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a1b      	ldr	r2, [pc, #108]	; (8005474 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d013      	beq.n	8005432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a1a      	ldr	r2, [pc, #104]	; (8005478 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00e      	beq.n	8005432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a18      	ldr	r2, [pc, #96]	; (800547c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d009      	beq.n	8005432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a13      	ldr	r2, [pc, #76]	; (8005470 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d004      	beq.n	8005432 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a14      	ldr	r2, [pc, #80]	; (8005480 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d10c      	bne.n	800544c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	4313      	orrs	r3, r2
 8005442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	40012c00 	.word	0x40012c00
 8005470:	40013400 	.word	0x40013400
 8005474:	40000400 	.word	0x40000400
 8005478:	40000800 	.word	0x40000800
 800547c:	40000c00 	.word	0x40000c00
 8005480:	40014000 	.word	0x40014000

08005484 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e042      	b.n	8005558 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d106      	bne.n	80054ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f001 fe93 	bl	8007210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2224      	movs	r2, #36	; 0x24
 80054ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0201 	bic.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f82c 	bl	8005560 <UART_SetConfig>
 8005508:	4603      	mov	r3, r0
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e022      	b.n	8005558 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fb1c 	bl	8005b58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800552e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800553e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0201 	orr.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fba3 	bl	8005c9c <UART_CheckIdleState>
 8005556:	4603      	mov	r3, r0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005564:	b08c      	sub	sp, #48	; 0x30
 8005566:	af00      	add	r7, sp, #0
 8005568:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	431a      	orrs	r2, r3
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	431a      	orrs	r2, r3
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	4313      	orrs	r3, r2
 8005586:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	4baa      	ldr	r3, [pc, #680]	; (8005838 <UART_SetConfig+0x2d8>)
 8005590:	4013      	ands	r3, r2
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	6812      	ldr	r2, [r2, #0]
 8005596:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005598:	430b      	orrs	r3, r1
 800559a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a9f      	ldr	r2, [pc, #636]	; (800583c <UART_SetConfig+0x2dc>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d004      	beq.n	80055cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055c8:	4313      	orrs	r3, r2
 80055ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80055d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	6812      	ldr	r2, [r2, #0]
 80055de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055e0:	430b      	orrs	r3, r1
 80055e2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ea:	f023 010f 	bic.w	r1, r3, #15
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a90      	ldr	r2, [pc, #576]	; (8005840 <UART_SetConfig+0x2e0>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d125      	bne.n	8005650 <UART_SetConfig+0xf0>
 8005604:	4b8f      	ldr	r3, [pc, #572]	; (8005844 <UART_SetConfig+0x2e4>)
 8005606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	2b03      	cmp	r3, #3
 8005610:	d81a      	bhi.n	8005648 <UART_SetConfig+0xe8>
 8005612:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <UART_SetConfig+0xb8>)
 8005614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005618:	08005629 	.word	0x08005629
 800561c:	08005639 	.word	0x08005639
 8005620:	08005631 	.word	0x08005631
 8005624:	08005641 	.word	0x08005641
 8005628:	2301      	movs	r3, #1
 800562a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800562e:	e116      	b.n	800585e <UART_SetConfig+0x2fe>
 8005630:	2302      	movs	r3, #2
 8005632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005636:	e112      	b.n	800585e <UART_SetConfig+0x2fe>
 8005638:	2304      	movs	r3, #4
 800563a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800563e:	e10e      	b.n	800585e <UART_SetConfig+0x2fe>
 8005640:	2308      	movs	r3, #8
 8005642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005646:	e10a      	b.n	800585e <UART_SetConfig+0x2fe>
 8005648:	2310      	movs	r3, #16
 800564a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800564e:	e106      	b.n	800585e <UART_SetConfig+0x2fe>
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a7c      	ldr	r2, [pc, #496]	; (8005848 <UART_SetConfig+0x2e8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d138      	bne.n	80056cc <UART_SetConfig+0x16c>
 800565a:	4b7a      	ldr	r3, [pc, #488]	; (8005844 <UART_SetConfig+0x2e4>)
 800565c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005660:	f003 030c 	and.w	r3, r3, #12
 8005664:	2b0c      	cmp	r3, #12
 8005666:	d82d      	bhi.n	80056c4 <UART_SetConfig+0x164>
 8005668:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <UART_SetConfig+0x110>)
 800566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566e:	bf00      	nop
 8005670:	080056a5 	.word	0x080056a5
 8005674:	080056c5 	.word	0x080056c5
 8005678:	080056c5 	.word	0x080056c5
 800567c:	080056c5 	.word	0x080056c5
 8005680:	080056b5 	.word	0x080056b5
 8005684:	080056c5 	.word	0x080056c5
 8005688:	080056c5 	.word	0x080056c5
 800568c:	080056c5 	.word	0x080056c5
 8005690:	080056ad 	.word	0x080056ad
 8005694:	080056c5 	.word	0x080056c5
 8005698:	080056c5 	.word	0x080056c5
 800569c:	080056c5 	.word	0x080056c5
 80056a0:	080056bd 	.word	0x080056bd
 80056a4:	2300      	movs	r3, #0
 80056a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056aa:	e0d8      	b.n	800585e <UART_SetConfig+0x2fe>
 80056ac:	2302      	movs	r3, #2
 80056ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056b2:	e0d4      	b.n	800585e <UART_SetConfig+0x2fe>
 80056b4:	2304      	movs	r3, #4
 80056b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ba:	e0d0      	b.n	800585e <UART_SetConfig+0x2fe>
 80056bc:	2308      	movs	r3, #8
 80056be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056c2:	e0cc      	b.n	800585e <UART_SetConfig+0x2fe>
 80056c4:	2310      	movs	r3, #16
 80056c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ca:	e0c8      	b.n	800585e <UART_SetConfig+0x2fe>
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a5e      	ldr	r2, [pc, #376]	; (800584c <UART_SetConfig+0x2ec>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d125      	bne.n	8005722 <UART_SetConfig+0x1c2>
 80056d6:	4b5b      	ldr	r3, [pc, #364]	; (8005844 <UART_SetConfig+0x2e4>)
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056e0:	2b30      	cmp	r3, #48	; 0x30
 80056e2:	d016      	beq.n	8005712 <UART_SetConfig+0x1b2>
 80056e4:	2b30      	cmp	r3, #48	; 0x30
 80056e6:	d818      	bhi.n	800571a <UART_SetConfig+0x1ba>
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	d00a      	beq.n	8005702 <UART_SetConfig+0x1a2>
 80056ec:	2b20      	cmp	r3, #32
 80056ee:	d814      	bhi.n	800571a <UART_SetConfig+0x1ba>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <UART_SetConfig+0x19a>
 80056f4:	2b10      	cmp	r3, #16
 80056f6:	d008      	beq.n	800570a <UART_SetConfig+0x1aa>
 80056f8:	e00f      	b.n	800571a <UART_SetConfig+0x1ba>
 80056fa:	2300      	movs	r3, #0
 80056fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005700:	e0ad      	b.n	800585e <UART_SetConfig+0x2fe>
 8005702:	2302      	movs	r3, #2
 8005704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005708:	e0a9      	b.n	800585e <UART_SetConfig+0x2fe>
 800570a:	2304      	movs	r3, #4
 800570c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005710:	e0a5      	b.n	800585e <UART_SetConfig+0x2fe>
 8005712:	2308      	movs	r3, #8
 8005714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005718:	e0a1      	b.n	800585e <UART_SetConfig+0x2fe>
 800571a:	2310      	movs	r3, #16
 800571c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005720:	e09d      	b.n	800585e <UART_SetConfig+0x2fe>
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a4a      	ldr	r2, [pc, #296]	; (8005850 <UART_SetConfig+0x2f0>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d125      	bne.n	8005778 <UART_SetConfig+0x218>
 800572c:	4b45      	ldr	r3, [pc, #276]	; (8005844 <UART_SetConfig+0x2e4>)
 800572e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005732:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005736:	2bc0      	cmp	r3, #192	; 0xc0
 8005738:	d016      	beq.n	8005768 <UART_SetConfig+0x208>
 800573a:	2bc0      	cmp	r3, #192	; 0xc0
 800573c:	d818      	bhi.n	8005770 <UART_SetConfig+0x210>
 800573e:	2b80      	cmp	r3, #128	; 0x80
 8005740:	d00a      	beq.n	8005758 <UART_SetConfig+0x1f8>
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	d814      	bhi.n	8005770 <UART_SetConfig+0x210>
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <UART_SetConfig+0x1f0>
 800574a:	2b40      	cmp	r3, #64	; 0x40
 800574c:	d008      	beq.n	8005760 <UART_SetConfig+0x200>
 800574e:	e00f      	b.n	8005770 <UART_SetConfig+0x210>
 8005750:	2300      	movs	r3, #0
 8005752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005756:	e082      	b.n	800585e <UART_SetConfig+0x2fe>
 8005758:	2302      	movs	r3, #2
 800575a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800575e:	e07e      	b.n	800585e <UART_SetConfig+0x2fe>
 8005760:	2304      	movs	r3, #4
 8005762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005766:	e07a      	b.n	800585e <UART_SetConfig+0x2fe>
 8005768:	2308      	movs	r3, #8
 800576a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800576e:	e076      	b.n	800585e <UART_SetConfig+0x2fe>
 8005770:	2310      	movs	r3, #16
 8005772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005776:	e072      	b.n	800585e <UART_SetConfig+0x2fe>
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a35      	ldr	r2, [pc, #212]	; (8005854 <UART_SetConfig+0x2f4>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d12a      	bne.n	80057d8 <UART_SetConfig+0x278>
 8005782:	4b30      	ldr	r3, [pc, #192]	; (8005844 <UART_SetConfig+0x2e4>)
 8005784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800578c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005790:	d01a      	beq.n	80057c8 <UART_SetConfig+0x268>
 8005792:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005796:	d81b      	bhi.n	80057d0 <UART_SetConfig+0x270>
 8005798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800579c:	d00c      	beq.n	80057b8 <UART_SetConfig+0x258>
 800579e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a2:	d815      	bhi.n	80057d0 <UART_SetConfig+0x270>
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d003      	beq.n	80057b0 <UART_SetConfig+0x250>
 80057a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ac:	d008      	beq.n	80057c0 <UART_SetConfig+0x260>
 80057ae:	e00f      	b.n	80057d0 <UART_SetConfig+0x270>
 80057b0:	2300      	movs	r3, #0
 80057b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057b6:	e052      	b.n	800585e <UART_SetConfig+0x2fe>
 80057b8:	2302      	movs	r3, #2
 80057ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057be:	e04e      	b.n	800585e <UART_SetConfig+0x2fe>
 80057c0:	2304      	movs	r3, #4
 80057c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057c6:	e04a      	b.n	800585e <UART_SetConfig+0x2fe>
 80057c8:	2308      	movs	r3, #8
 80057ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ce:	e046      	b.n	800585e <UART_SetConfig+0x2fe>
 80057d0:	2310      	movs	r3, #16
 80057d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057d6:	e042      	b.n	800585e <UART_SetConfig+0x2fe>
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a17      	ldr	r2, [pc, #92]	; (800583c <UART_SetConfig+0x2dc>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d13a      	bne.n	8005858 <UART_SetConfig+0x2f8>
 80057e2:	4b18      	ldr	r3, [pc, #96]	; (8005844 <UART_SetConfig+0x2e4>)
 80057e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057f0:	d01a      	beq.n	8005828 <UART_SetConfig+0x2c8>
 80057f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057f6:	d81b      	bhi.n	8005830 <UART_SetConfig+0x2d0>
 80057f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057fc:	d00c      	beq.n	8005818 <UART_SetConfig+0x2b8>
 80057fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005802:	d815      	bhi.n	8005830 <UART_SetConfig+0x2d0>
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <UART_SetConfig+0x2b0>
 8005808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580c:	d008      	beq.n	8005820 <UART_SetConfig+0x2c0>
 800580e:	e00f      	b.n	8005830 <UART_SetConfig+0x2d0>
 8005810:	2300      	movs	r3, #0
 8005812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005816:	e022      	b.n	800585e <UART_SetConfig+0x2fe>
 8005818:	2302      	movs	r3, #2
 800581a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800581e:	e01e      	b.n	800585e <UART_SetConfig+0x2fe>
 8005820:	2304      	movs	r3, #4
 8005822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005826:	e01a      	b.n	800585e <UART_SetConfig+0x2fe>
 8005828:	2308      	movs	r3, #8
 800582a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800582e:	e016      	b.n	800585e <UART_SetConfig+0x2fe>
 8005830:	2310      	movs	r3, #16
 8005832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005836:	e012      	b.n	800585e <UART_SetConfig+0x2fe>
 8005838:	cfff69f3 	.word	0xcfff69f3
 800583c:	40008000 	.word	0x40008000
 8005840:	40013800 	.word	0x40013800
 8005844:	40021000 	.word	0x40021000
 8005848:	40004400 	.word	0x40004400
 800584c:	40004800 	.word	0x40004800
 8005850:	40004c00 	.word	0x40004c00
 8005854:	40005000 	.word	0x40005000
 8005858:	2310      	movs	r3, #16
 800585a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4aae      	ldr	r2, [pc, #696]	; (8005b1c <UART_SetConfig+0x5bc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	f040 8097 	bne.w	8005998 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800586a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800586e:	2b08      	cmp	r3, #8
 8005870:	d823      	bhi.n	80058ba <UART_SetConfig+0x35a>
 8005872:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <UART_SetConfig+0x318>)
 8005874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005878:	0800589d 	.word	0x0800589d
 800587c:	080058bb 	.word	0x080058bb
 8005880:	080058a5 	.word	0x080058a5
 8005884:	080058bb 	.word	0x080058bb
 8005888:	080058ab 	.word	0x080058ab
 800588c:	080058bb 	.word	0x080058bb
 8005890:	080058bb 	.word	0x080058bb
 8005894:	080058bb 	.word	0x080058bb
 8005898:	080058b3 	.word	0x080058b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800589c:	f7fe fb28 	bl	8003ef0 <HAL_RCC_GetPCLK1Freq>
 80058a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058a2:	e010      	b.n	80058c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058a4:	4b9e      	ldr	r3, [pc, #632]	; (8005b20 <UART_SetConfig+0x5c0>)
 80058a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058a8:	e00d      	b.n	80058c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058aa:	f7fe fa89 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 80058ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058b0:	e009      	b.n	80058c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058b8:	e005      	b.n	80058c6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80058c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 8130 	beq.w	8005b2e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	4a94      	ldr	r2, [pc, #592]	; (8005b24 <UART_SetConfig+0x5c4>)
 80058d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058d8:	461a      	mov	r2, r3
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80058e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	4613      	mov	r3, r2
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	4413      	add	r3, r2
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d305      	bcc.n	80058fe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d903      	bls.n	8005906 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005904:	e113      	b.n	8005b2e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	2200      	movs	r2, #0
 800590a:	60bb      	str	r3, [r7, #8]
 800590c:	60fa      	str	r2, [r7, #12]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	4a84      	ldr	r2, [pc, #528]	; (8005b24 <UART_SetConfig+0x5c4>)
 8005914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005918:	b29b      	uxth	r3, r3
 800591a:	2200      	movs	r2, #0
 800591c:	603b      	str	r3, [r7, #0]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005924:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005928:	f7fb f956 	bl	8000bd8 <__aeabi_uldivmod>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4610      	mov	r0, r2
 8005932:	4619      	mov	r1, r3
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	020b      	lsls	r3, r1, #8
 800593e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005942:	0202      	lsls	r2, r0, #8
 8005944:	6979      	ldr	r1, [r7, #20]
 8005946:	6849      	ldr	r1, [r1, #4]
 8005948:	0849      	lsrs	r1, r1, #1
 800594a:	2000      	movs	r0, #0
 800594c:	460c      	mov	r4, r1
 800594e:	4605      	mov	r5, r0
 8005950:	eb12 0804 	adds.w	r8, r2, r4
 8005954:	eb43 0905 	adc.w	r9, r3, r5
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	469a      	mov	sl, r3
 8005960:	4693      	mov	fp, r2
 8005962:	4652      	mov	r2, sl
 8005964:	465b      	mov	r3, fp
 8005966:	4640      	mov	r0, r8
 8005968:	4649      	mov	r1, r9
 800596a:	f7fb f935 	bl	8000bd8 <__aeabi_uldivmod>
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	4613      	mov	r3, r2
 8005974:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800597c:	d308      	bcc.n	8005990 <UART_SetConfig+0x430>
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005984:	d204      	bcs.n	8005990 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6a3a      	ldr	r2, [r7, #32]
 800598c:	60da      	str	r2, [r3, #12]
 800598e:	e0ce      	b.n	8005b2e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005996:	e0ca      	b.n	8005b2e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059a0:	d166      	bne.n	8005a70 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80059a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d827      	bhi.n	80059fa <UART_SetConfig+0x49a>
 80059aa:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <UART_SetConfig+0x450>)
 80059ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b0:	080059d5 	.word	0x080059d5
 80059b4:	080059dd 	.word	0x080059dd
 80059b8:	080059e5 	.word	0x080059e5
 80059bc:	080059fb 	.word	0x080059fb
 80059c0:	080059eb 	.word	0x080059eb
 80059c4:	080059fb 	.word	0x080059fb
 80059c8:	080059fb 	.word	0x080059fb
 80059cc:	080059fb 	.word	0x080059fb
 80059d0:	080059f3 	.word	0x080059f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d4:	f7fe fa8c 	bl	8003ef0 <HAL_RCC_GetPCLK1Freq>
 80059d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059da:	e014      	b.n	8005a06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059dc:	f7fe fa9e 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 80059e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059e2:	e010      	b.n	8005a06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059e4:	4b4e      	ldr	r3, [pc, #312]	; (8005b20 <UART_SetConfig+0x5c0>)
 80059e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059e8:	e00d      	b.n	8005a06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ea:	f7fe f9e9 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 80059ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059f0:	e009      	b.n	8005a06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059f8:	e005      	b.n	8005a06 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 8090 	beq.w	8005b2e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	4a44      	ldr	r2, [pc, #272]	; (8005b24 <UART_SetConfig+0x5c4>)
 8005a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a20:	005a      	lsls	r2, r3, #1
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	085b      	lsrs	r3, r3, #1
 8005a28:	441a      	add	r2, r3
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a32:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	2b0f      	cmp	r3, #15
 8005a38:	d916      	bls.n	8005a68 <UART_SetConfig+0x508>
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a40:	d212      	bcs.n	8005a68 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f023 030f 	bic.w	r3, r3, #15
 8005a4a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	085b      	lsrs	r3, r3, #1
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	8bfb      	ldrh	r3, [r7, #30]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	8bfa      	ldrh	r2, [r7, #30]
 8005a64:	60da      	str	r2, [r3, #12]
 8005a66:	e062      	b.n	8005b2e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a6e:	e05e      	b.n	8005b2e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d828      	bhi.n	8005aca <UART_SetConfig+0x56a>
 8005a78:	a201      	add	r2, pc, #4	; (adr r2, 8005a80 <UART_SetConfig+0x520>)
 8005a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7e:	bf00      	nop
 8005a80:	08005aa5 	.word	0x08005aa5
 8005a84:	08005aad 	.word	0x08005aad
 8005a88:	08005ab5 	.word	0x08005ab5
 8005a8c:	08005acb 	.word	0x08005acb
 8005a90:	08005abb 	.word	0x08005abb
 8005a94:	08005acb 	.word	0x08005acb
 8005a98:	08005acb 	.word	0x08005acb
 8005a9c:	08005acb 	.word	0x08005acb
 8005aa0:	08005ac3 	.word	0x08005ac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aa4:	f7fe fa24 	bl	8003ef0 <HAL_RCC_GetPCLK1Freq>
 8005aa8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005aaa:	e014      	b.n	8005ad6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aac:	f7fe fa36 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 8005ab0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ab2:	e010      	b.n	8005ad6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ab4:	4b1a      	ldr	r3, [pc, #104]	; (8005b20 <UART_SetConfig+0x5c0>)
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ab8:	e00d      	b.n	8005ad6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aba:	f7fe f981 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 8005abe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ac0:	e009      	b.n	8005ad6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ac6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ac8:	e005      	b.n	8005ad6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ad4:	bf00      	nop
    }

    if (pclk != 0U)
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d028      	beq.n	8005b2e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	4a10      	ldr	r2, [pc, #64]	; (8005b24 <UART_SetConfig+0x5c4>)
 8005ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	fbb3 f2f2 	udiv	r2, r3, r2
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	085b      	lsrs	r3, r3, #1
 8005af4:	441a      	add	r2, r3
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005afe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	2b0f      	cmp	r3, #15
 8005b04:	d910      	bls.n	8005b28 <UART_SetConfig+0x5c8>
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b0c:	d20c      	bcs.n	8005b28 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60da      	str	r2, [r3, #12]
 8005b18:	e009      	b.n	8005b2e <UART_SetConfig+0x5ce>
 8005b1a:	bf00      	nop
 8005b1c:	40008000 	.word	0x40008000
 8005b20:	00f42400 	.word	0x00f42400
 8005b24:	0800a31c 	.word	0x0800a31c
      }
      else
      {
        ret = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2200      	movs	r2, #0
 8005b42:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2200      	movs	r2, #0
 8005b48:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005b4a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3730      	adds	r7, #48	; 0x30
 8005b52:	46bd      	mov	sp, r7
 8005b54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005b58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00a      	beq.n	8005b82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01a      	beq.n	8005c6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c56:	d10a      	bne.n	8005c6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00a      	beq.n	8005c90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	605a      	str	r2, [r3, #4]
  }
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cac:	f7fb fea4 	bl	80019f8 <HAL_GetTick>
 8005cb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d10e      	bne.n	8005cde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f82f 	bl	8005d32 <UART_WaitOnFlagUntilTimeout>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e025      	b.n	8005d2a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d10e      	bne.n	8005d0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f819 	bl	8005d32 <UART_WaitOnFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e00f      	b.n	8005d2a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b09c      	sub	sp, #112	; 0x70
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	603b      	str	r3, [r7, #0]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d42:	e0a9      	b.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4a:	f000 80a5 	beq.w	8005e98 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4e:	f7fb fe53 	bl	80019f8 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d302      	bcc.n	8005d64 <UART_WaitOnFlagUntilTimeout+0x32>
 8005d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d140      	bne.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d78:	667b      	str	r3, [r7, #100]	; 0x64
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d84:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e6      	bne.n	8005d64 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da0:	e853 3f00 	ldrex	r3, [r3]
 8005da4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da8:	f023 0301 	bic.w	r3, r3, #1
 8005dac:	663b      	str	r3, [r7, #96]	; 0x60
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3308      	adds	r3, #8
 8005db4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005db6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005db8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e5      	bne.n	8005d96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e069      	b.n	8005eba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d051      	beq.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e02:	d149      	bne.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e16:	e853 3f00 	ldrex	r3, [r3]
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e34:	e841 2300 	strex	r3, r2, [r1]
 8005e38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e6      	bne.n	8005e0e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3308      	adds	r3, #8
 8005e46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	e853 3f00 	ldrex	r3, [r3]
 8005e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f023 0301 	bic.w	r3, r3, #1
 8005e56:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3308      	adds	r3, #8
 8005e5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e60:	623a      	str	r2, [r7, #32]
 8005e62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e64:	69f9      	ldr	r1, [r7, #28]
 8005e66:	6a3a      	ldr	r2, [r7, #32]
 8005e68:	e841 2300 	strex	r3, r2, [r1]
 8005e6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1e5      	bne.n	8005e40 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e010      	b.n	8005eba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	69da      	ldr	r2, [r3, #28]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	bf0c      	ite	eq
 8005ea8:	2301      	moveq	r3, #1
 8005eaa:	2300      	movne	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	461a      	mov	r2, r3
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	f43f af46 	beq.w	8005d44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3770      	adds	r7, #112	; 0x70
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b085      	sub	sp, #20
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e027      	b.n	8005f28 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2224      	movs	r2, #36	; 0x24
 8005ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0201 	bic.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f06:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d101      	bne.n	8005f4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e02d      	b.n	8005fa8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2224      	movs	r2, #36	; 0x24
 8005f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0201 	bic.w	r2, r2, #1
 8005f72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f84f 	bl	800602c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d101      	bne.n	8005fc8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e02d      	b.n	8006024 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2224      	movs	r2, #36	; 0x24
 8005fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0201 	bic.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f811 	bl	800602c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2220      	movs	r2, #32
 8006016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006038:	2b00      	cmp	r3, #0
 800603a:	d108      	bne.n	800604e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800604c:	e031      	b.n	80060b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800604e:	2308      	movs	r3, #8
 8006050:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006052:	2308      	movs	r3, #8
 8006054:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	0e5b      	lsrs	r3, r3, #25
 800605e:	b2db      	uxtb	r3, r3
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	0f5b      	lsrs	r3, r3, #29
 800606e:	b2db      	uxtb	r3, r3
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006076:	7bbb      	ldrb	r3, [r7, #14]
 8006078:	7b3a      	ldrb	r2, [r7, #12]
 800607a:	4911      	ldr	r1, [pc, #68]	; (80060c0 <UARTEx_SetNbDataToProcess+0x94>)
 800607c:	5c8a      	ldrb	r2, [r1, r2]
 800607e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006082:	7b3a      	ldrb	r2, [r7, #12]
 8006084:	490f      	ldr	r1, [pc, #60]	; (80060c4 <UARTEx_SetNbDataToProcess+0x98>)
 8006086:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006088:	fb93 f3f2 	sdiv	r3, r3, r2
 800608c:	b29a      	uxth	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	7b7a      	ldrb	r2, [r7, #13]
 8006098:	4909      	ldr	r1, [pc, #36]	; (80060c0 <UARTEx_SetNbDataToProcess+0x94>)
 800609a:	5c8a      	ldrb	r2, [r1, r2]
 800609c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80060a0:	7b7a      	ldrb	r2, [r7, #13]
 80060a2:	4908      	ldr	r1, [pc, #32]	; (80060c4 <UARTEx_SetNbDataToProcess+0x98>)
 80060a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	0800a334 	.word	0x0800a334
 80060c4:	0800a33c 	.word	0x0800a33c

080060c8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	601a      	str	r2, [r3, #0]
}
 8006104:	bf00      	nop
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	6892      	ldr	r2, [r2, #8]
 8006126:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6852      	ldr	r2, [r2, #4]
 8006130:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	429a      	cmp	r2, r3
 800613a:	d103      	bne.n	8006144 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	1e5a      	subs	r2, r3, #1
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800616e:	4b4e      	ldr	r3, [pc, #312]	; (80062a8 <xTaskIncrementTick+0x144>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	f040 808e 	bne.w	8006294 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006178:	4b4c      	ldr	r3, [pc, #304]	; (80062ac <xTaskIncrementTick+0x148>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3301      	adds	r3, #1
 800617e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006180:	4a4a      	ldr	r2, [pc, #296]	; (80062ac <xTaskIncrementTick+0x148>)
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d120      	bne.n	80061ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800618c:	4b48      	ldr	r3, [pc, #288]	; (80062b0 <xTaskIncrementTick+0x14c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061a8:	bf00      	nop
 80061aa:	e7fe      	b.n	80061aa <xTaskIncrementTick+0x46>
 80061ac:	4b40      	ldr	r3, [pc, #256]	; (80062b0 <xTaskIncrementTick+0x14c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60fb      	str	r3, [r7, #12]
 80061b2:	4b40      	ldr	r3, [pc, #256]	; (80062b4 <xTaskIncrementTick+0x150>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a3e      	ldr	r2, [pc, #248]	; (80062b0 <xTaskIncrementTick+0x14c>)
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	4a3e      	ldr	r2, [pc, #248]	; (80062b4 <xTaskIncrementTick+0x150>)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	4b3d      	ldr	r3, [pc, #244]	; (80062b8 <xTaskIncrementTick+0x154>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3301      	adds	r3, #1
 80061c6:	4a3c      	ldr	r2, [pc, #240]	; (80062b8 <xTaskIncrementTick+0x154>)
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	f000 f8df 	bl	800638c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061ce:	4b3b      	ldr	r3, [pc, #236]	; (80062bc <xTaskIncrementTick+0x158>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d348      	bcc.n	800626a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061d8:	4b35      	ldr	r3, [pc, #212]	; (80062b0 <xTaskIncrementTick+0x14c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d104      	bne.n	80061ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061e2:	4b36      	ldr	r3, [pc, #216]	; (80062bc <xTaskIncrementTick+0x158>)
 80061e4:	f04f 32ff 	mov.w	r2, #4294967295
 80061e8:	601a      	str	r2, [r3, #0]
					break;
 80061ea:	e03e      	b.n	800626a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ec:	4b30      	ldr	r3, [pc, #192]	; (80062b0 <xTaskIncrementTick+0x14c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	429a      	cmp	r2, r3
 8006202:	d203      	bcs.n	800620c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006204:	4a2d      	ldr	r2, [pc, #180]	; (80062bc <xTaskIncrementTick+0x158>)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800620a:	e02e      	b.n	800626a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	3304      	adds	r3, #4
 8006210:	4618      	mov	r0, r3
 8006212:	f7ff ff7d 	bl	8006110 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621a:	2b00      	cmp	r3, #0
 800621c:	d004      	beq.n	8006228 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	3318      	adds	r3, #24
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff ff74 	bl	8006110 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622c:	2201      	movs	r2, #1
 800622e:	409a      	lsls	r2, r3
 8006230:	4b23      	ldr	r3, [pc, #140]	; (80062c0 <xTaskIncrementTick+0x15c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4313      	orrs	r3, r2
 8006236:	4a22      	ldr	r2, [pc, #136]	; (80062c0 <xTaskIncrementTick+0x15c>)
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623e:	4613      	mov	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4a1f      	ldr	r2, [pc, #124]	; (80062c4 <xTaskIncrementTick+0x160>)
 8006248:	441a      	add	r2, r3
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	3304      	adds	r3, #4
 800624e:	4619      	mov	r1, r3
 8006250:	4610      	mov	r0, r2
 8006252:	f7ff ff39 	bl	80060c8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625a:	4b1b      	ldr	r3, [pc, #108]	; (80062c8 <xTaskIncrementTick+0x164>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006260:	429a      	cmp	r2, r3
 8006262:	d3b9      	bcc.n	80061d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006264:	2301      	movs	r3, #1
 8006266:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006268:	e7b6      	b.n	80061d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800626a:	4b17      	ldr	r3, [pc, #92]	; (80062c8 <xTaskIncrementTick+0x164>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006270:	4914      	ldr	r1, [pc, #80]	; (80062c4 <xTaskIncrementTick+0x160>)
 8006272:	4613      	mov	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	440b      	add	r3, r1
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d901      	bls.n	8006286 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006282:	2301      	movs	r3, #1
 8006284:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006286:	4b11      	ldr	r3, [pc, #68]	; (80062cc <xTaskIncrementTick+0x168>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d007      	beq.n	800629e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800628e:	2301      	movs	r3, #1
 8006290:	617b      	str	r3, [r7, #20]
 8006292:	e004      	b.n	800629e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006294:	4b0e      	ldr	r3, [pc, #56]	; (80062d0 <xTaskIncrementTick+0x16c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3301      	adds	r3, #1
 800629a:	4a0d      	ldr	r2, [pc, #52]	; (80062d0 <xTaskIncrementTick+0x16c>)
 800629c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800629e:	697b      	ldr	r3, [r7, #20]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	2000036c 	.word	0x2000036c
 80062ac:	20000354 	.word	0x20000354
 80062b0:	2000034c 	.word	0x2000034c
 80062b4:	20000350 	.word	0x20000350
 80062b8:	20000364 	.word	0x20000364
 80062bc:	20000368 	.word	0x20000368
 80062c0:	20000358 	.word	0x20000358
 80062c4:	200002c0 	.word	0x200002c0
 80062c8:	200002bc 	.word	0x200002bc
 80062cc:	20000360 	.word	0x20000360
 80062d0:	2000035c 	.word	0x2000035c

080062d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062da:	4b27      	ldr	r3, [pc, #156]	; (8006378 <vTaskSwitchContext+0xa4>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062e2:	4b26      	ldr	r3, [pc, #152]	; (800637c <vTaskSwitchContext+0xa8>)
 80062e4:	2201      	movs	r2, #1
 80062e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062e8:	e03f      	b.n	800636a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80062ea:	4b24      	ldr	r3, [pc, #144]	; (800637c <vTaskSwitchContext+0xa8>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062f0:	4b23      	ldr	r3, [pc, #140]	; (8006380 <vTaskSwitchContext+0xac>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	fab3 f383 	clz	r3, r3
 80062fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80062fe:	7afb      	ldrb	r3, [r7, #11]
 8006300:	f1c3 031f 	rsb	r3, r3, #31
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	491f      	ldr	r1, [pc, #124]	; (8006384 <vTaskSwitchContext+0xb0>)
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	440b      	add	r3, r1
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10a      	bne.n	8006330 <vTaskSwitchContext+0x5c>
	__asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	607b      	str	r3, [r7, #4]
}
 800632c:	bf00      	nop
 800632e:	e7fe      	b.n	800632e <vTaskSwitchContext+0x5a>
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	4613      	mov	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4a12      	ldr	r2, [pc, #72]	; (8006384 <vTaskSwitchContext+0xb0>)
 800633c:	4413      	add	r3, r2
 800633e:	613b      	str	r3, [r7, #16]
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	605a      	str	r2, [r3, #4]
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	3308      	adds	r3, #8
 8006352:	429a      	cmp	r2, r3
 8006354:	d104      	bne.n	8006360 <vTaskSwitchContext+0x8c>
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	605a      	str	r2, [r3, #4]
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	4a08      	ldr	r2, [pc, #32]	; (8006388 <vTaskSwitchContext+0xb4>)
 8006368:	6013      	str	r3, [r2, #0]
}
 800636a:	bf00      	nop
 800636c:	371c      	adds	r7, #28
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	2000036c 	.word	0x2000036c
 800637c:	20000360 	.word	0x20000360
 8006380:	20000358 	.word	0x20000358
 8006384:	200002c0 	.word	0x200002c0
 8006388:	200002bc 	.word	0x200002bc

0800638c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006392:	4b0c      	ldr	r3, [pc, #48]	; (80063c4 <prvResetNextTaskUnblockTime+0x38>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d104      	bne.n	80063a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800639c:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <prvResetNextTaskUnblockTime+0x3c>)
 800639e:	f04f 32ff 	mov.w	r2, #4294967295
 80063a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063a4:	e008      	b.n	80063b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a6:	4b07      	ldr	r3, [pc, #28]	; (80063c4 <prvResetNextTaskUnblockTime+0x38>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	4a04      	ldr	r2, [pc, #16]	; (80063c8 <prvResetNextTaskUnblockTime+0x3c>)
 80063b6:	6013      	str	r3, [r2, #0]
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	2000034c 	.word	0x2000034c
 80063c8:	20000368 	.word	0x20000368
 80063cc:	00000000 	.word	0x00000000

080063d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063d0:	4b07      	ldr	r3, [pc, #28]	; (80063f0 <pxCurrentTCBConst2>)
 80063d2:	6819      	ldr	r1, [r3, #0]
 80063d4:	6808      	ldr	r0, [r1, #0]
 80063d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063da:	f380 8809 	msr	PSP, r0
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f04f 0000 	mov.w	r0, #0
 80063e6:	f380 8811 	msr	BASEPRI, r0
 80063ea:	4770      	bx	lr
 80063ec:	f3af 8000 	nop.w

080063f0 <pxCurrentTCBConst2>:
 80063f0:	200002bc 	.word	0x200002bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80063f4:	bf00      	nop
 80063f6:	bf00      	nop
	...

08006400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006400:	f3ef 8009 	mrs	r0, PSP
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	4b15      	ldr	r3, [pc, #84]	; (8006460 <pxCurrentTCBConst>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	f01e 0f10 	tst.w	lr, #16
 8006410:	bf08      	it	eq
 8006412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641a:	6010      	str	r0, [r2, #0]
 800641c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006424:	f380 8811 	msr	BASEPRI, r0
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f7ff ff50 	bl	80062d4 <vTaskSwitchContext>
 8006434:	f04f 0000 	mov.w	r0, #0
 8006438:	f380 8811 	msr	BASEPRI, r0
 800643c:	bc09      	pop	{r0, r3}
 800643e:	6819      	ldr	r1, [r3, #0]
 8006440:	6808      	ldr	r0, [r1, #0]
 8006442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006446:	f01e 0f10 	tst.w	lr, #16
 800644a:	bf08      	it	eq
 800644c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006450:	f380 8809 	msr	PSP, r0
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	f3af 8000 	nop.w

08006460 <pxCurrentTCBConst>:
 8006460:	200002bc 	.word	0x200002bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop

08006468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	607b      	str	r3, [r7, #4]
}
 8006480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006482:	f7ff fe6f 	bl	8006164 <xTaskIncrementTick>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800648c:	4b06      	ldr	r3, [pc, #24]	; (80064a8 <SysTick_Handler+0x40>)
 800648e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	2300      	movs	r3, #0
 8006496:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800649e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80064a0:	bf00      	nop
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	e000ed04 	.word	0xe000ed04

080064ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80064b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80064b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d013      	beq.n	80064ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80064c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80064c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80064cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00b      	beq.n	80064ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80064d4:	e000      	b.n	80064d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80064d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80064d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0f9      	beq.n	80064d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80064e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80064ec:	687b      	ldr	r3, [r7, #4]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
	...

080064fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006500:	f7fb fa62 	bl	80019c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006504:	f000 f822 	bl	800654c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006508:	f000 f98a 	bl	8006820 <MX_GPIO_Init>
  MX_ADC1_Init();
 800650c:	f000 f870 	bl	80065f0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8006510:	f000 f8ec 	bl	80066ec <MX_TIM2_Init>
  MX_I2C2_Init();
 8006514:	f000 f8aa 	bl	800666c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8006518:	f000 f936 	bl	8006788 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  selector = 0; //initialize selector
 800651c:	4b09      	ldr	r3, [pc, #36]	; (8006544 <main+0x48>)
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]

  //initialize sensors
  BSP_TSENSOR_Init();
 8006522:	f000 fd39 	bl	8006f98 <BSP_TSENSOR_Init>
  BSP_HSENSOR_Init();
 8006526:	f000 fcaf 	bl	8006e88 <BSP_HSENSOR_Init>
  BSP_MAGNETO_Init();
 800652a:	f000 fcdb 	bl	8006ee4 <BSP_MAGNETO_Init>
  BSP_ACCELERO_Init();
 800652e:	f000 fc13 	bl	8006d58 <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 8006532:	f000 fc4f 	bl	8006dd4 <BSP_GYRO_Init>
  BSP_PSENSOR_Init();
 8006536:	f000 fd01 	bl	8006f3c <BSP_PSENSOR_Init>
  /* USER CODE BEGIN WHILE */
  // HAL_TIM_Base_Start_IT(&htim6); // unsure of this line of code
#endif

#ifdef BUTTON_TEST
  HAL_TIM_Base_Start_IT(&htim2);
 800653a:	4803      	ldr	r0, [pc, #12]	; (8006548 <main+0x4c>)
 800653c:	f7fe fb66 	bl	8004c0c <HAL_TIM_Base_Start_IT>
#endif
  while (1)
 8006540:	e7fe      	b.n	8006540 <main+0x44>
 8006542:	bf00      	nop
 8006544:	20000508 	.word	0x20000508
 8006548:	2000042c 	.word	0x2000042c

0800654c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b096      	sub	sp, #88	; 0x58
 8006550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006552:	f107 0314 	add.w	r3, r7, #20
 8006556:	2244      	movs	r2, #68	; 0x44
 8006558:	2100      	movs	r1, #0
 800655a:	4618      	mov	r0, r3
 800655c:	f001 f880 	bl	8007660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006560:	463b      	mov	r3, r7
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	605a      	str	r2, [r3, #4]
 8006568:	609a      	str	r2, [r3, #8]
 800656a:	60da      	str	r2, [r3, #12]
 800656c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800656e:	2000      	movs	r0, #0
 8006570:	f7fc fe2e 	bl	80031d0 <HAL_PWREx_ControlVoltageScaling>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800657a:	f000 fa97 	bl	8006aac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800657e:	2310      	movs	r3, #16
 8006580:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006582:	2301      	movs	r3, #1
 8006584:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8006586:	2300      	movs	r3, #0
 8006588:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800658a:	2360      	movs	r3, #96	; 0x60
 800658c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800658e:	2302      	movs	r3, #2
 8006590:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006592:	2301      	movs	r3, #1
 8006594:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006596:	2301      	movs	r3, #1
 8006598:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800659a:	233c      	movs	r3, #60	; 0x3c
 800659c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800659e:	2302      	movs	r3, #2
 80065a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80065a2:	2302      	movs	r3, #2
 80065a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80065a6:	2302      	movs	r3, #2
 80065a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80065aa:	f107 0314 	add.w	r3, r7, #20
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fc feb2 	bl	8003318 <HAL_RCC_OscConfig>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80065ba:	f000 fa77 	bl	8006aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80065be:	230f      	movs	r3, #15
 80065c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80065c2:	2303      	movs	r3, #3
 80065c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80065ca:	2300      	movs	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80065ce:	2300      	movs	r3, #0
 80065d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80065d2:	463b      	mov	r3, r7
 80065d4:	2105      	movs	r1, #5
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fd fab8 	bl	8003b4c <HAL_RCC_ClockConfig>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80065e2:	f000 fa63 	bl	8006aac <Error_Handler>
  }
}
 80065e6:	bf00      	nop
 80065e8:	3758      	adds	r7, #88	; 0x58
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80065f4:	4b1b      	ldr	r3, [pc, #108]	; (8006664 <MX_ADC1_Init+0x74>)
 80065f6:	4a1c      	ldr	r2, [pc, #112]	; (8006668 <MX_ADC1_Init+0x78>)
 80065f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80065fa:	4b1a      	ldr	r3, [pc, #104]	; (8006664 <MX_ADC1_Init+0x74>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006600:	4b18      	ldr	r3, [pc, #96]	; (8006664 <MX_ADC1_Init+0x74>)
 8006602:	2200      	movs	r2, #0
 8006604:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006606:	4b17      	ldr	r3, [pc, #92]	; (8006664 <MX_ADC1_Init+0x74>)
 8006608:	2200      	movs	r2, #0
 800660a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800660c:	4b15      	ldr	r3, [pc, #84]	; (8006664 <MX_ADC1_Init+0x74>)
 800660e:	2200      	movs	r2, #0
 8006610:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006612:	4b14      	ldr	r3, [pc, #80]	; (8006664 <MX_ADC1_Init+0x74>)
 8006614:	2204      	movs	r2, #4
 8006616:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006618:	4b12      	ldr	r3, [pc, #72]	; (8006664 <MX_ADC1_Init+0x74>)
 800661a:	2200      	movs	r2, #0
 800661c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800661e:	4b11      	ldr	r3, [pc, #68]	; (8006664 <MX_ADC1_Init+0x74>)
 8006620:	2200      	movs	r2, #0
 8006622:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8006624:	4b0f      	ldr	r3, [pc, #60]	; (8006664 <MX_ADC1_Init+0x74>)
 8006626:	2201      	movs	r2, #1
 8006628:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800662a:	4b0e      	ldr	r3, [pc, #56]	; (8006664 <MX_ADC1_Init+0x74>)
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006632:	4b0c      	ldr	r3, [pc, #48]	; (8006664 <MX_ADC1_Init+0x74>)
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800663a:	4b0a      	ldr	r3, [pc, #40]	; (8006664 <MX_ADC1_Init+0x74>)
 800663c:	2200      	movs	r2, #0
 800663e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8006640:	4b08      	ldr	r3, [pc, #32]	; (8006664 <MX_ADC1_Init+0x74>)
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8006648:	4b06      	ldr	r3, [pc, #24]	; (8006664 <MX_ADC1_Init+0x74>)
 800664a:	2204      	movs	r2, #4
 800664c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800664e:	4805      	ldr	r0, [pc, #20]	; (8006664 <MX_ADC1_Init+0x74>)
 8006650:	f7fb fa78 	bl	8001b44 <HAL_ADC_Init>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800665a:	f000 fa27 	bl	8006aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800665e:	bf00      	nop
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	20000370 	.word	0x20000370
 8006668:	50040000 	.word	0x50040000

0800666c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006670:	4b1b      	ldr	r3, [pc, #108]	; (80066e0 <MX_I2C2_Init+0x74>)
 8006672:	4a1c      	ldr	r2, [pc, #112]	; (80066e4 <MX_I2C2_Init+0x78>)
 8006674:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8006676:	4b1a      	ldr	r3, [pc, #104]	; (80066e0 <MX_I2C2_Init+0x74>)
 8006678:	4a1b      	ldr	r2, [pc, #108]	; (80066e8 <MX_I2C2_Init+0x7c>)
 800667a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800667c:	4b18      	ldr	r3, [pc, #96]	; (80066e0 <MX_I2C2_Init+0x74>)
 800667e:	2200      	movs	r2, #0
 8006680:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006682:	4b17      	ldr	r3, [pc, #92]	; (80066e0 <MX_I2C2_Init+0x74>)
 8006684:	2201      	movs	r2, #1
 8006686:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006688:	4b15      	ldr	r3, [pc, #84]	; (80066e0 <MX_I2C2_Init+0x74>)
 800668a:	2200      	movs	r2, #0
 800668c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800668e:	4b14      	ldr	r3, [pc, #80]	; (80066e0 <MX_I2C2_Init+0x74>)
 8006690:	2200      	movs	r2, #0
 8006692:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006694:	4b12      	ldr	r3, [pc, #72]	; (80066e0 <MX_I2C2_Init+0x74>)
 8006696:	2200      	movs	r2, #0
 8006698:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800669a:	4b11      	ldr	r3, [pc, #68]	; (80066e0 <MX_I2C2_Init+0x74>)
 800669c:	2200      	movs	r2, #0
 800669e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80066a0:	4b0f      	ldr	r3, [pc, #60]	; (80066e0 <MX_I2C2_Init+0x74>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80066a6:	480e      	ldr	r0, [pc, #56]	; (80066e0 <MX_I2C2_Init+0x74>)
 80066a8:	f7fb ff48 	bl	800253c <HAL_I2C_Init>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80066b2:	f000 f9fb 	bl	8006aac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80066b6:	2100      	movs	r1, #0
 80066b8:	4809      	ldr	r0, [pc, #36]	; (80066e0 <MX_I2C2_Init+0x74>)
 80066ba:	f7fc fcd1 	bl	8003060 <HAL_I2CEx_ConfigAnalogFilter>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80066c4:	f000 f9f2 	bl	8006aac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80066c8:	2100      	movs	r1, #0
 80066ca:	4805      	ldr	r0, [pc, #20]	; (80066e0 <MX_I2C2_Init+0x74>)
 80066cc:	f7fc fd13 	bl	80030f6 <HAL_I2CEx_ConfigDigitalFilter>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80066d6:	f000 f9e9 	bl	8006aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80066da:	bf00      	nop
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	200003d8 	.word	0x200003d8
 80066e4:	40005800 	.word	0x40005800
 80066e8:	307075b1 	.word	0x307075b1

080066ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80066f2:	f107 0310 	add.w	r3, r7, #16
 80066f6:	2200      	movs	r2, #0
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	605a      	str	r2, [r3, #4]
 80066fc:	609a      	str	r2, [r3, #8]
 80066fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006700:	1d3b      	adds	r3, r7, #4
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	605a      	str	r2, [r3, #4]
 8006708:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800670a:	4b1e      	ldr	r3, [pc, #120]	; (8006784 <MX_TIM2_Init+0x98>)
 800670c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006710:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 120;
 8006712:	4b1c      	ldr	r3, [pc, #112]	; (8006784 <MX_TIM2_Init+0x98>)
 8006714:	2278      	movs	r2, #120	; 0x78
 8006716:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006718:	4b1a      	ldr	r3, [pc, #104]	; (8006784 <MX_TIM2_Init+0x98>)
 800671a:	2200      	movs	r2, #0
 800671c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800671e:	4b19      	ldr	r3, [pc, #100]	; (8006784 <MX_TIM2_Init+0x98>)
 8006720:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006724:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006726:	4b17      	ldr	r3, [pc, #92]	; (8006784 <MX_TIM2_Init+0x98>)
 8006728:	2200      	movs	r2, #0
 800672a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800672c:	4b15      	ldr	r3, [pc, #84]	; (8006784 <MX_TIM2_Init+0x98>)
 800672e:	2200      	movs	r2, #0
 8006730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006732:	4814      	ldr	r0, [pc, #80]	; (8006784 <MX_TIM2_Init+0x98>)
 8006734:	f7fe fa12 	bl	8004b5c <HAL_TIM_Base_Init>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800673e:	f000 f9b5 	bl	8006aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006746:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006748:	f107 0310 	add.w	r3, r7, #16
 800674c:	4619      	mov	r1, r3
 800674e:	480d      	ldr	r0, [pc, #52]	; (8006784 <MX_TIM2_Init+0x98>)
 8006750:	f7fe fbeb 	bl	8004f2a <HAL_TIM_ConfigClockSource>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800675a:	f000 f9a7 	bl	8006aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800675e:	2300      	movs	r3, #0
 8006760:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006766:	1d3b      	adds	r3, r7, #4
 8006768:	4619      	mov	r1, r3
 800676a:	4806      	ldr	r0, [pc, #24]	; (8006784 <MX_TIM2_Init+0x98>)
 800676c:	f7fe fe02 	bl	8005374 <HAL_TIMEx_MasterConfigSynchronization>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006776:	f000 f999 	bl	8006aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800677a:	bf00      	nop
 800677c:	3720      	adds	r7, #32
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	2000042c 	.word	0x2000042c

08006788 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800678c:	4b22      	ldr	r3, [pc, #136]	; (8006818 <MX_USART1_UART_Init+0x90>)
 800678e:	4a23      	ldr	r2, [pc, #140]	; (800681c <MX_USART1_UART_Init+0x94>)
 8006790:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006792:	4b21      	ldr	r3, [pc, #132]	; (8006818 <MX_USART1_UART_Init+0x90>)
 8006794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006798:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800679a:	4b1f      	ldr	r3, [pc, #124]	; (8006818 <MX_USART1_UART_Init+0x90>)
 800679c:	2200      	movs	r2, #0
 800679e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80067a0:	4b1d      	ldr	r3, [pc, #116]	; (8006818 <MX_USART1_UART_Init+0x90>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80067a6:	4b1c      	ldr	r3, [pc, #112]	; (8006818 <MX_USART1_UART_Init+0x90>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80067ac:	4b1a      	ldr	r3, [pc, #104]	; (8006818 <MX_USART1_UART_Init+0x90>)
 80067ae:	220c      	movs	r2, #12
 80067b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067b2:	4b19      	ldr	r3, [pc, #100]	; (8006818 <MX_USART1_UART_Init+0x90>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80067b8:	4b17      	ldr	r3, [pc, #92]	; (8006818 <MX_USART1_UART_Init+0x90>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80067be:	4b16      	ldr	r3, [pc, #88]	; (8006818 <MX_USART1_UART_Init+0x90>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80067c4:	4b14      	ldr	r3, [pc, #80]	; (8006818 <MX_USART1_UART_Init+0x90>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80067ca:	4b13      	ldr	r3, [pc, #76]	; (8006818 <MX_USART1_UART_Init+0x90>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80067d0:	4811      	ldr	r0, [pc, #68]	; (8006818 <MX_USART1_UART_Init+0x90>)
 80067d2:	f7fe fe75 	bl	80054c0 <HAL_UART_Init>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80067dc:	f000 f966 	bl	8006aac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80067e0:	2100      	movs	r1, #0
 80067e2:	480d      	ldr	r0, [pc, #52]	; (8006818 <MX_USART1_UART_Init+0x90>)
 80067e4:	f7ff fba6 	bl	8005f34 <HAL_UARTEx_SetTxFifoThreshold>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80067ee:	f000 f95d 	bl	8006aac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80067f2:	2100      	movs	r1, #0
 80067f4:	4808      	ldr	r0, [pc, #32]	; (8006818 <MX_USART1_UART_Init+0x90>)
 80067f6:	f7ff fbdb 	bl	8005fb0 <HAL_UARTEx_SetRxFifoThreshold>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006800:	f000 f954 	bl	8006aac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006804:	4804      	ldr	r0, [pc, #16]	; (8006818 <MX_USART1_UART_Init+0x90>)
 8006806:	f7ff fb5c 	bl	8005ec2 <HAL_UARTEx_DisableFifoMode>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006810:	f000 f94c 	bl	8006aac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006814:	bf00      	nop
 8006816:	bd80      	pop	{r7, pc}
 8006818:	20000478 	.word	0x20000478
 800681c:	40013800 	.word	0x40013800

08006820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006826:	f107 030c 	add.w	r3, r7, #12
 800682a:	2200      	movs	r2, #0
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	605a      	str	r2, [r3, #4]
 8006830:	609a      	str	r2, [r3, #8]
 8006832:	60da      	str	r2, [r3, #12]
 8006834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006836:	4b29      	ldr	r3, [pc, #164]	; (80068dc <MX_GPIO_Init+0xbc>)
 8006838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800683a:	4a28      	ldr	r2, [pc, #160]	; (80068dc <MX_GPIO_Init+0xbc>)
 800683c:	f043 0304 	orr.w	r3, r3, #4
 8006840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006842:	4b26      	ldr	r3, [pc, #152]	; (80068dc <MX_GPIO_Init+0xbc>)
 8006844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006846:	f003 0304 	and.w	r3, r3, #4
 800684a:	60bb      	str	r3, [r7, #8]
 800684c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800684e:	4b23      	ldr	r3, [pc, #140]	; (80068dc <MX_GPIO_Init+0xbc>)
 8006850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006852:	4a22      	ldr	r2, [pc, #136]	; (80068dc <MX_GPIO_Init+0xbc>)
 8006854:	f043 0302 	orr.w	r3, r3, #2
 8006858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800685a:	4b20      	ldr	r3, [pc, #128]	; (80068dc <MX_GPIO_Init+0xbc>)
 800685c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	607b      	str	r3, [r7, #4]
 8006864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006866:	4b1d      	ldr	r3, [pc, #116]	; (80068dc <MX_GPIO_Init+0xbc>)
 8006868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800686a:	4a1c      	ldr	r2, [pc, #112]	; (80068dc <MX_GPIO_Init+0xbc>)
 800686c:	f043 0301 	orr.w	r3, r3, #1
 8006870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006872:	4b1a      	ldr	r3, [pc, #104]	; (80068dc <MX_GPIO_Init+0xbc>)
 8006874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	603b      	str	r3, [r7, #0]
 800687c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_RESET);
 800687e:	2200      	movs	r2, #0
 8006880:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006884:	4816      	ldr	r0, [pc, #88]	; (80068e0 <MX_GPIO_Init+0xc0>)
 8006886:	f7fb fe0f 	bl	80024a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800688a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800688e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006890:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800689a:	f107 030c 	add.w	r3, r7, #12
 800689e:	4619      	mov	r1, r3
 80068a0:	4810      	ldr	r0, [pc, #64]	; (80068e4 <MX_GPIO_Init+0xc4>)
 80068a2:	f7fb fb7d 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : myLed_Pin */
  GPIO_InitStruct.Pin = myLed_Pin;
 80068a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068ac:	2301      	movs	r3, #1
 80068ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068b0:	2300      	movs	r3, #0
 80068b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068b4:	2300      	movs	r3, #0
 80068b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(myLed_GPIO_Port, &GPIO_InitStruct);
 80068b8:	f107 030c 	add.w	r3, r7, #12
 80068bc:	4619      	mov	r1, r3
 80068be:	4808      	ldr	r0, [pc, #32]	; (80068e0 <MX_GPIO_Init+0xc0>)
 80068c0:	f7fb fb6e 	bl	8001fa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80068c4:	2200      	movs	r2, #0
 80068c6:	2105      	movs	r1, #5
 80068c8:	2028      	movs	r0, #40	; 0x28
 80068ca:	f7fb fb3f 	bl	8001f4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80068ce:	2028      	movs	r0, #40	; 0x28
 80068d0:	f7fb fb58 	bl	8001f84 <HAL_NVIC_EnableIRQ>

}
 80068d4:	bf00      	nop
 80068d6:	3720      	adds	r7, #32
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	40021000 	.word	0x40021000
 80068e0:	48000400 	.word	0x48000400
 80068e4:	48000800 	.word	0x48000800

080068e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


//callback function for interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	4603      	mov	r3, r0
 80068f0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) { //verify pin
 80068f2:	88fb      	ldrh	r3, [r7, #6]
 80068f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f8:	d11f      	bne.n	800693a <HAL_GPIO_EXTI_Callback+0x52>
		HAL_GPIO_TogglePin (myLed_GPIO_Port, myLed_Pin);
 80068fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068fe:	4811      	ldr	r0, [pc, #68]	; (8006944 <HAL_GPIO_EXTI_Callback+0x5c>)
 8006900:	f7fb fdea 	bl	80024d8 <HAL_GPIO_TogglePin>
#ifdef BUTTON_TEST
		printf("======================\n");
 8006904:	4810      	ldr	r0, [pc, #64]	; (8006948 <HAL_GPIO_EXTI_Callback+0x60>)
 8006906:	f001 fbb9 	bl	800807c <puts>
		printf("\n");
 800690a:	200a      	movs	r0, #10
 800690c:	f001 fb32 	bl	8007f74 <putchar>
		printf("Switching...\n");
 8006910:	480e      	ldr	r0, [pc, #56]	; (800694c <HAL_GPIO_EXTI_Callback+0x64>)
 8006912:	f001 fbb3 	bl	800807c <puts>
		printf("\n");
 8006916:	200a      	movs	r0, #10
 8006918:	f001 fb2c 	bl	8007f74 <putchar>
		printf("======================\n");
 800691c:	480a      	ldr	r0, [pc, #40]	; (8006948 <HAL_GPIO_EXTI_Callback+0x60>)
 800691e:	f001 fbad 	bl	800807c <puts>
		selector++;
 8006922:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <HAL_GPIO_EXTI_Callback+0x68>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3301      	adds	r3, #1
 8006928:	4a09      	ldr	r2, [pc, #36]	; (8006950 <HAL_GPIO_EXTI_Callback+0x68>)
 800692a:	6013      	str	r3, [r2, #0]
		// if selector is out of range, re-initialize to 0.
		if (selector > 3) {
 800692c:	4b08      	ldr	r3, [pc, #32]	; (8006950 <HAL_GPIO_EXTI_Callback+0x68>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b03      	cmp	r3, #3
 8006932:	dd02      	ble.n	800693a <HAL_GPIO_EXTI_Callback+0x52>
			selector = 0;
 8006934:	4b06      	ldr	r3, [pc, #24]	; (8006950 <HAL_GPIO_EXTI_Callback+0x68>)
 8006936:	2200      	movs	r2, #0
 8006938:	601a      	str	r2, [r3, #0]
#endif
#ifdef RTOS_TEST
		enableSelector = 1;
#endif
	}
}
 800693a:	bf00      	nop
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	48000400 	.word	0x48000400
 8006948:	0800a270 	.word	0x0800a270
 800694c:	0800a288 	.word	0x0800a288
 8006950:	20000508 	.word	0x20000508

08006954 <_write>:

//function for printing to console (swb port 0)
int _write(int file, char *ptr, int len)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006960:	2300      	movs	r3, #0
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	e009      	b.n	800697a <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	60ba      	str	r2, [r7, #8]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff fd9c 	bl	80064ac <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	3301      	adds	r3, #1
 8006978:	617b      	str	r3, [r7, #20]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	429a      	cmp	r2, r3
 8006980:	dbf1      	blt.n	8006966 <_write+0x12>
  }
  return len;
 8006982:	687b      	ldr	r3, [r7, #4]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800698c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006990:	b086      	sub	sp, #24
 8006992:	af04      	add	r7, sp, #16
 8006994:	6078      	str	r0, [r7, #4]
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
#endif
#ifdef BUTTON_TEST
  if (htim->Instance == TIM2) {
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800699e:	d16b      	bne.n	8006a78 <HAL_TIM_PeriodElapsedCallback+0xec>
	  switch(selector) {
 80069a0:	4b38      	ldr	r3, [pc, #224]	; (8006a84 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	d863      	bhi.n	8006a70 <HAL_TIM_PeriodElapsedCallback+0xe4>
 80069a8:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80069aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ae:	bf00      	nop
 80069b0:	080069c1 	.word	0x080069c1
 80069b4:	080069e5 	.word	0x080069e5
 80069b8:	08006a09 	.word	0x08006a09
 80069bc:	08006a2d 	.word	0x08006a2d
	  	  		case 0:
	  	  			temp_value = BSP_TSENSOR_ReadTemp();
 80069c0:	f000 fb06 	bl	8006fd0 <BSP_TSENSOR_ReadTemp>
 80069c4:	eef0 7a40 	vmov.f32	s15, s0
 80069c8:	4b2f      	ldr	r3, [pc, #188]	; (8006a88 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80069ca:	edc3 7a00 	vstr	s15, [r3]
	  	  			printf("temperature: %f\n", temp_value);
 80069ce:	4b2e      	ldr	r3, [pc, #184]	; (8006a88 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7f9 fdd0 	bl	8000578 <__aeabi_f2d>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	482b      	ldr	r0, [pc, #172]	; (8006a8c <HAL_TIM_PeriodElapsedCallback+0x100>)
 80069de:	f001 fab1 	bl	8007f44 <iprintf>
	  	  			break;
 80069e2:	e04a      	b.n	8006a7a <HAL_TIM_PeriodElapsedCallback+0xee>
	  	  		case 1:
	  	  			hum_value = BSP_HSENSOR_ReadHumidity();
 80069e4:	f000 fa70 	bl	8006ec8 <BSP_HSENSOR_ReadHumidity>
 80069e8:	eef0 7a40 	vmov.f32	s15, s0
 80069ec:	4b28      	ldr	r3, [pc, #160]	; (8006a90 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80069ee:	edc3 7a00 	vstr	s15, [r3]
	  	  			printf("humidity: %f\n", hum_value);
 80069f2:	4b27      	ldr	r3, [pc, #156]	; (8006a90 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7f9 fdbe 	bl	8000578 <__aeabi_f2d>
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	4824      	ldr	r0, [pc, #144]	; (8006a94 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8006a02:	f001 fa9f 	bl	8007f44 <iprintf>
	  	  			break;
 8006a06:	e038      	b.n	8006a7a <HAL_TIM_PeriodElapsedCallback+0xee>
	  	  		case 2:
	  	  			baro_value = BSP_PSENSOR_ReadPressure();
 8006a08:	f000 fab8 	bl	8006f7c <BSP_PSENSOR_ReadPressure>
 8006a0c:	eef0 7a40 	vmov.f32	s15, s0
 8006a10:	4b21      	ldr	r3, [pc, #132]	; (8006a98 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8006a12:	edc3 7a00 	vstr	s15, [r3]
	  	  			printf("barometer sensor value: %f\n", baro_value);
 8006a16:	4b20      	ldr	r3, [pc, #128]	; (8006a98 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7f9 fdac 	bl	8000578 <__aeabi_f2d>
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	481d      	ldr	r0, [pc, #116]	; (8006a9c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8006a26:	f001 fa8d 	bl	8007f44 <iprintf>
	  	  			break;
 8006a2a:	e026      	b.n	8006a7a <HAL_TIM_PeriodElapsedCallback+0xee>
//	  	  		case 4:
//	  	  			BSP_ACCELERO_AccGetXYZ(acc_xyz);
//	  	  			printf("accelerometer -> x: %f\, y: %f, z: %f\n", acc_xyz[0], acc_xyz[1], acc_xyz[2]);
//	  	  			break;
	  	  		case 3:
	  	  			BSP_GYRO_GetXYZ(gyro_xyz);
 8006a2c:	481c      	ldr	r0, [pc, #112]	; (8006aa0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8006a2e:	f000 fa13 	bl	8006e58 <BSP_GYRO_GetXYZ>
	  	  			printf("gyroscope -> x: %f\, y: %f, z: %f\n", gyro_xyz[0], gyro_xyz[1], gyro_xyz[2]);
 8006a32:	4b1b      	ldr	r3, [pc, #108]	; (8006aa0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7f9 fd9e 	bl	8000578 <__aeabi_f2d>
 8006a3c:	4680      	mov	r8, r0
 8006a3e:	4689      	mov	r9, r1
 8006a40:	4b17      	ldr	r3, [pc, #92]	; (8006aa0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7f9 fd97 	bl	8000578 <__aeabi_f2d>
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	460d      	mov	r5, r1
 8006a4e:	4b14      	ldr	r3, [pc, #80]	; (8006aa0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7f9 fd90 	bl	8000578 <__aeabi_f2d>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a60:	e9cd 4500 	strd	r4, r5, [sp]
 8006a64:	4642      	mov	r2, r8
 8006a66:	464b      	mov	r3, r9
 8006a68:	480e      	ldr	r0, [pc, #56]	; (8006aa4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8006a6a:	f001 fa6b 	bl	8007f44 <iprintf>
	  	  			break;
 8006a6e:	e004      	b.n	8006a7a <HAL_TIM_PeriodElapsedCallback+0xee>
	  	  		default:
	  	  			printf("Selector not in range. Error.\n");
 8006a70:	480d      	ldr	r0, [pc, #52]	; (8006aa8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8006a72:	f001 fb03 	bl	800807c <puts>
	  	  		}

  }
#endif
  /* USER CODE END Callback 1 */
}
 8006a76:	e000      	b.n	8006a7a <HAL_TIM_PeriodElapsedCallback+0xee>
  }
 8006a78:	bf00      	nop
}
 8006a7a:	bf00      	nop
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006a84:	20000508 	.word	0x20000508
 8006a88:	2000050c 	.word	0x2000050c
 8006a8c:	0800a298 	.word	0x0800a298
 8006a90:	20000510 	.word	0x20000510
 8006a94:	0800a2ac 	.word	0x0800a2ac
 8006a98:	20000520 	.word	0x20000520
 8006a9c:	0800a2bc 	.word	0x0800a2bc
 8006aa0:	20000514 	.word	0x20000514
 8006aa4:	0800a2d8 	.word	0x0800a2d8
 8006aa8:	0800a2fc 	.word	0x0800a2fc

08006aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006ab0:	b672      	cpsid	i
}
 8006ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006ab4:	e7fe      	b.n	8006ab4 <Error_Handler+0x8>
	...

08006ab8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08a      	sub	sp, #40	; 0x28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006ac0:	4b27      	ldr	r3, [pc, #156]	; (8006b60 <I2Cx_MspInit+0xa8>)
 8006ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ac4:	4a26      	ldr	r2, [pc, #152]	; (8006b60 <I2Cx_MspInit+0xa8>)
 8006ac6:	f043 0302 	orr.w	r3, r3, #2
 8006aca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006acc:	4b24      	ldr	r3, [pc, #144]	; (8006b60 <I2Cx_MspInit+0xa8>)
 8006ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	613b      	str	r3, [r7, #16]
 8006ad6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8006ad8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006adc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8006ade:	2312      	movs	r3, #18
 8006ae0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8006aea:	2304      	movs	r3, #4
 8006aec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006aee:	f107 0314 	add.w	r3, r7, #20
 8006af2:	4619      	mov	r1, r3
 8006af4:	481b      	ldr	r0, [pc, #108]	; (8006b64 <I2Cx_MspInit+0xac>)
 8006af6:	f7fb fa53 	bl	8001fa0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006afa:	f107 0314 	add.w	r3, r7, #20
 8006afe:	4619      	mov	r1, r3
 8006b00:	4818      	ldr	r0, [pc, #96]	; (8006b64 <I2Cx_MspInit+0xac>)
 8006b02:	f7fb fa4d 	bl	8001fa0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8006b06:	4b16      	ldr	r3, [pc, #88]	; (8006b60 <I2Cx_MspInit+0xa8>)
 8006b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0a:	4a15      	ldr	r2, [pc, #84]	; (8006b60 <I2Cx_MspInit+0xa8>)
 8006b0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b10:	6593      	str	r3, [r2, #88]	; 0x58
 8006b12:	4b13      	ldr	r3, [pc, #76]	; (8006b60 <I2Cx_MspInit+0xa8>)
 8006b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8006b1e:	4b10      	ldr	r3, [pc, #64]	; (8006b60 <I2Cx_MspInit+0xa8>)
 8006b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b22:	4a0f      	ldr	r2, [pc, #60]	; (8006b60 <I2Cx_MspInit+0xa8>)
 8006b24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b28:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8006b2a:	4b0d      	ldr	r3, [pc, #52]	; (8006b60 <I2Cx_MspInit+0xa8>)
 8006b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2e:	4a0c      	ldr	r2, [pc, #48]	; (8006b60 <I2Cx_MspInit+0xa8>)
 8006b30:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006b34:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8006b36:	2200      	movs	r2, #0
 8006b38:	210f      	movs	r1, #15
 8006b3a:	2021      	movs	r0, #33	; 0x21
 8006b3c:	f7fb fa06 	bl	8001f4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8006b40:	2021      	movs	r0, #33	; 0x21
 8006b42:	f7fb fa1f 	bl	8001f84 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8006b46:	2200      	movs	r2, #0
 8006b48:	210f      	movs	r1, #15
 8006b4a:	2022      	movs	r0, #34	; 0x22
 8006b4c:	f7fb f9fe 	bl	8001f4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8006b50:	2022      	movs	r0, #34	; 0x22
 8006b52:	f7fb fa17 	bl	8001f84 <HAL_NVIC_EnableIRQ>
}
 8006b56:	bf00      	nop
 8006b58:	3728      	adds	r7, #40	; 0x28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	40021000 	.word	0x40021000
 8006b64:	48000400 	.word	0x48000400

08006b68 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a12      	ldr	r2, [pc, #72]	; (8006bbc <I2Cx_Init+0x54>)
 8006b74:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a11      	ldr	r2, [pc, #68]	; (8006bc0 <I2Cx_Init+0x58>)
 8006b7a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff ff89 	bl	8006ab8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7fb fcc8 	bl	800253c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8006bac:	2100      	movs	r1, #0
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fc fa56 	bl	8003060 <HAL_I2CEx_ConfigAnalogFilter>
}
 8006bb4:	bf00      	nop
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	40005800 	.word	0x40005800
 8006bc0:	00702681 	.word	0x00702681

08006bc4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08a      	sub	sp, #40	; 0x28
 8006bc8:	af04      	add	r7, sp, #16
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	4608      	mov	r0, r1
 8006bce:	4611      	mov	r1, r2
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	72fb      	strb	r3, [r7, #11]
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	813b      	strh	r3, [r7, #8]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006be2:	7afb      	ldrb	r3, [r7, #11]
 8006be4:	b299      	uxth	r1, r3
 8006be6:	88f8      	ldrh	r0, [r7, #6]
 8006be8:	893a      	ldrh	r2, [r7, #8]
 8006bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bee:	9302      	str	r3, [sp, #8]
 8006bf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bf2:	9301      	str	r3, [sp, #4]
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f7fb fe70 	bl	80028e0 <HAL_I2C_Mem_Read>
 8006c00:	4603      	mov	r3, r0
 8006c02:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8006c04:	7dfb      	ldrb	r3, [r7, #23]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d004      	beq.n	8006c14 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8006c0a:	7afb      	ldrb	r3, [r7, #11]
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 f832 	bl	8006c78 <I2Cx_Error>
  }
  return status;
 8006c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b08a      	sub	sp, #40	; 0x28
 8006c22:	af04      	add	r7, sp, #16
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	4608      	mov	r0, r1
 8006c28:	4611      	mov	r1, r2
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	72fb      	strb	r3, [r7, #11]
 8006c30:	460b      	mov	r3, r1
 8006c32:	813b      	strh	r3, [r7, #8]
 8006c34:	4613      	mov	r3, r2
 8006c36:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006c3c:	7afb      	ldrb	r3, [r7, #11]
 8006c3e:	b299      	uxth	r1, r3
 8006c40:	88f8      	ldrh	r0, [r7, #6]
 8006c42:	893a      	ldrh	r2, [r7, #8]
 8006c44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c48:	9302      	str	r3, [sp, #8]
 8006c4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c4c:	9301      	str	r3, [sp, #4]
 8006c4e:	6a3b      	ldr	r3, [r7, #32]
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	4603      	mov	r3, r0
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f7fb fd2f 	bl	80026b8 <HAL_I2C_Mem_Write>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d004      	beq.n	8006c6e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8006c64:	7afb      	ldrb	r3, [r7, #11]
 8006c66:	4619      	mov	r1, r3
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 f805 	bl	8006c78 <I2Cx_Error>
  }
  return status;
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3718      	adds	r7, #24
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7fb fce8 	bl	800265a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7ff ff6c 	bl	8006b68 <I2Cx_Init>
}
 8006c90:	bf00      	nop
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8006c9c:	4802      	ldr	r0, [pc, #8]	; (8006ca8 <SENSOR_IO_Init+0x10>)
 8006c9e:	f7ff ff63 	bl	8006b68 <I2Cx_Init>
}
 8006ca2:	bf00      	nop
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20000524 	.word	0x20000524

08006cac <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af02      	add	r7, sp, #8
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	71fb      	strb	r3, [r7, #7]
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	71bb      	strb	r3, [r7, #6]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8006cbe:	79bb      	ldrb	r3, [r7, #6]
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	79f9      	ldrb	r1, [r7, #7]
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	9301      	str	r3, [sp, #4]
 8006cc8:	1d7b      	adds	r3, r7, #5
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	2301      	movs	r3, #1
 8006cce:	4803      	ldr	r0, [pc, #12]	; (8006cdc <SENSOR_IO_Write+0x30>)
 8006cd0:	f7ff ffa5 	bl	8006c1e <I2Cx_WriteMultiple>
}
 8006cd4:	bf00      	nop
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	20000524 	.word	0x20000524

08006ce0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	460a      	mov	r2, r1
 8006cea:	71fb      	strb	r3, [r7, #7]
 8006cec:	4613      	mov	r3, r2
 8006cee:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8006cf4:	79bb      	ldrb	r3, [r7, #6]
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	79f9      	ldrb	r1, [r7, #7]
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	9301      	str	r3, [sp, #4]
 8006cfe:	f107 030f 	add.w	r3, r7, #15
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	2301      	movs	r3, #1
 8006d06:	4804      	ldr	r0, [pc, #16]	; (8006d18 <SENSOR_IO_Read+0x38>)
 8006d08:	f7ff ff5c 	bl	8006bc4 <I2Cx_ReadMultiple>

  return read_value;
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	20000524 	.word	0x20000524

08006d1c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af02      	add	r7, sp, #8
 8006d22:	603a      	str	r2, [r7, #0]
 8006d24:	461a      	mov	r2, r3
 8006d26:	4603      	mov	r3, r0
 8006d28:	71fb      	strb	r3, [r7, #7]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	71bb      	strb	r3, [r7, #6]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8006d32:	79bb      	ldrb	r3, [r7, #6]
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	79f9      	ldrb	r1, [r7, #7]
 8006d38:	88bb      	ldrh	r3, [r7, #4]
 8006d3a:	9301      	str	r3, [sp, #4]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	2301      	movs	r3, #1
 8006d42:	4804      	ldr	r0, [pc, #16]	; (8006d54 <SENSOR_IO_ReadMultiple+0x38>)
 8006d44:	f7ff ff3e 	bl	8006bc4 <I2Cx_ReadMultiple>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	b29b      	uxth	r3, r3
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20000524 	.word	0x20000524

08006d58 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8006d62:	2300      	movs	r3, #0
 8006d64:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8006d66:	4b19      	ldr	r3, [pc, #100]	; (8006dcc <BSP_ACCELERO_Init+0x74>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	4798      	blx	r3
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b6a      	cmp	r3, #106	; 0x6a
 8006d70:	d002      	beq.n	8006d78 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	73fb      	strb	r3, [r7, #15]
 8006d76:	e024      	b.n	8006dc2 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8006d78:	4b15      	ldr	r3, [pc, #84]	; (8006dd0 <BSP_ACCELERO_Init+0x78>)
 8006d7a:	4a14      	ldr	r2, [pc, #80]	; (8006dcc <BSP_ACCELERO_Init+0x74>)
 8006d7c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8006d7e:	2330      	movs	r3, #48	; 0x30
 8006d80:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8006d82:	2300      	movs	r3, #0
 8006d84:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8006d86:	2300      	movs	r3, #0
 8006d88:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8006d8a:	2340      	movs	r3, #64	; 0x40
 8006d8c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8006d96:	797a      	ldrb	r2, [r7, #5]
 8006d98:	7abb      	ldrb	r3, [r7, #10]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8006da0:	7a3b      	ldrb	r3, [r7, #8]
 8006da2:	f043 0304 	orr.w	r3, r3, #4
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	021b      	lsls	r3, r3, #8
 8006daa:	b21a      	sxth	r2, r3
 8006dac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	b21b      	sxth	r3, r3
 8006db4:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8006db6:	4b06      	ldr	r3, [pc, #24]	; (8006dd0 <BSP_ACCELERO_Init+0x78>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	89ba      	ldrh	r2, [r7, #12]
 8006dbe:	4610      	mov	r0, r2
 8006dc0:	4798      	blx	r3
  }  

  return ret;
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	2000005c 	.word	0x2000005c
 8006dd0:	20000578 	.word	0x20000578

08006dd4 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8006dde:	2300      	movs	r3, #0
 8006de0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8006de2:	4b1b      	ldr	r3, [pc, #108]	; (8006e50 <BSP_GYRO_Init+0x7c>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	4798      	blx	r3
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b6a      	cmp	r3, #106	; 0x6a
 8006dec:	d002      	beq.n	8006df4 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	73fb      	strb	r3, [r7, #15]
 8006df2:	e028      	b.n	8006e46 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8006df4:	4b17      	ldr	r3, [pc, #92]	; (8006e54 <BSP_GYRO_Init+0x80>)
 8006df6:	4a16      	ldr	r2, [pc, #88]	; (8006e50 <BSP_GYRO_Init+0x7c>)
 8006df8:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8006dfe:	2330      	movs	r3, #48	; 0x30
 8006e00:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8006e06:	2300      	movs	r3, #0
 8006e08:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8006e0a:	2340      	movs	r3, #64	; 0x40
 8006e0c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8006e12:	230c      	movs	r3, #12
 8006e14:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8006e16:	7aba      	ldrb	r2, [r7, #10]
 8006e18:	797b      	ldrb	r3, [r7, #5]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8006e20:	7a3b      	ldrb	r3, [r7, #8]
 8006e22:	f043 0304 	orr.w	r3, r3, #4
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	021b      	lsls	r3, r3, #8
 8006e2a:	b21a      	sxth	r2, r3
 8006e2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	b21b      	sxth	r3, r3
 8006e34:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8006e36:	4b07      	ldr	r3, [pc, #28]	; (8006e54 <BSP_GYRO_Init+0x80>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	89ba      	ldrh	r2, [r7, #12]
 8006e3e:	4610      	mov	r0, r2
 8006e40:	4798      	blx	r3
    
    ret = GYRO_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	20000090 	.word	0x20000090
 8006e54:	2000057c 	.word	0x2000057c

08006e58 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8006e60:	4b08      	ldr	r3, [pc, #32]	; (8006e84 <BSP_GYRO_GetXYZ+0x2c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d009      	beq.n	8006e7c <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8006e68:	4b06      	ldr	r3, [pc, #24]	; (8006e84 <BSP_GYRO_GetXYZ+0x2c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d004      	beq.n	8006e7c <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8006e72:	4b04      	ldr	r3, [pc, #16]	; (8006e84 <BSP_GYRO_GetXYZ+0x2c>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	4798      	blx	r3
    }
  }
}
 8006e7c:	bf00      	nop
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	2000057c 	.word	0x2000057c

08006e88 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8006e8e:	4b0c      	ldr	r3, [pc, #48]	; (8006ec0 <BSP_HSENSOR_Init+0x38>)
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	20be      	movs	r0, #190	; 0xbe
 8006e94:	4798      	blx	r3
 8006e96:	4603      	mov	r3, r0
 8006e98:	2bbc      	cmp	r3, #188	; 0xbc
 8006e9a:	d002      	beq.n	8006ea2 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	607b      	str	r3, [r7, #4]
 8006ea0:	e009      	b.n	8006eb6 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8006ea2:	4b08      	ldr	r3, [pc, #32]	; (8006ec4 <BSP_HSENSOR_Init+0x3c>)
 8006ea4:	4a06      	ldr	r2, [pc, #24]	; (8006ec0 <BSP_HSENSOR_Init+0x38>)
 8006ea6:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8006ea8:	4b06      	ldr	r3, [pc, #24]	; (8006ec4 <BSP_HSENSOR_Init+0x3c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	20be      	movs	r0, #190	; 0xbe
 8006eb0:	4798      	blx	r3
    ret = HSENSOR_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8006eb6:	687b      	ldr	r3, [r7, #4]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	20000000 	.word	0x20000000
 8006ec4:	20000580 	.word	0x20000580

08006ec8 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8006ecc:	4b04      	ldr	r3, [pc, #16]	; (8006ee0 <BSP_HSENSOR_ReadHumidity+0x18>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	20be      	movs	r0, #190	; 0xbe
 8006ed4:	4798      	blx	r3
 8006ed6:	eef0 7a40 	vmov.f32	s15, s0
}
 8006eda:	eeb0 0a67 	vmov.f32	s0, s15
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20000580 	.word	0x20000580

08006ee4 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8006eee:	4b11      	ldr	r3, [pc, #68]	; (8006f34 <BSP_MAGNETO_Init+0x50>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	4798      	blx	r3
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b3d      	cmp	r3, #61	; 0x3d
 8006ef8:	d002      	beq.n	8006f00 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	71fb      	strb	r3, [r7, #7]
 8006efe:	e013      	b.n	8006f28 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8006f00:	4b0d      	ldr	r3, [pc, #52]	; (8006f38 <BSP_MAGNETO_Init+0x54>)
 8006f02:	4a0c      	ldr	r2, [pc, #48]	; (8006f34 <BSP_MAGNETO_Init+0x50>)
 8006f04:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8006f06:	2358      	movs	r3, #88	; 0x58
 8006f08:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8006f12:	2308      	movs	r3, #8
 8006f14:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8006f16:	2340      	movs	r3, #64	; 0x40
 8006f18:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8006f1a:	4b07      	ldr	r3, [pc, #28]	; (8006f38 <BSP_MAGNETO_Init+0x54>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	463a      	mov	r2, r7
 8006f22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f26:	4798      	blx	r3
  } 

  return ret;  
 8006f28:	79fb      	ldrb	r3, [r7, #7]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	2000001c 	.word	0x2000001c
 8006f38:	20000584 	.word	0x20000584

08006f3c <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8006f42:	4b0c      	ldr	r3, [pc, #48]	; (8006f74 <BSP_PSENSOR_Init+0x38>)
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	20ba      	movs	r0, #186	; 0xba
 8006f48:	4798      	blx	r3
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2bb1      	cmp	r3, #177	; 0xb1
 8006f4e:	d002      	beq.n	8006f56 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	607b      	str	r3, [r7, #4]
 8006f54:	e009      	b.n	8006f6a <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8006f56:	4b08      	ldr	r3, [pc, #32]	; (8006f78 <BSP_PSENSOR_Init+0x3c>)
 8006f58:	4a06      	ldr	r2, [pc, #24]	; (8006f74 <BSP_PSENSOR_Init+0x38>)
 8006f5a:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8006f5c:	4b06      	ldr	r3, [pc, #24]	; (8006f78 <BSP_PSENSOR_Init+0x3c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	20ba      	movs	r0, #186	; 0xba
 8006f64:	4798      	blx	r3
    ret = PSENSOR_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8006f6a:	687b      	ldr	r3, [r7, #4]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	20000050 	.word	0x20000050
 8006f78:	20000588 	.word	0x20000588

08006f7c <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8006f80:	4b04      	ldr	r3, [pc, #16]	; (8006f94 <BSP_PSENSOR_ReadPressure+0x18>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	20ba      	movs	r0, #186	; 0xba
 8006f88:	4798      	blx	r3
 8006f8a:	eef0 7a40 	vmov.f32	s15, s0
}
 8006f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	20000588 	.word	0x20000588

08006f98 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8006fa2:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <BSP_TSENSOR_Init+0x30>)
 8006fa4:	4a09      	ldr	r2, [pc, #36]	; (8006fcc <BSP_TSENSOR_Init+0x34>)
 8006fa6:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8006fa8:	f7ff fe76 	bl	8006c98 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8006fac:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <BSP_TSENSOR_Init+0x30>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	20be      	movs	r0, #190	; 0xbe
 8006fb6:	4798      	blx	r3

  ret = TSENSOR_OK;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8006fbc:	79fb      	ldrb	r3, [r7, #7]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	2000058c 	.word	0x2000058c
 8006fcc:	2000000c 	.word	0x2000000c

08006fd0 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8006fd4:	4b04      	ldr	r3, [pc, #16]	; (8006fe8 <BSP_TSENSOR_ReadTemp+0x18>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	20be      	movs	r0, #190	; 0xbe
 8006fdc:	4798      	blx	r3
 8006fde:	eef0 7a40 	vmov.f32	s15, s0
}
 8006fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	2000058c 	.word	0x2000058c

08006fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ff2:	4b11      	ldr	r3, [pc, #68]	; (8007038 <HAL_MspInit+0x4c>)
 8006ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ff6:	4a10      	ldr	r2, [pc, #64]	; (8007038 <HAL_MspInit+0x4c>)
 8006ff8:	f043 0301 	orr.w	r3, r3, #1
 8006ffc:	6613      	str	r3, [r2, #96]	; 0x60
 8006ffe:	4b0e      	ldr	r3, [pc, #56]	; (8007038 <HAL_MspInit+0x4c>)
 8007000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	607b      	str	r3, [r7, #4]
 8007008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800700a:	4b0b      	ldr	r3, [pc, #44]	; (8007038 <HAL_MspInit+0x4c>)
 800700c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700e:	4a0a      	ldr	r2, [pc, #40]	; (8007038 <HAL_MspInit+0x4c>)
 8007010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007014:	6593      	str	r3, [r2, #88]	; 0x58
 8007016:	4b08      	ldr	r3, [pc, #32]	; (8007038 <HAL_MspInit+0x4c>)
 8007018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007022:	2200      	movs	r2, #0
 8007024:	210f      	movs	r1, #15
 8007026:	f06f 0001 	mvn.w	r0, #1
 800702a:	f7fa ff8f 	bl	8001f4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800702e:	bf00      	nop
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	40021000 	.word	0x40021000

0800703c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b0a8      	sub	sp, #160	; 0xa0
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007044:	f107 030c 	add.w	r3, r7, #12
 8007048:	2294      	movs	r2, #148	; 0x94
 800704a:	2100      	movs	r1, #0
 800704c:	4618      	mov	r0, r3
 800704e:	f000 fb07 	bl	8007660 <memset>
  if(hadc->Instance==ADC1)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a19      	ldr	r2, [pc, #100]	; (80070bc <HAL_ADC_MspInit+0x80>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d12b      	bne.n	80070b4 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800705c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007060:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8007062:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007066:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800706a:	2301      	movs	r3, #1
 800706c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800706e:	2301      	movs	r3, #1
 8007070:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8007072:	2310      	movs	r3, #16
 8007074:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8007076:	2302      	movs	r3, #2
 8007078:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800707a:	2302      	movs	r3, #2
 800707c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800707e:	2302      	movs	r3, #2
 8007080:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8007082:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007086:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007088:	f107 030c 	add.w	r3, r7, #12
 800708c:	4618      	mov	r0, r3
 800708e:	f7fd f84d 	bl	800412c <HAL_RCCEx_PeriphCLKConfig>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8007098:	f7ff fd08 	bl	8006aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800709c:	4b08      	ldr	r3, [pc, #32]	; (80070c0 <HAL_ADC_MspInit+0x84>)
 800709e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070a0:	4a07      	ldr	r2, [pc, #28]	; (80070c0 <HAL_ADC_MspInit+0x84>)
 80070a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80070a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070a8:	4b05      	ldr	r3, [pc, #20]	; (80070c0 <HAL_ADC_MspInit+0x84>)
 80070aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070b0:	60bb      	str	r3, [r7, #8]
 80070b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80070b4:	bf00      	nop
 80070b6:	37a0      	adds	r7, #160	; 0xa0
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	50040000 	.word	0x50040000
 80070c0:	40021000 	.word	0x40021000

080070c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b0ae      	sub	sp, #184	; 0xb8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80070d0:	2200      	movs	r2, #0
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	605a      	str	r2, [r3, #4]
 80070d6:	609a      	str	r2, [r3, #8]
 80070d8:	60da      	str	r2, [r3, #12]
 80070da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80070dc:	f107 0310 	add.w	r3, r7, #16
 80070e0:	2294      	movs	r2, #148	; 0x94
 80070e2:	2100      	movs	r1, #0
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fabb 	bl	8007660 <memset>
  if(hi2c->Instance==I2C2)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a21      	ldr	r2, [pc, #132]	; (8007174 <HAL_I2C_MspInit+0xb0>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d13b      	bne.n	800716c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80070f4:	2380      	movs	r3, #128	; 0x80
 80070f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80070f8:	2300      	movs	r3, #0
 80070fa:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80070fc:	f107 0310 	add.w	r3, r7, #16
 8007100:	4618      	mov	r0, r3
 8007102:	f7fd f813 	bl	800412c <HAL_RCCEx_PeriphCLKConfig>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800710c:	f7ff fcce 	bl	8006aac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007110:	4b19      	ldr	r3, [pc, #100]	; (8007178 <HAL_I2C_MspInit+0xb4>)
 8007112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007114:	4a18      	ldr	r2, [pc, #96]	; (8007178 <HAL_I2C_MspInit+0xb4>)
 8007116:	f043 0302 	orr.w	r3, r3, #2
 800711a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800711c:	4b16      	ldr	r3, [pc, #88]	; (8007178 <HAL_I2C_MspInit+0xb4>)
 800711e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007128:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800712c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007130:	2312      	movs	r3, #18
 8007132:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007136:	2300      	movs	r3, #0
 8007138:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800713c:	2303      	movs	r3, #3
 800713e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007142:	2304      	movs	r3, #4
 8007144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007148:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800714c:	4619      	mov	r1, r3
 800714e:	480b      	ldr	r0, [pc, #44]	; (800717c <HAL_I2C_MspInit+0xb8>)
 8007150:	f7fa ff26 	bl	8001fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007154:	4b08      	ldr	r3, [pc, #32]	; (8007178 <HAL_I2C_MspInit+0xb4>)
 8007156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007158:	4a07      	ldr	r2, [pc, #28]	; (8007178 <HAL_I2C_MspInit+0xb4>)
 800715a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800715e:	6593      	str	r3, [r2, #88]	; 0x58
 8007160:	4b05      	ldr	r3, [pc, #20]	; (8007178 <HAL_I2C_MspInit+0xb4>)
 8007162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007168:	60bb      	str	r3, [r7, #8]
 800716a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800716c:	bf00      	nop
 800716e:	37b8      	adds	r7, #184	; 0xb8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	40005800 	.word	0x40005800
 8007178:	40021000 	.word	0x40021000
 800717c:	48000400 	.word	0x48000400

08007180 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a0b      	ldr	r2, [pc, #44]	; (80071bc <HAL_I2C_MspDeInit+0x3c>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d10f      	bne.n	80071b2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8007192:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <HAL_I2C_MspDeInit+0x40>)
 8007194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007196:	4a0a      	ldr	r2, [pc, #40]	; (80071c0 <HAL_I2C_MspDeInit+0x40>)
 8007198:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800719c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800719e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80071a2:	4808      	ldr	r0, [pc, #32]	; (80071c4 <HAL_I2C_MspDeInit+0x44>)
 80071a4:	f7fb f88e 	bl	80022c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80071a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80071ac:	4805      	ldr	r0, [pc, #20]	; (80071c4 <HAL_I2C_MspDeInit+0x44>)
 80071ae:	f7fb f889 	bl	80022c4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80071b2:	bf00      	nop
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	40005800 	.word	0x40005800
 80071c0:	40021000 	.word	0x40021000
 80071c4:	48000400 	.word	0x48000400

080071c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d8:	d113      	bne.n	8007202 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80071da:	4b0c      	ldr	r3, [pc, #48]	; (800720c <HAL_TIM_Base_MspInit+0x44>)
 80071dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071de:	4a0b      	ldr	r2, [pc, #44]	; (800720c <HAL_TIM_Base_MspInit+0x44>)
 80071e0:	f043 0301 	orr.w	r3, r3, #1
 80071e4:	6593      	str	r3, [r2, #88]	; 0x58
 80071e6:	4b09      	ldr	r3, [pc, #36]	; (800720c <HAL_TIM_Base_MspInit+0x44>)
 80071e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80071f2:	2200      	movs	r2, #0
 80071f4:	2105      	movs	r1, #5
 80071f6:	201c      	movs	r0, #28
 80071f8:	f7fa fea8 	bl	8001f4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80071fc:	201c      	movs	r0, #28
 80071fe:	f7fa fec1 	bl	8001f84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8007202:	bf00      	nop
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	40021000 	.word	0x40021000

08007210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b0ae      	sub	sp, #184	; 0xb8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007218:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	605a      	str	r2, [r3, #4]
 8007222:	609a      	str	r2, [r3, #8]
 8007224:	60da      	str	r2, [r3, #12]
 8007226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007228:	f107 0310 	add.w	r3, r7, #16
 800722c:	2294      	movs	r2, #148	; 0x94
 800722e:	2100      	movs	r1, #0
 8007230:	4618      	mov	r0, r3
 8007232:	f000 fa15 	bl	8007660 <memset>
  if(huart->Instance==USART1)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a21      	ldr	r2, [pc, #132]	; (80072c0 <HAL_UART_MspInit+0xb0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d13a      	bne.n	80072b6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007240:	2301      	movs	r3, #1
 8007242:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007244:	2300      	movs	r3, #0
 8007246:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007248:	f107 0310 	add.w	r3, r7, #16
 800724c:	4618      	mov	r0, r3
 800724e:	f7fc ff6d 	bl	800412c <HAL_RCCEx_PeriphCLKConfig>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007258:	f7ff fc28 	bl	8006aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800725c:	4b19      	ldr	r3, [pc, #100]	; (80072c4 <HAL_UART_MspInit+0xb4>)
 800725e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007260:	4a18      	ldr	r2, [pc, #96]	; (80072c4 <HAL_UART_MspInit+0xb4>)
 8007262:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007266:	6613      	str	r3, [r2, #96]	; 0x60
 8007268:	4b16      	ldr	r3, [pc, #88]	; (80072c4 <HAL_UART_MspInit+0xb4>)
 800726a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800726c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007274:	4b13      	ldr	r3, [pc, #76]	; (80072c4 <HAL_UART_MspInit+0xb4>)
 8007276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007278:	4a12      	ldr	r2, [pc, #72]	; (80072c4 <HAL_UART_MspInit+0xb4>)
 800727a:	f043 0302 	orr.w	r3, r3, #2
 800727e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007280:	4b10      	ldr	r3, [pc, #64]	; (80072c4 <HAL_UART_MspInit+0xb4>)
 8007282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	60bb      	str	r3, [r7, #8]
 800728a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800728c:	23c0      	movs	r3, #192	; 0xc0
 800728e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007292:	2302      	movs	r3, #2
 8007294:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007298:	2300      	movs	r3, #0
 800729a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800729e:	2303      	movs	r3, #3
 80072a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80072a4:	2307      	movs	r3, #7
 80072a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80072ae:	4619      	mov	r1, r3
 80072b0:	4805      	ldr	r0, [pc, #20]	; (80072c8 <HAL_UART_MspInit+0xb8>)
 80072b2:	f7fa fe75 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80072b6:	bf00      	nop
 80072b8:	37b8      	adds	r7, #184	; 0xb8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	40013800 	.word	0x40013800
 80072c4:	40021000 	.word	0x40021000
 80072c8:	48000400 	.word	0x48000400

080072cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08e      	sub	sp, #56	; 0x38
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80072da:	4b34      	ldr	r3, [pc, #208]	; (80073ac <HAL_InitTick+0xe0>)
 80072dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072de:	4a33      	ldr	r2, [pc, #204]	; (80073ac <HAL_InitTick+0xe0>)
 80072e0:	f043 0310 	orr.w	r3, r3, #16
 80072e4:	6593      	str	r3, [r2, #88]	; 0x58
 80072e6:	4b31      	ldr	r3, [pc, #196]	; (80073ac <HAL_InitTick+0xe0>)
 80072e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ea:	f003 0310 	and.w	r3, r3, #16
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80072f2:	f107 0210 	add.w	r2, r7, #16
 80072f6:	f107 0314 	add.w	r3, r7, #20
 80072fa:	4611      	mov	r1, r2
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7fc fe23 	bl	8003f48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8007306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007308:	2b00      	cmp	r3, #0
 800730a:	d103      	bne.n	8007314 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800730c:	f7fc fdf0 	bl	8003ef0 <HAL_RCC_GetPCLK1Freq>
 8007310:	6378      	str	r0, [r7, #52]	; 0x34
 8007312:	e004      	b.n	800731e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8007314:	f7fc fdec 	bl	8003ef0 <HAL_RCC_GetPCLK1Freq>
 8007318:	4603      	mov	r3, r0
 800731a:	005b      	lsls	r3, r3, #1
 800731c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800731e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007320:	4a23      	ldr	r2, [pc, #140]	; (80073b0 <HAL_InitTick+0xe4>)
 8007322:	fba2 2303 	umull	r2, r3, r2, r3
 8007326:	0c9b      	lsrs	r3, r3, #18
 8007328:	3b01      	subs	r3, #1
 800732a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800732c:	4b21      	ldr	r3, [pc, #132]	; (80073b4 <HAL_InitTick+0xe8>)
 800732e:	4a22      	ldr	r2, [pc, #136]	; (80073b8 <HAL_InitTick+0xec>)
 8007330:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8007332:	4b20      	ldr	r3, [pc, #128]	; (80073b4 <HAL_InitTick+0xe8>)
 8007334:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007338:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800733a:	4a1e      	ldr	r2, [pc, #120]	; (80073b4 <HAL_InitTick+0xe8>)
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8007340:	4b1c      	ldr	r3, [pc, #112]	; (80073b4 <HAL_InitTick+0xe8>)
 8007342:	2200      	movs	r2, #0
 8007344:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007346:	4b1b      	ldr	r3, [pc, #108]	; (80073b4 <HAL_InitTick+0xe8>)
 8007348:	2200      	movs	r2, #0
 800734a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800734c:	4b19      	ldr	r3, [pc, #100]	; (80073b4 <HAL_InitTick+0xe8>)
 800734e:	2200      	movs	r2, #0
 8007350:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8007352:	4818      	ldr	r0, [pc, #96]	; (80073b4 <HAL_InitTick+0xe8>)
 8007354:	f7fd fc02 	bl	8004b5c <HAL_TIM_Base_Init>
 8007358:	4603      	mov	r3, r0
 800735a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800735e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007362:	2b00      	cmp	r3, #0
 8007364:	d11b      	bne.n	800739e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8007366:	4813      	ldr	r0, [pc, #76]	; (80073b4 <HAL_InitTick+0xe8>)
 8007368:	f7fd fc50 	bl	8004c0c <HAL_TIM_Base_Start_IT>
 800736c:	4603      	mov	r3, r0
 800736e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8007372:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007376:	2b00      	cmp	r3, #0
 8007378:	d111      	bne.n	800739e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800737a:	2036      	movs	r0, #54	; 0x36
 800737c:	f7fa fe02 	bl	8001f84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b0f      	cmp	r3, #15
 8007384:	d808      	bhi.n	8007398 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8007386:	2200      	movs	r2, #0
 8007388:	6879      	ldr	r1, [r7, #4]
 800738a:	2036      	movs	r0, #54	; 0x36
 800738c:	f7fa fdde 	bl	8001f4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007390:	4a0a      	ldr	r2, [pc, #40]	; (80073bc <HAL_InitTick+0xf0>)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6013      	str	r3, [r2, #0]
 8007396:	e002      	b.n	800739e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800739e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3738      	adds	r7, #56	; 0x38
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	40021000 	.word	0x40021000
 80073b0:	431bde83 	.word	0x431bde83
 80073b4:	20000590 	.word	0x20000590
 80073b8:	40001000 	.word	0x40001000
 80073bc:	200000c4 	.word	0x200000c4

080073c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80073c0:	b480      	push	{r7}
 80073c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80073c4:	e7fe      	b.n	80073c4 <NMI_Handler+0x4>

080073c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80073c6:	b480      	push	{r7}
 80073c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80073ca:	e7fe      	b.n	80073ca <HardFault_Handler+0x4>

080073cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80073d0:	e7fe      	b.n	80073d0 <MemManage_Handler+0x4>

080073d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80073d2:	b480      	push	{r7}
 80073d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80073d6:	e7fe      	b.n	80073d6 <BusFault_Handler+0x4>

080073d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80073d8:	b480      	push	{r7}
 80073da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80073dc:	e7fe      	b.n	80073dc <UsageFault_Handler+0x4>

080073de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80073de:	b480      	push	{r7}
 80073e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80073e2:	bf00      	nop
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80073f0:	4802      	ldr	r0, [pc, #8]	; (80073fc <TIM2_IRQHandler+0x10>)
 80073f2:	f7fd fc7b 	bl	8004cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80073f6:	bf00      	nop
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	2000042c 	.word	0x2000042c

08007400 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007404:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007408:	f7fb f880 	bl	800250c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800740c:	bf00      	nop
 800740e:	bd80      	pop	{r7, pc}

08007410 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007414:	4802      	ldr	r0, [pc, #8]	; (8007420 <TIM6_DAC_IRQHandler+0x10>)
 8007416:	f7fd fc69 	bl	8004cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800741a:	bf00      	nop
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20000590 	.word	0x20000590

08007424 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
  return 1;
 8007428:	2301      	movs	r3, #1
}
 800742a:	4618      	mov	r0, r3
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <_kill>:

int _kill(int pid, int sig)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800743e:	f000 f8d7 	bl	80075f0 <__errno>
 8007442:	4603      	mov	r3, r0
 8007444:	2216      	movs	r2, #22
 8007446:	601a      	str	r2, [r3, #0]
  return -1;
 8007448:	f04f 33ff 	mov.w	r3, #4294967295
}
 800744c:	4618      	mov	r0, r3
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <_exit>:

void _exit (int status)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800745c:	f04f 31ff 	mov.w	r1, #4294967295
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7ff ffe7 	bl	8007434 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007466:	e7fe      	b.n	8007466 <_exit+0x12>

08007468 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007474:	2300      	movs	r3, #0
 8007476:	617b      	str	r3, [r7, #20]
 8007478:	e00a      	b.n	8007490 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800747a:	f3af 8000 	nop.w
 800747e:	4601      	mov	r1, r0
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	60ba      	str	r2, [r7, #8]
 8007486:	b2ca      	uxtb	r2, r1
 8007488:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	3301      	adds	r3, #1
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	429a      	cmp	r2, r3
 8007496:	dbf0      	blt.n	800747a <_read+0x12>
  }

  return len;
 8007498:	687b      	ldr	r3, [r7, #4]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80074aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80074ca:	605a      	str	r2, [r3, #4]
  return 0;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <_isatty>:

int _isatty(int file)
{
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80074e2:	2301      	movs	r3, #1
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
	...

0800750c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007514:	4a14      	ldr	r2, [pc, #80]	; (8007568 <_sbrk+0x5c>)
 8007516:	4b15      	ldr	r3, [pc, #84]	; (800756c <_sbrk+0x60>)
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007520:	4b13      	ldr	r3, [pc, #76]	; (8007570 <_sbrk+0x64>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d102      	bne.n	800752e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007528:	4b11      	ldr	r3, [pc, #68]	; (8007570 <_sbrk+0x64>)
 800752a:	4a12      	ldr	r2, [pc, #72]	; (8007574 <_sbrk+0x68>)
 800752c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800752e:	4b10      	ldr	r3, [pc, #64]	; (8007570 <_sbrk+0x64>)
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4413      	add	r3, r2
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	429a      	cmp	r2, r3
 800753a:	d207      	bcs.n	800754c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800753c:	f000 f858 	bl	80075f0 <__errno>
 8007540:	4603      	mov	r3, r0
 8007542:	220c      	movs	r2, #12
 8007544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007546:	f04f 33ff 	mov.w	r3, #4294967295
 800754a:	e009      	b.n	8007560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800754c:	4b08      	ldr	r3, [pc, #32]	; (8007570 <_sbrk+0x64>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007552:	4b07      	ldr	r3, [pc, #28]	; (8007570 <_sbrk+0x64>)
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4413      	add	r3, r2
 800755a:	4a05      	ldr	r2, [pc, #20]	; (8007570 <_sbrk+0x64>)
 800755c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800755e:	68fb      	ldr	r3, [r7, #12]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3718      	adds	r7, #24
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	200a0000 	.word	0x200a0000
 800756c:	00000400 	.word	0x00000400
 8007570:	200005dc 	.word	0x200005dc
 8007574:	200005f0 	.word	0x200005f0

08007578 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007578:	b480      	push	{r7}
 800757a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800757c:	4b06      	ldr	r3, [pc, #24]	; (8007598 <SystemInit+0x20>)
 800757e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007582:	4a05      	ldr	r2, [pc, #20]	; (8007598 <SystemInit+0x20>)
 8007584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800758c:	bf00      	nop
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	e000ed00 	.word	0xe000ed00

0800759c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800759c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80075d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80075a0:	f7ff ffea 	bl	8007578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80075a4:	480c      	ldr	r0, [pc, #48]	; (80075d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80075a6:	490d      	ldr	r1, [pc, #52]	; (80075dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80075a8:	4a0d      	ldr	r2, [pc, #52]	; (80075e0 <LoopForever+0xe>)
  movs r3, #0
 80075aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80075ac:	e002      	b.n	80075b4 <LoopCopyDataInit>

080075ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80075ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80075b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80075b2:	3304      	adds	r3, #4

080075b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80075b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80075b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80075b8:	d3f9      	bcc.n	80075ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80075ba:	4a0a      	ldr	r2, [pc, #40]	; (80075e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80075bc:	4c0a      	ldr	r4, [pc, #40]	; (80075e8 <LoopForever+0x16>)
  movs r3, #0
 80075be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80075c0:	e001      	b.n	80075c6 <LoopFillZerobss>

080075c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80075c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80075c4:	3204      	adds	r2, #4

080075c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80075c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80075c8:	d3fb      	bcc.n	80075c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80075ca:	f000 f817 	bl	80075fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80075ce:	f7fe ff95 	bl	80064fc <main>

080075d2 <LoopForever>:

LoopForever:
    b LoopForever
 80075d2:	e7fe      	b.n	80075d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80075d4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80075d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80075dc:	2000029c 	.word	0x2000029c
  ldr r2, =_sidata
 80075e0:	0800a774 	.word	0x0800a774
  ldr r2, =_sbss
 80075e4:	2000029c 	.word	0x2000029c
  ldr r4, =_ebss
 80075e8:	200005f0 	.word	0x200005f0

080075ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80075ec:	e7fe      	b.n	80075ec <ADC1_IRQHandler>
	...

080075f0 <__errno>:
 80075f0:	4b01      	ldr	r3, [pc, #4]	; (80075f8 <__errno+0x8>)
 80075f2:	6818      	ldr	r0, [r3, #0]
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	200000cc 	.word	0x200000cc

080075fc <__libc_init_array>:
 80075fc:	b570      	push	{r4, r5, r6, lr}
 80075fe:	4d0d      	ldr	r5, [pc, #52]	; (8007634 <__libc_init_array+0x38>)
 8007600:	4c0d      	ldr	r4, [pc, #52]	; (8007638 <__libc_init_array+0x3c>)
 8007602:	1b64      	subs	r4, r4, r5
 8007604:	10a4      	asrs	r4, r4, #2
 8007606:	2600      	movs	r6, #0
 8007608:	42a6      	cmp	r6, r4
 800760a:	d109      	bne.n	8007620 <__libc_init_array+0x24>
 800760c:	4d0b      	ldr	r5, [pc, #44]	; (800763c <__libc_init_array+0x40>)
 800760e:	4c0c      	ldr	r4, [pc, #48]	; (8007640 <__libc_init_array+0x44>)
 8007610:	f002 fe22 	bl	800a258 <_init>
 8007614:	1b64      	subs	r4, r4, r5
 8007616:	10a4      	asrs	r4, r4, #2
 8007618:	2600      	movs	r6, #0
 800761a:	42a6      	cmp	r6, r4
 800761c:	d105      	bne.n	800762a <__libc_init_array+0x2e>
 800761e:	bd70      	pop	{r4, r5, r6, pc}
 8007620:	f855 3b04 	ldr.w	r3, [r5], #4
 8007624:	4798      	blx	r3
 8007626:	3601      	adds	r6, #1
 8007628:	e7ee      	b.n	8007608 <__libc_init_array+0xc>
 800762a:	f855 3b04 	ldr.w	r3, [r5], #4
 800762e:	4798      	blx	r3
 8007630:	3601      	adds	r6, #1
 8007632:	e7f2      	b.n	800761a <__libc_init_array+0x1e>
 8007634:	0800a76c 	.word	0x0800a76c
 8007638:	0800a76c 	.word	0x0800a76c
 800763c:	0800a76c 	.word	0x0800a76c
 8007640:	0800a770 	.word	0x0800a770

08007644 <memcpy>:
 8007644:	440a      	add	r2, r1
 8007646:	4291      	cmp	r1, r2
 8007648:	f100 33ff 	add.w	r3, r0, #4294967295
 800764c:	d100      	bne.n	8007650 <memcpy+0xc>
 800764e:	4770      	bx	lr
 8007650:	b510      	push	{r4, lr}
 8007652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800765a:	4291      	cmp	r1, r2
 800765c:	d1f9      	bne.n	8007652 <memcpy+0xe>
 800765e:	bd10      	pop	{r4, pc}

08007660 <memset>:
 8007660:	4402      	add	r2, r0
 8007662:	4603      	mov	r3, r0
 8007664:	4293      	cmp	r3, r2
 8007666:	d100      	bne.n	800766a <memset+0xa>
 8007668:	4770      	bx	lr
 800766a:	f803 1b01 	strb.w	r1, [r3], #1
 800766e:	e7f9      	b.n	8007664 <memset+0x4>

08007670 <__cvt>:
 8007670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007674:	ec55 4b10 	vmov	r4, r5, d0
 8007678:	2d00      	cmp	r5, #0
 800767a:	460e      	mov	r6, r1
 800767c:	4619      	mov	r1, r3
 800767e:	462b      	mov	r3, r5
 8007680:	bfbb      	ittet	lt
 8007682:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007686:	461d      	movlt	r5, r3
 8007688:	2300      	movge	r3, #0
 800768a:	232d      	movlt	r3, #45	; 0x2d
 800768c:	700b      	strb	r3, [r1, #0]
 800768e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007690:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007694:	4691      	mov	r9, r2
 8007696:	f023 0820 	bic.w	r8, r3, #32
 800769a:	bfbc      	itt	lt
 800769c:	4622      	movlt	r2, r4
 800769e:	4614      	movlt	r4, r2
 80076a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076a4:	d005      	beq.n	80076b2 <__cvt+0x42>
 80076a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80076aa:	d100      	bne.n	80076ae <__cvt+0x3e>
 80076ac:	3601      	adds	r6, #1
 80076ae:	2102      	movs	r1, #2
 80076b0:	e000      	b.n	80076b4 <__cvt+0x44>
 80076b2:	2103      	movs	r1, #3
 80076b4:	ab03      	add	r3, sp, #12
 80076b6:	9301      	str	r3, [sp, #4]
 80076b8:	ab02      	add	r3, sp, #8
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	ec45 4b10 	vmov	d0, r4, r5
 80076c0:	4653      	mov	r3, sl
 80076c2:	4632      	mov	r2, r6
 80076c4:	f000 fe30 	bl	8008328 <_dtoa_r>
 80076c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80076cc:	4607      	mov	r7, r0
 80076ce:	d102      	bne.n	80076d6 <__cvt+0x66>
 80076d0:	f019 0f01 	tst.w	r9, #1
 80076d4:	d022      	beq.n	800771c <__cvt+0xac>
 80076d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076da:	eb07 0906 	add.w	r9, r7, r6
 80076de:	d110      	bne.n	8007702 <__cvt+0x92>
 80076e0:	783b      	ldrb	r3, [r7, #0]
 80076e2:	2b30      	cmp	r3, #48	; 0x30
 80076e4:	d10a      	bne.n	80076fc <__cvt+0x8c>
 80076e6:	2200      	movs	r2, #0
 80076e8:	2300      	movs	r3, #0
 80076ea:	4620      	mov	r0, r4
 80076ec:	4629      	mov	r1, r5
 80076ee:	f7f9 fa03 	bl	8000af8 <__aeabi_dcmpeq>
 80076f2:	b918      	cbnz	r0, 80076fc <__cvt+0x8c>
 80076f4:	f1c6 0601 	rsb	r6, r6, #1
 80076f8:	f8ca 6000 	str.w	r6, [sl]
 80076fc:	f8da 3000 	ldr.w	r3, [sl]
 8007700:	4499      	add	r9, r3
 8007702:	2200      	movs	r2, #0
 8007704:	2300      	movs	r3, #0
 8007706:	4620      	mov	r0, r4
 8007708:	4629      	mov	r1, r5
 800770a:	f7f9 f9f5 	bl	8000af8 <__aeabi_dcmpeq>
 800770e:	b108      	cbz	r0, 8007714 <__cvt+0xa4>
 8007710:	f8cd 900c 	str.w	r9, [sp, #12]
 8007714:	2230      	movs	r2, #48	; 0x30
 8007716:	9b03      	ldr	r3, [sp, #12]
 8007718:	454b      	cmp	r3, r9
 800771a:	d307      	bcc.n	800772c <__cvt+0xbc>
 800771c:	9b03      	ldr	r3, [sp, #12]
 800771e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007720:	1bdb      	subs	r3, r3, r7
 8007722:	4638      	mov	r0, r7
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	b004      	add	sp, #16
 8007728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772c:	1c59      	adds	r1, r3, #1
 800772e:	9103      	str	r1, [sp, #12]
 8007730:	701a      	strb	r2, [r3, #0]
 8007732:	e7f0      	b.n	8007716 <__cvt+0xa6>

08007734 <__exponent>:
 8007734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007736:	4603      	mov	r3, r0
 8007738:	2900      	cmp	r1, #0
 800773a:	bfb8      	it	lt
 800773c:	4249      	neglt	r1, r1
 800773e:	f803 2b02 	strb.w	r2, [r3], #2
 8007742:	bfb4      	ite	lt
 8007744:	222d      	movlt	r2, #45	; 0x2d
 8007746:	222b      	movge	r2, #43	; 0x2b
 8007748:	2909      	cmp	r1, #9
 800774a:	7042      	strb	r2, [r0, #1]
 800774c:	dd2a      	ble.n	80077a4 <__exponent+0x70>
 800774e:	f10d 0407 	add.w	r4, sp, #7
 8007752:	46a4      	mov	ip, r4
 8007754:	270a      	movs	r7, #10
 8007756:	46a6      	mov	lr, r4
 8007758:	460a      	mov	r2, r1
 800775a:	fb91 f6f7 	sdiv	r6, r1, r7
 800775e:	fb07 1516 	mls	r5, r7, r6, r1
 8007762:	3530      	adds	r5, #48	; 0x30
 8007764:	2a63      	cmp	r2, #99	; 0x63
 8007766:	f104 34ff 	add.w	r4, r4, #4294967295
 800776a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800776e:	4631      	mov	r1, r6
 8007770:	dcf1      	bgt.n	8007756 <__exponent+0x22>
 8007772:	3130      	adds	r1, #48	; 0x30
 8007774:	f1ae 0502 	sub.w	r5, lr, #2
 8007778:	f804 1c01 	strb.w	r1, [r4, #-1]
 800777c:	1c44      	adds	r4, r0, #1
 800777e:	4629      	mov	r1, r5
 8007780:	4561      	cmp	r1, ip
 8007782:	d30a      	bcc.n	800779a <__exponent+0x66>
 8007784:	f10d 0209 	add.w	r2, sp, #9
 8007788:	eba2 020e 	sub.w	r2, r2, lr
 800778c:	4565      	cmp	r5, ip
 800778e:	bf88      	it	hi
 8007790:	2200      	movhi	r2, #0
 8007792:	4413      	add	r3, r2
 8007794:	1a18      	subs	r0, r3, r0
 8007796:	b003      	add	sp, #12
 8007798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800779a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800779e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80077a2:	e7ed      	b.n	8007780 <__exponent+0x4c>
 80077a4:	2330      	movs	r3, #48	; 0x30
 80077a6:	3130      	adds	r1, #48	; 0x30
 80077a8:	7083      	strb	r3, [r0, #2]
 80077aa:	70c1      	strb	r1, [r0, #3]
 80077ac:	1d03      	adds	r3, r0, #4
 80077ae:	e7f1      	b.n	8007794 <__exponent+0x60>

080077b0 <_printf_float>:
 80077b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b4:	ed2d 8b02 	vpush	{d8}
 80077b8:	b08d      	sub	sp, #52	; 0x34
 80077ba:	460c      	mov	r4, r1
 80077bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80077c0:	4616      	mov	r6, r2
 80077c2:	461f      	mov	r7, r3
 80077c4:	4605      	mov	r5, r0
 80077c6:	f001 fd55 	bl	8009274 <_localeconv_r>
 80077ca:	f8d0 a000 	ldr.w	sl, [r0]
 80077ce:	4650      	mov	r0, sl
 80077d0:	f7f8 fd16 	bl	8000200 <strlen>
 80077d4:	2300      	movs	r3, #0
 80077d6:	930a      	str	r3, [sp, #40]	; 0x28
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	9305      	str	r3, [sp, #20]
 80077dc:	f8d8 3000 	ldr.w	r3, [r8]
 80077e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80077e4:	3307      	adds	r3, #7
 80077e6:	f023 0307 	bic.w	r3, r3, #7
 80077ea:	f103 0208 	add.w	r2, r3, #8
 80077ee:	f8c8 2000 	str.w	r2, [r8]
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80077fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80077fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007802:	9307      	str	r3, [sp, #28]
 8007804:	f8cd 8018 	str.w	r8, [sp, #24]
 8007808:	ee08 0a10 	vmov	s16, r0
 800780c:	4b9f      	ldr	r3, [pc, #636]	; (8007a8c <_printf_float+0x2dc>)
 800780e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007812:	f04f 32ff 	mov.w	r2, #4294967295
 8007816:	f7f9 f9a1 	bl	8000b5c <__aeabi_dcmpun>
 800781a:	bb88      	cbnz	r0, 8007880 <_printf_float+0xd0>
 800781c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007820:	4b9a      	ldr	r3, [pc, #616]	; (8007a8c <_printf_float+0x2dc>)
 8007822:	f04f 32ff 	mov.w	r2, #4294967295
 8007826:	f7f9 f97b 	bl	8000b20 <__aeabi_dcmple>
 800782a:	bb48      	cbnz	r0, 8007880 <_printf_float+0xd0>
 800782c:	2200      	movs	r2, #0
 800782e:	2300      	movs	r3, #0
 8007830:	4640      	mov	r0, r8
 8007832:	4649      	mov	r1, r9
 8007834:	f7f9 f96a 	bl	8000b0c <__aeabi_dcmplt>
 8007838:	b110      	cbz	r0, 8007840 <_printf_float+0x90>
 800783a:	232d      	movs	r3, #45	; 0x2d
 800783c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007840:	4b93      	ldr	r3, [pc, #588]	; (8007a90 <_printf_float+0x2e0>)
 8007842:	4894      	ldr	r0, [pc, #592]	; (8007a94 <_printf_float+0x2e4>)
 8007844:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007848:	bf94      	ite	ls
 800784a:	4698      	movls	r8, r3
 800784c:	4680      	movhi	r8, r0
 800784e:	2303      	movs	r3, #3
 8007850:	6123      	str	r3, [r4, #16]
 8007852:	9b05      	ldr	r3, [sp, #20]
 8007854:	f023 0204 	bic.w	r2, r3, #4
 8007858:	6022      	str	r2, [r4, #0]
 800785a:	f04f 0900 	mov.w	r9, #0
 800785e:	9700      	str	r7, [sp, #0]
 8007860:	4633      	mov	r3, r6
 8007862:	aa0b      	add	r2, sp, #44	; 0x2c
 8007864:	4621      	mov	r1, r4
 8007866:	4628      	mov	r0, r5
 8007868:	f000 f9d8 	bl	8007c1c <_printf_common>
 800786c:	3001      	adds	r0, #1
 800786e:	f040 8090 	bne.w	8007992 <_printf_float+0x1e2>
 8007872:	f04f 30ff 	mov.w	r0, #4294967295
 8007876:	b00d      	add	sp, #52	; 0x34
 8007878:	ecbd 8b02 	vpop	{d8}
 800787c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007880:	4642      	mov	r2, r8
 8007882:	464b      	mov	r3, r9
 8007884:	4640      	mov	r0, r8
 8007886:	4649      	mov	r1, r9
 8007888:	f7f9 f968 	bl	8000b5c <__aeabi_dcmpun>
 800788c:	b140      	cbz	r0, 80078a0 <_printf_float+0xf0>
 800788e:	464b      	mov	r3, r9
 8007890:	2b00      	cmp	r3, #0
 8007892:	bfbc      	itt	lt
 8007894:	232d      	movlt	r3, #45	; 0x2d
 8007896:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800789a:	487f      	ldr	r0, [pc, #508]	; (8007a98 <_printf_float+0x2e8>)
 800789c:	4b7f      	ldr	r3, [pc, #508]	; (8007a9c <_printf_float+0x2ec>)
 800789e:	e7d1      	b.n	8007844 <_printf_float+0x94>
 80078a0:	6863      	ldr	r3, [r4, #4]
 80078a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80078a6:	9206      	str	r2, [sp, #24]
 80078a8:	1c5a      	adds	r2, r3, #1
 80078aa:	d13f      	bne.n	800792c <_printf_float+0x17c>
 80078ac:	2306      	movs	r3, #6
 80078ae:	6063      	str	r3, [r4, #4]
 80078b0:	9b05      	ldr	r3, [sp, #20]
 80078b2:	6861      	ldr	r1, [r4, #4]
 80078b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80078b8:	2300      	movs	r3, #0
 80078ba:	9303      	str	r3, [sp, #12]
 80078bc:	ab0a      	add	r3, sp, #40	; 0x28
 80078be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80078c2:	ab09      	add	r3, sp, #36	; 0x24
 80078c4:	ec49 8b10 	vmov	d0, r8, r9
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	6022      	str	r2, [r4, #0]
 80078cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80078d0:	4628      	mov	r0, r5
 80078d2:	f7ff fecd 	bl	8007670 <__cvt>
 80078d6:	9b06      	ldr	r3, [sp, #24]
 80078d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078da:	2b47      	cmp	r3, #71	; 0x47
 80078dc:	4680      	mov	r8, r0
 80078de:	d108      	bne.n	80078f2 <_printf_float+0x142>
 80078e0:	1cc8      	adds	r0, r1, #3
 80078e2:	db02      	blt.n	80078ea <_printf_float+0x13a>
 80078e4:	6863      	ldr	r3, [r4, #4]
 80078e6:	4299      	cmp	r1, r3
 80078e8:	dd41      	ble.n	800796e <_printf_float+0x1be>
 80078ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80078ee:	fa5f fb8b 	uxtb.w	fp, fp
 80078f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80078f6:	d820      	bhi.n	800793a <_printf_float+0x18a>
 80078f8:	3901      	subs	r1, #1
 80078fa:	465a      	mov	r2, fp
 80078fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007900:	9109      	str	r1, [sp, #36]	; 0x24
 8007902:	f7ff ff17 	bl	8007734 <__exponent>
 8007906:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007908:	1813      	adds	r3, r2, r0
 800790a:	2a01      	cmp	r2, #1
 800790c:	4681      	mov	r9, r0
 800790e:	6123      	str	r3, [r4, #16]
 8007910:	dc02      	bgt.n	8007918 <_printf_float+0x168>
 8007912:	6822      	ldr	r2, [r4, #0]
 8007914:	07d2      	lsls	r2, r2, #31
 8007916:	d501      	bpl.n	800791c <_printf_float+0x16c>
 8007918:	3301      	adds	r3, #1
 800791a:	6123      	str	r3, [r4, #16]
 800791c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007920:	2b00      	cmp	r3, #0
 8007922:	d09c      	beq.n	800785e <_printf_float+0xae>
 8007924:	232d      	movs	r3, #45	; 0x2d
 8007926:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800792a:	e798      	b.n	800785e <_printf_float+0xae>
 800792c:	9a06      	ldr	r2, [sp, #24]
 800792e:	2a47      	cmp	r2, #71	; 0x47
 8007930:	d1be      	bne.n	80078b0 <_printf_float+0x100>
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1bc      	bne.n	80078b0 <_printf_float+0x100>
 8007936:	2301      	movs	r3, #1
 8007938:	e7b9      	b.n	80078ae <_printf_float+0xfe>
 800793a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800793e:	d118      	bne.n	8007972 <_printf_float+0x1c2>
 8007940:	2900      	cmp	r1, #0
 8007942:	6863      	ldr	r3, [r4, #4]
 8007944:	dd0b      	ble.n	800795e <_printf_float+0x1ae>
 8007946:	6121      	str	r1, [r4, #16]
 8007948:	b913      	cbnz	r3, 8007950 <_printf_float+0x1a0>
 800794a:	6822      	ldr	r2, [r4, #0]
 800794c:	07d0      	lsls	r0, r2, #31
 800794e:	d502      	bpl.n	8007956 <_printf_float+0x1a6>
 8007950:	3301      	adds	r3, #1
 8007952:	440b      	add	r3, r1
 8007954:	6123      	str	r3, [r4, #16]
 8007956:	65a1      	str	r1, [r4, #88]	; 0x58
 8007958:	f04f 0900 	mov.w	r9, #0
 800795c:	e7de      	b.n	800791c <_printf_float+0x16c>
 800795e:	b913      	cbnz	r3, 8007966 <_printf_float+0x1b6>
 8007960:	6822      	ldr	r2, [r4, #0]
 8007962:	07d2      	lsls	r2, r2, #31
 8007964:	d501      	bpl.n	800796a <_printf_float+0x1ba>
 8007966:	3302      	adds	r3, #2
 8007968:	e7f4      	b.n	8007954 <_printf_float+0x1a4>
 800796a:	2301      	movs	r3, #1
 800796c:	e7f2      	b.n	8007954 <_printf_float+0x1a4>
 800796e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007974:	4299      	cmp	r1, r3
 8007976:	db05      	blt.n	8007984 <_printf_float+0x1d4>
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	6121      	str	r1, [r4, #16]
 800797c:	07d8      	lsls	r0, r3, #31
 800797e:	d5ea      	bpl.n	8007956 <_printf_float+0x1a6>
 8007980:	1c4b      	adds	r3, r1, #1
 8007982:	e7e7      	b.n	8007954 <_printf_float+0x1a4>
 8007984:	2900      	cmp	r1, #0
 8007986:	bfd4      	ite	le
 8007988:	f1c1 0202 	rsble	r2, r1, #2
 800798c:	2201      	movgt	r2, #1
 800798e:	4413      	add	r3, r2
 8007990:	e7e0      	b.n	8007954 <_printf_float+0x1a4>
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	055a      	lsls	r2, r3, #21
 8007996:	d407      	bmi.n	80079a8 <_printf_float+0x1f8>
 8007998:	6923      	ldr	r3, [r4, #16]
 800799a:	4642      	mov	r2, r8
 800799c:	4631      	mov	r1, r6
 800799e:	4628      	mov	r0, r5
 80079a0:	47b8      	blx	r7
 80079a2:	3001      	adds	r0, #1
 80079a4:	d12c      	bne.n	8007a00 <_printf_float+0x250>
 80079a6:	e764      	b.n	8007872 <_printf_float+0xc2>
 80079a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079ac:	f240 80e0 	bls.w	8007b70 <_printf_float+0x3c0>
 80079b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079b4:	2200      	movs	r2, #0
 80079b6:	2300      	movs	r3, #0
 80079b8:	f7f9 f89e 	bl	8000af8 <__aeabi_dcmpeq>
 80079bc:	2800      	cmp	r0, #0
 80079be:	d034      	beq.n	8007a2a <_printf_float+0x27a>
 80079c0:	4a37      	ldr	r2, [pc, #220]	; (8007aa0 <_printf_float+0x2f0>)
 80079c2:	2301      	movs	r3, #1
 80079c4:	4631      	mov	r1, r6
 80079c6:	4628      	mov	r0, r5
 80079c8:	47b8      	blx	r7
 80079ca:	3001      	adds	r0, #1
 80079cc:	f43f af51 	beq.w	8007872 <_printf_float+0xc2>
 80079d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079d4:	429a      	cmp	r2, r3
 80079d6:	db02      	blt.n	80079de <_printf_float+0x22e>
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	07d8      	lsls	r0, r3, #31
 80079dc:	d510      	bpl.n	8007a00 <_printf_float+0x250>
 80079de:	ee18 3a10 	vmov	r3, s16
 80079e2:	4652      	mov	r2, sl
 80079e4:	4631      	mov	r1, r6
 80079e6:	4628      	mov	r0, r5
 80079e8:	47b8      	blx	r7
 80079ea:	3001      	adds	r0, #1
 80079ec:	f43f af41 	beq.w	8007872 <_printf_float+0xc2>
 80079f0:	f04f 0800 	mov.w	r8, #0
 80079f4:	f104 091a 	add.w	r9, r4, #26
 80079f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079fa:	3b01      	subs	r3, #1
 80079fc:	4543      	cmp	r3, r8
 80079fe:	dc09      	bgt.n	8007a14 <_printf_float+0x264>
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	079b      	lsls	r3, r3, #30
 8007a04:	f100 8105 	bmi.w	8007c12 <_printf_float+0x462>
 8007a08:	68e0      	ldr	r0, [r4, #12]
 8007a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a0c:	4298      	cmp	r0, r3
 8007a0e:	bfb8      	it	lt
 8007a10:	4618      	movlt	r0, r3
 8007a12:	e730      	b.n	8007876 <_printf_float+0xc6>
 8007a14:	2301      	movs	r3, #1
 8007a16:	464a      	mov	r2, r9
 8007a18:	4631      	mov	r1, r6
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	47b8      	blx	r7
 8007a1e:	3001      	adds	r0, #1
 8007a20:	f43f af27 	beq.w	8007872 <_printf_float+0xc2>
 8007a24:	f108 0801 	add.w	r8, r8, #1
 8007a28:	e7e6      	b.n	80079f8 <_printf_float+0x248>
 8007a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	dc39      	bgt.n	8007aa4 <_printf_float+0x2f4>
 8007a30:	4a1b      	ldr	r2, [pc, #108]	; (8007aa0 <_printf_float+0x2f0>)
 8007a32:	2301      	movs	r3, #1
 8007a34:	4631      	mov	r1, r6
 8007a36:	4628      	mov	r0, r5
 8007a38:	47b8      	blx	r7
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	f43f af19 	beq.w	8007872 <_printf_float+0xc2>
 8007a40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a44:	4313      	orrs	r3, r2
 8007a46:	d102      	bne.n	8007a4e <_printf_float+0x29e>
 8007a48:	6823      	ldr	r3, [r4, #0]
 8007a4a:	07d9      	lsls	r1, r3, #31
 8007a4c:	d5d8      	bpl.n	8007a00 <_printf_float+0x250>
 8007a4e:	ee18 3a10 	vmov	r3, s16
 8007a52:	4652      	mov	r2, sl
 8007a54:	4631      	mov	r1, r6
 8007a56:	4628      	mov	r0, r5
 8007a58:	47b8      	blx	r7
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	f43f af09 	beq.w	8007872 <_printf_float+0xc2>
 8007a60:	f04f 0900 	mov.w	r9, #0
 8007a64:	f104 0a1a 	add.w	sl, r4, #26
 8007a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a6a:	425b      	negs	r3, r3
 8007a6c:	454b      	cmp	r3, r9
 8007a6e:	dc01      	bgt.n	8007a74 <_printf_float+0x2c4>
 8007a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a72:	e792      	b.n	800799a <_printf_float+0x1ea>
 8007a74:	2301      	movs	r3, #1
 8007a76:	4652      	mov	r2, sl
 8007a78:	4631      	mov	r1, r6
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	47b8      	blx	r7
 8007a7e:	3001      	adds	r0, #1
 8007a80:	f43f aef7 	beq.w	8007872 <_printf_float+0xc2>
 8007a84:	f109 0901 	add.w	r9, r9, #1
 8007a88:	e7ee      	b.n	8007a68 <_printf_float+0x2b8>
 8007a8a:	bf00      	nop
 8007a8c:	7fefffff 	.word	0x7fefffff
 8007a90:	0800a390 	.word	0x0800a390
 8007a94:	0800a394 	.word	0x0800a394
 8007a98:	0800a39c 	.word	0x0800a39c
 8007a9c:	0800a398 	.word	0x0800a398
 8007aa0:	0800a3a0 	.word	0x0800a3a0
 8007aa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	bfa8      	it	ge
 8007aac:	461a      	movge	r2, r3
 8007aae:	2a00      	cmp	r2, #0
 8007ab0:	4691      	mov	r9, r2
 8007ab2:	dc37      	bgt.n	8007b24 <_printf_float+0x374>
 8007ab4:	f04f 0b00 	mov.w	fp, #0
 8007ab8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007abc:	f104 021a 	add.w	r2, r4, #26
 8007ac0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ac2:	9305      	str	r3, [sp, #20]
 8007ac4:	eba3 0309 	sub.w	r3, r3, r9
 8007ac8:	455b      	cmp	r3, fp
 8007aca:	dc33      	bgt.n	8007b34 <_printf_float+0x384>
 8007acc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	db3b      	blt.n	8007b4c <_printf_float+0x39c>
 8007ad4:	6823      	ldr	r3, [r4, #0]
 8007ad6:	07da      	lsls	r2, r3, #31
 8007ad8:	d438      	bmi.n	8007b4c <_printf_float+0x39c>
 8007ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007adc:	9a05      	ldr	r2, [sp, #20]
 8007ade:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ae0:	1a9a      	subs	r2, r3, r2
 8007ae2:	eba3 0901 	sub.w	r9, r3, r1
 8007ae6:	4591      	cmp	r9, r2
 8007ae8:	bfa8      	it	ge
 8007aea:	4691      	movge	r9, r2
 8007aec:	f1b9 0f00 	cmp.w	r9, #0
 8007af0:	dc35      	bgt.n	8007b5e <_printf_float+0x3ae>
 8007af2:	f04f 0800 	mov.w	r8, #0
 8007af6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007afa:	f104 0a1a 	add.w	sl, r4, #26
 8007afe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b02:	1a9b      	subs	r3, r3, r2
 8007b04:	eba3 0309 	sub.w	r3, r3, r9
 8007b08:	4543      	cmp	r3, r8
 8007b0a:	f77f af79 	ble.w	8007a00 <_printf_float+0x250>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	4652      	mov	r2, sl
 8007b12:	4631      	mov	r1, r6
 8007b14:	4628      	mov	r0, r5
 8007b16:	47b8      	blx	r7
 8007b18:	3001      	adds	r0, #1
 8007b1a:	f43f aeaa 	beq.w	8007872 <_printf_float+0xc2>
 8007b1e:	f108 0801 	add.w	r8, r8, #1
 8007b22:	e7ec      	b.n	8007afe <_printf_float+0x34e>
 8007b24:	4613      	mov	r3, r2
 8007b26:	4631      	mov	r1, r6
 8007b28:	4642      	mov	r2, r8
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	47b8      	blx	r7
 8007b2e:	3001      	adds	r0, #1
 8007b30:	d1c0      	bne.n	8007ab4 <_printf_float+0x304>
 8007b32:	e69e      	b.n	8007872 <_printf_float+0xc2>
 8007b34:	2301      	movs	r3, #1
 8007b36:	4631      	mov	r1, r6
 8007b38:	4628      	mov	r0, r5
 8007b3a:	9205      	str	r2, [sp, #20]
 8007b3c:	47b8      	blx	r7
 8007b3e:	3001      	adds	r0, #1
 8007b40:	f43f ae97 	beq.w	8007872 <_printf_float+0xc2>
 8007b44:	9a05      	ldr	r2, [sp, #20]
 8007b46:	f10b 0b01 	add.w	fp, fp, #1
 8007b4a:	e7b9      	b.n	8007ac0 <_printf_float+0x310>
 8007b4c:	ee18 3a10 	vmov	r3, s16
 8007b50:	4652      	mov	r2, sl
 8007b52:	4631      	mov	r1, r6
 8007b54:	4628      	mov	r0, r5
 8007b56:	47b8      	blx	r7
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d1be      	bne.n	8007ada <_printf_float+0x32a>
 8007b5c:	e689      	b.n	8007872 <_printf_float+0xc2>
 8007b5e:	9a05      	ldr	r2, [sp, #20]
 8007b60:	464b      	mov	r3, r9
 8007b62:	4442      	add	r2, r8
 8007b64:	4631      	mov	r1, r6
 8007b66:	4628      	mov	r0, r5
 8007b68:	47b8      	blx	r7
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	d1c1      	bne.n	8007af2 <_printf_float+0x342>
 8007b6e:	e680      	b.n	8007872 <_printf_float+0xc2>
 8007b70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b72:	2a01      	cmp	r2, #1
 8007b74:	dc01      	bgt.n	8007b7a <_printf_float+0x3ca>
 8007b76:	07db      	lsls	r3, r3, #31
 8007b78:	d538      	bpl.n	8007bec <_printf_float+0x43c>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	4642      	mov	r2, r8
 8007b7e:	4631      	mov	r1, r6
 8007b80:	4628      	mov	r0, r5
 8007b82:	47b8      	blx	r7
 8007b84:	3001      	adds	r0, #1
 8007b86:	f43f ae74 	beq.w	8007872 <_printf_float+0xc2>
 8007b8a:	ee18 3a10 	vmov	r3, s16
 8007b8e:	4652      	mov	r2, sl
 8007b90:	4631      	mov	r1, r6
 8007b92:	4628      	mov	r0, r5
 8007b94:	47b8      	blx	r7
 8007b96:	3001      	adds	r0, #1
 8007b98:	f43f ae6b 	beq.w	8007872 <_printf_float+0xc2>
 8007b9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	f7f8 ffa8 	bl	8000af8 <__aeabi_dcmpeq>
 8007ba8:	b9d8      	cbnz	r0, 8007be2 <_printf_float+0x432>
 8007baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bac:	f108 0201 	add.w	r2, r8, #1
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	4631      	mov	r1, r6
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	47b8      	blx	r7
 8007bb8:	3001      	adds	r0, #1
 8007bba:	d10e      	bne.n	8007bda <_printf_float+0x42a>
 8007bbc:	e659      	b.n	8007872 <_printf_float+0xc2>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	4652      	mov	r2, sl
 8007bc2:	4631      	mov	r1, r6
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	47b8      	blx	r7
 8007bc8:	3001      	adds	r0, #1
 8007bca:	f43f ae52 	beq.w	8007872 <_printf_float+0xc2>
 8007bce:	f108 0801 	add.w	r8, r8, #1
 8007bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	4543      	cmp	r3, r8
 8007bd8:	dcf1      	bgt.n	8007bbe <_printf_float+0x40e>
 8007bda:	464b      	mov	r3, r9
 8007bdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007be0:	e6dc      	b.n	800799c <_printf_float+0x1ec>
 8007be2:	f04f 0800 	mov.w	r8, #0
 8007be6:	f104 0a1a 	add.w	sl, r4, #26
 8007bea:	e7f2      	b.n	8007bd2 <_printf_float+0x422>
 8007bec:	2301      	movs	r3, #1
 8007bee:	4642      	mov	r2, r8
 8007bf0:	e7df      	b.n	8007bb2 <_printf_float+0x402>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	464a      	mov	r2, r9
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	47b8      	blx	r7
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	f43f ae38 	beq.w	8007872 <_printf_float+0xc2>
 8007c02:	f108 0801 	add.w	r8, r8, #1
 8007c06:	68e3      	ldr	r3, [r4, #12]
 8007c08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c0a:	1a5b      	subs	r3, r3, r1
 8007c0c:	4543      	cmp	r3, r8
 8007c0e:	dcf0      	bgt.n	8007bf2 <_printf_float+0x442>
 8007c10:	e6fa      	b.n	8007a08 <_printf_float+0x258>
 8007c12:	f04f 0800 	mov.w	r8, #0
 8007c16:	f104 0919 	add.w	r9, r4, #25
 8007c1a:	e7f4      	b.n	8007c06 <_printf_float+0x456>

08007c1c <_printf_common>:
 8007c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c20:	4616      	mov	r6, r2
 8007c22:	4699      	mov	r9, r3
 8007c24:	688a      	ldr	r2, [r1, #8]
 8007c26:	690b      	ldr	r3, [r1, #16]
 8007c28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	bfb8      	it	lt
 8007c30:	4613      	movlt	r3, r2
 8007c32:	6033      	str	r3, [r6, #0]
 8007c34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c38:	4607      	mov	r7, r0
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	b10a      	cbz	r2, 8007c42 <_printf_common+0x26>
 8007c3e:	3301      	adds	r3, #1
 8007c40:	6033      	str	r3, [r6, #0]
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	0699      	lsls	r1, r3, #26
 8007c46:	bf42      	ittt	mi
 8007c48:	6833      	ldrmi	r3, [r6, #0]
 8007c4a:	3302      	addmi	r3, #2
 8007c4c:	6033      	strmi	r3, [r6, #0]
 8007c4e:	6825      	ldr	r5, [r4, #0]
 8007c50:	f015 0506 	ands.w	r5, r5, #6
 8007c54:	d106      	bne.n	8007c64 <_printf_common+0x48>
 8007c56:	f104 0a19 	add.w	sl, r4, #25
 8007c5a:	68e3      	ldr	r3, [r4, #12]
 8007c5c:	6832      	ldr	r2, [r6, #0]
 8007c5e:	1a9b      	subs	r3, r3, r2
 8007c60:	42ab      	cmp	r3, r5
 8007c62:	dc26      	bgt.n	8007cb2 <_printf_common+0x96>
 8007c64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c68:	1e13      	subs	r3, r2, #0
 8007c6a:	6822      	ldr	r2, [r4, #0]
 8007c6c:	bf18      	it	ne
 8007c6e:	2301      	movne	r3, #1
 8007c70:	0692      	lsls	r2, r2, #26
 8007c72:	d42b      	bmi.n	8007ccc <_printf_common+0xb0>
 8007c74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c78:	4649      	mov	r1, r9
 8007c7a:	4638      	mov	r0, r7
 8007c7c:	47c0      	blx	r8
 8007c7e:	3001      	adds	r0, #1
 8007c80:	d01e      	beq.n	8007cc0 <_printf_common+0xa4>
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	68e5      	ldr	r5, [r4, #12]
 8007c86:	6832      	ldr	r2, [r6, #0]
 8007c88:	f003 0306 	and.w	r3, r3, #6
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	bf08      	it	eq
 8007c90:	1aad      	subeq	r5, r5, r2
 8007c92:	68a3      	ldr	r3, [r4, #8]
 8007c94:	6922      	ldr	r2, [r4, #16]
 8007c96:	bf0c      	ite	eq
 8007c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c9c:	2500      	movne	r5, #0
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	bfc4      	itt	gt
 8007ca2:	1a9b      	subgt	r3, r3, r2
 8007ca4:	18ed      	addgt	r5, r5, r3
 8007ca6:	2600      	movs	r6, #0
 8007ca8:	341a      	adds	r4, #26
 8007caa:	42b5      	cmp	r5, r6
 8007cac:	d11a      	bne.n	8007ce4 <_printf_common+0xc8>
 8007cae:	2000      	movs	r0, #0
 8007cb0:	e008      	b.n	8007cc4 <_printf_common+0xa8>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	4652      	mov	r2, sl
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	4638      	mov	r0, r7
 8007cba:	47c0      	blx	r8
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	d103      	bne.n	8007cc8 <_printf_common+0xac>
 8007cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc8:	3501      	adds	r5, #1
 8007cca:	e7c6      	b.n	8007c5a <_printf_common+0x3e>
 8007ccc:	18e1      	adds	r1, r4, r3
 8007cce:	1c5a      	adds	r2, r3, #1
 8007cd0:	2030      	movs	r0, #48	; 0x30
 8007cd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cd6:	4422      	add	r2, r4
 8007cd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ce0:	3302      	adds	r3, #2
 8007ce2:	e7c7      	b.n	8007c74 <_printf_common+0x58>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	4622      	mov	r2, r4
 8007ce8:	4649      	mov	r1, r9
 8007cea:	4638      	mov	r0, r7
 8007cec:	47c0      	blx	r8
 8007cee:	3001      	adds	r0, #1
 8007cf0:	d0e6      	beq.n	8007cc0 <_printf_common+0xa4>
 8007cf2:	3601      	adds	r6, #1
 8007cf4:	e7d9      	b.n	8007caa <_printf_common+0x8e>
	...

08007cf8 <_printf_i>:
 8007cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cfc:	7e0f      	ldrb	r7, [r1, #24]
 8007cfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d00:	2f78      	cmp	r7, #120	; 0x78
 8007d02:	4691      	mov	r9, r2
 8007d04:	4680      	mov	r8, r0
 8007d06:	460c      	mov	r4, r1
 8007d08:	469a      	mov	sl, r3
 8007d0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d0e:	d807      	bhi.n	8007d20 <_printf_i+0x28>
 8007d10:	2f62      	cmp	r7, #98	; 0x62
 8007d12:	d80a      	bhi.n	8007d2a <_printf_i+0x32>
 8007d14:	2f00      	cmp	r7, #0
 8007d16:	f000 80d8 	beq.w	8007eca <_printf_i+0x1d2>
 8007d1a:	2f58      	cmp	r7, #88	; 0x58
 8007d1c:	f000 80a3 	beq.w	8007e66 <_printf_i+0x16e>
 8007d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d28:	e03a      	b.n	8007da0 <_printf_i+0xa8>
 8007d2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d2e:	2b15      	cmp	r3, #21
 8007d30:	d8f6      	bhi.n	8007d20 <_printf_i+0x28>
 8007d32:	a101      	add	r1, pc, #4	; (adr r1, 8007d38 <_printf_i+0x40>)
 8007d34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d38:	08007d91 	.word	0x08007d91
 8007d3c:	08007da5 	.word	0x08007da5
 8007d40:	08007d21 	.word	0x08007d21
 8007d44:	08007d21 	.word	0x08007d21
 8007d48:	08007d21 	.word	0x08007d21
 8007d4c:	08007d21 	.word	0x08007d21
 8007d50:	08007da5 	.word	0x08007da5
 8007d54:	08007d21 	.word	0x08007d21
 8007d58:	08007d21 	.word	0x08007d21
 8007d5c:	08007d21 	.word	0x08007d21
 8007d60:	08007d21 	.word	0x08007d21
 8007d64:	08007eb1 	.word	0x08007eb1
 8007d68:	08007dd5 	.word	0x08007dd5
 8007d6c:	08007e93 	.word	0x08007e93
 8007d70:	08007d21 	.word	0x08007d21
 8007d74:	08007d21 	.word	0x08007d21
 8007d78:	08007ed3 	.word	0x08007ed3
 8007d7c:	08007d21 	.word	0x08007d21
 8007d80:	08007dd5 	.word	0x08007dd5
 8007d84:	08007d21 	.word	0x08007d21
 8007d88:	08007d21 	.word	0x08007d21
 8007d8c:	08007e9b 	.word	0x08007e9b
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	1d1a      	adds	r2, r3, #4
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	602a      	str	r2, [r5, #0]
 8007d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007da0:	2301      	movs	r3, #1
 8007da2:	e0a3      	b.n	8007eec <_printf_i+0x1f4>
 8007da4:	6820      	ldr	r0, [r4, #0]
 8007da6:	6829      	ldr	r1, [r5, #0]
 8007da8:	0606      	lsls	r6, r0, #24
 8007daa:	f101 0304 	add.w	r3, r1, #4
 8007dae:	d50a      	bpl.n	8007dc6 <_printf_i+0xce>
 8007db0:	680e      	ldr	r6, [r1, #0]
 8007db2:	602b      	str	r3, [r5, #0]
 8007db4:	2e00      	cmp	r6, #0
 8007db6:	da03      	bge.n	8007dc0 <_printf_i+0xc8>
 8007db8:	232d      	movs	r3, #45	; 0x2d
 8007dba:	4276      	negs	r6, r6
 8007dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dc0:	485e      	ldr	r0, [pc, #376]	; (8007f3c <_printf_i+0x244>)
 8007dc2:	230a      	movs	r3, #10
 8007dc4:	e019      	b.n	8007dfa <_printf_i+0x102>
 8007dc6:	680e      	ldr	r6, [r1, #0]
 8007dc8:	602b      	str	r3, [r5, #0]
 8007dca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007dce:	bf18      	it	ne
 8007dd0:	b236      	sxthne	r6, r6
 8007dd2:	e7ef      	b.n	8007db4 <_printf_i+0xbc>
 8007dd4:	682b      	ldr	r3, [r5, #0]
 8007dd6:	6820      	ldr	r0, [r4, #0]
 8007dd8:	1d19      	adds	r1, r3, #4
 8007dda:	6029      	str	r1, [r5, #0]
 8007ddc:	0601      	lsls	r1, r0, #24
 8007dde:	d501      	bpl.n	8007de4 <_printf_i+0xec>
 8007de0:	681e      	ldr	r6, [r3, #0]
 8007de2:	e002      	b.n	8007dea <_printf_i+0xf2>
 8007de4:	0646      	lsls	r6, r0, #25
 8007de6:	d5fb      	bpl.n	8007de0 <_printf_i+0xe8>
 8007de8:	881e      	ldrh	r6, [r3, #0]
 8007dea:	4854      	ldr	r0, [pc, #336]	; (8007f3c <_printf_i+0x244>)
 8007dec:	2f6f      	cmp	r7, #111	; 0x6f
 8007dee:	bf0c      	ite	eq
 8007df0:	2308      	moveq	r3, #8
 8007df2:	230a      	movne	r3, #10
 8007df4:	2100      	movs	r1, #0
 8007df6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dfa:	6865      	ldr	r5, [r4, #4]
 8007dfc:	60a5      	str	r5, [r4, #8]
 8007dfe:	2d00      	cmp	r5, #0
 8007e00:	bfa2      	ittt	ge
 8007e02:	6821      	ldrge	r1, [r4, #0]
 8007e04:	f021 0104 	bicge.w	r1, r1, #4
 8007e08:	6021      	strge	r1, [r4, #0]
 8007e0a:	b90e      	cbnz	r6, 8007e10 <_printf_i+0x118>
 8007e0c:	2d00      	cmp	r5, #0
 8007e0e:	d04d      	beq.n	8007eac <_printf_i+0x1b4>
 8007e10:	4615      	mov	r5, r2
 8007e12:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e16:	fb03 6711 	mls	r7, r3, r1, r6
 8007e1a:	5dc7      	ldrb	r7, [r0, r7]
 8007e1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e20:	4637      	mov	r7, r6
 8007e22:	42bb      	cmp	r3, r7
 8007e24:	460e      	mov	r6, r1
 8007e26:	d9f4      	bls.n	8007e12 <_printf_i+0x11a>
 8007e28:	2b08      	cmp	r3, #8
 8007e2a:	d10b      	bne.n	8007e44 <_printf_i+0x14c>
 8007e2c:	6823      	ldr	r3, [r4, #0]
 8007e2e:	07de      	lsls	r6, r3, #31
 8007e30:	d508      	bpl.n	8007e44 <_printf_i+0x14c>
 8007e32:	6923      	ldr	r3, [r4, #16]
 8007e34:	6861      	ldr	r1, [r4, #4]
 8007e36:	4299      	cmp	r1, r3
 8007e38:	bfde      	ittt	le
 8007e3a:	2330      	movle	r3, #48	; 0x30
 8007e3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e44:	1b52      	subs	r2, r2, r5
 8007e46:	6122      	str	r2, [r4, #16]
 8007e48:	f8cd a000 	str.w	sl, [sp]
 8007e4c:	464b      	mov	r3, r9
 8007e4e:	aa03      	add	r2, sp, #12
 8007e50:	4621      	mov	r1, r4
 8007e52:	4640      	mov	r0, r8
 8007e54:	f7ff fee2 	bl	8007c1c <_printf_common>
 8007e58:	3001      	adds	r0, #1
 8007e5a:	d14c      	bne.n	8007ef6 <_printf_i+0x1fe>
 8007e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e60:	b004      	add	sp, #16
 8007e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e66:	4835      	ldr	r0, [pc, #212]	; (8007f3c <_printf_i+0x244>)
 8007e68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e6c:	6829      	ldr	r1, [r5, #0]
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e74:	6029      	str	r1, [r5, #0]
 8007e76:	061d      	lsls	r5, r3, #24
 8007e78:	d514      	bpl.n	8007ea4 <_printf_i+0x1ac>
 8007e7a:	07df      	lsls	r7, r3, #31
 8007e7c:	bf44      	itt	mi
 8007e7e:	f043 0320 	orrmi.w	r3, r3, #32
 8007e82:	6023      	strmi	r3, [r4, #0]
 8007e84:	b91e      	cbnz	r6, 8007e8e <_printf_i+0x196>
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	f023 0320 	bic.w	r3, r3, #32
 8007e8c:	6023      	str	r3, [r4, #0]
 8007e8e:	2310      	movs	r3, #16
 8007e90:	e7b0      	b.n	8007df4 <_printf_i+0xfc>
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	f043 0320 	orr.w	r3, r3, #32
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	2378      	movs	r3, #120	; 0x78
 8007e9c:	4828      	ldr	r0, [pc, #160]	; (8007f40 <_printf_i+0x248>)
 8007e9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ea2:	e7e3      	b.n	8007e6c <_printf_i+0x174>
 8007ea4:	0659      	lsls	r1, r3, #25
 8007ea6:	bf48      	it	mi
 8007ea8:	b2b6      	uxthmi	r6, r6
 8007eaa:	e7e6      	b.n	8007e7a <_printf_i+0x182>
 8007eac:	4615      	mov	r5, r2
 8007eae:	e7bb      	b.n	8007e28 <_printf_i+0x130>
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	6826      	ldr	r6, [r4, #0]
 8007eb4:	6961      	ldr	r1, [r4, #20]
 8007eb6:	1d18      	adds	r0, r3, #4
 8007eb8:	6028      	str	r0, [r5, #0]
 8007eba:	0635      	lsls	r5, r6, #24
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	d501      	bpl.n	8007ec4 <_printf_i+0x1cc>
 8007ec0:	6019      	str	r1, [r3, #0]
 8007ec2:	e002      	b.n	8007eca <_printf_i+0x1d2>
 8007ec4:	0670      	lsls	r0, r6, #25
 8007ec6:	d5fb      	bpl.n	8007ec0 <_printf_i+0x1c8>
 8007ec8:	8019      	strh	r1, [r3, #0]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	6123      	str	r3, [r4, #16]
 8007ece:	4615      	mov	r5, r2
 8007ed0:	e7ba      	b.n	8007e48 <_printf_i+0x150>
 8007ed2:	682b      	ldr	r3, [r5, #0]
 8007ed4:	1d1a      	adds	r2, r3, #4
 8007ed6:	602a      	str	r2, [r5, #0]
 8007ed8:	681d      	ldr	r5, [r3, #0]
 8007eda:	6862      	ldr	r2, [r4, #4]
 8007edc:	2100      	movs	r1, #0
 8007ede:	4628      	mov	r0, r5
 8007ee0:	f7f8 f996 	bl	8000210 <memchr>
 8007ee4:	b108      	cbz	r0, 8007eea <_printf_i+0x1f2>
 8007ee6:	1b40      	subs	r0, r0, r5
 8007ee8:	6060      	str	r0, [r4, #4]
 8007eea:	6863      	ldr	r3, [r4, #4]
 8007eec:	6123      	str	r3, [r4, #16]
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ef4:	e7a8      	b.n	8007e48 <_printf_i+0x150>
 8007ef6:	6923      	ldr	r3, [r4, #16]
 8007ef8:	462a      	mov	r2, r5
 8007efa:	4649      	mov	r1, r9
 8007efc:	4640      	mov	r0, r8
 8007efe:	47d0      	blx	sl
 8007f00:	3001      	adds	r0, #1
 8007f02:	d0ab      	beq.n	8007e5c <_printf_i+0x164>
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	079b      	lsls	r3, r3, #30
 8007f08:	d413      	bmi.n	8007f32 <_printf_i+0x23a>
 8007f0a:	68e0      	ldr	r0, [r4, #12]
 8007f0c:	9b03      	ldr	r3, [sp, #12]
 8007f0e:	4298      	cmp	r0, r3
 8007f10:	bfb8      	it	lt
 8007f12:	4618      	movlt	r0, r3
 8007f14:	e7a4      	b.n	8007e60 <_printf_i+0x168>
 8007f16:	2301      	movs	r3, #1
 8007f18:	4632      	mov	r2, r6
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	4640      	mov	r0, r8
 8007f1e:	47d0      	blx	sl
 8007f20:	3001      	adds	r0, #1
 8007f22:	d09b      	beq.n	8007e5c <_printf_i+0x164>
 8007f24:	3501      	adds	r5, #1
 8007f26:	68e3      	ldr	r3, [r4, #12]
 8007f28:	9903      	ldr	r1, [sp, #12]
 8007f2a:	1a5b      	subs	r3, r3, r1
 8007f2c:	42ab      	cmp	r3, r5
 8007f2e:	dcf2      	bgt.n	8007f16 <_printf_i+0x21e>
 8007f30:	e7eb      	b.n	8007f0a <_printf_i+0x212>
 8007f32:	2500      	movs	r5, #0
 8007f34:	f104 0619 	add.w	r6, r4, #25
 8007f38:	e7f5      	b.n	8007f26 <_printf_i+0x22e>
 8007f3a:	bf00      	nop
 8007f3c:	0800a3a2 	.word	0x0800a3a2
 8007f40:	0800a3b3 	.word	0x0800a3b3

08007f44 <iprintf>:
 8007f44:	b40f      	push	{r0, r1, r2, r3}
 8007f46:	4b0a      	ldr	r3, [pc, #40]	; (8007f70 <iprintf+0x2c>)
 8007f48:	b513      	push	{r0, r1, r4, lr}
 8007f4a:	681c      	ldr	r4, [r3, #0]
 8007f4c:	b124      	cbz	r4, 8007f58 <iprintf+0x14>
 8007f4e:	69a3      	ldr	r3, [r4, #24]
 8007f50:	b913      	cbnz	r3, 8007f58 <iprintf+0x14>
 8007f52:	4620      	mov	r0, r4
 8007f54:	f001 f8f0 	bl	8009138 <__sinit>
 8007f58:	ab05      	add	r3, sp, #20
 8007f5a:	9a04      	ldr	r2, [sp, #16]
 8007f5c:	68a1      	ldr	r1, [r4, #8]
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	4620      	mov	r0, r4
 8007f62:	f001 fe9f 	bl	8009ca4 <_vfiprintf_r>
 8007f66:	b002      	add	sp, #8
 8007f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f6c:	b004      	add	sp, #16
 8007f6e:	4770      	bx	lr
 8007f70:	200000cc 	.word	0x200000cc

08007f74 <putchar>:
 8007f74:	4b09      	ldr	r3, [pc, #36]	; (8007f9c <putchar+0x28>)
 8007f76:	b513      	push	{r0, r1, r4, lr}
 8007f78:	681c      	ldr	r4, [r3, #0]
 8007f7a:	4601      	mov	r1, r0
 8007f7c:	b134      	cbz	r4, 8007f8c <putchar+0x18>
 8007f7e:	69a3      	ldr	r3, [r4, #24]
 8007f80:	b923      	cbnz	r3, 8007f8c <putchar+0x18>
 8007f82:	9001      	str	r0, [sp, #4]
 8007f84:	4620      	mov	r0, r4
 8007f86:	f001 f8d7 	bl	8009138 <__sinit>
 8007f8a:	9901      	ldr	r1, [sp, #4]
 8007f8c:	68a2      	ldr	r2, [r4, #8]
 8007f8e:	4620      	mov	r0, r4
 8007f90:	b002      	add	sp, #8
 8007f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f96:	f001 bfb5 	b.w	8009f04 <_putc_r>
 8007f9a:	bf00      	nop
 8007f9c:	200000cc 	.word	0x200000cc

08007fa0 <_puts_r>:
 8007fa0:	b570      	push	{r4, r5, r6, lr}
 8007fa2:	460e      	mov	r6, r1
 8007fa4:	4605      	mov	r5, r0
 8007fa6:	b118      	cbz	r0, 8007fb0 <_puts_r+0x10>
 8007fa8:	6983      	ldr	r3, [r0, #24]
 8007faa:	b90b      	cbnz	r3, 8007fb0 <_puts_r+0x10>
 8007fac:	f001 f8c4 	bl	8009138 <__sinit>
 8007fb0:	69ab      	ldr	r3, [r5, #24]
 8007fb2:	68ac      	ldr	r4, [r5, #8]
 8007fb4:	b913      	cbnz	r3, 8007fbc <_puts_r+0x1c>
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f001 f8be 	bl	8009138 <__sinit>
 8007fbc:	4b2c      	ldr	r3, [pc, #176]	; (8008070 <_puts_r+0xd0>)
 8007fbe:	429c      	cmp	r4, r3
 8007fc0:	d120      	bne.n	8008004 <_puts_r+0x64>
 8007fc2:	686c      	ldr	r4, [r5, #4]
 8007fc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fc6:	07db      	lsls	r3, r3, #31
 8007fc8:	d405      	bmi.n	8007fd6 <_puts_r+0x36>
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	0598      	lsls	r0, r3, #22
 8007fce:	d402      	bmi.n	8007fd6 <_puts_r+0x36>
 8007fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fd2:	f001 f954 	bl	800927e <__retarget_lock_acquire_recursive>
 8007fd6:	89a3      	ldrh	r3, [r4, #12]
 8007fd8:	0719      	lsls	r1, r3, #28
 8007fda:	d51d      	bpl.n	8008018 <_puts_r+0x78>
 8007fdc:	6923      	ldr	r3, [r4, #16]
 8007fde:	b1db      	cbz	r3, 8008018 <_puts_r+0x78>
 8007fe0:	3e01      	subs	r6, #1
 8007fe2:	68a3      	ldr	r3, [r4, #8]
 8007fe4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	60a3      	str	r3, [r4, #8]
 8007fec:	bb39      	cbnz	r1, 800803e <_puts_r+0x9e>
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	da38      	bge.n	8008064 <_puts_r+0xc4>
 8007ff2:	4622      	mov	r2, r4
 8007ff4:	210a      	movs	r1, #10
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f000 f848 	bl	800808c <__swbuf_r>
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	d011      	beq.n	8008024 <_puts_r+0x84>
 8008000:	250a      	movs	r5, #10
 8008002:	e011      	b.n	8008028 <_puts_r+0x88>
 8008004:	4b1b      	ldr	r3, [pc, #108]	; (8008074 <_puts_r+0xd4>)
 8008006:	429c      	cmp	r4, r3
 8008008:	d101      	bne.n	800800e <_puts_r+0x6e>
 800800a:	68ac      	ldr	r4, [r5, #8]
 800800c:	e7da      	b.n	8007fc4 <_puts_r+0x24>
 800800e:	4b1a      	ldr	r3, [pc, #104]	; (8008078 <_puts_r+0xd8>)
 8008010:	429c      	cmp	r4, r3
 8008012:	bf08      	it	eq
 8008014:	68ec      	ldreq	r4, [r5, #12]
 8008016:	e7d5      	b.n	8007fc4 <_puts_r+0x24>
 8008018:	4621      	mov	r1, r4
 800801a:	4628      	mov	r0, r5
 800801c:	f000 f888 	bl	8008130 <__swsetup_r>
 8008020:	2800      	cmp	r0, #0
 8008022:	d0dd      	beq.n	8007fe0 <_puts_r+0x40>
 8008024:	f04f 35ff 	mov.w	r5, #4294967295
 8008028:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800802a:	07da      	lsls	r2, r3, #31
 800802c:	d405      	bmi.n	800803a <_puts_r+0x9a>
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	059b      	lsls	r3, r3, #22
 8008032:	d402      	bmi.n	800803a <_puts_r+0x9a>
 8008034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008036:	f001 f923 	bl	8009280 <__retarget_lock_release_recursive>
 800803a:	4628      	mov	r0, r5
 800803c:	bd70      	pop	{r4, r5, r6, pc}
 800803e:	2b00      	cmp	r3, #0
 8008040:	da04      	bge.n	800804c <_puts_r+0xac>
 8008042:	69a2      	ldr	r2, [r4, #24]
 8008044:	429a      	cmp	r2, r3
 8008046:	dc06      	bgt.n	8008056 <_puts_r+0xb6>
 8008048:	290a      	cmp	r1, #10
 800804a:	d004      	beq.n	8008056 <_puts_r+0xb6>
 800804c:	6823      	ldr	r3, [r4, #0]
 800804e:	1c5a      	adds	r2, r3, #1
 8008050:	6022      	str	r2, [r4, #0]
 8008052:	7019      	strb	r1, [r3, #0]
 8008054:	e7c5      	b.n	8007fe2 <_puts_r+0x42>
 8008056:	4622      	mov	r2, r4
 8008058:	4628      	mov	r0, r5
 800805a:	f000 f817 	bl	800808c <__swbuf_r>
 800805e:	3001      	adds	r0, #1
 8008060:	d1bf      	bne.n	8007fe2 <_puts_r+0x42>
 8008062:	e7df      	b.n	8008024 <_puts_r+0x84>
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	250a      	movs	r5, #10
 8008068:	1c5a      	adds	r2, r3, #1
 800806a:	6022      	str	r2, [r4, #0]
 800806c:	701d      	strb	r5, [r3, #0]
 800806e:	e7db      	b.n	8008028 <_puts_r+0x88>
 8008070:	0800a474 	.word	0x0800a474
 8008074:	0800a494 	.word	0x0800a494
 8008078:	0800a454 	.word	0x0800a454

0800807c <puts>:
 800807c:	4b02      	ldr	r3, [pc, #8]	; (8008088 <puts+0xc>)
 800807e:	4601      	mov	r1, r0
 8008080:	6818      	ldr	r0, [r3, #0]
 8008082:	f7ff bf8d 	b.w	8007fa0 <_puts_r>
 8008086:	bf00      	nop
 8008088:	200000cc 	.word	0x200000cc

0800808c <__swbuf_r>:
 800808c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808e:	460e      	mov	r6, r1
 8008090:	4614      	mov	r4, r2
 8008092:	4605      	mov	r5, r0
 8008094:	b118      	cbz	r0, 800809e <__swbuf_r+0x12>
 8008096:	6983      	ldr	r3, [r0, #24]
 8008098:	b90b      	cbnz	r3, 800809e <__swbuf_r+0x12>
 800809a:	f001 f84d 	bl	8009138 <__sinit>
 800809e:	4b21      	ldr	r3, [pc, #132]	; (8008124 <__swbuf_r+0x98>)
 80080a0:	429c      	cmp	r4, r3
 80080a2:	d12b      	bne.n	80080fc <__swbuf_r+0x70>
 80080a4:	686c      	ldr	r4, [r5, #4]
 80080a6:	69a3      	ldr	r3, [r4, #24]
 80080a8:	60a3      	str	r3, [r4, #8]
 80080aa:	89a3      	ldrh	r3, [r4, #12]
 80080ac:	071a      	lsls	r2, r3, #28
 80080ae:	d52f      	bpl.n	8008110 <__swbuf_r+0x84>
 80080b0:	6923      	ldr	r3, [r4, #16]
 80080b2:	b36b      	cbz	r3, 8008110 <__swbuf_r+0x84>
 80080b4:	6923      	ldr	r3, [r4, #16]
 80080b6:	6820      	ldr	r0, [r4, #0]
 80080b8:	1ac0      	subs	r0, r0, r3
 80080ba:	6963      	ldr	r3, [r4, #20]
 80080bc:	b2f6      	uxtb	r6, r6
 80080be:	4283      	cmp	r3, r0
 80080c0:	4637      	mov	r7, r6
 80080c2:	dc04      	bgt.n	80080ce <__swbuf_r+0x42>
 80080c4:	4621      	mov	r1, r4
 80080c6:	4628      	mov	r0, r5
 80080c8:	f000 ffa2 	bl	8009010 <_fflush_r>
 80080cc:	bb30      	cbnz	r0, 800811c <__swbuf_r+0x90>
 80080ce:	68a3      	ldr	r3, [r4, #8]
 80080d0:	3b01      	subs	r3, #1
 80080d2:	60a3      	str	r3, [r4, #8]
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	1c5a      	adds	r2, r3, #1
 80080d8:	6022      	str	r2, [r4, #0]
 80080da:	701e      	strb	r6, [r3, #0]
 80080dc:	6963      	ldr	r3, [r4, #20]
 80080de:	3001      	adds	r0, #1
 80080e0:	4283      	cmp	r3, r0
 80080e2:	d004      	beq.n	80080ee <__swbuf_r+0x62>
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	07db      	lsls	r3, r3, #31
 80080e8:	d506      	bpl.n	80080f8 <__swbuf_r+0x6c>
 80080ea:	2e0a      	cmp	r6, #10
 80080ec:	d104      	bne.n	80080f8 <__swbuf_r+0x6c>
 80080ee:	4621      	mov	r1, r4
 80080f0:	4628      	mov	r0, r5
 80080f2:	f000 ff8d 	bl	8009010 <_fflush_r>
 80080f6:	b988      	cbnz	r0, 800811c <__swbuf_r+0x90>
 80080f8:	4638      	mov	r0, r7
 80080fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080fc:	4b0a      	ldr	r3, [pc, #40]	; (8008128 <__swbuf_r+0x9c>)
 80080fe:	429c      	cmp	r4, r3
 8008100:	d101      	bne.n	8008106 <__swbuf_r+0x7a>
 8008102:	68ac      	ldr	r4, [r5, #8]
 8008104:	e7cf      	b.n	80080a6 <__swbuf_r+0x1a>
 8008106:	4b09      	ldr	r3, [pc, #36]	; (800812c <__swbuf_r+0xa0>)
 8008108:	429c      	cmp	r4, r3
 800810a:	bf08      	it	eq
 800810c:	68ec      	ldreq	r4, [r5, #12]
 800810e:	e7ca      	b.n	80080a6 <__swbuf_r+0x1a>
 8008110:	4621      	mov	r1, r4
 8008112:	4628      	mov	r0, r5
 8008114:	f000 f80c 	bl	8008130 <__swsetup_r>
 8008118:	2800      	cmp	r0, #0
 800811a:	d0cb      	beq.n	80080b4 <__swbuf_r+0x28>
 800811c:	f04f 37ff 	mov.w	r7, #4294967295
 8008120:	e7ea      	b.n	80080f8 <__swbuf_r+0x6c>
 8008122:	bf00      	nop
 8008124:	0800a474 	.word	0x0800a474
 8008128:	0800a494 	.word	0x0800a494
 800812c:	0800a454 	.word	0x0800a454

08008130 <__swsetup_r>:
 8008130:	4b32      	ldr	r3, [pc, #200]	; (80081fc <__swsetup_r+0xcc>)
 8008132:	b570      	push	{r4, r5, r6, lr}
 8008134:	681d      	ldr	r5, [r3, #0]
 8008136:	4606      	mov	r6, r0
 8008138:	460c      	mov	r4, r1
 800813a:	b125      	cbz	r5, 8008146 <__swsetup_r+0x16>
 800813c:	69ab      	ldr	r3, [r5, #24]
 800813e:	b913      	cbnz	r3, 8008146 <__swsetup_r+0x16>
 8008140:	4628      	mov	r0, r5
 8008142:	f000 fff9 	bl	8009138 <__sinit>
 8008146:	4b2e      	ldr	r3, [pc, #184]	; (8008200 <__swsetup_r+0xd0>)
 8008148:	429c      	cmp	r4, r3
 800814a:	d10f      	bne.n	800816c <__swsetup_r+0x3c>
 800814c:	686c      	ldr	r4, [r5, #4]
 800814e:	89a3      	ldrh	r3, [r4, #12]
 8008150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008154:	0719      	lsls	r1, r3, #28
 8008156:	d42c      	bmi.n	80081b2 <__swsetup_r+0x82>
 8008158:	06dd      	lsls	r5, r3, #27
 800815a:	d411      	bmi.n	8008180 <__swsetup_r+0x50>
 800815c:	2309      	movs	r3, #9
 800815e:	6033      	str	r3, [r6, #0]
 8008160:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008164:	81a3      	strh	r3, [r4, #12]
 8008166:	f04f 30ff 	mov.w	r0, #4294967295
 800816a:	e03e      	b.n	80081ea <__swsetup_r+0xba>
 800816c:	4b25      	ldr	r3, [pc, #148]	; (8008204 <__swsetup_r+0xd4>)
 800816e:	429c      	cmp	r4, r3
 8008170:	d101      	bne.n	8008176 <__swsetup_r+0x46>
 8008172:	68ac      	ldr	r4, [r5, #8]
 8008174:	e7eb      	b.n	800814e <__swsetup_r+0x1e>
 8008176:	4b24      	ldr	r3, [pc, #144]	; (8008208 <__swsetup_r+0xd8>)
 8008178:	429c      	cmp	r4, r3
 800817a:	bf08      	it	eq
 800817c:	68ec      	ldreq	r4, [r5, #12]
 800817e:	e7e6      	b.n	800814e <__swsetup_r+0x1e>
 8008180:	0758      	lsls	r0, r3, #29
 8008182:	d512      	bpl.n	80081aa <__swsetup_r+0x7a>
 8008184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008186:	b141      	cbz	r1, 800819a <__swsetup_r+0x6a>
 8008188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800818c:	4299      	cmp	r1, r3
 800818e:	d002      	beq.n	8008196 <__swsetup_r+0x66>
 8008190:	4630      	mov	r0, r6
 8008192:	f001 fc7d 	bl	8009a90 <_free_r>
 8008196:	2300      	movs	r3, #0
 8008198:	6363      	str	r3, [r4, #52]	; 0x34
 800819a:	89a3      	ldrh	r3, [r4, #12]
 800819c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081a0:	81a3      	strh	r3, [r4, #12]
 80081a2:	2300      	movs	r3, #0
 80081a4:	6063      	str	r3, [r4, #4]
 80081a6:	6923      	ldr	r3, [r4, #16]
 80081a8:	6023      	str	r3, [r4, #0]
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	f043 0308 	orr.w	r3, r3, #8
 80081b0:	81a3      	strh	r3, [r4, #12]
 80081b2:	6923      	ldr	r3, [r4, #16]
 80081b4:	b94b      	cbnz	r3, 80081ca <__swsetup_r+0x9a>
 80081b6:	89a3      	ldrh	r3, [r4, #12]
 80081b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081c0:	d003      	beq.n	80081ca <__swsetup_r+0x9a>
 80081c2:	4621      	mov	r1, r4
 80081c4:	4630      	mov	r0, r6
 80081c6:	f001 f881 	bl	80092cc <__smakebuf_r>
 80081ca:	89a0      	ldrh	r0, [r4, #12]
 80081cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081d0:	f010 0301 	ands.w	r3, r0, #1
 80081d4:	d00a      	beq.n	80081ec <__swsetup_r+0xbc>
 80081d6:	2300      	movs	r3, #0
 80081d8:	60a3      	str	r3, [r4, #8]
 80081da:	6963      	ldr	r3, [r4, #20]
 80081dc:	425b      	negs	r3, r3
 80081de:	61a3      	str	r3, [r4, #24]
 80081e0:	6923      	ldr	r3, [r4, #16]
 80081e2:	b943      	cbnz	r3, 80081f6 <__swsetup_r+0xc6>
 80081e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081e8:	d1ba      	bne.n	8008160 <__swsetup_r+0x30>
 80081ea:	bd70      	pop	{r4, r5, r6, pc}
 80081ec:	0781      	lsls	r1, r0, #30
 80081ee:	bf58      	it	pl
 80081f0:	6963      	ldrpl	r3, [r4, #20]
 80081f2:	60a3      	str	r3, [r4, #8]
 80081f4:	e7f4      	b.n	80081e0 <__swsetup_r+0xb0>
 80081f6:	2000      	movs	r0, #0
 80081f8:	e7f7      	b.n	80081ea <__swsetup_r+0xba>
 80081fa:	bf00      	nop
 80081fc:	200000cc 	.word	0x200000cc
 8008200:	0800a474 	.word	0x0800a474
 8008204:	0800a494 	.word	0x0800a494
 8008208:	0800a454 	.word	0x0800a454

0800820c <quorem>:
 800820c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008210:	6903      	ldr	r3, [r0, #16]
 8008212:	690c      	ldr	r4, [r1, #16]
 8008214:	42a3      	cmp	r3, r4
 8008216:	4607      	mov	r7, r0
 8008218:	f2c0 8081 	blt.w	800831e <quorem+0x112>
 800821c:	3c01      	subs	r4, #1
 800821e:	f101 0814 	add.w	r8, r1, #20
 8008222:	f100 0514 	add.w	r5, r0, #20
 8008226:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800822a:	9301      	str	r3, [sp, #4]
 800822c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008230:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008234:	3301      	adds	r3, #1
 8008236:	429a      	cmp	r2, r3
 8008238:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800823c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008240:	fbb2 f6f3 	udiv	r6, r2, r3
 8008244:	d331      	bcc.n	80082aa <quorem+0x9e>
 8008246:	f04f 0e00 	mov.w	lr, #0
 800824a:	4640      	mov	r0, r8
 800824c:	46ac      	mov	ip, r5
 800824e:	46f2      	mov	sl, lr
 8008250:	f850 2b04 	ldr.w	r2, [r0], #4
 8008254:	b293      	uxth	r3, r2
 8008256:	fb06 e303 	mla	r3, r6, r3, lr
 800825a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800825e:	b29b      	uxth	r3, r3
 8008260:	ebaa 0303 	sub.w	r3, sl, r3
 8008264:	f8dc a000 	ldr.w	sl, [ip]
 8008268:	0c12      	lsrs	r2, r2, #16
 800826a:	fa13 f38a 	uxtah	r3, r3, sl
 800826e:	fb06 e202 	mla	r2, r6, r2, lr
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	9b00      	ldr	r3, [sp, #0]
 8008276:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800827a:	b292      	uxth	r2, r2
 800827c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008280:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008284:	f8bd 3000 	ldrh.w	r3, [sp]
 8008288:	4581      	cmp	r9, r0
 800828a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800828e:	f84c 3b04 	str.w	r3, [ip], #4
 8008292:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008296:	d2db      	bcs.n	8008250 <quorem+0x44>
 8008298:	f855 300b 	ldr.w	r3, [r5, fp]
 800829c:	b92b      	cbnz	r3, 80082aa <quorem+0x9e>
 800829e:	9b01      	ldr	r3, [sp, #4]
 80082a0:	3b04      	subs	r3, #4
 80082a2:	429d      	cmp	r5, r3
 80082a4:	461a      	mov	r2, r3
 80082a6:	d32e      	bcc.n	8008306 <quorem+0xfa>
 80082a8:	613c      	str	r4, [r7, #16]
 80082aa:	4638      	mov	r0, r7
 80082ac:	f001 fad8 	bl	8009860 <__mcmp>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	db24      	blt.n	80082fe <quorem+0xf2>
 80082b4:	3601      	adds	r6, #1
 80082b6:	4628      	mov	r0, r5
 80082b8:	f04f 0c00 	mov.w	ip, #0
 80082bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80082c0:	f8d0 e000 	ldr.w	lr, [r0]
 80082c4:	b293      	uxth	r3, r2
 80082c6:	ebac 0303 	sub.w	r3, ip, r3
 80082ca:	0c12      	lsrs	r2, r2, #16
 80082cc:	fa13 f38e 	uxtah	r3, r3, lr
 80082d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80082d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082d8:	b29b      	uxth	r3, r3
 80082da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082de:	45c1      	cmp	r9, r8
 80082e0:	f840 3b04 	str.w	r3, [r0], #4
 80082e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80082e8:	d2e8      	bcs.n	80082bc <quorem+0xb0>
 80082ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082f2:	b922      	cbnz	r2, 80082fe <quorem+0xf2>
 80082f4:	3b04      	subs	r3, #4
 80082f6:	429d      	cmp	r5, r3
 80082f8:	461a      	mov	r2, r3
 80082fa:	d30a      	bcc.n	8008312 <quorem+0x106>
 80082fc:	613c      	str	r4, [r7, #16]
 80082fe:	4630      	mov	r0, r6
 8008300:	b003      	add	sp, #12
 8008302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008306:	6812      	ldr	r2, [r2, #0]
 8008308:	3b04      	subs	r3, #4
 800830a:	2a00      	cmp	r2, #0
 800830c:	d1cc      	bne.n	80082a8 <quorem+0x9c>
 800830e:	3c01      	subs	r4, #1
 8008310:	e7c7      	b.n	80082a2 <quorem+0x96>
 8008312:	6812      	ldr	r2, [r2, #0]
 8008314:	3b04      	subs	r3, #4
 8008316:	2a00      	cmp	r2, #0
 8008318:	d1f0      	bne.n	80082fc <quorem+0xf0>
 800831a:	3c01      	subs	r4, #1
 800831c:	e7eb      	b.n	80082f6 <quorem+0xea>
 800831e:	2000      	movs	r0, #0
 8008320:	e7ee      	b.n	8008300 <quorem+0xf4>
 8008322:	0000      	movs	r0, r0
 8008324:	0000      	movs	r0, r0
	...

08008328 <_dtoa_r>:
 8008328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832c:	ed2d 8b04 	vpush	{d8-d9}
 8008330:	ec57 6b10 	vmov	r6, r7, d0
 8008334:	b093      	sub	sp, #76	; 0x4c
 8008336:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008338:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800833c:	9106      	str	r1, [sp, #24]
 800833e:	ee10 aa10 	vmov	sl, s0
 8008342:	4604      	mov	r4, r0
 8008344:	9209      	str	r2, [sp, #36]	; 0x24
 8008346:	930c      	str	r3, [sp, #48]	; 0x30
 8008348:	46bb      	mov	fp, r7
 800834a:	b975      	cbnz	r5, 800836a <_dtoa_r+0x42>
 800834c:	2010      	movs	r0, #16
 800834e:	f000 fffd 	bl	800934c <malloc>
 8008352:	4602      	mov	r2, r0
 8008354:	6260      	str	r0, [r4, #36]	; 0x24
 8008356:	b920      	cbnz	r0, 8008362 <_dtoa_r+0x3a>
 8008358:	4ba7      	ldr	r3, [pc, #668]	; (80085f8 <_dtoa_r+0x2d0>)
 800835a:	21ea      	movs	r1, #234	; 0xea
 800835c:	48a7      	ldr	r0, [pc, #668]	; (80085fc <_dtoa_r+0x2d4>)
 800835e:	f001 fe7f 	bl	800a060 <__assert_func>
 8008362:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008366:	6005      	str	r5, [r0, #0]
 8008368:	60c5      	str	r5, [r0, #12]
 800836a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800836c:	6819      	ldr	r1, [r3, #0]
 800836e:	b151      	cbz	r1, 8008386 <_dtoa_r+0x5e>
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	604a      	str	r2, [r1, #4]
 8008374:	2301      	movs	r3, #1
 8008376:	4093      	lsls	r3, r2
 8008378:	608b      	str	r3, [r1, #8]
 800837a:	4620      	mov	r0, r4
 800837c:	f001 f82e 	bl	80093dc <_Bfree>
 8008380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	1e3b      	subs	r3, r7, #0
 8008388:	bfaa      	itet	ge
 800838a:	2300      	movge	r3, #0
 800838c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008390:	f8c8 3000 	strge.w	r3, [r8]
 8008394:	4b9a      	ldr	r3, [pc, #616]	; (8008600 <_dtoa_r+0x2d8>)
 8008396:	bfbc      	itt	lt
 8008398:	2201      	movlt	r2, #1
 800839a:	f8c8 2000 	strlt.w	r2, [r8]
 800839e:	ea33 030b 	bics.w	r3, r3, fp
 80083a2:	d11b      	bne.n	80083dc <_dtoa_r+0xb4>
 80083a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083b0:	4333      	orrs	r3, r6
 80083b2:	f000 8592 	beq.w	8008eda <_dtoa_r+0xbb2>
 80083b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083b8:	b963      	cbnz	r3, 80083d4 <_dtoa_r+0xac>
 80083ba:	4b92      	ldr	r3, [pc, #584]	; (8008604 <_dtoa_r+0x2dc>)
 80083bc:	e022      	b.n	8008404 <_dtoa_r+0xdc>
 80083be:	4b92      	ldr	r3, [pc, #584]	; (8008608 <_dtoa_r+0x2e0>)
 80083c0:	9301      	str	r3, [sp, #4]
 80083c2:	3308      	adds	r3, #8
 80083c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80083c6:	6013      	str	r3, [r2, #0]
 80083c8:	9801      	ldr	r0, [sp, #4]
 80083ca:	b013      	add	sp, #76	; 0x4c
 80083cc:	ecbd 8b04 	vpop	{d8-d9}
 80083d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d4:	4b8b      	ldr	r3, [pc, #556]	; (8008604 <_dtoa_r+0x2dc>)
 80083d6:	9301      	str	r3, [sp, #4]
 80083d8:	3303      	adds	r3, #3
 80083da:	e7f3      	b.n	80083c4 <_dtoa_r+0x9c>
 80083dc:	2200      	movs	r2, #0
 80083de:	2300      	movs	r3, #0
 80083e0:	4650      	mov	r0, sl
 80083e2:	4659      	mov	r1, fp
 80083e4:	f7f8 fb88 	bl	8000af8 <__aeabi_dcmpeq>
 80083e8:	ec4b ab19 	vmov	d9, sl, fp
 80083ec:	4680      	mov	r8, r0
 80083ee:	b158      	cbz	r0, 8008408 <_dtoa_r+0xe0>
 80083f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083f2:	2301      	movs	r3, #1
 80083f4:	6013      	str	r3, [r2, #0]
 80083f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 856b 	beq.w	8008ed4 <_dtoa_r+0xbac>
 80083fe:	4883      	ldr	r0, [pc, #524]	; (800860c <_dtoa_r+0x2e4>)
 8008400:	6018      	str	r0, [r3, #0]
 8008402:	1e43      	subs	r3, r0, #1
 8008404:	9301      	str	r3, [sp, #4]
 8008406:	e7df      	b.n	80083c8 <_dtoa_r+0xa0>
 8008408:	ec4b ab10 	vmov	d0, sl, fp
 800840c:	aa10      	add	r2, sp, #64	; 0x40
 800840e:	a911      	add	r1, sp, #68	; 0x44
 8008410:	4620      	mov	r0, r4
 8008412:	f001 facb 	bl	80099ac <__d2b>
 8008416:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800841a:	ee08 0a10 	vmov	s16, r0
 800841e:	2d00      	cmp	r5, #0
 8008420:	f000 8084 	beq.w	800852c <_dtoa_r+0x204>
 8008424:	ee19 3a90 	vmov	r3, s19
 8008428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800842c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008430:	4656      	mov	r6, sl
 8008432:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008436:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800843a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800843e:	4b74      	ldr	r3, [pc, #464]	; (8008610 <_dtoa_r+0x2e8>)
 8008440:	2200      	movs	r2, #0
 8008442:	4630      	mov	r0, r6
 8008444:	4639      	mov	r1, r7
 8008446:	f7f7 ff37 	bl	80002b8 <__aeabi_dsub>
 800844a:	a365      	add	r3, pc, #404	; (adr r3, 80085e0 <_dtoa_r+0x2b8>)
 800844c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008450:	f7f8 f8ea 	bl	8000628 <__aeabi_dmul>
 8008454:	a364      	add	r3, pc, #400	; (adr r3, 80085e8 <_dtoa_r+0x2c0>)
 8008456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845a:	f7f7 ff2f 	bl	80002bc <__adddf3>
 800845e:	4606      	mov	r6, r0
 8008460:	4628      	mov	r0, r5
 8008462:	460f      	mov	r7, r1
 8008464:	f7f8 f876 	bl	8000554 <__aeabi_i2d>
 8008468:	a361      	add	r3, pc, #388	; (adr r3, 80085f0 <_dtoa_r+0x2c8>)
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	f7f8 f8db 	bl	8000628 <__aeabi_dmul>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	4630      	mov	r0, r6
 8008478:	4639      	mov	r1, r7
 800847a:	f7f7 ff1f 	bl	80002bc <__adddf3>
 800847e:	4606      	mov	r6, r0
 8008480:	460f      	mov	r7, r1
 8008482:	f7f8 fb81 	bl	8000b88 <__aeabi_d2iz>
 8008486:	2200      	movs	r2, #0
 8008488:	9000      	str	r0, [sp, #0]
 800848a:	2300      	movs	r3, #0
 800848c:	4630      	mov	r0, r6
 800848e:	4639      	mov	r1, r7
 8008490:	f7f8 fb3c 	bl	8000b0c <__aeabi_dcmplt>
 8008494:	b150      	cbz	r0, 80084ac <_dtoa_r+0x184>
 8008496:	9800      	ldr	r0, [sp, #0]
 8008498:	f7f8 f85c 	bl	8000554 <__aeabi_i2d>
 800849c:	4632      	mov	r2, r6
 800849e:	463b      	mov	r3, r7
 80084a0:	f7f8 fb2a 	bl	8000af8 <__aeabi_dcmpeq>
 80084a4:	b910      	cbnz	r0, 80084ac <_dtoa_r+0x184>
 80084a6:	9b00      	ldr	r3, [sp, #0]
 80084a8:	3b01      	subs	r3, #1
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	9b00      	ldr	r3, [sp, #0]
 80084ae:	2b16      	cmp	r3, #22
 80084b0:	d85a      	bhi.n	8008568 <_dtoa_r+0x240>
 80084b2:	9a00      	ldr	r2, [sp, #0]
 80084b4:	4b57      	ldr	r3, [pc, #348]	; (8008614 <_dtoa_r+0x2ec>)
 80084b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	ec51 0b19 	vmov	r0, r1, d9
 80084c2:	f7f8 fb23 	bl	8000b0c <__aeabi_dcmplt>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	d050      	beq.n	800856c <_dtoa_r+0x244>
 80084ca:	9b00      	ldr	r3, [sp, #0]
 80084cc:	3b01      	subs	r3, #1
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	2300      	movs	r3, #0
 80084d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80084d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084d6:	1b5d      	subs	r5, r3, r5
 80084d8:	1e6b      	subs	r3, r5, #1
 80084da:	9305      	str	r3, [sp, #20]
 80084dc:	bf45      	ittet	mi
 80084de:	f1c5 0301 	rsbmi	r3, r5, #1
 80084e2:	9304      	strmi	r3, [sp, #16]
 80084e4:	2300      	movpl	r3, #0
 80084e6:	2300      	movmi	r3, #0
 80084e8:	bf4c      	ite	mi
 80084ea:	9305      	strmi	r3, [sp, #20]
 80084ec:	9304      	strpl	r3, [sp, #16]
 80084ee:	9b00      	ldr	r3, [sp, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	db3d      	blt.n	8008570 <_dtoa_r+0x248>
 80084f4:	9b05      	ldr	r3, [sp, #20]
 80084f6:	9a00      	ldr	r2, [sp, #0]
 80084f8:	920a      	str	r2, [sp, #40]	; 0x28
 80084fa:	4413      	add	r3, r2
 80084fc:	9305      	str	r3, [sp, #20]
 80084fe:	2300      	movs	r3, #0
 8008500:	9307      	str	r3, [sp, #28]
 8008502:	9b06      	ldr	r3, [sp, #24]
 8008504:	2b09      	cmp	r3, #9
 8008506:	f200 8089 	bhi.w	800861c <_dtoa_r+0x2f4>
 800850a:	2b05      	cmp	r3, #5
 800850c:	bfc4      	itt	gt
 800850e:	3b04      	subgt	r3, #4
 8008510:	9306      	strgt	r3, [sp, #24]
 8008512:	9b06      	ldr	r3, [sp, #24]
 8008514:	f1a3 0302 	sub.w	r3, r3, #2
 8008518:	bfcc      	ite	gt
 800851a:	2500      	movgt	r5, #0
 800851c:	2501      	movle	r5, #1
 800851e:	2b03      	cmp	r3, #3
 8008520:	f200 8087 	bhi.w	8008632 <_dtoa_r+0x30a>
 8008524:	e8df f003 	tbb	[pc, r3]
 8008528:	59383a2d 	.word	0x59383a2d
 800852c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008530:	441d      	add	r5, r3
 8008532:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008536:	2b20      	cmp	r3, #32
 8008538:	bfc1      	itttt	gt
 800853a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800853e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008542:	fa0b f303 	lslgt.w	r3, fp, r3
 8008546:	fa26 f000 	lsrgt.w	r0, r6, r0
 800854a:	bfda      	itte	le
 800854c:	f1c3 0320 	rsble	r3, r3, #32
 8008550:	fa06 f003 	lslle.w	r0, r6, r3
 8008554:	4318      	orrgt	r0, r3
 8008556:	f7f7 ffed 	bl	8000534 <__aeabi_ui2d>
 800855a:	2301      	movs	r3, #1
 800855c:	4606      	mov	r6, r0
 800855e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008562:	3d01      	subs	r5, #1
 8008564:	930e      	str	r3, [sp, #56]	; 0x38
 8008566:	e76a      	b.n	800843e <_dtoa_r+0x116>
 8008568:	2301      	movs	r3, #1
 800856a:	e7b2      	b.n	80084d2 <_dtoa_r+0x1aa>
 800856c:	900b      	str	r0, [sp, #44]	; 0x2c
 800856e:	e7b1      	b.n	80084d4 <_dtoa_r+0x1ac>
 8008570:	9b04      	ldr	r3, [sp, #16]
 8008572:	9a00      	ldr	r2, [sp, #0]
 8008574:	1a9b      	subs	r3, r3, r2
 8008576:	9304      	str	r3, [sp, #16]
 8008578:	4253      	negs	r3, r2
 800857a:	9307      	str	r3, [sp, #28]
 800857c:	2300      	movs	r3, #0
 800857e:	930a      	str	r3, [sp, #40]	; 0x28
 8008580:	e7bf      	b.n	8008502 <_dtoa_r+0x1da>
 8008582:	2300      	movs	r3, #0
 8008584:	9308      	str	r3, [sp, #32]
 8008586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008588:	2b00      	cmp	r3, #0
 800858a:	dc55      	bgt.n	8008638 <_dtoa_r+0x310>
 800858c:	2301      	movs	r3, #1
 800858e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008592:	461a      	mov	r2, r3
 8008594:	9209      	str	r2, [sp, #36]	; 0x24
 8008596:	e00c      	b.n	80085b2 <_dtoa_r+0x28a>
 8008598:	2301      	movs	r3, #1
 800859a:	e7f3      	b.n	8008584 <_dtoa_r+0x25c>
 800859c:	2300      	movs	r3, #0
 800859e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085a0:	9308      	str	r3, [sp, #32]
 80085a2:	9b00      	ldr	r3, [sp, #0]
 80085a4:	4413      	add	r3, r2
 80085a6:	9302      	str	r3, [sp, #8]
 80085a8:	3301      	adds	r3, #1
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	9303      	str	r3, [sp, #12]
 80085ae:	bfb8      	it	lt
 80085b0:	2301      	movlt	r3, #1
 80085b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80085b4:	2200      	movs	r2, #0
 80085b6:	6042      	str	r2, [r0, #4]
 80085b8:	2204      	movs	r2, #4
 80085ba:	f102 0614 	add.w	r6, r2, #20
 80085be:	429e      	cmp	r6, r3
 80085c0:	6841      	ldr	r1, [r0, #4]
 80085c2:	d93d      	bls.n	8008640 <_dtoa_r+0x318>
 80085c4:	4620      	mov	r0, r4
 80085c6:	f000 fec9 	bl	800935c <_Balloc>
 80085ca:	9001      	str	r0, [sp, #4]
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d13b      	bne.n	8008648 <_dtoa_r+0x320>
 80085d0:	4b11      	ldr	r3, [pc, #68]	; (8008618 <_dtoa_r+0x2f0>)
 80085d2:	4602      	mov	r2, r0
 80085d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80085d8:	e6c0      	b.n	800835c <_dtoa_r+0x34>
 80085da:	2301      	movs	r3, #1
 80085dc:	e7df      	b.n	800859e <_dtoa_r+0x276>
 80085de:	bf00      	nop
 80085e0:	636f4361 	.word	0x636f4361
 80085e4:	3fd287a7 	.word	0x3fd287a7
 80085e8:	8b60c8b3 	.word	0x8b60c8b3
 80085ec:	3fc68a28 	.word	0x3fc68a28
 80085f0:	509f79fb 	.word	0x509f79fb
 80085f4:	3fd34413 	.word	0x3fd34413
 80085f8:	0800a3d1 	.word	0x0800a3d1
 80085fc:	0800a3e8 	.word	0x0800a3e8
 8008600:	7ff00000 	.word	0x7ff00000
 8008604:	0800a3cd 	.word	0x0800a3cd
 8008608:	0800a3c4 	.word	0x0800a3c4
 800860c:	0800a3a1 	.word	0x0800a3a1
 8008610:	3ff80000 	.word	0x3ff80000
 8008614:	0800a538 	.word	0x0800a538
 8008618:	0800a443 	.word	0x0800a443
 800861c:	2501      	movs	r5, #1
 800861e:	2300      	movs	r3, #0
 8008620:	9306      	str	r3, [sp, #24]
 8008622:	9508      	str	r5, [sp, #32]
 8008624:	f04f 33ff 	mov.w	r3, #4294967295
 8008628:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800862c:	2200      	movs	r2, #0
 800862e:	2312      	movs	r3, #18
 8008630:	e7b0      	b.n	8008594 <_dtoa_r+0x26c>
 8008632:	2301      	movs	r3, #1
 8008634:	9308      	str	r3, [sp, #32]
 8008636:	e7f5      	b.n	8008624 <_dtoa_r+0x2fc>
 8008638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800863a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800863e:	e7b8      	b.n	80085b2 <_dtoa_r+0x28a>
 8008640:	3101      	adds	r1, #1
 8008642:	6041      	str	r1, [r0, #4]
 8008644:	0052      	lsls	r2, r2, #1
 8008646:	e7b8      	b.n	80085ba <_dtoa_r+0x292>
 8008648:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800864a:	9a01      	ldr	r2, [sp, #4]
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	9b03      	ldr	r3, [sp, #12]
 8008650:	2b0e      	cmp	r3, #14
 8008652:	f200 809d 	bhi.w	8008790 <_dtoa_r+0x468>
 8008656:	2d00      	cmp	r5, #0
 8008658:	f000 809a 	beq.w	8008790 <_dtoa_r+0x468>
 800865c:	9b00      	ldr	r3, [sp, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	dd32      	ble.n	80086c8 <_dtoa_r+0x3a0>
 8008662:	4ab7      	ldr	r2, [pc, #732]	; (8008940 <_dtoa_r+0x618>)
 8008664:	f003 030f 	and.w	r3, r3, #15
 8008668:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800866c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008670:	9b00      	ldr	r3, [sp, #0]
 8008672:	05d8      	lsls	r0, r3, #23
 8008674:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008678:	d516      	bpl.n	80086a8 <_dtoa_r+0x380>
 800867a:	4bb2      	ldr	r3, [pc, #712]	; (8008944 <_dtoa_r+0x61c>)
 800867c:	ec51 0b19 	vmov	r0, r1, d9
 8008680:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008684:	f7f8 f8fa 	bl	800087c <__aeabi_ddiv>
 8008688:	f007 070f 	and.w	r7, r7, #15
 800868c:	4682      	mov	sl, r0
 800868e:	468b      	mov	fp, r1
 8008690:	2503      	movs	r5, #3
 8008692:	4eac      	ldr	r6, [pc, #688]	; (8008944 <_dtoa_r+0x61c>)
 8008694:	b957      	cbnz	r7, 80086ac <_dtoa_r+0x384>
 8008696:	4642      	mov	r2, r8
 8008698:	464b      	mov	r3, r9
 800869a:	4650      	mov	r0, sl
 800869c:	4659      	mov	r1, fp
 800869e:	f7f8 f8ed 	bl	800087c <__aeabi_ddiv>
 80086a2:	4682      	mov	sl, r0
 80086a4:	468b      	mov	fp, r1
 80086a6:	e028      	b.n	80086fa <_dtoa_r+0x3d2>
 80086a8:	2502      	movs	r5, #2
 80086aa:	e7f2      	b.n	8008692 <_dtoa_r+0x36a>
 80086ac:	07f9      	lsls	r1, r7, #31
 80086ae:	d508      	bpl.n	80086c2 <_dtoa_r+0x39a>
 80086b0:	4640      	mov	r0, r8
 80086b2:	4649      	mov	r1, r9
 80086b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086b8:	f7f7 ffb6 	bl	8000628 <__aeabi_dmul>
 80086bc:	3501      	adds	r5, #1
 80086be:	4680      	mov	r8, r0
 80086c0:	4689      	mov	r9, r1
 80086c2:	107f      	asrs	r7, r7, #1
 80086c4:	3608      	adds	r6, #8
 80086c6:	e7e5      	b.n	8008694 <_dtoa_r+0x36c>
 80086c8:	f000 809b 	beq.w	8008802 <_dtoa_r+0x4da>
 80086cc:	9b00      	ldr	r3, [sp, #0]
 80086ce:	4f9d      	ldr	r7, [pc, #628]	; (8008944 <_dtoa_r+0x61c>)
 80086d0:	425e      	negs	r6, r3
 80086d2:	4b9b      	ldr	r3, [pc, #620]	; (8008940 <_dtoa_r+0x618>)
 80086d4:	f006 020f 	and.w	r2, r6, #15
 80086d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	ec51 0b19 	vmov	r0, r1, d9
 80086e4:	f7f7 ffa0 	bl	8000628 <__aeabi_dmul>
 80086e8:	1136      	asrs	r6, r6, #4
 80086ea:	4682      	mov	sl, r0
 80086ec:	468b      	mov	fp, r1
 80086ee:	2300      	movs	r3, #0
 80086f0:	2502      	movs	r5, #2
 80086f2:	2e00      	cmp	r6, #0
 80086f4:	d17a      	bne.n	80087ec <_dtoa_r+0x4c4>
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1d3      	bne.n	80086a2 <_dtoa_r+0x37a>
 80086fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 8082 	beq.w	8008806 <_dtoa_r+0x4de>
 8008702:	4b91      	ldr	r3, [pc, #580]	; (8008948 <_dtoa_r+0x620>)
 8008704:	2200      	movs	r2, #0
 8008706:	4650      	mov	r0, sl
 8008708:	4659      	mov	r1, fp
 800870a:	f7f8 f9ff 	bl	8000b0c <__aeabi_dcmplt>
 800870e:	2800      	cmp	r0, #0
 8008710:	d079      	beq.n	8008806 <_dtoa_r+0x4de>
 8008712:	9b03      	ldr	r3, [sp, #12]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d076      	beq.n	8008806 <_dtoa_r+0x4de>
 8008718:	9b02      	ldr	r3, [sp, #8]
 800871a:	2b00      	cmp	r3, #0
 800871c:	dd36      	ble.n	800878c <_dtoa_r+0x464>
 800871e:	9b00      	ldr	r3, [sp, #0]
 8008720:	4650      	mov	r0, sl
 8008722:	4659      	mov	r1, fp
 8008724:	1e5f      	subs	r7, r3, #1
 8008726:	2200      	movs	r2, #0
 8008728:	4b88      	ldr	r3, [pc, #544]	; (800894c <_dtoa_r+0x624>)
 800872a:	f7f7 ff7d 	bl	8000628 <__aeabi_dmul>
 800872e:	9e02      	ldr	r6, [sp, #8]
 8008730:	4682      	mov	sl, r0
 8008732:	468b      	mov	fp, r1
 8008734:	3501      	adds	r5, #1
 8008736:	4628      	mov	r0, r5
 8008738:	f7f7 ff0c 	bl	8000554 <__aeabi_i2d>
 800873c:	4652      	mov	r2, sl
 800873e:	465b      	mov	r3, fp
 8008740:	f7f7 ff72 	bl	8000628 <__aeabi_dmul>
 8008744:	4b82      	ldr	r3, [pc, #520]	; (8008950 <_dtoa_r+0x628>)
 8008746:	2200      	movs	r2, #0
 8008748:	f7f7 fdb8 	bl	80002bc <__adddf3>
 800874c:	46d0      	mov	r8, sl
 800874e:	46d9      	mov	r9, fp
 8008750:	4682      	mov	sl, r0
 8008752:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008756:	2e00      	cmp	r6, #0
 8008758:	d158      	bne.n	800880c <_dtoa_r+0x4e4>
 800875a:	4b7e      	ldr	r3, [pc, #504]	; (8008954 <_dtoa_r+0x62c>)
 800875c:	2200      	movs	r2, #0
 800875e:	4640      	mov	r0, r8
 8008760:	4649      	mov	r1, r9
 8008762:	f7f7 fda9 	bl	80002b8 <__aeabi_dsub>
 8008766:	4652      	mov	r2, sl
 8008768:	465b      	mov	r3, fp
 800876a:	4680      	mov	r8, r0
 800876c:	4689      	mov	r9, r1
 800876e:	f7f8 f9eb 	bl	8000b48 <__aeabi_dcmpgt>
 8008772:	2800      	cmp	r0, #0
 8008774:	f040 8295 	bne.w	8008ca2 <_dtoa_r+0x97a>
 8008778:	4652      	mov	r2, sl
 800877a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800877e:	4640      	mov	r0, r8
 8008780:	4649      	mov	r1, r9
 8008782:	f7f8 f9c3 	bl	8000b0c <__aeabi_dcmplt>
 8008786:	2800      	cmp	r0, #0
 8008788:	f040 8289 	bne.w	8008c9e <_dtoa_r+0x976>
 800878c:	ec5b ab19 	vmov	sl, fp, d9
 8008790:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008792:	2b00      	cmp	r3, #0
 8008794:	f2c0 8148 	blt.w	8008a28 <_dtoa_r+0x700>
 8008798:	9a00      	ldr	r2, [sp, #0]
 800879a:	2a0e      	cmp	r2, #14
 800879c:	f300 8144 	bgt.w	8008a28 <_dtoa_r+0x700>
 80087a0:	4b67      	ldr	r3, [pc, #412]	; (8008940 <_dtoa_r+0x618>)
 80087a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f280 80d5 	bge.w	800895c <_dtoa_r+0x634>
 80087b2:	9b03      	ldr	r3, [sp, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f300 80d1 	bgt.w	800895c <_dtoa_r+0x634>
 80087ba:	f040 826f 	bne.w	8008c9c <_dtoa_r+0x974>
 80087be:	4b65      	ldr	r3, [pc, #404]	; (8008954 <_dtoa_r+0x62c>)
 80087c0:	2200      	movs	r2, #0
 80087c2:	4640      	mov	r0, r8
 80087c4:	4649      	mov	r1, r9
 80087c6:	f7f7 ff2f 	bl	8000628 <__aeabi_dmul>
 80087ca:	4652      	mov	r2, sl
 80087cc:	465b      	mov	r3, fp
 80087ce:	f7f8 f9b1 	bl	8000b34 <__aeabi_dcmpge>
 80087d2:	9e03      	ldr	r6, [sp, #12]
 80087d4:	4637      	mov	r7, r6
 80087d6:	2800      	cmp	r0, #0
 80087d8:	f040 8245 	bne.w	8008c66 <_dtoa_r+0x93e>
 80087dc:	9d01      	ldr	r5, [sp, #4]
 80087de:	2331      	movs	r3, #49	; 0x31
 80087e0:	f805 3b01 	strb.w	r3, [r5], #1
 80087e4:	9b00      	ldr	r3, [sp, #0]
 80087e6:	3301      	adds	r3, #1
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	e240      	b.n	8008c6e <_dtoa_r+0x946>
 80087ec:	07f2      	lsls	r2, r6, #31
 80087ee:	d505      	bpl.n	80087fc <_dtoa_r+0x4d4>
 80087f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087f4:	f7f7 ff18 	bl	8000628 <__aeabi_dmul>
 80087f8:	3501      	adds	r5, #1
 80087fa:	2301      	movs	r3, #1
 80087fc:	1076      	asrs	r6, r6, #1
 80087fe:	3708      	adds	r7, #8
 8008800:	e777      	b.n	80086f2 <_dtoa_r+0x3ca>
 8008802:	2502      	movs	r5, #2
 8008804:	e779      	b.n	80086fa <_dtoa_r+0x3d2>
 8008806:	9f00      	ldr	r7, [sp, #0]
 8008808:	9e03      	ldr	r6, [sp, #12]
 800880a:	e794      	b.n	8008736 <_dtoa_r+0x40e>
 800880c:	9901      	ldr	r1, [sp, #4]
 800880e:	4b4c      	ldr	r3, [pc, #304]	; (8008940 <_dtoa_r+0x618>)
 8008810:	4431      	add	r1, r6
 8008812:	910d      	str	r1, [sp, #52]	; 0x34
 8008814:	9908      	ldr	r1, [sp, #32]
 8008816:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800881a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800881e:	2900      	cmp	r1, #0
 8008820:	d043      	beq.n	80088aa <_dtoa_r+0x582>
 8008822:	494d      	ldr	r1, [pc, #308]	; (8008958 <_dtoa_r+0x630>)
 8008824:	2000      	movs	r0, #0
 8008826:	f7f8 f829 	bl	800087c <__aeabi_ddiv>
 800882a:	4652      	mov	r2, sl
 800882c:	465b      	mov	r3, fp
 800882e:	f7f7 fd43 	bl	80002b8 <__aeabi_dsub>
 8008832:	9d01      	ldr	r5, [sp, #4]
 8008834:	4682      	mov	sl, r0
 8008836:	468b      	mov	fp, r1
 8008838:	4649      	mov	r1, r9
 800883a:	4640      	mov	r0, r8
 800883c:	f7f8 f9a4 	bl	8000b88 <__aeabi_d2iz>
 8008840:	4606      	mov	r6, r0
 8008842:	f7f7 fe87 	bl	8000554 <__aeabi_i2d>
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4640      	mov	r0, r8
 800884c:	4649      	mov	r1, r9
 800884e:	f7f7 fd33 	bl	80002b8 <__aeabi_dsub>
 8008852:	3630      	adds	r6, #48	; 0x30
 8008854:	f805 6b01 	strb.w	r6, [r5], #1
 8008858:	4652      	mov	r2, sl
 800885a:	465b      	mov	r3, fp
 800885c:	4680      	mov	r8, r0
 800885e:	4689      	mov	r9, r1
 8008860:	f7f8 f954 	bl	8000b0c <__aeabi_dcmplt>
 8008864:	2800      	cmp	r0, #0
 8008866:	d163      	bne.n	8008930 <_dtoa_r+0x608>
 8008868:	4642      	mov	r2, r8
 800886a:	464b      	mov	r3, r9
 800886c:	4936      	ldr	r1, [pc, #216]	; (8008948 <_dtoa_r+0x620>)
 800886e:	2000      	movs	r0, #0
 8008870:	f7f7 fd22 	bl	80002b8 <__aeabi_dsub>
 8008874:	4652      	mov	r2, sl
 8008876:	465b      	mov	r3, fp
 8008878:	f7f8 f948 	bl	8000b0c <__aeabi_dcmplt>
 800887c:	2800      	cmp	r0, #0
 800887e:	f040 80b5 	bne.w	80089ec <_dtoa_r+0x6c4>
 8008882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008884:	429d      	cmp	r5, r3
 8008886:	d081      	beq.n	800878c <_dtoa_r+0x464>
 8008888:	4b30      	ldr	r3, [pc, #192]	; (800894c <_dtoa_r+0x624>)
 800888a:	2200      	movs	r2, #0
 800888c:	4650      	mov	r0, sl
 800888e:	4659      	mov	r1, fp
 8008890:	f7f7 feca 	bl	8000628 <__aeabi_dmul>
 8008894:	4b2d      	ldr	r3, [pc, #180]	; (800894c <_dtoa_r+0x624>)
 8008896:	4682      	mov	sl, r0
 8008898:	468b      	mov	fp, r1
 800889a:	4640      	mov	r0, r8
 800889c:	4649      	mov	r1, r9
 800889e:	2200      	movs	r2, #0
 80088a0:	f7f7 fec2 	bl	8000628 <__aeabi_dmul>
 80088a4:	4680      	mov	r8, r0
 80088a6:	4689      	mov	r9, r1
 80088a8:	e7c6      	b.n	8008838 <_dtoa_r+0x510>
 80088aa:	4650      	mov	r0, sl
 80088ac:	4659      	mov	r1, fp
 80088ae:	f7f7 febb 	bl	8000628 <__aeabi_dmul>
 80088b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088b4:	9d01      	ldr	r5, [sp, #4]
 80088b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80088b8:	4682      	mov	sl, r0
 80088ba:	468b      	mov	fp, r1
 80088bc:	4649      	mov	r1, r9
 80088be:	4640      	mov	r0, r8
 80088c0:	f7f8 f962 	bl	8000b88 <__aeabi_d2iz>
 80088c4:	4606      	mov	r6, r0
 80088c6:	f7f7 fe45 	bl	8000554 <__aeabi_i2d>
 80088ca:	3630      	adds	r6, #48	; 0x30
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	4640      	mov	r0, r8
 80088d2:	4649      	mov	r1, r9
 80088d4:	f7f7 fcf0 	bl	80002b8 <__aeabi_dsub>
 80088d8:	f805 6b01 	strb.w	r6, [r5], #1
 80088dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088de:	429d      	cmp	r5, r3
 80088e0:	4680      	mov	r8, r0
 80088e2:	4689      	mov	r9, r1
 80088e4:	f04f 0200 	mov.w	r2, #0
 80088e8:	d124      	bne.n	8008934 <_dtoa_r+0x60c>
 80088ea:	4b1b      	ldr	r3, [pc, #108]	; (8008958 <_dtoa_r+0x630>)
 80088ec:	4650      	mov	r0, sl
 80088ee:	4659      	mov	r1, fp
 80088f0:	f7f7 fce4 	bl	80002bc <__adddf3>
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	4640      	mov	r0, r8
 80088fa:	4649      	mov	r1, r9
 80088fc:	f7f8 f924 	bl	8000b48 <__aeabi_dcmpgt>
 8008900:	2800      	cmp	r0, #0
 8008902:	d173      	bne.n	80089ec <_dtoa_r+0x6c4>
 8008904:	4652      	mov	r2, sl
 8008906:	465b      	mov	r3, fp
 8008908:	4913      	ldr	r1, [pc, #76]	; (8008958 <_dtoa_r+0x630>)
 800890a:	2000      	movs	r0, #0
 800890c:	f7f7 fcd4 	bl	80002b8 <__aeabi_dsub>
 8008910:	4602      	mov	r2, r0
 8008912:	460b      	mov	r3, r1
 8008914:	4640      	mov	r0, r8
 8008916:	4649      	mov	r1, r9
 8008918:	f7f8 f8f8 	bl	8000b0c <__aeabi_dcmplt>
 800891c:	2800      	cmp	r0, #0
 800891e:	f43f af35 	beq.w	800878c <_dtoa_r+0x464>
 8008922:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008924:	1e6b      	subs	r3, r5, #1
 8008926:	930f      	str	r3, [sp, #60]	; 0x3c
 8008928:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800892c:	2b30      	cmp	r3, #48	; 0x30
 800892e:	d0f8      	beq.n	8008922 <_dtoa_r+0x5fa>
 8008930:	9700      	str	r7, [sp, #0]
 8008932:	e049      	b.n	80089c8 <_dtoa_r+0x6a0>
 8008934:	4b05      	ldr	r3, [pc, #20]	; (800894c <_dtoa_r+0x624>)
 8008936:	f7f7 fe77 	bl	8000628 <__aeabi_dmul>
 800893a:	4680      	mov	r8, r0
 800893c:	4689      	mov	r9, r1
 800893e:	e7bd      	b.n	80088bc <_dtoa_r+0x594>
 8008940:	0800a538 	.word	0x0800a538
 8008944:	0800a510 	.word	0x0800a510
 8008948:	3ff00000 	.word	0x3ff00000
 800894c:	40240000 	.word	0x40240000
 8008950:	401c0000 	.word	0x401c0000
 8008954:	40140000 	.word	0x40140000
 8008958:	3fe00000 	.word	0x3fe00000
 800895c:	9d01      	ldr	r5, [sp, #4]
 800895e:	4656      	mov	r6, sl
 8008960:	465f      	mov	r7, fp
 8008962:	4642      	mov	r2, r8
 8008964:	464b      	mov	r3, r9
 8008966:	4630      	mov	r0, r6
 8008968:	4639      	mov	r1, r7
 800896a:	f7f7 ff87 	bl	800087c <__aeabi_ddiv>
 800896e:	f7f8 f90b 	bl	8000b88 <__aeabi_d2iz>
 8008972:	4682      	mov	sl, r0
 8008974:	f7f7 fdee 	bl	8000554 <__aeabi_i2d>
 8008978:	4642      	mov	r2, r8
 800897a:	464b      	mov	r3, r9
 800897c:	f7f7 fe54 	bl	8000628 <__aeabi_dmul>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	4630      	mov	r0, r6
 8008986:	4639      	mov	r1, r7
 8008988:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800898c:	f7f7 fc94 	bl	80002b8 <__aeabi_dsub>
 8008990:	f805 6b01 	strb.w	r6, [r5], #1
 8008994:	9e01      	ldr	r6, [sp, #4]
 8008996:	9f03      	ldr	r7, [sp, #12]
 8008998:	1bae      	subs	r6, r5, r6
 800899a:	42b7      	cmp	r7, r6
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	d135      	bne.n	8008a0e <_dtoa_r+0x6e6>
 80089a2:	f7f7 fc8b 	bl	80002bc <__adddf3>
 80089a6:	4642      	mov	r2, r8
 80089a8:	464b      	mov	r3, r9
 80089aa:	4606      	mov	r6, r0
 80089ac:	460f      	mov	r7, r1
 80089ae:	f7f8 f8cb 	bl	8000b48 <__aeabi_dcmpgt>
 80089b2:	b9d0      	cbnz	r0, 80089ea <_dtoa_r+0x6c2>
 80089b4:	4642      	mov	r2, r8
 80089b6:	464b      	mov	r3, r9
 80089b8:	4630      	mov	r0, r6
 80089ba:	4639      	mov	r1, r7
 80089bc:	f7f8 f89c 	bl	8000af8 <__aeabi_dcmpeq>
 80089c0:	b110      	cbz	r0, 80089c8 <_dtoa_r+0x6a0>
 80089c2:	f01a 0f01 	tst.w	sl, #1
 80089c6:	d110      	bne.n	80089ea <_dtoa_r+0x6c2>
 80089c8:	4620      	mov	r0, r4
 80089ca:	ee18 1a10 	vmov	r1, s16
 80089ce:	f000 fd05 	bl	80093dc <_Bfree>
 80089d2:	2300      	movs	r3, #0
 80089d4:	9800      	ldr	r0, [sp, #0]
 80089d6:	702b      	strb	r3, [r5, #0]
 80089d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089da:	3001      	adds	r0, #1
 80089dc:	6018      	str	r0, [r3, #0]
 80089de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f43f acf1 	beq.w	80083c8 <_dtoa_r+0xa0>
 80089e6:	601d      	str	r5, [r3, #0]
 80089e8:	e4ee      	b.n	80083c8 <_dtoa_r+0xa0>
 80089ea:	9f00      	ldr	r7, [sp, #0]
 80089ec:	462b      	mov	r3, r5
 80089ee:	461d      	mov	r5, r3
 80089f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089f4:	2a39      	cmp	r2, #57	; 0x39
 80089f6:	d106      	bne.n	8008a06 <_dtoa_r+0x6de>
 80089f8:	9a01      	ldr	r2, [sp, #4]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d1f7      	bne.n	80089ee <_dtoa_r+0x6c6>
 80089fe:	9901      	ldr	r1, [sp, #4]
 8008a00:	2230      	movs	r2, #48	; 0x30
 8008a02:	3701      	adds	r7, #1
 8008a04:	700a      	strb	r2, [r1, #0]
 8008a06:	781a      	ldrb	r2, [r3, #0]
 8008a08:	3201      	adds	r2, #1
 8008a0a:	701a      	strb	r2, [r3, #0]
 8008a0c:	e790      	b.n	8008930 <_dtoa_r+0x608>
 8008a0e:	4ba6      	ldr	r3, [pc, #664]	; (8008ca8 <_dtoa_r+0x980>)
 8008a10:	2200      	movs	r2, #0
 8008a12:	f7f7 fe09 	bl	8000628 <__aeabi_dmul>
 8008a16:	2200      	movs	r2, #0
 8008a18:	2300      	movs	r3, #0
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	460f      	mov	r7, r1
 8008a1e:	f7f8 f86b 	bl	8000af8 <__aeabi_dcmpeq>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d09d      	beq.n	8008962 <_dtoa_r+0x63a>
 8008a26:	e7cf      	b.n	80089c8 <_dtoa_r+0x6a0>
 8008a28:	9a08      	ldr	r2, [sp, #32]
 8008a2a:	2a00      	cmp	r2, #0
 8008a2c:	f000 80d7 	beq.w	8008bde <_dtoa_r+0x8b6>
 8008a30:	9a06      	ldr	r2, [sp, #24]
 8008a32:	2a01      	cmp	r2, #1
 8008a34:	f300 80ba 	bgt.w	8008bac <_dtoa_r+0x884>
 8008a38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a3a:	2a00      	cmp	r2, #0
 8008a3c:	f000 80b2 	beq.w	8008ba4 <_dtoa_r+0x87c>
 8008a40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a44:	9e07      	ldr	r6, [sp, #28]
 8008a46:	9d04      	ldr	r5, [sp, #16]
 8008a48:	9a04      	ldr	r2, [sp, #16]
 8008a4a:	441a      	add	r2, r3
 8008a4c:	9204      	str	r2, [sp, #16]
 8008a4e:	9a05      	ldr	r2, [sp, #20]
 8008a50:	2101      	movs	r1, #1
 8008a52:	441a      	add	r2, r3
 8008a54:	4620      	mov	r0, r4
 8008a56:	9205      	str	r2, [sp, #20]
 8008a58:	f000 fd78 	bl	800954c <__i2b>
 8008a5c:	4607      	mov	r7, r0
 8008a5e:	2d00      	cmp	r5, #0
 8008a60:	dd0c      	ble.n	8008a7c <_dtoa_r+0x754>
 8008a62:	9b05      	ldr	r3, [sp, #20]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	dd09      	ble.n	8008a7c <_dtoa_r+0x754>
 8008a68:	42ab      	cmp	r3, r5
 8008a6a:	9a04      	ldr	r2, [sp, #16]
 8008a6c:	bfa8      	it	ge
 8008a6e:	462b      	movge	r3, r5
 8008a70:	1ad2      	subs	r2, r2, r3
 8008a72:	9204      	str	r2, [sp, #16]
 8008a74:	9a05      	ldr	r2, [sp, #20]
 8008a76:	1aed      	subs	r5, r5, r3
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	9305      	str	r3, [sp, #20]
 8008a7c:	9b07      	ldr	r3, [sp, #28]
 8008a7e:	b31b      	cbz	r3, 8008ac8 <_dtoa_r+0x7a0>
 8008a80:	9b08      	ldr	r3, [sp, #32]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f000 80af 	beq.w	8008be6 <_dtoa_r+0x8be>
 8008a88:	2e00      	cmp	r6, #0
 8008a8a:	dd13      	ble.n	8008ab4 <_dtoa_r+0x78c>
 8008a8c:	4639      	mov	r1, r7
 8008a8e:	4632      	mov	r2, r6
 8008a90:	4620      	mov	r0, r4
 8008a92:	f000 fe1b 	bl	80096cc <__pow5mult>
 8008a96:	ee18 2a10 	vmov	r2, s16
 8008a9a:	4601      	mov	r1, r0
 8008a9c:	4607      	mov	r7, r0
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f000 fd6a 	bl	8009578 <__multiply>
 8008aa4:	ee18 1a10 	vmov	r1, s16
 8008aa8:	4680      	mov	r8, r0
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f000 fc96 	bl	80093dc <_Bfree>
 8008ab0:	ee08 8a10 	vmov	s16, r8
 8008ab4:	9b07      	ldr	r3, [sp, #28]
 8008ab6:	1b9a      	subs	r2, r3, r6
 8008ab8:	d006      	beq.n	8008ac8 <_dtoa_r+0x7a0>
 8008aba:	ee18 1a10 	vmov	r1, s16
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 fe04 	bl	80096cc <__pow5mult>
 8008ac4:	ee08 0a10 	vmov	s16, r0
 8008ac8:	2101      	movs	r1, #1
 8008aca:	4620      	mov	r0, r4
 8008acc:	f000 fd3e 	bl	800954c <__i2b>
 8008ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	f340 8088 	ble.w	8008bea <_dtoa_r+0x8c2>
 8008ada:	461a      	mov	r2, r3
 8008adc:	4601      	mov	r1, r0
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f000 fdf4 	bl	80096cc <__pow5mult>
 8008ae4:	9b06      	ldr	r3, [sp, #24]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	4606      	mov	r6, r0
 8008aea:	f340 8081 	ble.w	8008bf0 <_dtoa_r+0x8c8>
 8008aee:	f04f 0800 	mov.w	r8, #0
 8008af2:	6933      	ldr	r3, [r6, #16]
 8008af4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008af8:	6918      	ldr	r0, [r3, #16]
 8008afa:	f000 fcd7 	bl	80094ac <__hi0bits>
 8008afe:	f1c0 0020 	rsb	r0, r0, #32
 8008b02:	9b05      	ldr	r3, [sp, #20]
 8008b04:	4418      	add	r0, r3
 8008b06:	f010 001f 	ands.w	r0, r0, #31
 8008b0a:	f000 8092 	beq.w	8008c32 <_dtoa_r+0x90a>
 8008b0e:	f1c0 0320 	rsb	r3, r0, #32
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	f340 808a 	ble.w	8008c2c <_dtoa_r+0x904>
 8008b18:	f1c0 001c 	rsb	r0, r0, #28
 8008b1c:	9b04      	ldr	r3, [sp, #16]
 8008b1e:	4403      	add	r3, r0
 8008b20:	9304      	str	r3, [sp, #16]
 8008b22:	9b05      	ldr	r3, [sp, #20]
 8008b24:	4403      	add	r3, r0
 8008b26:	4405      	add	r5, r0
 8008b28:	9305      	str	r3, [sp, #20]
 8008b2a:	9b04      	ldr	r3, [sp, #16]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	dd07      	ble.n	8008b40 <_dtoa_r+0x818>
 8008b30:	ee18 1a10 	vmov	r1, s16
 8008b34:	461a      	mov	r2, r3
 8008b36:	4620      	mov	r0, r4
 8008b38:	f000 fe22 	bl	8009780 <__lshift>
 8008b3c:	ee08 0a10 	vmov	s16, r0
 8008b40:	9b05      	ldr	r3, [sp, #20]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	dd05      	ble.n	8008b52 <_dtoa_r+0x82a>
 8008b46:	4631      	mov	r1, r6
 8008b48:	461a      	mov	r2, r3
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f000 fe18 	bl	8009780 <__lshift>
 8008b50:	4606      	mov	r6, r0
 8008b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d06e      	beq.n	8008c36 <_dtoa_r+0x90e>
 8008b58:	ee18 0a10 	vmov	r0, s16
 8008b5c:	4631      	mov	r1, r6
 8008b5e:	f000 fe7f 	bl	8009860 <__mcmp>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	da67      	bge.n	8008c36 <_dtoa_r+0x90e>
 8008b66:	9b00      	ldr	r3, [sp, #0]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	ee18 1a10 	vmov	r1, s16
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	220a      	movs	r2, #10
 8008b72:	2300      	movs	r3, #0
 8008b74:	4620      	mov	r0, r4
 8008b76:	f000 fc53 	bl	8009420 <__multadd>
 8008b7a:	9b08      	ldr	r3, [sp, #32]
 8008b7c:	ee08 0a10 	vmov	s16, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 81b1 	beq.w	8008ee8 <_dtoa_r+0xbc0>
 8008b86:	2300      	movs	r3, #0
 8008b88:	4639      	mov	r1, r7
 8008b8a:	220a      	movs	r2, #10
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f000 fc47 	bl	8009420 <__multadd>
 8008b92:	9b02      	ldr	r3, [sp, #8]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	4607      	mov	r7, r0
 8008b98:	f300 808e 	bgt.w	8008cb8 <_dtoa_r+0x990>
 8008b9c:	9b06      	ldr	r3, [sp, #24]
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	dc51      	bgt.n	8008c46 <_dtoa_r+0x91e>
 8008ba2:	e089      	b.n	8008cb8 <_dtoa_r+0x990>
 8008ba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ba6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008baa:	e74b      	b.n	8008a44 <_dtoa_r+0x71c>
 8008bac:	9b03      	ldr	r3, [sp, #12]
 8008bae:	1e5e      	subs	r6, r3, #1
 8008bb0:	9b07      	ldr	r3, [sp, #28]
 8008bb2:	42b3      	cmp	r3, r6
 8008bb4:	bfbf      	itttt	lt
 8008bb6:	9b07      	ldrlt	r3, [sp, #28]
 8008bb8:	9607      	strlt	r6, [sp, #28]
 8008bba:	1af2      	sublt	r2, r6, r3
 8008bbc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008bbe:	bfb6      	itet	lt
 8008bc0:	189b      	addlt	r3, r3, r2
 8008bc2:	1b9e      	subge	r6, r3, r6
 8008bc4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008bc6:	9b03      	ldr	r3, [sp, #12]
 8008bc8:	bfb8      	it	lt
 8008bca:	2600      	movlt	r6, #0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	bfb7      	itett	lt
 8008bd0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008bd4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008bd8:	1a9d      	sublt	r5, r3, r2
 8008bda:	2300      	movlt	r3, #0
 8008bdc:	e734      	b.n	8008a48 <_dtoa_r+0x720>
 8008bde:	9e07      	ldr	r6, [sp, #28]
 8008be0:	9d04      	ldr	r5, [sp, #16]
 8008be2:	9f08      	ldr	r7, [sp, #32]
 8008be4:	e73b      	b.n	8008a5e <_dtoa_r+0x736>
 8008be6:	9a07      	ldr	r2, [sp, #28]
 8008be8:	e767      	b.n	8008aba <_dtoa_r+0x792>
 8008bea:	9b06      	ldr	r3, [sp, #24]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	dc18      	bgt.n	8008c22 <_dtoa_r+0x8fa>
 8008bf0:	f1ba 0f00 	cmp.w	sl, #0
 8008bf4:	d115      	bne.n	8008c22 <_dtoa_r+0x8fa>
 8008bf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bfa:	b993      	cbnz	r3, 8008c22 <_dtoa_r+0x8fa>
 8008bfc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c00:	0d1b      	lsrs	r3, r3, #20
 8008c02:	051b      	lsls	r3, r3, #20
 8008c04:	b183      	cbz	r3, 8008c28 <_dtoa_r+0x900>
 8008c06:	9b04      	ldr	r3, [sp, #16]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	9304      	str	r3, [sp, #16]
 8008c0c:	9b05      	ldr	r3, [sp, #20]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	9305      	str	r3, [sp, #20]
 8008c12:	f04f 0801 	mov.w	r8, #1
 8008c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f47f af6a 	bne.w	8008af2 <_dtoa_r+0x7ca>
 8008c1e:	2001      	movs	r0, #1
 8008c20:	e76f      	b.n	8008b02 <_dtoa_r+0x7da>
 8008c22:	f04f 0800 	mov.w	r8, #0
 8008c26:	e7f6      	b.n	8008c16 <_dtoa_r+0x8ee>
 8008c28:	4698      	mov	r8, r3
 8008c2a:	e7f4      	b.n	8008c16 <_dtoa_r+0x8ee>
 8008c2c:	f43f af7d 	beq.w	8008b2a <_dtoa_r+0x802>
 8008c30:	4618      	mov	r0, r3
 8008c32:	301c      	adds	r0, #28
 8008c34:	e772      	b.n	8008b1c <_dtoa_r+0x7f4>
 8008c36:	9b03      	ldr	r3, [sp, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	dc37      	bgt.n	8008cac <_dtoa_r+0x984>
 8008c3c:	9b06      	ldr	r3, [sp, #24]
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	dd34      	ble.n	8008cac <_dtoa_r+0x984>
 8008c42:	9b03      	ldr	r3, [sp, #12]
 8008c44:	9302      	str	r3, [sp, #8]
 8008c46:	9b02      	ldr	r3, [sp, #8]
 8008c48:	b96b      	cbnz	r3, 8008c66 <_dtoa_r+0x93e>
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	2205      	movs	r2, #5
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f000 fbe6 	bl	8009420 <__multadd>
 8008c54:	4601      	mov	r1, r0
 8008c56:	4606      	mov	r6, r0
 8008c58:	ee18 0a10 	vmov	r0, s16
 8008c5c:	f000 fe00 	bl	8009860 <__mcmp>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	f73f adbb 	bgt.w	80087dc <_dtoa_r+0x4b4>
 8008c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c68:	9d01      	ldr	r5, [sp, #4]
 8008c6a:	43db      	mvns	r3, r3
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	f04f 0800 	mov.w	r8, #0
 8008c72:	4631      	mov	r1, r6
 8008c74:	4620      	mov	r0, r4
 8008c76:	f000 fbb1 	bl	80093dc <_Bfree>
 8008c7a:	2f00      	cmp	r7, #0
 8008c7c:	f43f aea4 	beq.w	80089c8 <_dtoa_r+0x6a0>
 8008c80:	f1b8 0f00 	cmp.w	r8, #0
 8008c84:	d005      	beq.n	8008c92 <_dtoa_r+0x96a>
 8008c86:	45b8      	cmp	r8, r7
 8008c88:	d003      	beq.n	8008c92 <_dtoa_r+0x96a>
 8008c8a:	4641      	mov	r1, r8
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f000 fba5 	bl	80093dc <_Bfree>
 8008c92:	4639      	mov	r1, r7
 8008c94:	4620      	mov	r0, r4
 8008c96:	f000 fba1 	bl	80093dc <_Bfree>
 8008c9a:	e695      	b.n	80089c8 <_dtoa_r+0x6a0>
 8008c9c:	2600      	movs	r6, #0
 8008c9e:	4637      	mov	r7, r6
 8008ca0:	e7e1      	b.n	8008c66 <_dtoa_r+0x93e>
 8008ca2:	9700      	str	r7, [sp, #0]
 8008ca4:	4637      	mov	r7, r6
 8008ca6:	e599      	b.n	80087dc <_dtoa_r+0x4b4>
 8008ca8:	40240000 	.word	0x40240000
 8008cac:	9b08      	ldr	r3, [sp, #32]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f000 80ca 	beq.w	8008e48 <_dtoa_r+0xb20>
 8008cb4:	9b03      	ldr	r3, [sp, #12]
 8008cb6:	9302      	str	r3, [sp, #8]
 8008cb8:	2d00      	cmp	r5, #0
 8008cba:	dd05      	ble.n	8008cc8 <_dtoa_r+0x9a0>
 8008cbc:	4639      	mov	r1, r7
 8008cbe:	462a      	mov	r2, r5
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f000 fd5d 	bl	8009780 <__lshift>
 8008cc6:	4607      	mov	r7, r0
 8008cc8:	f1b8 0f00 	cmp.w	r8, #0
 8008ccc:	d05b      	beq.n	8008d86 <_dtoa_r+0xa5e>
 8008cce:	6879      	ldr	r1, [r7, #4]
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	f000 fb43 	bl	800935c <_Balloc>
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	b928      	cbnz	r0, 8008ce6 <_dtoa_r+0x9be>
 8008cda:	4b87      	ldr	r3, [pc, #540]	; (8008ef8 <_dtoa_r+0xbd0>)
 8008cdc:	4602      	mov	r2, r0
 8008cde:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008ce2:	f7ff bb3b 	b.w	800835c <_dtoa_r+0x34>
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	3202      	adds	r2, #2
 8008cea:	0092      	lsls	r2, r2, #2
 8008cec:	f107 010c 	add.w	r1, r7, #12
 8008cf0:	300c      	adds	r0, #12
 8008cf2:	f7fe fca7 	bl	8007644 <memcpy>
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f000 fd40 	bl	8009780 <__lshift>
 8008d00:	9b01      	ldr	r3, [sp, #4]
 8008d02:	f103 0901 	add.w	r9, r3, #1
 8008d06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	9305      	str	r3, [sp, #20]
 8008d0e:	f00a 0301 	and.w	r3, sl, #1
 8008d12:	46b8      	mov	r8, r7
 8008d14:	9304      	str	r3, [sp, #16]
 8008d16:	4607      	mov	r7, r0
 8008d18:	4631      	mov	r1, r6
 8008d1a:	ee18 0a10 	vmov	r0, s16
 8008d1e:	f7ff fa75 	bl	800820c <quorem>
 8008d22:	4641      	mov	r1, r8
 8008d24:	9002      	str	r0, [sp, #8]
 8008d26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d2a:	ee18 0a10 	vmov	r0, s16
 8008d2e:	f000 fd97 	bl	8009860 <__mcmp>
 8008d32:	463a      	mov	r2, r7
 8008d34:	9003      	str	r0, [sp, #12]
 8008d36:	4631      	mov	r1, r6
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f000 fdad 	bl	8009898 <__mdiff>
 8008d3e:	68c2      	ldr	r2, [r0, #12]
 8008d40:	f109 3bff 	add.w	fp, r9, #4294967295
 8008d44:	4605      	mov	r5, r0
 8008d46:	bb02      	cbnz	r2, 8008d8a <_dtoa_r+0xa62>
 8008d48:	4601      	mov	r1, r0
 8008d4a:	ee18 0a10 	vmov	r0, s16
 8008d4e:	f000 fd87 	bl	8009860 <__mcmp>
 8008d52:	4602      	mov	r2, r0
 8008d54:	4629      	mov	r1, r5
 8008d56:	4620      	mov	r0, r4
 8008d58:	9207      	str	r2, [sp, #28]
 8008d5a:	f000 fb3f 	bl	80093dc <_Bfree>
 8008d5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d62:	ea43 0102 	orr.w	r1, r3, r2
 8008d66:	9b04      	ldr	r3, [sp, #16]
 8008d68:	430b      	orrs	r3, r1
 8008d6a:	464d      	mov	r5, r9
 8008d6c:	d10f      	bne.n	8008d8e <_dtoa_r+0xa66>
 8008d6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d72:	d02a      	beq.n	8008dca <_dtoa_r+0xaa2>
 8008d74:	9b03      	ldr	r3, [sp, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	dd02      	ble.n	8008d80 <_dtoa_r+0xa58>
 8008d7a:	9b02      	ldr	r3, [sp, #8]
 8008d7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008d80:	f88b a000 	strb.w	sl, [fp]
 8008d84:	e775      	b.n	8008c72 <_dtoa_r+0x94a>
 8008d86:	4638      	mov	r0, r7
 8008d88:	e7ba      	b.n	8008d00 <_dtoa_r+0x9d8>
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	e7e2      	b.n	8008d54 <_dtoa_r+0xa2c>
 8008d8e:	9b03      	ldr	r3, [sp, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	db04      	blt.n	8008d9e <_dtoa_r+0xa76>
 8008d94:	9906      	ldr	r1, [sp, #24]
 8008d96:	430b      	orrs	r3, r1
 8008d98:	9904      	ldr	r1, [sp, #16]
 8008d9a:	430b      	orrs	r3, r1
 8008d9c:	d122      	bne.n	8008de4 <_dtoa_r+0xabc>
 8008d9e:	2a00      	cmp	r2, #0
 8008da0:	ddee      	ble.n	8008d80 <_dtoa_r+0xa58>
 8008da2:	ee18 1a10 	vmov	r1, s16
 8008da6:	2201      	movs	r2, #1
 8008da8:	4620      	mov	r0, r4
 8008daa:	f000 fce9 	bl	8009780 <__lshift>
 8008dae:	4631      	mov	r1, r6
 8008db0:	ee08 0a10 	vmov	s16, r0
 8008db4:	f000 fd54 	bl	8009860 <__mcmp>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	dc03      	bgt.n	8008dc4 <_dtoa_r+0xa9c>
 8008dbc:	d1e0      	bne.n	8008d80 <_dtoa_r+0xa58>
 8008dbe:	f01a 0f01 	tst.w	sl, #1
 8008dc2:	d0dd      	beq.n	8008d80 <_dtoa_r+0xa58>
 8008dc4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008dc8:	d1d7      	bne.n	8008d7a <_dtoa_r+0xa52>
 8008dca:	2339      	movs	r3, #57	; 0x39
 8008dcc:	f88b 3000 	strb.w	r3, [fp]
 8008dd0:	462b      	mov	r3, r5
 8008dd2:	461d      	mov	r5, r3
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008dda:	2a39      	cmp	r2, #57	; 0x39
 8008ddc:	d071      	beq.n	8008ec2 <_dtoa_r+0xb9a>
 8008dde:	3201      	adds	r2, #1
 8008de0:	701a      	strb	r2, [r3, #0]
 8008de2:	e746      	b.n	8008c72 <_dtoa_r+0x94a>
 8008de4:	2a00      	cmp	r2, #0
 8008de6:	dd07      	ble.n	8008df8 <_dtoa_r+0xad0>
 8008de8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008dec:	d0ed      	beq.n	8008dca <_dtoa_r+0xaa2>
 8008dee:	f10a 0301 	add.w	r3, sl, #1
 8008df2:	f88b 3000 	strb.w	r3, [fp]
 8008df6:	e73c      	b.n	8008c72 <_dtoa_r+0x94a>
 8008df8:	9b05      	ldr	r3, [sp, #20]
 8008dfa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008dfe:	4599      	cmp	r9, r3
 8008e00:	d047      	beq.n	8008e92 <_dtoa_r+0xb6a>
 8008e02:	ee18 1a10 	vmov	r1, s16
 8008e06:	2300      	movs	r3, #0
 8008e08:	220a      	movs	r2, #10
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f000 fb08 	bl	8009420 <__multadd>
 8008e10:	45b8      	cmp	r8, r7
 8008e12:	ee08 0a10 	vmov	s16, r0
 8008e16:	f04f 0300 	mov.w	r3, #0
 8008e1a:	f04f 020a 	mov.w	r2, #10
 8008e1e:	4641      	mov	r1, r8
 8008e20:	4620      	mov	r0, r4
 8008e22:	d106      	bne.n	8008e32 <_dtoa_r+0xb0a>
 8008e24:	f000 fafc 	bl	8009420 <__multadd>
 8008e28:	4680      	mov	r8, r0
 8008e2a:	4607      	mov	r7, r0
 8008e2c:	f109 0901 	add.w	r9, r9, #1
 8008e30:	e772      	b.n	8008d18 <_dtoa_r+0x9f0>
 8008e32:	f000 faf5 	bl	8009420 <__multadd>
 8008e36:	4639      	mov	r1, r7
 8008e38:	4680      	mov	r8, r0
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	220a      	movs	r2, #10
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f000 faee 	bl	8009420 <__multadd>
 8008e44:	4607      	mov	r7, r0
 8008e46:	e7f1      	b.n	8008e2c <_dtoa_r+0xb04>
 8008e48:	9b03      	ldr	r3, [sp, #12]
 8008e4a:	9302      	str	r3, [sp, #8]
 8008e4c:	9d01      	ldr	r5, [sp, #4]
 8008e4e:	ee18 0a10 	vmov	r0, s16
 8008e52:	4631      	mov	r1, r6
 8008e54:	f7ff f9da 	bl	800820c <quorem>
 8008e58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e5c:	9b01      	ldr	r3, [sp, #4]
 8008e5e:	f805 ab01 	strb.w	sl, [r5], #1
 8008e62:	1aea      	subs	r2, r5, r3
 8008e64:	9b02      	ldr	r3, [sp, #8]
 8008e66:	4293      	cmp	r3, r2
 8008e68:	dd09      	ble.n	8008e7e <_dtoa_r+0xb56>
 8008e6a:	ee18 1a10 	vmov	r1, s16
 8008e6e:	2300      	movs	r3, #0
 8008e70:	220a      	movs	r2, #10
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 fad4 	bl	8009420 <__multadd>
 8008e78:	ee08 0a10 	vmov	s16, r0
 8008e7c:	e7e7      	b.n	8008e4e <_dtoa_r+0xb26>
 8008e7e:	9b02      	ldr	r3, [sp, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	bfc8      	it	gt
 8008e84:	461d      	movgt	r5, r3
 8008e86:	9b01      	ldr	r3, [sp, #4]
 8008e88:	bfd8      	it	le
 8008e8a:	2501      	movle	r5, #1
 8008e8c:	441d      	add	r5, r3
 8008e8e:	f04f 0800 	mov.w	r8, #0
 8008e92:	ee18 1a10 	vmov	r1, s16
 8008e96:	2201      	movs	r2, #1
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f000 fc71 	bl	8009780 <__lshift>
 8008e9e:	4631      	mov	r1, r6
 8008ea0:	ee08 0a10 	vmov	s16, r0
 8008ea4:	f000 fcdc 	bl	8009860 <__mcmp>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	dc91      	bgt.n	8008dd0 <_dtoa_r+0xaa8>
 8008eac:	d102      	bne.n	8008eb4 <_dtoa_r+0xb8c>
 8008eae:	f01a 0f01 	tst.w	sl, #1
 8008eb2:	d18d      	bne.n	8008dd0 <_dtoa_r+0xaa8>
 8008eb4:	462b      	mov	r3, r5
 8008eb6:	461d      	mov	r5, r3
 8008eb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ebc:	2a30      	cmp	r2, #48	; 0x30
 8008ebe:	d0fa      	beq.n	8008eb6 <_dtoa_r+0xb8e>
 8008ec0:	e6d7      	b.n	8008c72 <_dtoa_r+0x94a>
 8008ec2:	9a01      	ldr	r2, [sp, #4]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d184      	bne.n	8008dd2 <_dtoa_r+0xaaa>
 8008ec8:	9b00      	ldr	r3, [sp, #0]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	2331      	movs	r3, #49	; 0x31
 8008ed0:	7013      	strb	r3, [r2, #0]
 8008ed2:	e6ce      	b.n	8008c72 <_dtoa_r+0x94a>
 8008ed4:	4b09      	ldr	r3, [pc, #36]	; (8008efc <_dtoa_r+0xbd4>)
 8008ed6:	f7ff ba95 	b.w	8008404 <_dtoa_r+0xdc>
 8008eda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f47f aa6e 	bne.w	80083be <_dtoa_r+0x96>
 8008ee2:	4b07      	ldr	r3, [pc, #28]	; (8008f00 <_dtoa_r+0xbd8>)
 8008ee4:	f7ff ba8e 	b.w	8008404 <_dtoa_r+0xdc>
 8008ee8:	9b02      	ldr	r3, [sp, #8]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	dcae      	bgt.n	8008e4c <_dtoa_r+0xb24>
 8008eee:	9b06      	ldr	r3, [sp, #24]
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	f73f aea8 	bgt.w	8008c46 <_dtoa_r+0x91e>
 8008ef6:	e7a9      	b.n	8008e4c <_dtoa_r+0xb24>
 8008ef8:	0800a443 	.word	0x0800a443
 8008efc:	0800a3a0 	.word	0x0800a3a0
 8008f00:	0800a3c4 	.word	0x0800a3c4

08008f04 <__sflush_r>:
 8008f04:	898a      	ldrh	r2, [r1, #12]
 8008f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	0710      	lsls	r0, r2, #28
 8008f0e:	460c      	mov	r4, r1
 8008f10:	d458      	bmi.n	8008fc4 <__sflush_r+0xc0>
 8008f12:	684b      	ldr	r3, [r1, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	dc05      	bgt.n	8008f24 <__sflush_r+0x20>
 8008f18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	dc02      	bgt.n	8008f24 <__sflush_r+0x20>
 8008f1e:	2000      	movs	r0, #0
 8008f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f26:	2e00      	cmp	r6, #0
 8008f28:	d0f9      	beq.n	8008f1e <__sflush_r+0x1a>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f30:	682f      	ldr	r7, [r5, #0]
 8008f32:	602b      	str	r3, [r5, #0]
 8008f34:	d032      	beq.n	8008f9c <__sflush_r+0x98>
 8008f36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f38:	89a3      	ldrh	r3, [r4, #12]
 8008f3a:	075a      	lsls	r2, r3, #29
 8008f3c:	d505      	bpl.n	8008f4a <__sflush_r+0x46>
 8008f3e:	6863      	ldr	r3, [r4, #4]
 8008f40:	1ac0      	subs	r0, r0, r3
 8008f42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f44:	b10b      	cbz	r3, 8008f4a <__sflush_r+0x46>
 8008f46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f48:	1ac0      	subs	r0, r0, r3
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f50:	6a21      	ldr	r1, [r4, #32]
 8008f52:	4628      	mov	r0, r5
 8008f54:	47b0      	blx	r6
 8008f56:	1c43      	adds	r3, r0, #1
 8008f58:	89a3      	ldrh	r3, [r4, #12]
 8008f5a:	d106      	bne.n	8008f6a <__sflush_r+0x66>
 8008f5c:	6829      	ldr	r1, [r5, #0]
 8008f5e:	291d      	cmp	r1, #29
 8008f60:	d82c      	bhi.n	8008fbc <__sflush_r+0xb8>
 8008f62:	4a2a      	ldr	r2, [pc, #168]	; (800900c <__sflush_r+0x108>)
 8008f64:	40ca      	lsrs	r2, r1
 8008f66:	07d6      	lsls	r6, r2, #31
 8008f68:	d528      	bpl.n	8008fbc <__sflush_r+0xb8>
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	6062      	str	r2, [r4, #4]
 8008f6e:	04d9      	lsls	r1, r3, #19
 8008f70:	6922      	ldr	r2, [r4, #16]
 8008f72:	6022      	str	r2, [r4, #0]
 8008f74:	d504      	bpl.n	8008f80 <__sflush_r+0x7c>
 8008f76:	1c42      	adds	r2, r0, #1
 8008f78:	d101      	bne.n	8008f7e <__sflush_r+0x7a>
 8008f7a:	682b      	ldr	r3, [r5, #0]
 8008f7c:	b903      	cbnz	r3, 8008f80 <__sflush_r+0x7c>
 8008f7e:	6560      	str	r0, [r4, #84]	; 0x54
 8008f80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f82:	602f      	str	r7, [r5, #0]
 8008f84:	2900      	cmp	r1, #0
 8008f86:	d0ca      	beq.n	8008f1e <__sflush_r+0x1a>
 8008f88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f8c:	4299      	cmp	r1, r3
 8008f8e:	d002      	beq.n	8008f96 <__sflush_r+0x92>
 8008f90:	4628      	mov	r0, r5
 8008f92:	f000 fd7d 	bl	8009a90 <_free_r>
 8008f96:	2000      	movs	r0, #0
 8008f98:	6360      	str	r0, [r4, #52]	; 0x34
 8008f9a:	e7c1      	b.n	8008f20 <__sflush_r+0x1c>
 8008f9c:	6a21      	ldr	r1, [r4, #32]
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	47b0      	blx	r6
 8008fa4:	1c41      	adds	r1, r0, #1
 8008fa6:	d1c7      	bne.n	8008f38 <__sflush_r+0x34>
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0c4      	beq.n	8008f38 <__sflush_r+0x34>
 8008fae:	2b1d      	cmp	r3, #29
 8008fb0:	d001      	beq.n	8008fb6 <__sflush_r+0xb2>
 8008fb2:	2b16      	cmp	r3, #22
 8008fb4:	d101      	bne.n	8008fba <__sflush_r+0xb6>
 8008fb6:	602f      	str	r7, [r5, #0]
 8008fb8:	e7b1      	b.n	8008f1e <__sflush_r+0x1a>
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fc0:	81a3      	strh	r3, [r4, #12]
 8008fc2:	e7ad      	b.n	8008f20 <__sflush_r+0x1c>
 8008fc4:	690f      	ldr	r7, [r1, #16]
 8008fc6:	2f00      	cmp	r7, #0
 8008fc8:	d0a9      	beq.n	8008f1e <__sflush_r+0x1a>
 8008fca:	0793      	lsls	r3, r2, #30
 8008fcc:	680e      	ldr	r6, [r1, #0]
 8008fce:	bf08      	it	eq
 8008fd0:	694b      	ldreq	r3, [r1, #20]
 8008fd2:	600f      	str	r7, [r1, #0]
 8008fd4:	bf18      	it	ne
 8008fd6:	2300      	movne	r3, #0
 8008fd8:	eba6 0807 	sub.w	r8, r6, r7
 8008fdc:	608b      	str	r3, [r1, #8]
 8008fde:	f1b8 0f00 	cmp.w	r8, #0
 8008fe2:	dd9c      	ble.n	8008f1e <__sflush_r+0x1a>
 8008fe4:	6a21      	ldr	r1, [r4, #32]
 8008fe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fe8:	4643      	mov	r3, r8
 8008fea:	463a      	mov	r2, r7
 8008fec:	4628      	mov	r0, r5
 8008fee:	47b0      	blx	r6
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	dc06      	bgt.n	8009002 <__sflush_r+0xfe>
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ffa:	81a3      	strh	r3, [r4, #12]
 8008ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8009000:	e78e      	b.n	8008f20 <__sflush_r+0x1c>
 8009002:	4407      	add	r7, r0
 8009004:	eba8 0800 	sub.w	r8, r8, r0
 8009008:	e7e9      	b.n	8008fde <__sflush_r+0xda>
 800900a:	bf00      	nop
 800900c:	20400001 	.word	0x20400001

08009010 <_fflush_r>:
 8009010:	b538      	push	{r3, r4, r5, lr}
 8009012:	690b      	ldr	r3, [r1, #16]
 8009014:	4605      	mov	r5, r0
 8009016:	460c      	mov	r4, r1
 8009018:	b913      	cbnz	r3, 8009020 <_fflush_r+0x10>
 800901a:	2500      	movs	r5, #0
 800901c:	4628      	mov	r0, r5
 800901e:	bd38      	pop	{r3, r4, r5, pc}
 8009020:	b118      	cbz	r0, 800902a <_fflush_r+0x1a>
 8009022:	6983      	ldr	r3, [r0, #24]
 8009024:	b90b      	cbnz	r3, 800902a <_fflush_r+0x1a>
 8009026:	f000 f887 	bl	8009138 <__sinit>
 800902a:	4b14      	ldr	r3, [pc, #80]	; (800907c <_fflush_r+0x6c>)
 800902c:	429c      	cmp	r4, r3
 800902e:	d11b      	bne.n	8009068 <_fflush_r+0x58>
 8009030:	686c      	ldr	r4, [r5, #4]
 8009032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d0ef      	beq.n	800901a <_fflush_r+0xa>
 800903a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800903c:	07d0      	lsls	r0, r2, #31
 800903e:	d404      	bmi.n	800904a <_fflush_r+0x3a>
 8009040:	0599      	lsls	r1, r3, #22
 8009042:	d402      	bmi.n	800904a <_fflush_r+0x3a>
 8009044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009046:	f000 f91a 	bl	800927e <__retarget_lock_acquire_recursive>
 800904a:	4628      	mov	r0, r5
 800904c:	4621      	mov	r1, r4
 800904e:	f7ff ff59 	bl	8008f04 <__sflush_r>
 8009052:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009054:	07da      	lsls	r2, r3, #31
 8009056:	4605      	mov	r5, r0
 8009058:	d4e0      	bmi.n	800901c <_fflush_r+0xc>
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	059b      	lsls	r3, r3, #22
 800905e:	d4dd      	bmi.n	800901c <_fflush_r+0xc>
 8009060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009062:	f000 f90d 	bl	8009280 <__retarget_lock_release_recursive>
 8009066:	e7d9      	b.n	800901c <_fflush_r+0xc>
 8009068:	4b05      	ldr	r3, [pc, #20]	; (8009080 <_fflush_r+0x70>)
 800906a:	429c      	cmp	r4, r3
 800906c:	d101      	bne.n	8009072 <_fflush_r+0x62>
 800906e:	68ac      	ldr	r4, [r5, #8]
 8009070:	e7df      	b.n	8009032 <_fflush_r+0x22>
 8009072:	4b04      	ldr	r3, [pc, #16]	; (8009084 <_fflush_r+0x74>)
 8009074:	429c      	cmp	r4, r3
 8009076:	bf08      	it	eq
 8009078:	68ec      	ldreq	r4, [r5, #12]
 800907a:	e7da      	b.n	8009032 <_fflush_r+0x22>
 800907c:	0800a474 	.word	0x0800a474
 8009080:	0800a494 	.word	0x0800a494
 8009084:	0800a454 	.word	0x0800a454

08009088 <std>:
 8009088:	2300      	movs	r3, #0
 800908a:	b510      	push	{r4, lr}
 800908c:	4604      	mov	r4, r0
 800908e:	e9c0 3300 	strd	r3, r3, [r0]
 8009092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009096:	6083      	str	r3, [r0, #8]
 8009098:	8181      	strh	r1, [r0, #12]
 800909a:	6643      	str	r3, [r0, #100]	; 0x64
 800909c:	81c2      	strh	r2, [r0, #14]
 800909e:	6183      	str	r3, [r0, #24]
 80090a0:	4619      	mov	r1, r3
 80090a2:	2208      	movs	r2, #8
 80090a4:	305c      	adds	r0, #92	; 0x5c
 80090a6:	f7fe fadb 	bl	8007660 <memset>
 80090aa:	4b05      	ldr	r3, [pc, #20]	; (80090c0 <std+0x38>)
 80090ac:	6263      	str	r3, [r4, #36]	; 0x24
 80090ae:	4b05      	ldr	r3, [pc, #20]	; (80090c4 <std+0x3c>)
 80090b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80090b2:	4b05      	ldr	r3, [pc, #20]	; (80090c8 <std+0x40>)
 80090b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090b6:	4b05      	ldr	r3, [pc, #20]	; (80090cc <std+0x44>)
 80090b8:	6224      	str	r4, [r4, #32]
 80090ba:	6323      	str	r3, [r4, #48]	; 0x30
 80090bc:	bd10      	pop	{r4, pc}
 80090be:	bf00      	nop
 80090c0:	08009fb5 	.word	0x08009fb5
 80090c4:	08009fd7 	.word	0x08009fd7
 80090c8:	0800a00f 	.word	0x0800a00f
 80090cc:	0800a033 	.word	0x0800a033

080090d0 <_cleanup_r>:
 80090d0:	4901      	ldr	r1, [pc, #4]	; (80090d8 <_cleanup_r+0x8>)
 80090d2:	f000 b8af 	b.w	8009234 <_fwalk_reent>
 80090d6:	bf00      	nop
 80090d8:	08009011 	.word	0x08009011

080090dc <__sfmoreglue>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	2268      	movs	r2, #104	; 0x68
 80090e0:	1e4d      	subs	r5, r1, #1
 80090e2:	4355      	muls	r5, r2
 80090e4:	460e      	mov	r6, r1
 80090e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090ea:	f000 fd3d 	bl	8009b68 <_malloc_r>
 80090ee:	4604      	mov	r4, r0
 80090f0:	b140      	cbz	r0, 8009104 <__sfmoreglue+0x28>
 80090f2:	2100      	movs	r1, #0
 80090f4:	e9c0 1600 	strd	r1, r6, [r0]
 80090f8:	300c      	adds	r0, #12
 80090fa:	60a0      	str	r0, [r4, #8]
 80090fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009100:	f7fe faae 	bl	8007660 <memset>
 8009104:	4620      	mov	r0, r4
 8009106:	bd70      	pop	{r4, r5, r6, pc}

08009108 <__sfp_lock_acquire>:
 8009108:	4801      	ldr	r0, [pc, #4]	; (8009110 <__sfp_lock_acquire+0x8>)
 800910a:	f000 b8b8 	b.w	800927e <__retarget_lock_acquire_recursive>
 800910e:	bf00      	nop
 8009110:	200005e1 	.word	0x200005e1

08009114 <__sfp_lock_release>:
 8009114:	4801      	ldr	r0, [pc, #4]	; (800911c <__sfp_lock_release+0x8>)
 8009116:	f000 b8b3 	b.w	8009280 <__retarget_lock_release_recursive>
 800911a:	bf00      	nop
 800911c:	200005e1 	.word	0x200005e1

08009120 <__sinit_lock_acquire>:
 8009120:	4801      	ldr	r0, [pc, #4]	; (8009128 <__sinit_lock_acquire+0x8>)
 8009122:	f000 b8ac 	b.w	800927e <__retarget_lock_acquire_recursive>
 8009126:	bf00      	nop
 8009128:	200005e2 	.word	0x200005e2

0800912c <__sinit_lock_release>:
 800912c:	4801      	ldr	r0, [pc, #4]	; (8009134 <__sinit_lock_release+0x8>)
 800912e:	f000 b8a7 	b.w	8009280 <__retarget_lock_release_recursive>
 8009132:	bf00      	nop
 8009134:	200005e2 	.word	0x200005e2

08009138 <__sinit>:
 8009138:	b510      	push	{r4, lr}
 800913a:	4604      	mov	r4, r0
 800913c:	f7ff fff0 	bl	8009120 <__sinit_lock_acquire>
 8009140:	69a3      	ldr	r3, [r4, #24]
 8009142:	b11b      	cbz	r3, 800914c <__sinit+0x14>
 8009144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009148:	f7ff bff0 	b.w	800912c <__sinit_lock_release>
 800914c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009150:	6523      	str	r3, [r4, #80]	; 0x50
 8009152:	4b13      	ldr	r3, [pc, #76]	; (80091a0 <__sinit+0x68>)
 8009154:	4a13      	ldr	r2, [pc, #76]	; (80091a4 <__sinit+0x6c>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	62a2      	str	r2, [r4, #40]	; 0x28
 800915a:	42a3      	cmp	r3, r4
 800915c:	bf04      	itt	eq
 800915e:	2301      	moveq	r3, #1
 8009160:	61a3      	streq	r3, [r4, #24]
 8009162:	4620      	mov	r0, r4
 8009164:	f000 f820 	bl	80091a8 <__sfp>
 8009168:	6060      	str	r0, [r4, #4]
 800916a:	4620      	mov	r0, r4
 800916c:	f000 f81c 	bl	80091a8 <__sfp>
 8009170:	60a0      	str	r0, [r4, #8]
 8009172:	4620      	mov	r0, r4
 8009174:	f000 f818 	bl	80091a8 <__sfp>
 8009178:	2200      	movs	r2, #0
 800917a:	60e0      	str	r0, [r4, #12]
 800917c:	2104      	movs	r1, #4
 800917e:	6860      	ldr	r0, [r4, #4]
 8009180:	f7ff ff82 	bl	8009088 <std>
 8009184:	68a0      	ldr	r0, [r4, #8]
 8009186:	2201      	movs	r2, #1
 8009188:	2109      	movs	r1, #9
 800918a:	f7ff ff7d 	bl	8009088 <std>
 800918e:	68e0      	ldr	r0, [r4, #12]
 8009190:	2202      	movs	r2, #2
 8009192:	2112      	movs	r1, #18
 8009194:	f7ff ff78 	bl	8009088 <std>
 8009198:	2301      	movs	r3, #1
 800919a:	61a3      	str	r3, [r4, #24]
 800919c:	e7d2      	b.n	8009144 <__sinit+0xc>
 800919e:	bf00      	nop
 80091a0:	0800a38c 	.word	0x0800a38c
 80091a4:	080090d1 	.word	0x080090d1

080091a8 <__sfp>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	4607      	mov	r7, r0
 80091ac:	f7ff ffac 	bl	8009108 <__sfp_lock_acquire>
 80091b0:	4b1e      	ldr	r3, [pc, #120]	; (800922c <__sfp+0x84>)
 80091b2:	681e      	ldr	r6, [r3, #0]
 80091b4:	69b3      	ldr	r3, [r6, #24]
 80091b6:	b913      	cbnz	r3, 80091be <__sfp+0x16>
 80091b8:	4630      	mov	r0, r6
 80091ba:	f7ff ffbd 	bl	8009138 <__sinit>
 80091be:	3648      	adds	r6, #72	; 0x48
 80091c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091c4:	3b01      	subs	r3, #1
 80091c6:	d503      	bpl.n	80091d0 <__sfp+0x28>
 80091c8:	6833      	ldr	r3, [r6, #0]
 80091ca:	b30b      	cbz	r3, 8009210 <__sfp+0x68>
 80091cc:	6836      	ldr	r6, [r6, #0]
 80091ce:	e7f7      	b.n	80091c0 <__sfp+0x18>
 80091d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091d4:	b9d5      	cbnz	r5, 800920c <__sfp+0x64>
 80091d6:	4b16      	ldr	r3, [pc, #88]	; (8009230 <__sfp+0x88>)
 80091d8:	60e3      	str	r3, [r4, #12]
 80091da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091de:	6665      	str	r5, [r4, #100]	; 0x64
 80091e0:	f000 f84c 	bl	800927c <__retarget_lock_init_recursive>
 80091e4:	f7ff ff96 	bl	8009114 <__sfp_lock_release>
 80091e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80091f0:	6025      	str	r5, [r4, #0]
 80091f2:	61a5      	str	r5, [r4, #24]
 80091f4:	2208      	movs	r2, #8
 80091f6:	4629      	mov	r1, r5
 80091f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091fc:	f7fe fa30 	bl	8007660 <memset>
 8009200:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009204:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009208:	4620      	mov	r0, r4
 800920a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800920c:	3468      	adds	r4, #104	; 0x68
 800920e:	e7d9      	b.n	80091c4 <__sfp+0x1c>
 8009210:	2104      	movs	r1, #4
 8009212:	4638      	mov	r0, r7
 8009214:	f7ff ff62 	bl	80090dc <__sfmoreglue>
 8009218:	4604      	mov	r4, r0
 800921a:	6030      	str	r0, [r6, #0]
 800921c:	2800      	cmp	r0, #0
 800921e:	d1d5      	bne.n	80091cc <__sfp+0x24>
 8009220:	f7ff ff78 	bl	8009114 <__sfp_lock_release>
 8009224:	230c      	movs	r3, #12
 8009226:	603b      	str	r3, [r7, #0]
 8009228:	e7ee      	b.n	8009208 <__sfp+0x60>
 800922a:	bf00      	nop
 800922c:	0800a38c 	.word	0x0800a38c
 8009230:	ffff0001 	.word	0xffff0001

08009234 <_fwalk_reent>:
 8009234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009238:	4606      	mov	r6, r0
 800923a:	4688      	mov	r8, r1
 800923c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009240:	2700      	movs	r7, #0
 8009242:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009246:	f1b9 0901 	subs.w	r9, r9, #1
 800924a:	d505      	bpl.n	8009258 <_fwalk_reent+0x24>
 800924c:	6824      	ldr	r4, [r4, #0]
 800924e:	2c00      	cmp	r4, #0
 8009250:	d1f7      	bne.n	8009242 <_fwalk_reent+0xe>
 8009252:	4638      	mov	r0, r7
 8009254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009258:	89ab      	ldrh	r3, [r5, #12]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d907      	bls.n	800926e <_fwalk_reent+0x3a>
 800925e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009262:	3301      	adds	r3, #1
 8009264:	d003      	beq.n	800926e <_fwalk_reent+0x3a>
 8009266:	4629      	mov	r1, r5
 8009268:	4630      	mov	r0, r6
 800926a:	47c0      	blx	r8
 800926c:	4307      	orrs	r7, r0
 800926e:	3568      	adds	r5, #104	; 0x68
 8009270:	e7e9      	b.n	8009246 <_fwalk_reent+0x12>
	...

08009274 <_localeconv_r>:
 8009274:	4800      	ldr	r0, [pc, #0]	; (8009278 <_localeconv_r+0x4>)
 8009276:	4770      	bx	lr
 8009278:	20000220 	.word	0x20000220

0800927c <__retarget_lock_init_recursive>:
 800927c:	4770      	bx	lr

0800927e <__retarget_lock_acquire_recursive>:
 800927e:	4770      	bx	lr

08009280 <__retarget_lock_release_recursive>:
 8009280:	4770      	bx	lr

08009282 <__swhatbuf_r>:
 8009282:	b570      	push	{r4, r5, r6, lr}
 8009284:	460e      	mov	r6, r1
 8009286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800928a:	2900      	cmp	r1, #0
 800928c:	b096      	sub	sp, #88	; 0x58
 800928e:	4614      	mov	r4, r2
 8009290:	461d      	mov	r5, r3
 8009292:	da08      	bge.n	80092a6 <__swhatbuf_r+0x24>
 8009294:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	602a      	str	r2, [r5, #0]
 800929c:	061a      	lsls	r2, r3, #24
 800929e:	d410      	bmi.n	80092c2 <__swhatbuf_r+0x40>
 80092a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092a4:	e00e      	b.n	80092c4 <__swhatbuf_r+0x42>
 80092a6:	466a      	mov	r2, sp
 80092a8:	f000 ff1a 	bl	800a0e0 <_fstat_r>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	dbf1      	blt.n	8009294 <__swhatbuf_r+0x12>
 80092b0:	9a01      	ldr	r2, [sp, #4]
 80092b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092ba:	425a      	negs	r2, r3
 80092bc:	415a      	adcs	r2, r3
 80092be:	602a      	str	r2, [r5, #0]
 80092c0:	e7ee      	b.n	80092a0 <__swhatbuf_r+0x1e>
 80092c2:	2340      	movs	r3, #64	; 0x40
 80092c4:	2000      	movs	r0, #0
 80092c6:	6023      	str	r3, [r4, #0]
 80092c8:	b016      	add	sp, #88	; 0x58
 80092ca:	bd70      	pop	{r4, r5, r6, pc}

080092cc <__smakebuf_r>:
 80092cc:	898b      	ldrh	r3, [r1, #12]
 80092ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092d0:	079d      	lsls	r5, r3, #30
 80092d2:	4606      	mov	r6, r0
 80092d4:	460c      	mov	r4, r1
 80092d6:	d507      	bpl.n	80092e8 <__smakebuf_r+0x1c>
 80092d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092dc:	6023      	str	r3, [r4, #0]
 80092de:	6123      	str	r3, [r4, #16]
 80092e0:	2301      	movs	r3, #1
 80092e2:	6163      	str	r3, [r4, #20]
 80092e4:	b002      	add	sp, #8
 80092e6:	bd70      	pop	{r4, r5, r6, pc}
 80092e8:	ab01      	add	r3, sp, #4
 80092ea:	466a      	mov	r2, sp
 80092ec:	f7ff ffc9 	bl	8009282 <__swhatbuf_r>
 80092f0:	9900      	ldr	r1, [sp, #0]
 80092f2:	4605      	mov	r5, r0
 80092f4:	4630      	mov	r0, r6
 80092f6:	f000 fc37 	bl	8009b68 <_malloc_r>
 80092fa:	b948      	cbnz	r0, 8009310 <__smakebuf_r+0x44>
 80092fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009300:	059a      	lsls	r2, r3, #22
 8009302:	d4ef      	bmi.n	80092e4 <__smakebuf_r+0x18>
 8009304:	f023 0303 	bic.w	r3, r3, #3
 8009308:	f043 0302 	orr.w	r3, r3, #2
 800930c:	81a3      	strh	r3, [r4, #12]
 800930e:	e7e3      	b.n	80092d8 <__smakebuf_r+0xc>
 8009310:	4b0d      	ldr	r3, [pc, #52]	; (8009348 <__smakebuf_r+0x7c>)
 8009312:	62b3      	str	r3, [r6, #40]	; 0x28
 8009314:	89a3      	ldrh	r3, [r4, #12]
 8009316:	6020      	str	r0, [r4, #0]
 8009318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800931c:	81a3      	strh	r3, [r4, #12]
 800931e:	9b00      	ldr	r3, [sp, #0]
 8009320:	6163      	str	r3, [r4, #20]
 8009322:	9b01      	ldr	r3, [sp, #4]
 8009324:	6120      	str	r0, [r4, #16]
 8009326:	b15b      	cbz	r3, 8009340 <__smakebuf_r+0x74>
 8009328:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800932c:	4630      	mov	r0, r6
 800932e:	f000 fee9 	bl	800a104 <_isatty_r>
 8009332:	b128      	cbz	r0, 8009340 <__smakebuf_r+0x74>
 8009334:	89a3      	ldrh	r3, [r4, #12]
 8009336:	f023 0303 	bic.w	r3, r3, #3
 800933a:	f043 0301 	orr.w	r3, r3, #1
 800933e:	81a3      	strh	r3, [r4, #12]
 8009340:	89a0      	ldrh	r0, [r4, #12]
 8009342:	4305      	orrs	r5, r0
 8009344:	81a5      	strh	r5, [r4, #12]
 8009346:	e7cd      	b.n	80092e4 <__smakebuf_r+0x18>
 8009348:	080090d1 	.word	0x080090d1

0800934c <malloc>:
 800934c:	4b02      	ldr	r3, [pc, #8]	; (8009358 <malloc+0xc>)
 800934e:	4601      	mov	r1, r0
 8009350:	6818      	ldr	r0, [r3, #0]
 8009352:	f000 bc09 	b.w	8009b68 <_malloc_r>
 8009356:	bf00      	nop
 8009358:	200000cc 	.word	0x200000cc

0800935c <_Balloc>:
 800935c:	b570      	push	{r4, r5, r6, lr}
 800935e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009360:	4604      	mov	r4, r0
 8009362:	460d      	mov	r5, r1
 8009364:	b976      	cbnz	r6, 8009384 <_Balloc+0x28>
 8009366:	2010      	movs	r0, #16
 8009368:	f7ff fff0 	bl	800934c <malloc>
 800936c:	4602      	mov	r2, r0
 800936e:	6260      	str	r0, [r4, #36]	; 0x24
 8009370:	b920      	cbnz	r0, 800937c <_Balloc+0x20>
 8009372:	4b18      	ldr	r3, [pc, #96]	; (80093d4 <_Balloc+0x78>)
 8009374:	4818      	ldr	r0, [pc, #96]	; (80093d8 <_Balloc+0x7c>)
 8009376:	2166      	movs	r1, #102	; 0x66
 8009378:	f000 fe72 	bl	800a060 <__assert_func>
 800937c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009380:	6006      	str	r6, [r0, #0]
 8009382:	60c6      	str	r6, [r0, #12]
 8009384:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009386:	68f3      	ldr	r3, [r6, #12]
 8009388:	b183      	cbz	r3, 80093ac <_Balloc+0x50>
 800938a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009392:	b9b8      	cbnz	r0, 80093c4 <_Balloc+0x68>
 8009394:	2101      	movs	r1, #1
 8009396:	fa01 f605 	lsl.w	r6, r1, r5
 800939a:	1d72      	adds	r2, r6, #5
 800939c:	0092      	lsls	r2, r2, #2
 800939e:	4620      	mov	r0, r4
 80093a0:	f000 fb60 	bl	8009a64 <_calloc_r>
 80093a4:	b160      	cbz	r0, 80093c0 <_Balloc+0x64>
 80093a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093aa:	e00e      	b.n	80093ca <_Balloc+0x6e>
 80093ac:	2221      	movs	r2, #33	; 0x21
 80093ae:	2104      	movs	r1, #4
 80093b0:	4620      	mov	r0, r4
 80093b2:	f000 fb57 	bl	8009a64 <_calloc_r>
 80093b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093b8:	60f0      	str	r0, [r6, #12]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1e4      	bne.n	800938a <_Balloc+0x2e>
 80093c0:	2000      	movs	r0, #0
 80093c2:	bd70      	pop	{r4, r5, r6, pc}
 80093c4:	6802      	ldr	r2, [r0, #0]
 80093c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093ca:	2300      	movs	r3, #0
 80093cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093d0:	e7f7      	b.n	80093c2 <_Balloc+0x66>
 80093d2:	bf00      	nop
 80093d4:	0800a3d1 	.word	0x0800a3d1
 80093d8:	0800a4b4 	.word	0x0800a4b4

080093dc <_Bfree>:
 80093dc:	b570      	push	{r4, r5, r6, lr}
 80093de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093e0:	4605      	mov	r5, r0
 80093e2:	460c      	mov	r4, r1
 80093e4:	b976      	cbnz	r6, 8009404 <_Bfree+0x28>
 80093e6:	2010      	movs	r0, #16
 80093e8:	f7ff ffb0 	bl	800934c <malloc>
 80093ec:	4602      	mov	r2, r0
 80093ee:	6268      	str	r0, [r5, #36]	; 0x24
 80093f0:	b920      	cbnz	r0, 80093fc <_Bfree+0x20>
 80093f2:	4b09      	ldr	r3, [pc, #36]	; (8009418 <_Bfree+0x3c>)
 80093f4:	4809      	ldr	r0, [pc, #36]	; (800941c <_Bfree+0x40>)
 80093f6:	218a      	movs	r1, #138	; 0x8a
 80093f8:	f000 fe32 	bl	800a060 <__assert_func>
 80093fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009400:	6006      	str	r6, [r0, #0]
 8009402:	60c6      	str	r6, [r0, #12]
 8009404:	b13c      	cbz	r4, 8009416 <_Bfree+0x3a>
 8009406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009408:	6862      	ldr	r2, [r4, #4]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009410:	6021      	str	r1, [r4, #0]
 8009412:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009416:	bd70      	pop	{r4, r5, r6, pc}
 8009418:	0800a3d1 	.word	0x0800a3d1
 800941c:	0800a4b4 	.word	0x0800a4b4

08009420 <__multadd>:
 8009420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009424:	690d      	ldr	r5, [r1, #16]
 8009426:	4607      	mov	r7, r0
 8009428:	460c      	mov	r4, r1
 800942a:	461e      	mov	r6, r3
 800942c:	f101 0c14 	add.w	ip, r1, #20
 8009430:	2000      	movs	r0, #0
 8009432:	f8dc 3000 	ldr.w	r3, [ip]
 8009436:	b299      	uxth	r1, r3
 8009438:	fb02 6101 	mla	r1, r2, r1, r6
 800943c:	0c1e      	lsrs	r6, r3, #16
 800943e:	0c0b      	lsrs	r3, r1, #16
 8009440:	fb02 3306 	mla	r3, r2, r6, r3
 8009444:	b289      	uxth	r1, r1
 8009446:	3001      	adds	r0, #1
 8009448:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800944c:	4285      	cmp	r5, r0
 800944e:	f84c 1b04 	str.w	r1, [ip], #4
 8009452:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009456:	dcec      	bgt.n	8009432 <__multadd+0x12>
 8009458:	b30e      	cbz	r6, 800949e <__multadd+0x7e>
 800945a:	68a3      	ldr	r3, [r4, #8]
 800945c:	42ab      	cmp	r3, r5
 800945e:	dc19      	bgt.n	8009494 <__multadd+0x74>
 8009460:	6861      	ldr	r1, [r4, #4]
 8009462:	4638      	mov	r0, r7
 8009464:	3101      	adds	r1, #1
 8009466:	f7ff ff79 	bl	800935c <_Balloc>
 800946a:	4680      	mov	r8, r0
 800946c:	b928      	cbnz	r0, 800947a <__multadd+0x5a>
 800946e:	4602      	mov	r2, r0
 8009470:	4b0c      	ldr	r3, [pc, #48]	; (80094a4 <__multadd+0x84>)
 8009472:	480d      	ldr	r0, [pc, #52]	; (80094a8 <__multadd+0x88>)
 8009474:	21b5      	movs	r1, #181	; 0xb5
 8009476:	f000 fdf3 	bl	800a060 <__assert_func>
 800947a:	6922      	ldr	r2, [r4, #16]
 800947c:	3202      	adds	r2, #2
 800947e:	f104 010c 	add.w	r1, r4, #12
 8009482:	0092      	lsls	r2, r2, #2
 8009484:	300c      	adds	r0, #12
 8009486:	f7fe f8dd 	bl	8007644 <memcpy>
 800948a:	4621      	mov	r1, r4
 800948c:	4638      	mov	r0, r7
 800948e:	f7ff ffa5 	bl	80093dc <_Bfree>
 8009492:	4644      	mov	r4, r8
 8009494:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009498:	3501      	adds	r5, #1
 800949a:	615e      	str	r6, [r3, #20]
 800949c:	6125      	str	r5, [r4, #16]
 800949e:	4620      	mov	r0, r4
 80094a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094a4:	0800a443 	.word	0x0800a443
 80094a8:	0800a4b4 	.word	0x0800a4b4

080094ac <__hi0bits>:
 80094ac:	0c03      	lsrs	r3, r0, #16
 80094ae:	041b      	lsls	r3, r3, #16
 80094b0:	b9d3      	cbnz	r3, 80094e8 <__hi0bits+0x3c>
 80094b2:	0400      	lsls	r0, r0, #16
 80094b4:	2310      	movs	r3, #16
 80094b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80094ba:	bf04      	itt	eq
 80094bc:	0200      	lsleq	r0, r0, #8
 80094be:	3308      	addeq	r3, #8
 80094c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80094c4:	bf04      	itt	eq
 80094c6:	0100      	lsleq	r0, r0, #4
 80094c8:	3304      	addeq	r3, #4
 80094ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80094ce:	bf04      	itt	eq
 80094d0:	0080      	lsleq	r0, r0, #2
 80094d2:	3302      	addeq	r3, #2
 80094d4:	2800      	cmp	r0, #0
 80094d6:	db05      	blt.n	80094e4 <__hi0bits+0x38>
 80094d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094dc:	f103 0301 	add.w	r3, r3, #1
 80094e0:	bf08      	it	eq
 80094e2:	2320      	moveq	r3, #32
 80094e4:	4618      	mov	r0, r3
 80094e6:	4770      	bx	lr
 80094e8:	2300      	movs	r3, #0
 80094ea:	e7e4      	b.n	80094b6 <__hi0bits+0xa>

080094ec <__lo0bits>:
 80094ec:	6803      	ldr	r3, [r0, #0]
 80094ee:	f013 0207 	ands.w	r2, r3, #7
 80094f2:	4601      	mov	r1, r0
 80094f4:	d00b      	beq.n	800950e <__lo0bits+0x22>
 80094f6:	07da      	lsls	r2, r3, #31
 80094f8:	d423      	bmi.n	8009542 <__lo0bits+0x56>
 80094fa:	0798      	lsls	r0, r3, #30
 80094fc:	bf49      	itett	mi
 80094fe:	085b      	lsrmi	r3, r3, #1
 8009500:	089b      	lsrpl	r3, r3, #2
 8009502:	2001      	movmi	r0, #1
 8009504:	600b      	strmi	r3, [r1, #0]
 8009506:	bf5c      	itt	pl
 8009508:	600b      	strpl	r3, [r1, #0]
 800950a:	2002      	movpl	r0, #2
 800950c:	4770      	bx	lr
 800950e:	b298      	uxth	r0, r3
 8009510:	b9a8      	cbnz	r0, 800953e <__lo0bits+0x52>
 8009512:	0c1b      	lsrs	r3, r3, #16
 8009514:	2010      	movs	r0, #16
 8009516:	b2da      	uxtb	r2, r3
 8009518:	b90a      	cbnz	r2, 800951e <__lo0bits+0x32>
 800951a:	3008      	adds	r0, #8
 800951c:	0a1b      	lsrs	r3, r3, #8
 800951e:	071a      	lsls	r2, r3, #28
 8009520:	bf04      	itt	eq
 8009522:	091b      	lsreq	r3, r3, #4
 8009524:	3004      	addeq	r0, #4
 8009526:	079a      	lsls	r2, r3, #30
 8009528:	bf04      	itt	eq
 800952a:	089b      	lsreq	r3, r3, #2
 800952c:	3002      	addeq	r0, #2
 800952e:	07da      	lsls	r2, r3, #31
 8009530:	d403      	bmi.n	800953a <__lo0bits+0x4e>
 8009532:	085b      	lsrs	r3, r3, #1
 8009534:	f100 0001 	add.w	r0, r0, #1
 8009538:	d005      	beq.n	8009546 <__lo0bits+0x5a>
 800953a:	600b      	str	r3, [r1, #0]
 800953c:	4770      	bx	lr
 800953e:	4610      	mov	r0, r2
 8009540:	e7e9      	b.n	8009516 <__lo0bits+0x2a>
 8009542:	2000      	movs	r0, #0
 8009544:	4770      	bx	lr
 8009546:	2020      	movs	r0, #32
 8009548:	4770      	bx	lr
	...

0800954c <__i2b>:
 800954c:	b510      	push	{r4, lr}
 800954e:	460c      	mov	r4, r1
 8009550:	2101      	movs	r1, #1
 8009552:	f7ff ff03 	bl	800935c <_Balloc>
 8009556:	4602      	mov	r2, r0
 8009558:	b928      	cbnz	r0, 8009566 <__i2b+0x1a>
 800955a:	4b05      	ldr	r3, [pc, #20]	; (8009570 <__i2b+0x24>)
 800955c:	4805      	ldr	r0, [pc, #20]	; (8009574 <__i2b+0x28>)
 800955e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009562:	f000 fd7d 	bl	800a060 <__assert_func>
 8009566:	2301      	movs	r3, #1
 8009568:	6144      	str	r4, [r0, #20]
 800956a:	6103      	str	r3, [r0, #16]
 800956c:	bd10      	pop	{r4, pc}
 800956e:	bf00      	nop
 8009570:	0800a443 	.word	0x0800a443
 8009574:	0800a4b4 	.word	0x0800a4b4

08009578 <__multiply>:
 8009578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957c:	4691      	mov	r9, r2
 800957e:	690a      	ldr	r2, [r1, #16]
 8009580:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009584:	429a      	cmp	r2, r3
 8009586:	bfb8      	it	lt
 8009588:	460b      	movlt	r3, r1
 800958a:	460c      	mov	r4, r1
 800958c:	bfbc      	itt	lt
 800958e:	464c      	movlt	r4, r9
 8009590:	4699      	movlt	r9, r3
 8009592:	6927      	ldr	r7, [r4, #16]
 8009594:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009598:	68a3      	ldr	r3, [r4, #8]
 800959a:	6861      	ldr	r1, [r4, #4]
 800959c:	eb07 060a 	add.w	r6, r7, sl
 80095a0:	42b3      	cmp	r3, r6
 80095a2:	b085      	sub	sp, #20
 80095a4:	bfb8      	it	lt
 80095a6:	3101      	addlt	r1, #1
 80095a8:	f7ff fed8 	bl	800935c <_Balloc>
 80095ac:	b930      	cbnz	r0, 80095bc <__multiply+0x44>
 80095ae:	4602      	mov	r2, r0
 80095b0:	4b44      	ldr	r3, [pc, #272]	; (80096c4 <__multiply+0x14c>)
 80095b2:	4845      	ldr	r0, [pc, #276]	; (80096c8 <__multiply+0x150>)
 80095b4:	f240 115d 	movw	r1, #349	; 0x15d
 80095b8:	f000 fd52 	bl	800a060 <__assert_func>
 80095bc:	f100 0514 	add.w	r5, r0, #20
 80095c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80095c4:	462b      	mov	r3, r5
 80095c6:	2200      	movs	r2, #0
 80095c8:	4543      	cmp	r3, r8
 80095ca:	d321      	bcc.n	8009610 <__multiply+0x98>
 80095cc:	f104 0314 	add.w	r3, r4, #20
 80095d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80095d4:	f109 0314 	add.w	r3, r9, #20
 80095d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80095dc:	9202      	str	r2, [sp, #8]
 80095de:	1b3a      	subs	r2, r7, r4
 80095e0:	3a15      	subs	r2, #21
 80095e2:	f022 0203 	bic.w	r2, r2, #3
 80095e6:	3204      	adds	r2, #4
 80095e8:	f104 0115 	add.w	r1, r4, #21
 80095ec:	428f      	cmp	r7, r1
 80095ee:	bf38      	it	cc
 80095f0:	2204      	movcc	r2, #4
 80095f2:	9201      	str	r2, [sp, #4]
 80095f4:	9a02      	ldr	r2, [sp, #8]
 80095f6:	9303      	str	r3, [sp, #12]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d80c      	bhi.n	8009616 <__multiply+0x9e>
 80095fc:	2e00      	cmp	r6, #0
 80095fe:	dd03      	ble.n	8009608 <__multiply+0x90>
 8009600:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009604:	2b00      	cmp	r3, #0
 8009606:	d05a      	beq.n	80096be <__multiply+0x146>
 8009608:	6106      	str	r6, [r0, #16]
 800960a:	b005      	add	sp, #20
 800960c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009610:	f843 2b04 	str.w	r2, [r3], #4
 8009614:	e7d8      	b.n	80095c8 <__multiply+0x50>
 8009616:	f8b3 a000 	ldrh.w	sl, [r3]
 800961a:	f1ba 0f00 	cmp.w	sl, #0
 800961e:	d024      	beq.n	800966a <__multiply+0xf2>
 8009620:	f104 0e14 	add.w	lr, r4, #20
 8009624:	46a9      	mov	r9, r5
 8009626:	f04f 0c00 	mov.w	ip, #0
 800962a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800962e:	f8d9 1000 	ldr.w	r1, [r9]
 8009632:	fa1f fb82 	uxth.w	fp, r2
 8009636:	b289      	uxth	r1, r1
 8009638:	fb0a 110b 	mla	r1, sl, fp, r1
 800963c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009640:	f8d9 2000 	ldr.w	r2, [r9]
 8009644:	4461      	add	r1, ip
 8009646:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800964a:	fb0a c20b 	mla	r2, sl, fp, ip
 800964e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009652:	b289      	uxth	r1, r1
 8009654:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009658:	4577      	cmp	r7, lr
 800965a:	f849 1b04 	str.w	r1, [r9], #4
 800965e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009662:	d8e2      	bhi.n	800962a <__multiply+0xb2>
 8009664:	9a01      	ldr	r2, [sp, #4]
 8009666:	f845 c002 	str.w	ip, [r5, r2]
 800966a:	9a03      	ldr	r2, [sp, #12]
 800966c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009670:	3304      	adds	r3, #4
 8009672:	f1b9 0f00 	cmp.w	r9, #0
 8009676:	d020      	beq.n	80096ba <__multiply+0x142>
 8009678:	6829      	ldr	r1, [r5, #0]
 800967a:	f104 0c14 	add.w	ip, r4, #20
 800967e:	46ae      	mov	lr, r5
 8009680:	f04f 0a00 	mov.w	sl, #0
 8009684:	f8bc b000 	ldrh.w	fp, [ip]
 8009688:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800968c:	fb09 220b 	mla	r2, r9, fp, r2
 8009690:	4492      	add	sl, r2
 8009692:	b289      	uxth	r1, r1
 8009694:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009698:	f84e 1b04 	str.w	r1, [lr], #4
 800969c:	f85c 2b04 	ldr.w	r2, [ip], #4
 80096a0:	f8be 1000 	ldrh.w	r1, [lr]
 80096a4:	0c12      	lsrs	r2, r2, #16
 80096a6:	fb09 1102 	mla	r1, r9, r2, r1
 80096aa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80096ae:	4567      	cmp	r7, ip
 80096b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80096b4:	d8e6      	bhi.n	8009684 <__multiply+0x10c>
 80096b6:	9a01      	ldr	r2, [sp, #4]
 80096b8:	50a9      	str	r1, [r5, r2]
 80096ba:	3504      	adds	r5, #4
 80096bc:	e79a      	b.n	80095f4 <__multiply+0x7c>
 80096be:	3e01      	subs	r6, #1
 80096c0:	e79c      	b.n	80095fc <__multiply+0x84>
 80096c2:	bf00      	nop
 80096c4:	0800a443 	.word	0x0800a443
 80096c8:	0800a4b4 	.word	0x0800a4b4

080096cc <__pow5mult>:
 80096cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096d0:	4615      	mov	r5, r2
 80096d2:	f012 0203 	ands.w	r2, r2, #3
 80096d6:	4606      	mov	r6, r0
 80096d8:	460f      	mov	r7, r1
 80096da:	d007      	beq.n	80096ec <__pow5mult+0x20>
 80096dc:	4c25      	ldr	r4, [pc, #148]	; (8009774 <__pow5mult+0xa8>)
 80096de:	3a01      	subs	r2, #1
 80096e0:	2300      	movs	r3, #0
 80096e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096e6:	f7ff fe9b 	bl	8009420 <__multadd>
 80096ea:	4607      	mov	r7, r0
 80096ec:	10ad      	asrs	r5, r5, #2
 80096ee:	d03d      	beq.n	800976c <__pow5mult+0xa0>
 80096f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80096f2:	b97c      	cbnz	r4, 8009714 <__pow5mult+0x48>
 80096f4:	2010      	movs	r0, #16
 80096f6:	f7ff fe29 	bl	800934c <malloc>
 80096fa:	4602      	mov	r2, r0
 80096fc:	6270      	str	r0, [r6, #36]	; 0x24
 80096fe:	b928      	cbnz	r0, 800970c <__pow5mult+0x40>
 8009700:	4b1d      	ldr	r3, [pc, #116]	; (8009778 <__pow5mult+0xac>)
 8009702:	481e      	ldr	r0, [pc, #120]	; (800977c <__pow5mult+0xb0>)
 8009704:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009708:	f000 fcaa 	bl	800a060 <__assert_func>
 800970c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009710:	6004      	str	r4, [r0, #0]
 8009712:	60c4      	str	r4, [r0, #12]
 8009714:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009718:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800971c:	b94c      	cbnz	r4, 8009732 <__pow5mult+0x66>
 800971e:	f240 2171 	movw	r1, #625	; 0x271
 8009722:	4630      	mov	r0, r6
 8009724:	f7ff ff12 	bl	800954c <__i2b>
 8009728:	2300      	movs	r3, #0
 800972a:	f8c8 0008 	str.w	r0, [r8, #8]
 800972e:	4604      	mov	r4, r0
 8009730:	6003      	str	r3, [r0, #0]
 8009732:	f04f 0900 	mov.w	r9, #0
 8009736:	07eb      	lsls	r3, r5, #31
 8009738:	d50a      	bpl.n	8009750 <__pow5mult+0x84>
 800973a:	4639      	mov	r1, r7
 800973c:	4622      	mov	r2, r4
 800973e:	4630      	mov	r0, r6
 8009740:	f7ff ff1a 	bl	8009578 <__multiply>
 8009744:	4639      	mov	r1, r7
 8009746:	4680      	mov	r8, r0
 8009748:	4630      	mov	r0, r6
 800974a:	f7ff fe47 	bl	80093dc <_Bfree>
 800974e:	4647      	mov	r7, r8
 8009750:	106d      	asrs	r5, r5, #1
 8009752:	d00b      	beq.n	800976c <__pow5mult+0xa0>
 8009754:	6820      	ldr	r0, [r4, #0]
 8009756:	b938      	cbnz	r0, 8009768 <__pow5mult+0x9c>
 8009758:	4622      	mov	r2, r4
 800975a:	4621      	mov	r1, r4
 800975c:	4630      	mov	r0, r6
 800975e:	f7ff ff0b 	bl	8009578 <__multiply>
 8009762:	6020      	str	r0, [r4, #0]
 8009764:	f8c0 9000 	str.w	r9, [r0]
 8009768:	4604      	mov	r4, r0
 800976a:	e7e4      	b.n	8009736 <__pow5mult+0x6a>
 800976c:	4638      	mov	r0, r7
 800976e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009772:	bf00      	nop
 8009774:	0800a600 	.word	0x0800a600
 8009778:	0800a3d1 	.word	0x0800a3d1
 800977c:	0800a4b4 	.word	0x0800a4b4

08009780 <__lshift>:
 8009780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009784:	460c      	mov	r4, r1
 8009786:	6849      	ldr	r1, [r1, #4]
 8009788:	6923      	ldr	r3, [r4, #16]
 800978a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800978e:	68a3      	ldr	r3, [r4, #8]
 8009790:	4607      	mov	r7, r0
 8009792:	4691      	mov	r9, r2
 8009794:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009798:	f108 0601 	add.w	r6, r8, #1
 800979c:	42b3      	cmp	r3, r6
 800979e:	db0b      	blt.n	80097b8 <__lshift+0x38>
 80097a0:	4638      	mov	r0, r7
 80097a2:	f7ff fddb 	bl	800935c <_Balloc>
 80097a6:	4605      	mov	r5, r0
 80097a8:	b948      	cbnz	r0, 80097be <__lshift+0x3e>
 80097aa:	4602      	mov	r2, r0
 80097ac:	4b2a      	ldr	r3, [pc, #168]	; (8009858 <__lshift+0xd8>)
 80097ae:	482b      	ldr	r0, [pc, #172]	; (800985c <__lshift+0xdc>)
 80097b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80097b4:	f000 fc54 	bl	800a060 <__assert_func>
 80097b8:	3101      	adds	r1, #1
 80097ba:	005b      	lsls	r3, r3, #1
 80097bc:	e7ee      	b.n	800979c <__lshift+0x1c>
 80097be:	2300      	movs	r3, #0
 80097c0:	f100 0114 	add.w	r1, r0, #20
 80097c4:	f100 0210 	add.w	r2, r0, #16
 80097c8:	4618      	mov	r0, r3
 80097ca:	4553      	cmp	r3, sl
 80097cc:	db37      	blt.n	800983e <__lshift+0xbe>
 80097ce:	6920      	ldr	r0, [r4, #16]
 80097d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097d4:	f104 0314 	add.w	r3, r4, #20
 80097d8:	f019 091f 	ands.w	r9, r9, #31
 80097dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80097e4:	d02f      	beq.n	8009846 <__lshift+0xc6>
 80097e6:	f1c9 0e20 	rsb	lr, r9, #32
 80097ea:	468a      	mov	sl, r1
 80097ec:	f04f 0c00 	mov.w	ip, #0
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	fa02 f209 	lsl.w	r2, r2, r9
 80097f6:	ea42 020c 	orr.w	r2, r2, ip
 80097fa:	f84a 2b04 	str.w	r2, [sl], #4
 80097fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009802:	4298      	cmp	r0, r3
 8009804:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009808:	d8f2      	bhi.n	80097f0 <__lshift+0x70>
 800980a:	1b03      	subs	r3, r0, r4
 800980c:	3b15      	subs	r3, #21
 800980e:	f023 0303 	bic.w	r3, r3, #3
 8009812:	3304      	adds	r3, #4
 8009814:	f104 0215 	add.w	r2, r4, #21
 8009818:	4290      	cmp	r0, r2
 800981a:	bf38      	it	cc
 800981c:	2304      	movcc	r3, #4
 800981e:	f841 c003 	str.w	ip, [r1, r3]
 8009822:	f1bc 0f00 	cmp.w	ip, #0
 8009826:	d001      	beq.n	800982c <__lshift+0xac>
 8009828:	f108 0602 	add.w	r6, r8, #2
 800982c:	3e01      	subs	r6, #1
 800982e:	4638      	mov	r0, r7
 8009830:	612e      	str	r6, [r5, #16]
 8009832:	4621      	mov	r1, r4
 8009834:	f7ff fdd2 	bl	80093dc <_Bfree>
 8009838:	4628      	mov	r0, r5
 800983a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800983e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009842:	3301      	adds	r3, #1
 8009844:	e7c1      	b.n	80097ca <__lshift+0x4a>
 8009846:	3904      	subs	r1, #4
 8009848:	f853 2b04 	ldr.w	r2, [r3], #4
 800984c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009850:	4298      	cmp	r0, r3
 8009852:	d8f9      	bhi.n	8009848 <__lshift+0xc8>
 8009854:	e7ea      	b.n	800982c <__lshift+0xac>
 8009856:	bf00      	nop
 8009858:	0800a443 	.word	0x0800a443
 800985c:	0800a4b4 	.word	0x0800a4b4

08009860 <__mcmp>:
 8009860:	b530      	push	{r4, r5, lr}
 8009862:	6902      	ldr	r2, [r0, #16]
 8009864:	690c      	ldr	r4, [r1, #16]
 8009866:	1b12      	subs	r2, r2, r4
 8009868:	d10e      	bne.n	8009888 <__mcmp+0x28>
 800986a:	f100 0314 	add.w	r3, r0, #20
 800986e:	3114      	adds	r1, #20
 8009870:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009874:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009878:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800987c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009880:	42a5      	cmp	r5, r4
 8009882:	d003      	beq.n	800988c <__mcmp+0x2c>
 8009884:	d305      	bcc.n	8009892 <__mcmp+0x32>
 8009886:	2201      	movs	r2, #1
 8009888:	4610      	mov	r0, r2
 800988a:	bd30      	pop	{r4, r5, pc}
 800988c:	4283      	cmp	r3, r0
 800988e:	d3f3      	bcc.n	8009878 <__mcmp+0x18>
 8009890:	e7fa      	b.n	8009888 <__mcmp+0x28>
 8009892:	f04f 32ff 	mov.w	r2, #4294967295
 8009896:	e7f7      	b.n	8009888 <__mcmp+0x28>

08009898 <__mdiff>:
 8009898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989c:	460c      	mov	r4, r1
 800989e:	4606      	mov	r6, r0
 80098a0:	4611      	mov	r1, r2
 80098a2:	4620      	mov	r0, r4
 80098a4:	4690      	mov	r8, r2
 80098a6:	f7ff ffdb 	bl	8009860 <__mcmp>
 80098aa:	1e05      	subs	r5, r0, #0
 80098ac:	d110      	bne.n	80098d0 <__mdiff+0x38>
 80098ae:	4629      	mov	r1, r5
 80098b0:	4630      	mov	r0, r6
 80098b2:	f7ff fd53 	bl	800935c <_Balloc>
 80098b6:	b930      	cbnz	r0, 80098c6 <__mdiff+0x2e>
 80098b8:	4b3a      	ldr	r3, [pc, #232]	; (80099a4 <__mdiff+0x10c>)
 80098ba:	4602      	mov	r2, r0
 80098bc:	f240 2132 	movw	r1, #562	; 0x232
 80098c0:	4839      	ldr	r0, [pc, #228]	; (80099a8 <__mdiff+0x110>)
 80098c2:	f000 fbcd 	bl	800a060 <__assert_func>
 80098c6:	2301      	movs	r3, #1
 80098c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d0:	bfa4      	itt	ge
 80098d2:	4643      	movge	r3, r8
 80098d4:	46a0      	movge	r8, r4
 80098d6:	4630      	mov	r0, r6
 80098d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098dc:	bfa6      	itte	ge
 80098de:	461c      	movge	r4, r3
 80098e0:	2500      	movge	r5, #0
 80098e2:	2501      	movlt	r5, #1
 80098e4:	f7ff fd3a 	bl	800935c <_Balloc>
 80098e8:	b920      	cbnz	r0, 80098f4 <__mdiff+0x5c>
 80098ea:	4b2e      	ldr	r3, [pc, #184]	; (80099a4 <__mdiff+0x10c>)
 80098ec:	4602      	mov	r2, r0
 80098ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 80098f2:	e7e5      	b.n	80098c0 <__mdiff+0x28>
 80098f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80098f8:	6926      	ldr	r6, [r4, #16]
 80098fa:	60c5      	str	r5, [r0, #12]
 80098fc:	f104 0914 	add.w	r9, r4, #20
 8009900:	f108 0514 	add.w	r5, r8, #20
 8009904:	f100 0e14 	add.w	lr, r0, #20
 8009908:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800990c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009910:	f108 0210 	add.w	r2, r8, #16
 8009914:	46f2      	mov	sl, lr
 8009916:	2100      	movs	r1, #0
 8009918:	f859 3b04 	ldr.w	r3, [r9], #4
 800991c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009920:	fa1f f883 	uxth.w	r8, r3
 8009924:	fa11 f18b 	uxtah	r1, r1, fp
 8009928:	0c1b      	lsrs	r3, r3, #16
 800992a:	eba1 0808 	sub.w	r8, r1, r8
 800992e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009932:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009936:	fa1f f888 	uxth.w	r8, r8
 800993a:	1419      	asrs	r1, r3, #16
 800993c:	454e      	cmp	r6, r9
 800993e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009942:	f84a 3b04 	str.w	r3, [sl], #4
 8009946:	d8e7      	bhi.n	8009918 <__mdiff+0x80>
 8009948:	1b33      	subs	r3, r6, r4
 800994a:	3b15      	subs	r3, #21
 800994c:	f023 0303 	bic.w	r3, r3, #3
 8009950:	3304      	adds	r3, #4
 8009952:	3415      	adds	r4, #21
 8009954:	42a6      	cmp	r6, r4
 8009956:	bf38      	it	cc
 8009958:	2304      	movcc	r3, #4
 800995a:	441d      	add	r5, r3
 800995c:	4473      	add	r3, lr
 800995e:	469e      	mov	lr, r3
 8009960:	462e      	mov	r6, r5
 8009962:	4566      	cmp	r6, ip
 8009964:	d30e      	bcc.n	8009984 <__mdiff+0xec>
 8009966:	f10c 0203 	add.w	r2, ip, #3
 800996a:	1b52      	subs	r2, r2, r5
 800996c:	f022 0203 	bic.w	r2, r2, #3
 8009970:	3d03      	subs	r5, #3
 8009972:	45ac      	cmp	ip, r5
 8009974:	bf38      	it	cc
 8009976:	2200      	movcc	r2, #0
 8009978:	441a      	add	r2, r3
 800997a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800997e:	b17b      	cbz	r3, 80099a0 <__mdiff+0x108>
 8009980:	6107      	str	r7, [r0, #16]
 8009982:	e7a3      	b.n	80098cc <__mdiff+0x34>
 8009984:	f856 8b04 	ldr.w	r8, [r6], #4
 8009988:	fa11 f288 	uxtah	r2, r1, r8
 800998c:	1414      	asrs	r4, r2, #16
 800998e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009992:	b292      	uxth	r2, r2
 8009994:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009998:	f84e 2b04 	str.w	r2, [lr], #4
 800999c:	1421      	asrs	r1, r4, #16
 800999e:	e7e0      	b.n	8009962 <__mdiff+0xca>
 80099a0:	3f01      	subs	r7, #1
 80099a2:	e7ea      	b.n	800997a <__mdiff+0xe2>
 80099a4:	0800a443 	.word	0x0800a443
 80099a8:	0800a4b4 	.word	0x0800a4b4

080099ac <__d2b>:
 80099ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099b0:	4689      	mov	r9, r1
 80099b2:	2101      	movs	r1, #1
 80099b4:	ec57 6b10 	vmov	r6, r7, d0
 80099b8:	4690      	mov	r8, r2
 80099ba:	f7ff fccf 	bl	800935c <_Balloc>
 80099be:	4604      	mov	r4, r0
 80099c0:	b930      	cbnz	r0, 80099d0 <__d2b+0x24>
 80099c2:	4602      	mov	r2, r0
 80099c4:	4b25      	ldr	r3, [pc, #148]	; (8009a5c <__d2b+0xb0>)
 80099c6:	4826      	ldr	r0, [pc, #152]	; (8009a60 <__d2b+0xb4>)
 80099c8:	f240 310a 	movw	r1, #778	; 0x30a
 80099cc:	f000 fb48 	bl	800a060 <__assert_func>
 80099d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80099d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80099d8:	bb35      	cbnz	r5, 8009a28 <__d2b+0x7c>
 80099da:	2e00      	cmp	r6, #0
 80099dc:	9301      	str	r3, [sp, #4]
 80099de:	d028      	beq.n	8009a32 <__d2b+0x86>
 80099e0:	4668      	mov	r0, sp
 80099e2:	9600      	str	r6, [sp, #0]
 80099e4:	f7ff fd82 	bl	80094ec <__lo0bits>
 80099e8:	9900      	ldr	r1, [sp, #0]
 80099ea:	b300      	cbz	r0, 8009a2e <__d2b+0x82>
 80099ec:	9a01      	ldr	r2, [sp, #4]
 80099ee:	f1c0 0320 	rsb	r3, r0, #32
 80099f2:	fa02 f303 	lsl.w	r3, r2, r3
 80099f6:	430b      	orrs	r3, r1
 80099f8:	40c2      	lsrs	r2, r0
 80099fa:	6163      	str	r3, [r4, #20]
 80099fc:	9201      	str	r2, [sp, #4]
 80099fe:	9b01      	ldr	r3, [sp, #4]
 8009a00:	61a3      	str	r3, [r4, #24]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	bf14      	ite	ne
 8009a06:	2202      	movne	r2, #2
 8009a08:	2201      	moveq	r2, #1
 8009a0a:	6122      	str	r2, [r4, #16]
 8009a0c:	b1d5      	cbz	r5, 8009a44 <__d2b+0x98>
 8009a0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a12:	4405      	add	r5, r0
 8009a14:	f8c9 5000 	str.w	r5, [r9]
 8009a18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a1c:	f8c8 0000 	str.w	r0, [r8]
 8009a20:	4620      	mov	r0, r4
 8009a22:	b003      	add	sp, #12
 8009a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a2c:	e7d5      	b.n	80099da <__d2b+0x2e>
 8009a2e:	6161      	str	r1, [r4, #20]
 8009a30:	e7e5      	b.n	80099fe <__d2b+0x52>
 8009a32:	a801      	add	r0, sp, #4
 8009a34:	f7ff fd5a 	bl	80094ec <__lo0bits>
 8009a38:	9b01      	ldr	r3, [sp, #4]
 8009a3a:	6163      	str	r3, [r4, #20]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	6122      	str	r2, [r4, #16]
 8009a40:	3020      	adds	r0, #32
 8009a42:	e7e3      	b.n	8009a0c <__d2b+0x60>
 8009a44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a4c:	f8c9 0000 	str.w	r0, [r9]
 8009a50:	6918      	ldr	r0, [r3, #16]
 8009a52:	f7ff fd2b 	bl	80094ac <__hi0bits>
 8009a56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a5a:	e7df      	b.n	8009a1c <__d2b+0x70>
 8009a5c:	0800a443 	.word	0x0800a443
 8009a60:	0800a4b4 	.word	0x0800a4b4

08009a64 <_calloc_r>:
 8009a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a66:	fba1 2402 	umull	r2, r4, r1, r2
 8009a6a:	b94c      	cbnz	r4, 8009a80 <_calloc_r+0x1c>
 8009a6c:	4611      	mov	r1, r2
 8009a6e:	9201      	str	r2, [sp, #4]
 8009a70:	f000 f87a 	bl	8009b68 <_malloc_r>
 8009a74:	9a01      	ldr	r2, [sp, #4]
 8009a76:	4605      	mov	r5, r0
 8009a78:	b930      	cbnz	r0, 8009a88 <_calloc_r+0x24>
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	b003      	add	sp, #12
 8009a7e:	bd30      	pop	{r4, r5, pc}
 8009a80:	220c      	movs	r2, #12
 8009a82:	6002      	str	r2, [r0, #0]
 8009a84:	2500      	movs	r5, #0
 8009a86:	e7f8      	b.n	8009a7a <_calloc_r+0x16>
 8009a88:	4621      	mov	r1, r4
 8009a8a:	f7fd fde9 	bl	8007660 <memset>
 8009a8e:	e7f4      	b.n	8009a7a <_calloc_r+0x16>

08009a90 <_free_r>:
 8009a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a92:	2900      	cmp	r1, #0
 8009a94:	d044      	beq.n	8009b20 <_free_r+0x90>
 8009a96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a9a:	9001      	str	r0, [sp, #4]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f1a1 0404 	sub.w	r4, r1, #4
 8009aa2:	bfb8      	it	lt
 8009aa4:	18e4      	addlt	r4, r4, r3
 8009aa6:	f000 fb61 	bl	800a16c <__malloc_lock>
 8009aaa:	4a1e      	ldr	r2, [pc, #120]	; (8009b24 <_free_r+0x94>)
 8009aac:	9801      	ldr	r0, [sp, #4]
 8009aae:	6813      	ldr	r3, [r2, #0]
 8009ab0:	b933      	cbnz	r3, 8009ac0 <_free_r+0x30>
 8009ab2:	6063      	str	r3, [r4, #4]
 8009ab4:	6014      	str	r4, [r2, #0]
 8009ab6:	b003      	add	sp, #12
 8009ab8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009abc:	f000 bb5c 	b.w	800a178 <__malloc_unlock>
 8009ac0:	42a3      	cmp	r3, r4
 8009ac2:	d908      	bls.n	8009ad6 <_free_r+0x46>
 8009ac4:	6825      	ldr	r5, [r4, #0]
 8009ac6:	1961      	adds	r1, r4, r5
 8009ac8:	428b      	cmp	r3, r1
 8009aca:	bf01      	itttt	eq
 8009acc:	6819      	ldreq	r1, [r3, #0]
 8009ace:	685b      	ldreq	r3, [r3, #4]
 8009ad0:	1949      	addeq	r1, r1, r5
 8009ad2:	6021      	streq	r1, [r4, #0]
 8009ad4:	e7ed      	b.n	8009ab2 <_free_r+0x22>
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	b10b      	cbz	r3, 8009ae0 <_free_r+0x50>
 8009adc:	42a3      	cmp	r3, r4
 8009ade:	d9fa      	bls.n	8009ad6 <_free_r+0x46>
 8009ae0:	6811      	ldr	r1, [r2, #0]
 8009ae2:	1855      	adds	r5, r2, r1
 8009ae4:	42a5      	cmp	r5, r4
 8009ae6:	d10b      	bne.n	8009b00 <_free_r+0x70>
 8009ae8:	6824      	ldr	r4, [r4, #0]
 8009aea:	4421      	add	r1, r4
 8009aec:	1854      	adds	r4, r2, r1
 8009aee:	42a3      	cmp	r3, r4
 8009af0:	6011      	str	r1, [r2, #0]
 8009af2:	d1e0      	bne.n	8009ab6 <_free_r+0x26>
 8009af4:	681c      	ldr	r4, [r3, #0]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	6053      	str	r3, [r2, #4]
 8009afa:	4421      	add	r1, r4
 8009afc:	6011      	str	r1, [r2, #0]
 8009afe:	e7da      	b.n	8009ab6 <_free_r+0x26>
 8009b00:	d902      	bls.n	8009b08 <_free_r+0x78>
 8009b02:	230c      	movs	r3, #12
 8009b04:	6003      	str	r3, [r0, #0]
 8009b06:	e7d6      	b.n	8009ab6 <_free_r+0x26>
 8009b08:	6825      	ldr	r5, [r4, #0]
 8009b0a:	1961      	adds	r1, r4, r5
 8009b0c:	428b      	cmp	r3, r1
 8009b0e:	bf04      	itt	eq
 8009b10:	6819      	ldreq	r1, [r3, #0]
 8009b12:	685b      	ldreq	r3, [r3, #4]
 8009b14:	6063      	str	r3, [r4, #4]
 8009b16:	bf04      	itt	eq
 8009b18:	1949      	addeq	r1, r1, r5
 8009b1a:	6021      	streq	r1, [r4, #0]
 8009b1c:	6054      	str	r4, [r2, #4]
 8009b1e:	e7ca      	b.n	8009ab6 <_free_r+0x26>
 8009b20:	b003      	add	sp, #12
 8009b22:	bd30      	pop	{r4, r5, pc}
 8009b24:	200005e4 	.word	0x200005e4

08009b28 <sbrk_aligned>:
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	4e0e      	ldr	r6, [pc, #56]	; (8009b64 <sbrk_aligned+0x3c>)
 8009b2c:	460c      	mov	r4, r1
 8009b2e:	6831      	ldr	r1, [r6, #0]
 8009b30:	4605      	mov	r5, r0
 8009b32:	b911      	cbnz	r1, 8009b3a <sbrk_aligned+0x12>
 8009b34:	f000 fa2e 	bl	8009f94 <_sbrk_r>
 8009b38:	6030      	str	r0, [r6, #0]
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	f000 fa29 	bl	8009f94 <_sbrk_r>
 8009b42:	1c43      	adds	r3, r0, #1
 8009b44:	d00a      	beq.n	8009b5c <sbrk_aligned+0x34>
 8009b46:	1cc4      	adds	r4, r0, #3
 8009b48:	f024 0403 	bic.w	r4, r4, #3
 8009b4c:	42a0      	cmp	r0, r4
 8009b4e:	d007      	beq.n	8009b60 <sbrk_aligned+0x38>
 8009b50:	1a21      	subs	r1, r4, r0
 8009b52:	4628      	mov	r0, r5
 8009b54:	f000 fa1e 	bl	8009f94 <_sbrk_r>
 8009b58:	3001      	adds	r0, #1
 8009b5a:	d101      	bne.n	8009b60 <sbrk_aligned+0x38>
 8009b5c:	f04f 34ff 	mov.w	r4, #4294967295
 8009b60:	4620      	mov	r0, r4
 8009b62:	bd70      	pop	{r4, r5, r6, pc}
 8009b64:	200005e8 	.word	0x200005e8

08009b68 <_malloc_r>:
 8009b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b6c:	1ccd      	adds	r5, r1, #3
 8009b6e:	f025 0503 	bic.w	r5, r5, #3
 8009b72:	3508      	adds	r5, #8
 8009b74:	2d0c      	cmp	r5, #12
 8009b76:	bf38      	it	cc
 8009b78:	250c      	movcc	r5, #12
 8009b7a:	2d00      	cmp	r5, #0
 8009b7c:	4607      	mov	r7, r0
 8009b7e:	db01      	blt.n	8009b84 <_malloc_r+0x1c>
 8009b80:	42a9      	cmp	r1, r5
 8009b82:	d905      	bls.n	8009b90 <_malloc_r+0x28>
 8009b84:	230c      	movs	r3, #12
 8009b86:	603b      	str	r3, [r7, #0]
 8009b88:	2600      	movs	r6, #0
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b90:	4e2e      	ldr	r6, [pc, #184]	; (8009c4c <_malloc_r+0xe4>)
 8009b92:	f000 faeb 	bl	800a16c <__malloc_lock>
 8009b96:	6833      	ldr	r3, [r6, #0]
 8009b98:	461c      	mov	r4, r3
 8009b9a:	bb34      	cbnz	r4, 8009bea <_malloc_r+0x82>
 8009b9c:	4629      	mov	r1, r5
 8009b9e:	4638      	mov	r0, r7
 8009ba0:	f7ff ffc2 	bl	8009b28 <sbrk_aligned>
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	d14d      	bne.n	8009c46 <_malloc_r+0xde>
 8009baa:	6834      	ldr	r4, [r6, #0]
 8009bac:	4626      	mov	r6, r4
 8009bae:	2e00      	cmp	r6, #0
 8009bb0:	d140      	bne.n	8009c34 <_malloc_r+0xcc>
 8009bb2:	6823      	ldr	r3, [r4, #0]
 8009bb4:	4631      	mov	r1, r6
 8009bb6:	4638      	mov	r0, r7
 8009bb8:	eb04 0803 	add.w	r8, r4, r3
 8009bbc:	f000 f9ea 	bl	8009f94 <_sbrk_r>
 8009bc0:	4580      	cmp	r8, r0
 8009bc2:	d13a      	bne.n	8009c3a <_malloc_r+0xd2>
 8009bc4:	6821      	ldr	r1, [r4, #0]
 8009bc6:	3503      	adds	r5, #3
 8009bc8:	1a6d      	subs	r5, r5, r1
 8009bca:	f025 0503 	bic.w	r5, r5, #3
 8009bce:	3508      	adds	r5, #8
 8009bd0:	2d0c      	cmp	r5, #12
 8009bd2:	bf38      	it	cc
 8009bd4:	250c      	movcc	r5, #12
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	4638      	mov	r0, r7
 8009bda:	f7ff ffa5 	bl	8009b28 <sbrk_aligned>
 8009bde:	3001      	adds	r0, #1
 8009be0:	d02b      	beq.n	8009c3a <_malloc_r+0xd2>
 8009be2:	6823      	ldr	r3, [r4, #0]
 8009be4:	442b      	add	r3, r5
 8009be6:	6023      	str	r3, [r4, #0]
 8009be8:	e00e      	b.n	8009c08 <_malloc_r+0xa0>
 8009bea:	6822      	ldr	r2, [r4, #0]
 8009bec:	1b52      	subs	r2, r2, r5
 8009bee:	d41e      	bmi.n	8009c2e <_malloc_r+0xc6>
 8009bf0:	2a0b      	cmp	r2, #11
 8009bf2:	d916      	bls.n	8009c22 <_malloc_r+0xba>
 8009bf4:	1961      	adds	r1, r4, r5
 8009bf6:	42a3      	cmp	r3, r4
 8009bf8:	6025      	str	r5, [r4, #0]
 8009bfa:	bf18      	it	ne
 8009bfc:	6059      	strne	r1, [r3, #4]
 8009bfe:	6863      	ldr	r3, [r4, #4]
 8009c00:	bf08      	it	eq
 8009c02:	6031      	streq	r1, [r6, #0]
 8009c04:	5162      	str	r2, [r4, r5]
 8009c06:	604b      	str	r3, [r1, #4]
 8009c08:	4638      	mov	r0, r7
 8009c0a:	f104 060b 	add.w	r6, r4, #11
 8009c0e:	f000 fab3 	bl	800a178 <__malloc_unlock>
 8009c12:	f026 0607 	bic.w	r6, r6, #7
 8009c16:	1d23      	adds	r3, r4, #4
 8009c18:	1af2      	subs	r2, r6, r3
 8009c1a:	d0b6      	beq.n	8009b8a <_malloc_r+0x22>
 8009c1c:	1b9b      	subs	r3, r3, r6
 8009c1e:	50a3      	str	r3, [r4, r2]
 8009c20:	e7b3      	b.n	8009b8a <_malloc_r+0x22>
 8009c22:	6862      	ldr	r2, [r4, #4]
 8009c24:	42a3      	cmp	r3, r4
 8009c26:	bf0c      	ite	eq
 8009c28:	6032      	streq	r2, [r6, #0]
 8009c2a:	605a      	strne	r2, [r3, #4]
 8009c2c:	e7ec      	b.n	8009c08 <_malloc_r+0xa0>
 8009c2e:	4623      	mov	r3, r4
 8009c30:	6864      	ldr	r4, [r4, #4]
 8009c32:	e7b2      	b.n	8009b9a <_malloc_r+0x32>
 8009c34:	4634      	mov	r4, r6
 8009c36:	6876      	ldr	r6, [r6, #4]
 8009c38:	e7b9      	b.n	8009bae <_malloc_r+0x46>
 8009c3a:	230c      	movs	r3, #12
 8009c3c:	603b      	str	r3, [r7, #0]
 8009c3e:	4638      	mov	r0, r7
 8009c40:	f000 fa9a 	bl	800a178 <__malloc_unlock>
 8009c44:	e7a1      	b.n	8009b8a <_malloc_r+0x22>
 8009c46:	6025      	str	r5, [r4, #0]
 8009c48:	e7de      	b.n	8009c08 <_malloc_r+0xa0>
 8009c4a:	bf00      	nop
 8009c4c:	200005e4 	.word	0x200005e4

08009c50 <__sfputc_r>:
 8009c50:	6893      	ldr	r3, [r2, #8]
 8009c52:	3b01      	subs	r3, #1
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	b410      	push	{r4}
 8009c58:	6093      	str	r3, [r2, #8]
 8009c5a:	da08      	bge.n	8009c6e <__sfputc_r+0x1e>
 8009c5c:	6994      	ldr	r4, [r2, #24]
 8009c5e:	42a3      	cmp	r3, r4
 8009c60:	db01      	blt.n	8009c66 <__sfputc_r+0x16>
 8009c62:	290a      	cmp	r1, #10
 8009c64:	d103      	bne.n	8009c6e <__sfputc_r+0x1e>
 8009c66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c6a:	f7fe ba0f 	b.w	800808c <__swbuf_r>
 8009c6e:	6813      	ldr	r3, [r2, #0]
 8009c70:	1c58      	adds	r0, r3, #1
 8009c72:	6010      	str	r0, [r2, #0]
 8009c74:	7019      	strb	r1, [r3, #0]
 8009c76:	4608      	mov	r0, r1
 8009c78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c7c:	4770      	bx	lr

08009c7e <__sfputs_r>:
 8009c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c80:	4606      	mov	r6, r0
 8009c82:	460f      	mov	r7, r1
 8009c84:	4614      	mov	r4, r2
 8009c86:	18d5      	adds	r5, r2, r3
 8009c88:	42ac      	cmp	r4, r5
 8009c8a:	d101      	bne.n	8009c90 <__sfputs_r+0x12>
 8009c8c:	2000      	movs	r0, #0
 8009c8e:	e007      	b.n	8009ca0 <__sfputs_r+0x22>
 8009c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c94:	463a      	mov	r2, r7
 8009c96:	4630      	mov	r0, r6
 8009c98:	f7ff ffda 	bl	8009c50 <__sfputc_r>
 8009c9c:	1c43      	adds	r3, r0, #1
 8009c9e:	d1f3      	bne.n	8009c88 <__sfputs_r+0xa>
 8009ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ca4 <_vfiprintf_r>:
 8009ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca8:	460d      	mov	r5, r1
 8009caa:	b09d      	sub	sp, #116	; 0x74
 8009cac:	4614      	mov	r4, r2
 8009cae:	4698      	mov	r8, r3
 8009cb0:	4606      	mov	r6, r0
 8009cb2:	b118      	cbz	r0, 8009cbc <_vfiprintf_r+0x18>
 8009cb4:	6983      	ldr	r3, [r0, #24]
 8009cb6:	b90b      	cbnz	r3, 8009cbc <_vfiprintf_r+0x18>
 8009cb8:	f7ff fa3e 	bl	8009138 <__sinit>
 8009cbc:	4b89      	ldr	r3, [pc, #548]	; (8009ee4 <_vfiprintf_r+0x240>)
 8009cbe:	429d      	cmp	r5, r3
 8009cc0:	d11b      	bne.n	8009cfa <_vfiprintf_r+0x56>
 8009cc2:	6875      	ldr	r5, [r6, #4]
 8009cc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cc6:	07d9      	lsls	r1, r3, #31
 8009cc8:	d405      	bmi.n	8009cd6 <_vfiprintf_r+0x32>
 8009cca:	89ab      	ldrh	r3, [r5, #12]
 8009ccc:	059a      	lsls	r2, r3, #22
 8009cce:	d402      	bmi.n	8009cd6 <_vfiprintf_r+0x32>
 8009cd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cd2:	f7ff fad4 	bl	800927e <__retarget_lock_acquire_recursive>
 8009cd6:	89ab      	ldrh	r3, [r5, #12]
 8009cd8:	071b      	lsls	r3, r3, #28
 8009cda:	d501      	bpl.n	8009ce0 <_vfiprintf_r+0x3c>
 8009cdc:	692b      	ldr	r3, [r5, #16]
 8009cde:	b9eb      	cbnz	r3, 8009d1c <_vfiprintf_r+0x78>
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f7fe fa24 	bl	8008130 <__swsetup_r>
 8009ce8:	b1c0      	cbz	r0, 8009d1c <_vfiprintf_r+0x78>
 8009cea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cec:	07dc      	lsls	r4, r3, #31
 8009cee:	d50e      	bpl.n	8009d0e <_vfiprintf_r+0x6a>
 8009cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf4:	b01d      	add	sp, #116	; 0x74
 8009cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cfa:	4b7b      	ldr	r3, [pc, #492]	; (8009ee8 <_vfiprintf_r+0x244>)
 8009cfc:	429d      	cmp	r5, r3
 8009cfe:	d101      	bne.n	8009d04 <_vfiprintf_r+0x60>
 8009d00:	68b5      	ldr	r5, [r6, #8]
 8009d02:	e7df      	b.n	8009cc4 <_vfiprintf_r+0x20>
 8009d04:	4b79      	ldr	r3, [pc, #484]	; (8009eec <_vfiprintf_r+0x248>)
 8009d06:	429d      	cmp	r5, r3
 8009d08:	bf08      	it	eq
 8009d0a:	68f5      	ldreq	r5, [r6, #12]
 8009d0c:	e7da      	b.n	8009cc4 <_vfiprintf_r+0x20>
 8009d0e:	89ab      	ldrh	r3, [r5, #12]
 8009d10:	0598      	lsls	r0, r3, #22
 8009d12:	d4ed      	bmi.n	8009cf0 <_vfiprintf_r+0x4c>
 8009d14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d16:	f7ff fab3 	bl	8009280 <__retarget_lock_release_recursive>
 8009d1a:	e7e9      	b.n	8009cf0 <_vfiprintf_r+0x4c>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d20:	2320      	movs	r3, #32
 8009d22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d26:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d2a:	2330      	movs	r3, #48	; 0x30
 8009d2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ef0 <_vfiprintf_r+0x24c>
 8009d30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d34:	f04f 0901 	mov.w	r9, #1
 8009d38:	4623      	mov	r3, r4
 8009d3a:	469a      	mov	sl, r3
 8009d3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d40:	b10a      	cbz	r2, 8009d46 <_vfiprintf_r+0xa2>
 8009d42:	2a25      	cmp	r2, #37	; 0x25
 8009d44:	d1f9      	bne.n	8009d3a <_vfiprintf_r+0x96>
 8009d46:	ebba 0b04 	subs.w	fp, sl, r4
 8009d4a:	d00b      	beq.n	8009d64 <_vfiprintf_r+0xc0>
 8009d4c:	465b      	mov	r3, fp
 8009d4e:	4622      	mov	r2, r4
 8009d50:	4629      	mov	r1, r5
 8009d52:	4630      	mov	r0, r6
 8009d54:	f7ff ff93 	bl	8009c7e <__sfputs_r>
 8009d58:	3001      	adds	r0, #1
 8009d5a:	f000 80aa 	beq.w	8009eb2 <_vfiprintf_r+0x20e>
 8009d5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d60:	445a      	add	r2, fp
 8009d62:	9209      	str	r2, [sp, #36]	; 0x24
 8009d64:	f89a 3000 	ldrb.w	r3, [sl]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f000 80a2 	beq.w	8009eb2 <_vfiprintf_r+0x20e>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	f04f 32ff 	mov.w	r2, #4294967295
 8009d74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d78:	f10a 0a01 	add.w	sl, sl, #1
 8009d7c:	9304      	str	r3, [sp, #16]
 8009d7e:	9307      	str	r3, [sp, #28]
 8009d80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d84:	931a      	str	r3, [sp, #104]	; 0x68
 8009d86:	4654      	mov	r4, sl
 8009d88:	2205      	movs	r2, #5
 8009d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d8e:	4858      	ldr	r0, [pc, #352]	; (8009ef0 <_vfiprintf_r+0x24c>)
 8009d90:	f7f6 fa3e 	bl	8000210 <memchr>
 8009d94:	9a04      	ldr	r2, [sp, #16]
 8009d96:	b9d8      	cbnz	r0, 8009dd0 <_vfiprintf_r+0x12c>
 8009d98:	06d1      	lsls	r1, r2, #27
 8009d9a:	bf44      	itt	mi
 8009d9c:	2320      	movmi	r3, #32
 8009d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009da2:	0713      	lsls	r3, r2, #28
 8009da4:	bf44      	itt	mi
 8009da6:	232b      	movmi	r3, #43	; 0x2b
 8009da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dac:	f89a 3000 	ldrb.w	r3, [sl]
 8009db0:	2b2a      	cmp	r3, #42	; 0x2a
 8009db2:	d015      	beq.n	8009de0 <_vfiprintf_r+0x13c>
 8009db4:	9a07      	ldr	r2, [sp, #28]
 8009db6:	4654      	mov	r4, sl
 8009db8:	2000      	movs	r0, #0
 8009dba:	f04f 0c0a 	mov.w	ip, #10
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dc4:	3b30      	subs	r3, #48	; 0x30
 8009dc6:	2b09      	cmp	r3, #9
 8009dc8:	d94e      	bls.n	8009e68 <_vfiprintf_r+0x1c4>
 8009dca:	b1b0      	cbz	r0, 8009dfa <_vfiprintf_r+0x156>
 8009dcc:	9207      	str	r2, [sp, #28]
 8009dce:	e014      	b.n	8009dfa <_vfiprintf_r+0x156>
 8009dd0:	eba0 0308 	sub.w	r3, r0, r8
 8009dd4:	fa09 f303 	lsl.w	r3, r9, r3
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	9304      	str	r3, [sp, #16]
 8009ddc:	46a2      	mov	sl, r4
 8009dde:	e7d2      	b.n	8009d86 <_vfiprintf_r+0xe2>
 8009de0:	9b03      	ldr	r3, [sp, #12]
 8009de2:	1d19      	adds	r1, r3, #4
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	9103      	str	r1, [sp, #12]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	bfbb      	ittet	lt
 8009dec:	425b      	neglt	r3, r3
 8009dee:	f042 0202 	orrlt.w	r2, r2, #2
 8009df2:	9307      	strge	r3, [sp, #28]
 8009df4:	9307      	strlt	r3, [sp, #28]
 8009df6:	bfb8      	it	lt
 8009df8:	9204      	strlt	r2, [sp, #16]
 8009dfa:	7823      	ldrb	r3, [r4, #0]
 8009dfc:	2b2e      	cmp	r3, #46	; 0x2e
 8009dfe:	d10c      	bne.n	8009e1a <_vfiprintf_r+0x176>
 8009e00:	7863      	ldrb	r3, [r4, #1]
 8009e02:	2b2a      	cmp	r3, #42	; 0x2a
 8009e04:	d135      	bne.n	8009e72 <_vfiprintf_r+0x1ce>
 8009e06:	9b03      	ldr	r3, [sp, #12]
 8009e08:	1d1a      	adds	r2, r3, #4
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	9203      	str	r2, [sp, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	bfb8      	it	lt
 8009e12:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e16:	3402      	adds	r4, #2
 8009e18:	9305      	str	r3, [sp, #20]
 8009e1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f00 <_vfiprintf_r+0x25c>
 8009e1e:	7821      	ldrb	r1, [r4, #0]
 8009e20:	2203      	movs	r2, #3
 8009e22:	4650      	mov	r0, sl
 8009e24:	f7f6 f9f4 	bl	8000210 <memchr>
 8009e28:	b140      	cbz	r0, 8009e3c <_vfiprintf_r+0x198>
 8009e2a:	2340      	movs	r3, #64	; 0x40
 8009e2c:	eba0 000a 	sub.w	r0, r0, sl
 8009e30:	fa03 f000 	lsl.w	r0, r3, r0
 8009e34:	9b04      	ldr	r3, [sp, #16]
 8009e36:	4303      	orrs	r3, r0
 8009e38:	3401      	adds	r4, #1
 8009e3a:	9304      	str	r3, [sp, #16]
 8009e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e40:	482c      	ldr	r0, [pc, #176]	; (8009ef4 <_vfiprintf_r+0x250>)
 8009e42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e46:	2206      	movs	r2, #6
 8009e48:	f7f6 f9e2 	bl	8000210 <memchr>
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	d03f      	beq.n	8009ed0 <_vfiprintf_r+0x22c>
 8009e50:	4b29      	ldr	r3, [pc, #164]	; (8009ef8 <_vfiprintf_r+0x254>)
 8009e52:	bb1b      	cbnz	r3, 8009e9c <_vfiprintf_r+0x1f8>
 8009e54:	9b03      	ldr	r3, [sp, #12]
 8009e56:	3307      	adds	r3, #7
 8009e58:	f023 0307 	bic.w	r3, r3, #7
 8009e5c:	3308      	adds	r3, #8
 8009e5e:	9303      	str	r3, [sp, #12]
 8009e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e62:	443b      	add	r3, r7
 8009e64:	9309      	str	r3, [sp, #36]	; 0x24
 8009e66:	e767      	b.n	8009d38 <_vfiprintf_r+0x94>
 8009e68:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e6c:	460c      	mov	r4, r1
 8009e6e:	2001      	movs	r0, #1
 8009e70:	e7a5      	b.n	8009dbe <_vfiprintf_r+0x11a>
 8009e72:	2300      	movs	r3, #0
 8009e74:	3401      	adds	r4, #1
 8009e76:	9305      	str	r3, [sp, #20]
 8009e78:	4619      	mov	r1, r3
 8009e7a:	f04f 0c0a 	mov.w	ip, #10
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e84:	3a30      	subs	r2, #48	; 0x30
 8009e86:	2a09      	cmp	r2, #9
 8009e88:	d903      	bls.n	8009e92 <_vfiprintf_r+0x1ee>
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d0c5      	beq.n	8009e1a <_vfiprintf_r+0x176>
 8009e8e:	9105      	str	r1, [sp, #20]
 8009e90:	e7c3      	b.n	8009e1a <_vfiprintf_r+0x176>
 8009e92:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e96:	4604      	mov	r4, r0
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e7f0      	b.n	8009e7e <_vfiprintf_r+0x1da>
 8009e9c:	ab03      	add	r3, sp, #12
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	462a      	mov	r2, r5
 8009ea2:	4b16      	ldr	r3, [pc, #88]	; (8009efc <_vfiprintf_r+0x258>)
 8009ea4:	a904      	add	r1, sp, #16
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	f7fd fc82 	bl	80077b0 <_printf_float>
 8009eac:	4607      	mov	r7, r0
 8009eae:	1c78      	adds	r0, r7, #1
 8009eb0:	d1d6      	bne.n	8009e60 <_vfiprintf_r+0x1bc>
 8009eb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009eb4:	07d9      	lsls	r1, r3, #31
 8009eb6:	d405      	bmi.n	8009ec4 <_vfiprintf_r+0x220>
 8009eb8:	89ab      	ldrh	r3, [r5, #12]
 8009eba:	059a      	lsls	r2, r3, #22
 8009ebc:	d402      	bmi.n	8009ec4 <_vfiprintf_r+0x220>
 8009ebe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ec0:	f7ff f9de 	bl	8009280 <__retarget_lock_release_recursive>
 8009ec4:	89ab      	ldrh	r3, [r5, #12]
 8009ec6:	065b      	lsls	r3, r3, #25
 8009ec8:	f53f af12 	bmi.w	8009cf0 <_vfiprintf_r+0x4c>
 8009ecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ece:	e711      	b.n	8009cf4 <_vfiprintf_r+0x50>
 8009ed0:	ab03      	add	r3, sp, #12
 8009ed2:	9300      	str	r3, [sp, #0]
 8009ed4:	462a      	mov	r2, r5
 8009ed6:	4b09      	ldr	r3, [pc, #36]	; (8009efc <_vfiprintf_r+0x258>)
 8009ed8:	a904      	add	r1, sp, #16
 8009eda:	4630      	mov	r0, r6
 8009edc:	f7fd ff0c 	bl	8007cf8 <_printf_i>
 8009ee0:	e7e4      	b.n	8009eac <_vfiprintf_r+0x208>
 8009ee2:	bf00      	nop
 8009ee4:	0800a474 	.word	0x0800a474
 8009ee8:	0800a494 	.word	0x0800a494
 8009eec:	0800a454 	.word	0x0800a454
 8009ef0:	0800a60c 	.word	0x0800a60c
 8009ef4:	0800a616 	.word	0x0800a616
 8009ef8:	080077b1 	.word	0x080077b1
 8009efc:	08009c7f 	.word	0x08009c7f
 8009f00:	0800a612 	.word	0x0800a612

08009f04 <_putc_r>:
 8009f04:	b570      	push	{r4, r5, r6, lr}
 8009f06:	460d      	mov	r5, r1
 8009f08:	4614      	mov	r4, r2
 8009f0a:	4606      	mov	r6, r0
 8009f0c:	b118      	cbz	r0, 8009f16 <_putc_r+0x12>
 8009f0e:	6983      	ldr	r3, [r0, #24]
 8009f10:	b90b      	cbnz	r3, 8009f16 <_putc_r+0x12>
 8009f12:	f7ff f911 	bl	8009138 <__sinit>
 8009f16:	4b1c      	ldr	r3, [pc, #112]	; (8009f88 <_putc_r+0x84>)
 8009f18:	429c      	cmp	r4, r3
 8009f1a:	d124      	bne.n	8009f66 <_putc_r+0x62>
 8009f1c:	6874      	ldr	r4, [r6, #4]
 8009f1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f20:	07d8      	lsls	r0, r3, #31
 8009f22:	d405      	bmi.n	8009f30 <_putc_r+0x2c>
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	0599      	lsls	r1, r3, #22
 8009f28:	d402      	bmi.n	8009f30 <_putc_r+0x2c>
 8009f2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f2c:	f7ff f9a7 	bl	800927e <__retarget_lock_acquire_recursive>
 8009f30:	68a3      	ldr	r3, [r4, #8]
 8009f32:	3b01      	subs	r3, #1
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	60a3      	str	r3, [r4, #8]
 8009f38:	da05      	bge.n	8009f46 <_putc_r+0x42>
 8009f3a:	69a2      	ldr	r2, [r4, #24]
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	db1c      	blt.n	8009f7a <_putc_r+0x76>
 8009f40:	b2eb      	uxtb	r3, r5
 8009f42:	2b0a      	cmp	r3, #10
 8009f44:	d019      	beq.n	8009f7a <_putc_r+0x76>
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	1c5a      	adds	r2, r3, #1
 8009f4a:	6022      	str	r2, [r4, #0]
 8009f4c:	701d      	strb	r5, [r3, #0]
 8009f4e:	b2ed      	uxtb	r5, r5
 8009f50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f52:	07da      	lsls	r2, r3, #31
 8009f54:	d405      	bmi.n	8009f62 <_putc_r+0x5e>
 8009f56:	89a3      	ldrh	r3, [r4, #12]
 8009f58:	059b      	lsls	r3, r3, #22
 8009f5a:	d402      	bmi.n	8009f62 <_putc_r+0x5e>
 8009f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f5e:	f7ff f98f 	bl	8009280 <__retarget_lock_release_recursive>
 8009f62:	4628      	mov	r0, r5
 8009f64:	bd70      	pop	{r4, r5, r6, pc}
 8009f66:	4b09      	ldr	r3, [pc, #36]	; (8009f8c <_putc_r+0x88>)
 8009f68:	429c      	cmp	r4, r3
 8009f6a:	d101      	bne.n	8009f70 <_putc_r+0x6c>
 8009f6c:	68b4      	ldr	r4, [r6, #8]
 8009f6e:	e7d6      	b.n	8009f1e <_putc_r+0x1a>
 8009f70:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <_putc_r+0x8c>)
 8009f72:	429c      	cmp	r4, r3
 8009f74:	bf08      	it	eq
 8009f76:	68f4      	ldreq	r4, [r6, #12]
 8009f78:	e7d1      	b.n	8009f1e <_putc_r+0x1a>
 8009f7a:	4629      	mov	r1, r5
 8009f7c:	4622      	mov	r2, r4
 8009f7e:	4630      	mov	r0, r6
 8009f80:	f7fe f884 	bl	800808c <__swbuf_r>
 8009f84:	4605      	mov	r5, r0
 8009f86:	e7e3      	b.n	8009f50 <_putc_r+0x4c>
 8009f88:	0800a474 	.word	0x0800a474
 8009f8c:	0800a494 	.word	0x0800a494
 8009f90:	0800a454 	.word	0x0800a454

08009f94 <_sbrk_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	4d06      	ldr	r5, [pc, #24]	; (8009fb0 <_sbrk_r+0x1c>)
 8009f98:	2300      	movs	r3, #0
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	4608      	mov	r0, r1
 8009f9e:	602b      	str	r3, [r5, #0]
 8009fa0:	f7fd fab4 	bl	800750c <_sbrk>
 8009fa4:	1c43      	adds	r3, r0, #1
 8009fa6:	d102      	bne.n	8009fae <_sbrk_r+0x1a>
 8009fa8:	682b      	ldr	r3, [r5, #0]
 8009faa:	b103      	cbz	r3, 8009fae <_sbrk_r+0x1a>
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	bd38      	pop	{r3, r4, r5, pc}
 8009fb0:	200005ec 	.word	0x200005ec

08009fb4 <__sread>:
 8009fb4:	b510      	push	{r4, lr}
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fbc:	f000 f8e2 	bl	800a184 <_read_r>
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	bfab      	itete	ge
 8009fc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009fc6:	89a3      	ldrhlt	r3, [r4, #12]
 8009fc8:	181b      	addge	r3, r3, r0
 8009fca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009fce:	bfac      	ite	ge
 8009fd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009fd2:	81a3      	strhlt	r3, [r4, #12]
 8009fd4:	bd10      	pop	{r4, pc}

08009fd6 <__swrite>:
 8009fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fda:	461f      	mov	r7, r3
 8009fdc:	898b      	ldrh	r3, [r1, #12]
 8009fde:	05db      	lsls	r3, r3, #23
 8009fe0:	4605      	mov	r5, r0
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	4616      	mov	r6, r2
 8009fe6:	d505      	bpl.n	8009ff4 <__swrite+0x1e>
 8009fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fec:	2302      	movs	r3, #2
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f000 f898 	bl	800a124 <_lseek_r>
 8009ff4:	89a3      	ldrh	r3, [r4, #12]
 8009ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ffa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ffe:	81a3      	strh	r3, [r4, #12]
 800a000:	4632      	mov	r2, r6
 800a002:	463b      	mov	r3, r7
 800a004:	4628      	mov	r0, r5
 800a006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a00a:	f000 b817 	b.w	800a03c <_write_r>

0800a00e <__sseek>:
 800a00e:	b510      	push	{r4, lr}
 800a010:	460c      	mov	r4, r1
 800a012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a016:	f000 f885 	bl	800a124 <_lseek_r>
 800a01a:	1c43      	adds	r3, r0, #1
 800a01c:	89a3      	ldrh	r3, [r4, #12]
 800a01e:	bf15      	itete	ne
 800a020:	6560      	strne	r0, [r4, #84]	; 0x54
 800a022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a02a:	81a3      	strheq	r3, [r4, #12]
 800a02c:	bf18      	it	ne
 800a02e:	81a3      	strhne	r3, [r4, #12]
 800a030:	bd10      	pop	{r4, pc}

0800a032 <__sclose>:
 800a032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a036:	f000 b831 	b.w	800a09c <_close_r>
	...

0800a03c <_write_r>:
 800a03c:	b538      	push	{r3, r4, r5, lr}
 800a03e:	4d07      	ldr	r5, [pc, #28]	; (800a05c <_write_r+0x20>)
 800a040:	4604      	mov	r4, r0
 800a042:	4608      	mov	r0, r1
 800a044:	4611      	mov	r1, r2
 800a046:	2200      	movs	r2, #0
 800a048:	602a      	str	r2, [r5, #0]
 800a04a:	461a      	mov	r2, r3
 800a04c:	f7fc fc82 	bl	8006954 <_write>
 800a050:	1c43      	adds	r3, r0, #1
 800a052:	d102      	bne.n	800a05a <_write_r+0x1e>
 800a054:	682b      	ldr	r3, [r5, #0]
 800a056:	b103      	cbz	r3, 800a05a <_write_r+0x1e>
 800a058:	6023      	str	r3, [r4, #0]
 800a05a:	bd38      	pop	{r3, r4, r5, pc}
 800a05c:	200005ec 	.word	0x200005ec

0800a060 <__assert_func>:
 800a060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a062:	4614      	mov	r4, r2
 800a064:	461a      	mov	r2, r3
 800a066:	4b09      	ldr	r3, [pc, #36]	; (800a08c <__assert_func+0x2c>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4605      	mov	r5, r0
 800a06c:	68d8      	ldr	r0, [r3, #12]
 800a06e:	b14c      	cbz	r4, 800a084 <__assert_func+0x24>
 800a070:	4b07      	ldr	r3, [pc, #28]	; (800a090 <__assert_func+0x30>)
 800a072:	9100      	str	r1, [sp, #0]
 800a074:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a078:	4906      	ldr	r1, [pc, #24]	; (800a094 <__assert_func+0x34>)
 800a07a:	462b      	mov	r3, r5
 800a07c:	f000 f81e 	bl	800a0bc <fiprintf>
 800a080:	f000 f89f 	bl	800a1c2 <abort>
 800a084:	4b04      	ldr	r3, [pc, #16]	; (800a098 <__assert_func+0x38>)
 800a086:	461c      	mov	r4, r3
 800a088:	e7f3      	b.n	800a072 <__assert_func+0x12>
 800a08a:	bf00      	nop
 800a08c:	200000cc 	.word	0x200000cc
 800a090:	0800a61d 	.word	0x0800a61d
 800a094:	0800a62a 	.word	0x0800a62a
 800a098:	0800a658 	.word	0x0800a658

0800a09c <_close_r>:
 800a09c:	b538      	push	{r3, r4, r5, lr}
 800a09e:	4d06      	ldr	r5, [pc, #24]	; (800a0b8 <_close_r+0x1c>)
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	4608      	mov	r0, r1
 800a0a6:	602b      	str	r3, [r5, #0]
 800a0a8:	f7fd f9fb 	bl	80074a2 <_close>
 800a0ac:	1c43      	adds	r3, r0, #1
 800a0ae:	d102      	bne.n	800a0b6 <_close_r+0x1a>
 800a0b0:	682b      	ldr	r3, [r5, #0]
 800a0b2:	b103      	cbz	r3, 800a0b6 <_close_r+0x1a>
 800a0b4:	6023      	str	r3, [r4, #0]
 800a0b6:	bd38      	pop	{r3, r4, r5, pc}
 800a0b8:	200005ec 	.word	0x200005ec

0800a0bc <fiprintf>:
 800a0bc:	b40e      	push	{r1, r2, r3}
 800a0be:	b503      	push	{r0, r1, lr}
 800a0c0:	4601      	mov	r1, r0
 800a0c2:	ab03      	add	r3, sp, #12
 800a0c4:	4805      	ldr	r0, [pc, #20]	; (800a0dc <fiprintf+0x20>)
 800a0c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0ca:	6800      	ldr	r0, [r0, #0]
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	f7ff fde9 	bl	8009ca4 <_vfiprintf_r>
 800a0d2:	b002      	add	sp, #8
 800a0d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0d8:	b003      	add	sp, #12
 800a0da:	4770      	bx	lr
 800a0dc:	200000cc 	.word	0x200000cc

0800a0e0 <_fstat_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4d07      	ldr	r5, [pc, #28]	; (800a100 <_fstat_r+0x20>)
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	602b      	str	r3, [r5, #0]
 800a0ee:	f7fd f9e4 	bl	80074ba <_fstat>
 800a0f2:	1c43      	adds	r3, r0, #1
 800a0f4:	d102      	bne.n	800a0fc <_fstat_r+0x1c>
 800a0f6:	682b      	ldr	r3, [r5, #0]
 800a0f8:	b103      	cbz	r3, 800a0fc <_fstat_r+0x1c>
 800a0fa:	6023      	str	r3, [r4, #0]
 800a0fc:	bd38      	pop	{r3, r4, r5, pc}
 800a0fe:	bf00      	nop
 800a100:	200005ec 	.word	0x200005ec

0800a104 <_isatty_r>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	4d06      	ldr	r5, [pc, #24]	; (800a120 <_isatty_r+0x1c>)
 800a108:	2300      	movs	r3, #0
 800a10a:	4604      	mov	r4, r0
 800a10c:	4608      	mov	r0, r1
 800a10e:	602b      	str	r3, [r5, #0]
 800a110:	f7fd f9e3 	bl	80074da <_isatty>
 800a114:	1c43      	adds	r3, r0, #1
 800a116:	d102      	bne.n	800a11e <_isatty_r+0x1a>
 800a118:	682b      	ldr	r3, [r5, #0]
 800a11a:	b103      	cbz	r3, 800a11e <_isatty_r+0x1a>
 800a11c:	6023      	str	r3, [r4, #0]
 800a11e:	bd38      	pop	{r3, r4, r5, pc}
 800a120:	200005ec 	.word	0x200005ec

0800a124 <_lseek_r>:
 800a124:	b538      	push	{r3, r4, r5, lr}
 800a126:	4d07      	ldr	r5, [pc, #28]	; (800a144 <_lseek_r+0x20>)
 800a128:	4604      	mov	r4, r0
 800a12a:	4608      	mov	r0, r1
 800a12c:	4611      	mov	r1, r2
 800a12e:	2200      	movs	r2, #0
 800a130:	602a      	str	r2, [r5, #0]
 800a132:	461a      	mov	r2, r3
 800a134:	f7fd f9dc 	bl	80074f0 <_lseek>
 800a138:	1c43      	adds	r3, r0, #1
 800a13a:	d102      	bne.n	800a142 <_lseek_r+0x1e>
 800a13c:	682b      	ldr	r3, [r5, #0]
 800a13e:	b103      	cbz	r3, 800a142 <_lseek_r+0x1e>
 800a140:	6023      	str	r3, [r4, #0]
 800a142:	bd38      	pop	{r3, r4, r5, pc}
 800a144:	200005ec 	.word	0x200005ec

0800a148 <__ascii_mbtowc>:
 800a148:	b082      	sub	sp, #8
 800a14a:	b901      	cbnz	r1, 800a14e <__ascii_mbtowc+0x6>
 800a14c:	a901      	add	r1, sp, #4
 800a14e:	b142      	cbz	r2, 800a162 <__ascii_mbtowc+0x1a>
 800a150:	b14b      	cbz	r3, 800a166 <__ascii_mbtowc+0x1e>
 800a152:	7813      	ldrb	r3, [r2, #0]
 800a154:	600b      	str	r3, [r1, #0]
 800a156:	7812      	ldrb	r2, [r2, #0]
 800a158:	1e10      	subs	r0, r2, #0
 800a15a:	bf18      	it	ne
 800a15c:	2001      	movne	r0, #1
 800a15e:	b002      	add	sp, #8
 800a160:	4770      	bx	lr
 800a162:	4610      	mov	r0, r2
 800a164:	e7fb      	b.n	800a15e <__ascii_mbtowc+0x16>
 800a166:	f06f 0001 	mvn.w	r0, #1
 800a16a:	e7f8      	b.n	800a15e <__ascii_mbtowc+0x16>

0800a16c <__malloc_lock>:
 800a16c:	4801      	ldr	r0, [pc, #4]	; (800a174 <__malloc_lock+0x8>)
 800a16e:	f7ff b886 	b.w	800927e <__retarget_lock_acquire_recursive>
 800a172:	bf00      	nop
 800a174:	200005e0 	.word	0x200005e0

0800a178 <__malloc_unlock>:
 800a178:	4801      	ldr	r0, [pc, #4]	; (800a180 <__malloc_unlock+0x8>)
 800a17a:	f7ff b881 	b.w	8009280 <__retarget_lock_release_recursive>
 800a17e:	bf00      	nop
 800a180:	200005e0 	.word	0x200005e0

0800a184 <_read_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	4d07      	ldr	r5, [pc, #28]	; (800a1a4 <_read_r+0x20>)
 800a188:	4604      	mov	r4, r0
 800a18a:	4608      	mov	r0, r1
 800a18c:	4611      	mov	r1, r2
 800a18e:	2200      	movs	r2, #0
 800a190:	602a      	str	r2, [r5, #0]
 800a192:	461a      	mov	r2, r3
 800a194:	f7fd f968 	bl	8007468 <_read>
 800a198:	1c43      	adds	r3, r0, #1
 800a19a:	d102      	bne.n	800a1a2 <_read_r+0x1e>
 800a19c:	682b      	ldr	r3, [r5, #0]
 800a19e:	b103      	cbz	r3, 800a1a2 <_read_r+0x1e>
 800a1a0:	6023      	str	r3, [r4, #0]
 800a1a2:	bd38      	pop	{r3, r4, r5, pc}
 800a1a4:	200005ec 	.word	0x200005ec

0800a1a8 <__ascii_wctomb>:
 800a1a8:	b149      	cbz	r1, 800a1be <__ascii_wctomb+0x16>
 800a1aa:	2aff      	cmp	r2, #255	; 0xff
 800a1ac:	bf85      	ittet	hi
 800a1ae:	238a      	movhi	r3, #138	; 0x8a
 800a1b0:	6003      	strhi	r3, [r0, #0]
 800a1b2:	700a      	strbls	r2, [r1, #0]
 800a1b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a1b8:	bf98      	it	ls
 800a1ba:	2001      	movls	r0, #1
 800a1bc:	4770      	bx	lr
 800a1be:	4608      	mov	r0, r1
 800a1c0:	4770      	bx	lr

0800a1c2 <abort>:
 800a1c2:	b508      	push	{r3, lr}
 800a1c4:	2006      	movs	r0, #6
 800a1c6:	f000 f82b 	bl	800a220 <raise>
 800a1ca:	2001      	movs	r0, #1
 800a1cc:	f7fd f942 	bl	8007454 <_exit>

0800a1d0 <_raise_r>:
 800a1d0:	291f      	cmp	r1, #31
 800a1d2:	b538      	push	{r3, r4, r5, lr}
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	460d      	mov	r5, r1
 800a1d8:	d904      	bls.n	800a1e4 <_raise_r+0x14>
 800a1da:	2316      	movs	r3, #22
 800a1dc:	6003      	str	r3, [r0, #0]
 800a1de:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e2:	bd38      	pop	{r3, r4, r5, pc}
 800a1e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a1e6:	b112      	cbz	r2, 800a1ee <_raise_r+0x1e>
 800a1e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1ec:	b94b      	cbnz	r3, 800a202 <_raise_r+0x32>
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	f000 f830 	bl	800a254 <_getpid_r>
 800a1f4:	462a      	mov	r2, r5
 800a1f6:	4601      	mov	r1, r0
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1fe:	f000 b817 	b.w	800a230 <_kill_r>
 800a202:	2b01      	cmp	r3, #1
 800a204:	d00a      	beq.n	800a21c <_raise_r+0x4c>
 800a206:	1c59      	adds	r1, r3, #1
 800a208:	d103      	bne.n	800a212 <_raise_r+0x42>
 800a20a:	2316      	movs	r3, #22
 800a20c:	6003      	str	r3, [r0, #0]
 800a20e:	2001      	movs	r0, #1
 800a210:	e7e7      	b.n	800a1e2 <_raise_r+0x12>
 800a212:	2400      	movs	r4, #0
 800a214:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a218:	4628      	mov	r0, r5
 800a21a:	4798      	blx	r3
 800a21c:	2000      	movs	r0, #0
 800a21e:	e7e0      	b.n	800a1e2 <_raise_r+0x12>

0800a220 <raise>:
 800a220:	4b02      	ldr	r3, [pc, #8]	; (800a22c <raise+0xc>)
 800a222:	4601      	mov	r1, r0
 800a224:	6818      	ldr	r0, [r3, #0]
 800a226:	f7ff bfd3 	b.w	800a1d0 <_raise_r>
 800a22a:	bf00      	nop
 800a22c:	200000cc 	.word	0x200000cc

0800a230 <_kill_r>:
 800a230:	b538      	push	{r3, r4, r5, lr}
 800a232:	4d07      	ldr	r5, [pc, #28]	; (800a250 <_kill_r+0x20>)
 800a234:	2300      	movs	r3, #0
 800a236:	4604      	mov	r4, r0
 800a238:	4608      	mov	r0, r1
 800a23a:	4611      	mov	r1, r2
 800a23c:	602b      	str	r3, [r5, #0]
 800a23e:	f7fd f8f9 	bl	8007434 <_kill>
 800a242:	1c43      	adds	r3, r0, #1
 800a244:	d102      	bne.n	800a24c <_kill_r+0x1c>
 800a246:	682b      	ldr	r3, [r5, #0]
 800a248:	b103      	cbz	r3, 800a24c <_kill_r+0x1c>
 800a24a:	6023      	str	r3, [r4, #0]
 800a24c:	bd38      	pop	{r3, r4, r5, pc}
 800a24e:	bf00      	nop
 800a250:	200005ec 	.word	0x200005ec

0800a254 <_getpid_r>:
 800a254:	f7fd b8e6 	b.w	8007424 <_getpid>

0800a258 <_init>:
 800a258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25a:	bf00      	nop
 800a25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a25e:	bc08      	pop	{r3}
 800a260:	469e      	mov	lr, r3
 800a262:	4770      	bx	lr

0800a264 <_fini>:
 800a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a266:	bf00      	nop
 800a268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a26a:	bc08      	pop	{r3}
 800a26c:	469e      	mov	lr, r3
 800a26e:	4770      	bx	lr
