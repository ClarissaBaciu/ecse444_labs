
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e98  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004054  08004054  00014054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004094  08004094  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004094  08004094  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004094  08004094  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004094  08004094  00014094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004098  08004098  00014098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800409c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  080040a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080040a8  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000914b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000171d  00000000  00000000  00029187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  0002a8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  0002b1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f03  00000000  00000000  0002b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009679  00000000  00000000  000558e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107ba5  00000000  00000000  0005ef5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166b01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024f0  00000000  00000000  00166b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800403c 	.word	0x0800403c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	0800403c 	.word	0x0800403c

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__aeabi_d2f>:
 8000998:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800099c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a0:	bf24      	itt	cs
 80009a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009aa:	d90d      	bls.n	80009c8 <__aeabi_d2f+0x30>
 80009ac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009b8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c0:	bf08      	it	eq
 80009c2:	f020 0001 	biceq.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009cc:	d121      	bne.n	8000a12 <__aeabi_d2f+0x7a>
 80009ce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d2:	bfbc      	itt	lt
 80009d4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009d8:	4770      	bxlt	lr
 80009da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009de:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e2:	f1c2 0218 	rsb	r2, r2, #24
 80009e6:	f1c2 0c20 	rsb	ip, r2, #32
 80009ea:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ee:	fa20 f002 	lsr.w	r0, r0, r2
 80009f2:	bf18      	it	ne
 80009f4:	f040 0001 	orrne.w	r0, r0, #1
 80009f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a04:	ea40 000c 	orr.w	r0, r0, ip
 8000a08:	fa23 f302 	lsr.w	r3, r3, r2
 8000a0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a10:	e7cc      	b.n	80009ac <__aeabi_d2f+0x14>
 8000a12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a16:	d107      	bne.n	8000a28 <__aeabi_d2f+0x90>
 8000a18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a1c:	bf1e      	ittt	ne
 8000a1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a26:	4770      	bxne	lr
 8000a28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a42:	2003      	movs	r0, #3
 8000a44:	f001 f9c6 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f000 f80d 	bl	8000a68 <HAL_InitTick>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d002      	beq.n	8000a5a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	71fb      	strb	r3, [r7, #7]
 8000a58:	e001      	b.n	8000a5e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a5a:	f003 f9f5 	bl	8003e48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a74:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <HAL_InitTick+0x6c>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d023      	beq.n	8000ac4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <HAL_InitTick+0x70>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_InitTick+0x6c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 f9c5 	bl	8001e22 <HAL_SYSTICK_Config>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d10f      	bne.n	8000abe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d809      	bhi.n	8000ab8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aac:	f001 f99d 	bl	8001dea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <HAL_InitTick+0x74>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
 8000ab6:	e007      	b.n	8000ac8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	e004      	b.n	8000ac8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	73fb      	strb	r3, [r7, #15]
 8000ac2:	e001      	b.n	8000ac8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000004 	.word	0x20000004
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000000 	.word	0x20000000

08000ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x20>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_IncTick+0x24>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <HAL_IncTick+0x24>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000004 	.word	0x20000004
 8000b04:	20000028 	.word	0x20000028

08000b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <HAL_GetTick+0x14>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000028 	.word	0x20000028

08000b20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	431a      	orrs	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	609a      	str	r2, [r3, #8]
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b087      	sub	sp, #28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
 8000b94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3360      	adds	r3, #96	; 0x60
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	4413      	add	r3, r2
 8000ba2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <LL_ADC_SetOffset+0x44>)
 8000baa:	4013      	ands	r3, r2
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000bb2:	683a      	ldr	r2, [r7, #0]
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000bc0:	bf00      	nop
 8000bc2:	371c      	adds	r7, #28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	03fff000 	.word	0x03fff000

08000bd0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3360      	adds	r3, #96	; 0x60
 8000bde:	461a      	mov	r2, r3
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	4413      	add	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b087      	sub	sp, #28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3360      	adds	r3, #96	; 0x60
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	431a      	orrs	r2, r3
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000c26:	bf00      	nop
 8000c28:	371c      	adds	r7, #28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
 8000c3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	431a      	orrs	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	615a      	str	r2, [r3, #20]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d101      	bne.n	8000c70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e000      	b.n	8000c72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b087      	sub	sp, #28
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	3330      	adds	r3, #48	; 0x30
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	0a1b      	lsrs	r3, r3, #8
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	f003 030c 	and.w	r3, r3, #12
 8000c9a:	4413      	add	r3, r2
 8000c9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	f003 031f 	and.w	r3, r3, #31
 8000ca8:	211f      	movs	r1, #31
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	0e9b      	lsrs	r3, r3, #26
 8000cb6:	f003 011f 	and.w	r1, r3, #31
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	f003 031f 	and.w	r3, r3, #31
 8000cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc4:	431a      	orrs	r2, r3
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000cca:	bf00      	nop
 8000ccc:	371c      	adds	r7, #28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b087      	sub	sp, #28
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3314      	adds	r3, #20
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	0e5b      	lsrs	r3, r3, #25
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	4413      	add	r3, r2
 8000cf4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	0d1b      	lsrs	r3, r3, #20
 8000cfe:	f003 031f 	and.w	r3, r3, #31
 8000d02:	2107      	movs	r1, #7
 8000d04:	fa01 f303 	lsl.w	r3, r1, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	0d1b      	lsrs	r3, r3, #20
 8000d10:	f003 031f 	and.w	r3, r3, #31
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000d20:	bf00      	nop
 8000d22:	371c      	adds	r7, #28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d44:	43db      	mvns	r3, r3
 8000d46:	401a      	ands	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0318 	and.w	r3, r3, #24
 8000d4e:	4908      	ldr	r1, [pc, #32]	; (8000d70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000d50:	40d9      	lsrs	r1, r3
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	400b      	ands	r3, r1
 8000d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d5a:	431a      	orrs	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	0007ffff 	.word	0x0007ffff

08000d74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000d84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	6093      	str	r3, [r2, #8]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000dac:	d101      	bne.n	8000db2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000dae:	2301      	movs	r3, #1
 8000db0:	e000      	b.n	8000db4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000dd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000dfc:	d101      	bne.n	8000e02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e000      	b.n	8000e04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e24:	f043 0201 	orr.w	r2, r3, #1
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d101      	bne.n	8000e50 <LL_ADC_IsEnabled+0x18>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e000      	b.n	8000e52 <LL_ADC_IsEnabled+0x1a>
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e72:	f043 0204 	orr.w	r2, r3, #4
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	d101      	bne.n	8000e9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f003 0308 	and.w	r3, r3, #8
 8000ebc:	2b08      	cmp	r3, #8
 8000ebe:	d101      	bne.n	8000ec4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000edc:	2300      	movs	r3, #0
 8000ede:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e12f      	b.n	800114e <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d109      	bne.n	8000f10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f002 ffc7 	bl	8003e90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff3f 	bl	8000d98 <LL_ADC_IsDeepPowerDownEnabled>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d004      	beq.n	8000f2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff25 	bl	8000d74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff5a 	bl	8000de8 <LL_ADC_IsInternalRegulatorEnabled>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d115      	bne.n	8000f66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff3e 	bl	8000dc0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000f44:	4b84      	ldr	r3, [pc, #528]	; (8001158 <HAL_ADC_Init+0x284>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	099b      	lsrs	r3, r3, #6
 8000f4a:	4a84      	ldr	r2, [pc, #528]	; (800115c <HAL_ADC_Init+0x288>)
 8000f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f50:	099b      	lsrs	r3, r3, #6
 8000f52:	3301      	adds	r3, #1
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f58:	e002      	b.n	8000f60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1f9      	bne.n	8000f5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff3c 	bl	8000de8 <LL_ADC_IsInternalRegulatorEnabled>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10d      	bne.n	8000f92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	f043 0210 	orr.w	r2, r3, #16
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f86:	f043 0201 	orr.w	r2, r3, #1
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff75 	bl	8000e86 <LL_ADC_REG_IsConversionOngoing>
 8000f9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa2:	f003 0310 	and.w	r3, r3, #16
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f040 80c8 	bne.w	800113c <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f040 80c4 	bne.w	800113c <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000fbc:	f043 0202 	orr.w	r2, r3, #2
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff35 	bl	8000e38 <LL_ADC_IsEnabled>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10b      	bne.n	8000fec <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000fd4:	4862      	ldr	r0, [pc, #392]	; (8001160 <HAL_ADC_Init+0x28c>)
 8000fd6:	f7ff ff2f 	bl	8000e38 <LL_ADC_IsEnabled>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d105      	bne.n	8000fec <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	485f      	ldr	r0, [pc, #380]	; (8001164 <HAL_ADC_Init+0x290>)
 8000fe8:	f7ff fd9a 	bl	8000b20 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7e5b      	ldrb	r3, [r3, #25]
 8000ff0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ff6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000ffc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001002:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 3020 	ldrb.w	r3, [r3, #32]
 800100a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d106      	bne.n	8001028 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101e:	3b01      	subs	r3, #1
 8001020:	045b      	lsls	r3, r3, #17
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102c:	2b00      	cmp	r3, #0
 800102e:	d009      	beq.n	8001044 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001034:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	4b47      	ldr	r3, [pc, #284]	; (8001168 <HAL_ADC_Init+0x294>)
 800104c:	4013      	ands	r3, r2
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	6812      	ldr	r2, [r2, #0]
 8001052:	69b9      	ldr	r1, [r7, #24]
 8001054:	430b      	orrs	r3, r1
 8001056:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff12 	bl	8000e86 <LL_ADC_REG_IsConversionOngoing>
 8001062:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff1f 	bl	8000eac <LL_ADC_INJ_IsConversionOngoing>
 800106e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d140      	bne.n	80010f8 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d13d      	bne.n	80010f8 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7e1b      	ldrb	r3, [r3, #24]
 8001084:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001086:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800108e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800109e:	f023 0306 	bic.w	r3, r3, #6
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	6812      	ldr	r2, [r2, #0]
 80010a6:	69b9      	ldr	r1, [r7, #24]
 80010a8:	430b      	orrs	r3, r1
 80010aa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d118      	bne.n	80010e8 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80010c0:	f023 0304 	bic.w	r3, r3, #4
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010cc:	4311      	orrs	r1, r2
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80010d2:	4311      	orrs	r1, r2
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80010d8:	430a      	orrs	r2, r1
 80010da:	431a      	orrs	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f042 0201 	orr.w	r2, r2, #1
 80010e4:	611a      	str	r2, [r3, #16]
 80010e6:	e007      	b.n	80010f8 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	691a      	ldr	r2, [r3, #16]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0201 	bic.w	r2, r2, #1
 80010f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d10c      	bne.n	800111a <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f023 010f 	bic.w	r1, r3, #15
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	1e5a      	subs	r2, r3, #1
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	631a      	str	r2, [r3, #48]	; 0x30
 8001118:	e007      	b.n	800112a <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 020f 	bic.w	r2, r2, #15
 8001128:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112e:	f023 0303 	bic.w	r3, r3, #3
 8001132:	f043 0201 	orr.w	r2, r3, #1
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	659a      	str	r2, [r3, #88]	; 0x58
 800113a:	e007      	b.n	800114c <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001140:	f043 0210 	orr.w	r2, r3, #16
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800114c:	7ffb      	ldrb	r3, [r7, #31]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3720      	adds	r7, #32
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000008 	.word	0x20000008
 800115c:	053e2d63 	.word	0x053e2d63
 8001160:	50040000 	.word	0x50040000
 8001164:	50040300 	.word	0x50040300
 8001168:	fff0c007 	.word	0xfff0c007

0800116c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fe84 	bl	8000e86 <LL_ADC_REG_IsConversionOngoing>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d14f      	bne.n	8001224 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800118a:	2b01      	cmp	r3, #1
 800118c:	d101      	bne.n	8001192 <HAL_ADC_Start+0x26>
 800118e:	2302      	movs	r3, #2
 8001190:	e04b      	b.n	800122a <HAL_ADC_Start+0xbe>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 fce2 	bl	8001b64 <ADC_Enable>
 80011a0:	4603      	mov	r3, r0
 80011a2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d137      	bne.n	800121a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011b2:	f023 0301 	bic.w	r3, r3, #1
 80011b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011ca:	d106      	bne.n	80011da <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d0:	f023 0206 	bic.w	r2, r3, #6
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80011d8:	e002      	b.n	80011e0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	221c      	movs	r2, #28
 80011e6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001206:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fe23 	bl	8000e5e <LL_ADC_REG_StartConversion>
 8001218:	e006      	b.n	8001228 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001222:	e001      	b.n	8001228 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001224:	2302      	movs	r3, #2
 8001226:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	2b08      	cmp	r3, #8
 8001242:	d102      	bne.n	800124a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001244:	2308      	movs	r3, #8
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	e010      	b.n	800126c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b00      	cmp	r3, #0
 8001256:	d007      	beq.n	8001268 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125c:	f043 0220 	orr.w	r2, r3, #32
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e06f      	b.n	8001348 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001268:	2304      	movs	r3, #4
 800126a:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800126c:	f7ff fc4c 	bl	8000b08 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001272:	e021      	b.n	80012b8 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800127a:	d01d      	beq.n	80012b8 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800127c:	f7ff fc44 	bl	8000b08 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	d302      	bcc.n	8001292 <HAL_ADC_PollForConversion+0x60>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d112      	bne.n	80012b8 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	4013      	ands	r3, r2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10b      	bne.n	80012b8 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a4:	f043 0204 	orr.w	r2, r3, #4
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e047      	b.n	8001348 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0d6      	beq.n	8001274 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fcbe 	bl	8000c58 <LL_ADC_REG_IsTriggerSourceSWStart>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d01c      	beq.n	800131c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7e5b      	ldrb	r3, [r3, #25]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d118      	bne.n	800131c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0308 	and.w	r3, r3, #8
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	d111      	bne.n	800131c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d105      	bne.n	800131c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001314:	f043 0201 	orr.w	r2, r3, #1
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	2b08      	cmp	r3, #8
 8001328:	d104      	bne.n	8001334 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2208      	movs	r2, #8
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e008      	b.n	8001346 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d103      	bne.n	8001346 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	220c      	movs	r2, #12
 8001344:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b0b6      	sub	sp, #216	; 0xd8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001386:	2b01      	cmp	r3, #1
 8001388:	d101      	bne.n	800138e <HAL_ADC_ConfigChannel+0x22>
 800138a:	2302      	movs	r3, #2
 800138c:	e3d5      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x7ce>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fd73 	bl	8000e86 <LL_ADC_REG_IsConversionOngoing>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f040 83ba 	bne.w	8001b1c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b05      	cmp	r3, #5
 80013ae:	d824      	bhi.n	80013fa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	3b02      	subs	r3, #2
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d81b      	bhi.n	80013f2 <HAL_ADC_ConfigChannel+0x86>
 80013ba:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <HAL_ADC_ConfigChannel+0x54>)
 80013bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c0:	080013d1 	.word	0x080013d1
 80013c4:	080013d9 	.word	0x080013d9
 80013c8:	080013e1 	.word	0x080013e1
 80013cc:	080013e9 	.word	0x080013e9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	220c      	movs	r2, #12
 80013d4:	605a      	str	r2, [r3, #4]
          break;
 80013d6:	e011      	b.n	80013fc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	2212      	movs	r2, #18
 80013dc:	605a      	str	r2, [r3, #4]
          break;
 80013de:	e00d      	b.n	80013fc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	2218      	movs	r2, #24
 80013e4:	605a      	str	r2, [r3, #4]
          break;
 80013e6:	e009      	b.n	80013fc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ee:	605a      	str	r2, [r3, #4]
          break;
 80013f0:	e004      	b.n	80013fc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	2206      	movs	r2, #6
 80013f6:	605a      	str	r2, [r3, #4]
          break;
 80013f8:	e000      	b.n	80013fc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80013fa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	6859      	ldr	r1, [r3, #4]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	f7ff fc38 	bl	8000c7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fd37 	bl	8000e86 <LL_ADC_REG_IsConversionOngoing>
 8001418:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fd43 	bl	8000eac <LL_ADC_INJ_IsConversionOngoing>
 8001426:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800142a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800142e:	2b00      	cmp	r3, #0
 8001430:	f040 81c1 	bne.w	80017b6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001434:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001438:	2b00      	cmp	r3, #0
 800143a:	f040 81bc 	bne.w	80017b6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001446:	d10f      	bne.n	8001468 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2200      	movs	r2, #0
 8001452:	4619      	mov	r1, r3
 8001454:	f7ff fc3f 	bl	8000cd6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fbe6 	bl	8000c32 <LL_ADC_SetSamplingTimeCommonConfig>
 8001466:	e00e      	b.n	8001486 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	6819      	ldr	r1, [r3, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	461a      	mov	r2, r3
 8001476:	f7ff fc2e 	bl	8000cd6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fbd6 	bl	8000c32 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	08db      	lsrs	r3, r3, #3
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d00a      	beq.n	80014be <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	6919      	ldr	r1, [r3, #16]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80014b8:	f7ff fb66 	bl	8000b88 <LL_ADC_SetOffset>
 80014bc:	e17b      	b.n	80017b6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2100      	movs	r1, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fb83 	bl	8000bd0 <LL_ADC_GetOffsetChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10a      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x17e>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fb78 	bl	8000bd0 <LL_ADC_GetOffsetChannel>
 80014e0:	4603      	mov	r3, r0
 80014e2:	0e9b      	lsrs	r3, r3, #26
 80014e4:	f003 021f 	and.w	r2, r3, #31
 80014e8:	e01e      	b.n	8001528 <HAL_ADC_ConfigChannel+0x1bc>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fb6d 	bl	8000bd0 <LL_ADC_GetOffsetChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001500:	fa93 f3a3 	rbit	r3, r3
 8001504:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001508:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800150c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001510:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001518:	2320      	movs	r3, #32
 800151a:	e004      	b.n	8001526 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800151c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001520:	fab3 f383 	clz	r3, r3
 8001524:	b2db      	uxtb	r3, r3
 8001526:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001530:	2b00      	cmp	r3, #0
 8001532:	d105      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x1d4>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0e9b      	lsrs	r3, r3, #26
 800153a:	f003 031f 	and.w	r3, r3, #31
 800153e:	e018      	b.n	8001572 <HAL_ADC_ConfigChannel+0x206>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001548:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800154c:	fa93 f3a3 	rbit	r3, r3
 8001550:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001554:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001558:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800155c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001564:	2320      	movs	r3, #32
 8001566:	e004      	b.n	8001572 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001568:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800156c:	fab3 f383 	clz	r3, r3
 8001570:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001572:	429a      	cmp	r2, r3
 8001574:	d106      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fb3c 	bl	8000bfc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2101      	movs	r1, #1
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fb20 	bl	8000bd0 <LL_ADC_GetOffsetChannel>
 8001590:	4603      	mov	r3, r0
 8001592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10a      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x244>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2101      	movs	r1, #1
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fb15 	bl	8000bd0 <LL_ADC_GetOffsetChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	0e9b      	lsrs	r3, r3, #26
 80015aa:	f003 021f 	and.w	r2, r3, #31
 80015ae:	e01e      	b.n	80015ee <HAL_ADC_ConfigChannel+0x282>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2101      	movs	r1, #1
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fb0a 	bl	8000bd0 <LL_ADC_GetOffsetChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015c6:	fa93 f3a3 	rbit	r3, r3
 80015ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80015ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80015d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80015d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80015de:	2320      	movs	r3, #32
 80015e0:	e004      	b.n	80015ec <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80015e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015e6:	fab3 f383 	clz	r3, r3
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d105      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x29a>
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	0e9b      	lsrs	r3, r3, #26
 8001600:	f003 031f 	and.w	r3, r3, #31
 8001604:	e018      	b.n	8001638 <HAL_ADC_ConfigChannel+0x2cc>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001612:	fa93 f3a3 	rbit	r3, r3
 8001616:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800161a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800161e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001622:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800162a:	2320      	movs	r3, #32
 800162c:	e004      	b.n	8001638 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800162e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001632:	fab3 f383 	clz	r3, r3
 8001636:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001638:	429a      	cmp	r2, r3
 800163a:	d106      	bne.n	800164a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2200      	movs	r2, #0
 8001642:	2101      	movs	r1, #1
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fad9 	bl	8000bfc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2102      	movs	r1, #2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fabd 	bl	8000bd0 <LL_ADC_GetOffsetChannel>
 8001656:	4603      	mov	r3, r0
 8001658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10a      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x30a>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2102      	movs	r1, #2
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fab2 	bl	8000bd0 <LL_ADC_GetOffsetChannel>
 800166c:	4603      	mov	r3, r0
 800166e:	0e9b      	lsrs	r3, r3, #26
 8001670:	f003 021f 	and.w	r2, r3, #31
 8001674:	e01e      	b.n	80016b4 <HAL_ADC_ConfigChannel+0x348>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2102      	movs	r1, #2
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff faa7 	bl	8000bd0 <LL_ADC_GetOffsetChannel>
 8001682:	4603      	mov	r3, r0
 8001684:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001688:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800168c:	fa93 f3a3 	rbit	r3, r3
 8001690:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001694:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001698:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800169c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80016a4:	2320      	movs	r3, #32
 80016a6:	e004      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80016a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016ac:	fab3 f383 	clz	r3, r3
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d105      	bne.n	80016cc <HAL_ADC_ConfigChannel+0x360>
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	0e9b      	lsrs	r3, r3, #26
 80016c6:	f003 031f 	and.w	r3, r3, #31
 80016ca:	e016      	b.n	80016fa <HAL_ADC_ConfigChannel+0x38e>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80016de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80016e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80016ec:	2320      	movs	r3, #32
 80016ee:	e004      	b.n	80016fa <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80016f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016f4:	fab3 f383 	clz	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d106      	bne.n	800170c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2200      	movs	r2, #0
 8001704:	2102      	movs	r1, #2
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fa78 	bl	8000bfc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2103      	movs	r1, #3
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fa5c 	bl	8000bd0 <LL_ADC_GetOffsetChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10a      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x3cc>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2103      	movs	r1, #3
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fa51 	bl	8000bd0 <LL_ADC_GetOffsetChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	0e9b      	lsrs	r3, r3, #26
 8001732:	f003 021f 	and.w	r2, r3, #31
 8001736:	e017      	b.n	8001768 <HAL_ADC_ConfigChannel+0x3fc>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2103      	movs	r1, #3
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fa46 	bl	8000bd0 <LL_ADC_GetOffsetChannel>
 8001744:	4603      	mov	r3, r0
 8001746:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800174a:	fa93 f3a3 	rbit	r3, r3
 800174e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001750:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001752:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800175a:	2320      	movs	r3, #32
 800175c:	e003      	b.n	8001766 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800175e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001760:	fab3 f383 	clz	r3, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001770:	2b00      	cmp	r3, #0
 8001772:	d105      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x414>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	0e9b      	lsrs	r3, r3, #26
 800177a:	f003 031f 	and.w	r3, r3, #31
 800177e:	e011      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x438>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001788:	fa93 f3a3 	rbit	r3, r3
 800178c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800178e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001790:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001798:	2320      	movs	r3, #32
 800179a:	e003      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800179c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800179e:	fab3 f383 	clz	r3, r3
 80017a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d106      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2200      	movs	r2, #0
 80017ae:	2103      	movs	r1, #3
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fa23 	bl	8000bfc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fb3c 	bl	8000e38 <LL_ADC_IsEnabled>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f040 8140 	bne.w	8001a48 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	6819      	ldr	r1, [r3, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	461a      	mov	r2, r3
 80017d6:	f7ff faa9 	bl	8000d2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	4a8f      	ldr	r2, [pc, #572]	; (8001a1c <HAL_ADC_ConfigChannel+0x6b0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	f040 8131 	bne.w	8001a48 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10b      	bne.n	800180e <HAL_ADC_ConfigChannel+0x4a2>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	0e9b      	lsrs	r3, r3, #26
 80017fc:	3301      	adds	r3, #1
 80017fe:	f003 031f 	and.w	r3, r3, #31
 8001802:	2b09      	cmp	r3, #9
 8001804:	bf94      	ite	ls
 8001806:	2301      	movls	r3, #1
 8001808:	2300      	movhi	r3, #0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	e019      	b.n	8001842 <HAL_ADC_ConfigChannel+0x4d6>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800181c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800181e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001820:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001826:	2320      	movs	r3, #32
 8001828:	e003      	b.n	8001832 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800182a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800182c:	fab3 f383 	clz	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	3301      	adds	r3, #1
 8001834:	f003 031f 	and.w	r3, r3, #31
 8001838:	2b09      	cmp	r3, #9
 800183a:	bf94      	ite	ls
 800183c:	2301      	movls	r3, #1
 800183e:	2300      	movhi	r3, #0
 8001840:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001842:	2b00      	cmp	r3, #0
 8001844:	d079      	beq.n	800193a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800184e:	2b00      	cmp	r3, #0
 8001850:	d107      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x4f6>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	0e9b      	lsrs	r3, r3, #26
 8001858:	3301      	adds	r3, #1
 800185a:	069b      	lsls	r3, r3, #26
 800185c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001860:	e015      	b.n	800188e <HAL_ADC_ConfigChannel+0x522>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001872:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800187a:	2320      	movs	r3, #32
 800187c:	e003      	b.n	8001886 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800187e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001880:	fab3 f383 	clz	r3, r3
 8001884:	b2db      	uxtb	r3, r3
 8001886:	3301      	adds	r3, #1
 8001888:	069b      	lsls	r3, r3, #26
 800188a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001896:	2b00      	cmp	r3, #0
 8001898:	d109      	bne.n	80018ae <HAL_ADC_ConfigChannel+0x542>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	0e9b      	lsrs	r3, r3, #26
 80018a0:	3301      	adds	r3, #1
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	2101      	movs	r1, #1
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	e017      	b.n	80018de <HAL_ADC_ConfigChannel+0x572>
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018b6:	fa93 f3a3 	rbit	r3, r3
 80018ba:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80018bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80018c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80018c6:	2320      	movs	r3, #32
 80018c8:	e003      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80018ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018cc:	fab3 f383 	clz	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	3301      	adds	r3, #1
 80018d4:	f003 031f 	and.w	r3, r3, #31
 80018d8:	2101      	movs	r1, #1
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	ea42 0103 	orr.w	r1, r2, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10a      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x598>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	0e9b      	lsrs	r3, r3, #26
 80018f4:	3301      	adds	r3, #1
 80018f6:	f003 021f 	and.w	r2, r3, #31
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	051b      	lsls	r3, r3, #20
 8001902:	e018      	b.n	8001936 <HAL_ADC_ConfigChannel+0x5ca>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800190c:	fa93 f3a3 	rbit	r3, r3
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001914:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800191c:	2320      	movs	r3, #32
 800191e:	e003      	b.n	8001928 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001922:	fab3 f383 	clz	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	3301      	adds	r3, #1
 800192a:	f003 021f 	and.w	r2, r3, #31
 800192e:	4613      	mov	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001936:	430b      	orrs	r3, r1
 8001938:	e081      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001942:	2b00      	cmp	r3, #0
 8001944:	d107      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x5ea>
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	0e9b      	lsrs	r3, r3, #26
 800194c:	3301      	adds	r3, #1
 800194e:	069b      	lsls	r3, r3, #26
 8001950:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001954:	e015      	b.n	8001982 <HAL_ADC_ConfigChannel+0x616>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195e:	fa93 f3a3 	rbit	r3, r3
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001966:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800196e:	2320      	movs	r3, #32
 8001970:	e003      	b.n	800197a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001974:	fab3 f383 	clz	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	3301      	adds	r3, #1
 800197c:	069b      	lsls	r3, r3, #26
 800197e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800198a:	2b00      	cmp	r3, #0
 800198c:	d109      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x636>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	0e9b      	lsrs	r3, r3, #26
 8001994:	3301      	adds	r3, #1
 8001996:	f003 031f 	and.w	r3, r3, #31
 800199a:	2101      	movs	r1, #1
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	e017      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x666>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	fa93 f3a3 	rbit	r3, r3
 80019ae:	61fb      	str	r3, [r7, #28]
  return result;
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80019ba:	2320      	movs	r3, #32
 80019bc:	e003      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	fab3 f383 	clz	r3, r3
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	3301      	adds	r3, #1
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	2101      	movs	r1, #1
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	ea42 0103 	orr.w	r1, r2, r3
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10d      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x692>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	0e9b      	lsrs	r3, r3, #26
 80019e8:	3301      	adds	r3, #1
 80019ea:	f003 021f 	and.w	r2, r3, #31
 80019ee:	4613      	mov	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	3b1e      	subs	r3, #30
 80019f6:	051b      	lsls	r3, r3, #20
 80019f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019fc:	e01e      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x6d0>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	613b      	str	r3, [r7, #16]
  return result;
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d104      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001a16:	2320      	movs	r3, #32
 8001a18:	e006      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x6bc>
 8001a1a:	bf00      	nop
 8001a1c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fab3 f383 	clz	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	3301      	adds	r3, #1
 8001a2a:	f003 021f 	and.w	r2, r3, #31
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	3b1e      	subs	r3, #30
 8001a36:	051b      	lsls	r3, r3, #20
 8001a38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a3c:	430b      	orrs	r3, r1
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	6892      	ldr	r2, [r2, #8]
 8001a42:	4619      	mov	r1, r3
 8001a44:	f7ff f947 	bl	8000cd6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <HAL_ADC_ConfigChannel+0x7d8>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d06c      	beq.n	8001b2e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a54:	483c      	ldr	r0, [pc, #240]	; (8001b48 <HAL_ADC_ConfigChannel+0x7dc>)
 8001a56:	f7ff f889 	bl	8000b6c <LL_ADC_GetCommonPathInternalCh>
 8001a5a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a3a      	ldr	r2, [pc, #232]	; (8001b4c <HAL_ADC_ConfigChannel+0x7e0>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d127      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d121      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a35      	ldr	r2, [pc, #212]	; (8001b50 <HAL_ADC_ConfigChannel+0x7e4>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d157      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a86:	4619      	mov	r1, r3
 8001a88:	482f      	ldr	r0, [pc, #188]	; (8001b48 <HAL_ADC_ConfigChannel+0x7dc>)
 8001a8a:	f7ff f85c 	bl	8000b46 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a8e:	4b31      	ldr	r3, [pc, #196]	; (8001b54 <HAL_ADC_ConfigChannel+0x7e8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	099b      	lsrs	r3, r3, #6
 8001a94:	4a30      	ldr	r2, [pc, #192]	; (8001b58 <HAL_ADC_ConfigChannel+0x7ec>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	099b      	lsrs	r3, r3, #6
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001aa8:	e002      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f9      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ab6:	e03a      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a27      	ldr	r2, [pc, #156]	; (8001b5c <HAL_ADC_ConfigChannel+0x7f0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d113      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x77e>
 8001ac2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ac6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10d      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1f      	ldr	r2, [pc, #124]	; (8001b50 <HAL_ADC_ConfigChannel+0x7e4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d12a      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ad8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001adc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4819      	ldr	r0, [pc, #100]	; (8001b48 <HAL_ADC_ConfigChannel+0x7dc>)
 8001ae4:	f7ff f82f 	bl	8000b46 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ae8:	e021      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a1c      	ldr	r2, [pc, #112]	; (8001b60 <HAL_ADC_ConfigChannel+0x7f4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d11c      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001af4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001af8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d116      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <HAL_ADC_ConfigChannel+0x7e4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d111      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b12:	4619      	mov	r1, r3
 8001b14:	480c      	ldr	r0, [pc, #48]	; (8001b48 <HAL_ADC_ConfigChannel+0x7dc>)
 8001b16:	f7ff f816 	bl	8000b46 <LL_ADC_SetCommonPathInternalCh>
 8001b1a:	e008      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b20:	f043 0220 	orr.w	r2, r3, #32
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001b36:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	37d8      	adds	r7, #216	; 0xd8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	80080000 	.word	0x80080000
 8001b48:	50040300 	.word	0x50040300
 8001b4c:	c7520000 	.word	0xc7520000
 8001b50:	50040000 	.word	0x50040000
 8001b54:	20000008 	.word	0x20000008
 8001b58:	053e2d63 	.word	0x053e2d63
 8001b5c:	cb840000 	.word	0xcb840000
 8001b60:	80000001 	.word	0x80000001

08001b64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff f95f 	bl	8000e38 <LL_ADC_IsEnabled>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d169      	bne.n	8001c54 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	4b36      	ldr	r3, [pc, #216]	; (8001c60 <ADC_Enable+0xfc>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00d      	beq.n	8001baa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b92:	f043 0210 	orr.w	r2, r3, #16
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9e:	f043 0201 	orr.w	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e055      	b.n	8001c56 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f92e 	bl	8000e10 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001bb4:	482b      	ldr	r0, [pc, #172]	; (8001c64 <ADC_Enable+0x100>)
 8001bb6:	f7fe ffd9 	bl	8000b6c <LL_ADC_GetCommonPathInternalCh>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d013      	beq.n	8001bec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bc4:	4b28      	ldr	r3, [pc, #160]	; (8001c68 <ADC_Enable+0x104>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	099b      	lsrs	r3, r3, #6
 8001bca:	4a28      	ldr	r2, [pc, #160]	; (8001c6c <ADC_Enable+0x108>)
 8001bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd0:	099b      	lsrs	r3, r3, #6
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001bde:	e002      	b.n	8001be6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f9      	bne.n	8001be0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001bec:	f7fe ff8c 	bl	8000b08 <HAL_GetTick>
 8001bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bf2:	e028      	b.n	8001c46 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff f91d 	bl	8000e38 <LL_ADC_IsEnabled>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d104      	bne.n	8001c0e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff f901 	bl	8000e10 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c0e:	f7fe ff7b 	bl	8000b08 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d914      	bls.n	8001c46 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d00d      	beq.n	8001c46 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	f043 0210 	orr.w	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3a:	f043 0201 	orr.w	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e007      	b.n	8001c56 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d1cf      	bne.n	8001bf4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	8000003f 	.word	0x8000003f
 8001c64:	50040300 	.word	0x50040300
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	053e2d63 	.word	0x053e2d63

08001c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca2:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	60d3      	str	r3, [r2, #12]
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	f003 0307 	and.w	r3, r3, #7
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	490c      	ldr	r1, [pc, #48]	; (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4908      	ldr	r1, [pc, #32]	; (8001d24 <__NVIC_SetPriority+0x50>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	; 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43d9      	mvns	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	4313      	orrs	r3, r2
         );
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da0:	d301      	bcc.n	8001da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00f      	b.n	8001dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <SysTick_Config+0x40>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dae:	210f      	movs	r1, #15
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001db4:	f7ff ff8e 	bl	8001cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <SysTick_Config+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <SysTick_Config+0x40>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff47 	bl	8001c70 <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff5c 	bl	8001cb8 <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ff8e 	bl	8001d28 <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff5d 	bl	8001cd4 <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffb0 	bl	8001d90 <SysTick_Config>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4a:	e166      	b.n	800211a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2101      	movs	r1, #1
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8158 	beq.w	8002114 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d005      	beq.n	8001e7c <HAL_GPIO_Init+0x40>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d130      	bne.n	8001ede <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	091b      	lsrs	r3, r3, #4
 8001ec8:	f003 0201 	and.w	r2, r3, #1
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d017      	beq.n	8001f1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d123      	bne.n	8001f6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	08da      	lsrs	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3208      	adds	r2, #8
 8001f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	220f      	movs	r2, #15
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	08da      	lsrs	r2, r3, #3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3208      	adds	r2, #8
 8001f68:	6939      	ldr	r1, [r7, #16]
 8001f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2203      	movs	r2, #3
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 0203 	and.w	r2, r3, #3
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 80b2 	beq.w	8002114 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb0:	4b61      	ldr	r3, [pc, #388]	; (8002138 <HAL_GPIO_Init+0x2fc>)
 8001fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb4:	4a60      	ldr	r2, [pc, #384]	; (8002138 <HAL_GPIO_Init+0x2fc>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6613      	str	r3, [r2, #96]	; 0x60
 8001fbc:	4b5e      	ldr	r3, [pc, #376]	; (8002138 <HAL_GPIO_Init+0x2fc>)
 8001fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fc8:	4a5c      	ldr	r2, [pc, #368]	; (800213c <HAL_GPIO_Init+0x300>)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	3302      	adds	r3, #2
 8001fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	220f      	movs	r2, #15
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ff2:	d02b      	beq.n	800204c <HAL_GPIO_Init+0x210>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a52      	ldr	r2, [pc, #328]	; (8002140 <HAL_GPIO_Init+0x304>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d025      	beq.n	8002048 <HAL_GPIO_Init+0x20c>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a51      	ldr	r2, [pc, #324]	; (8002144 <HAL_GPIO_Init+0x308>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d01f      	beq.n	8002044 <HAL_GPIO_Init+0x208>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a50      	ldr	r2, [pc, #320]	; (8002148 <HAL_GPIO_Init+0x30c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d019      	beq.n	8002040 <HAL_GPIO_Init+0x204>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a4f      	ldr	r2, [pc, #316]	; (800214c <HAL_GPIO_Init+0x310>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d013      	beq.n	800203c <HAL_GPIO_Init+0x200>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a4e      	ldr	r2, [pc, #312]	; (8002150 <HAL_GPIO_Init+0x314>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d00d      	beq.n	8002038 <HAL_GPIO_Init+0x1fc>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a4d      	ldr	r2, [pc, #308]	; (8002154 <HAL_GPIO_Init+0x318>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d007      	beq.n	8002034 <HAL_GPIO_Init+0x1f8>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a4c      	ldr	r2, [pc, #304]	; (8002158 <HAL_GPIO_Init+0x31c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d101      	bne.n	8002030 <HAL_GPIO_Init+0x1f4>
 800202c:	2307      	movs	r3, #7
 800202e:	e00e      	b.n	800204e <HAL_GPIO_Init+0x212>
 8002030:	2308      	movs	r3, #8
 8002032:	e00c      	b.n	800204e <HAL_GPIO_Init+0x212>
 8002034:	2306      	movs	r3, #6
 8002036:	e00a      	b.n	800204e <HAL_GPIO_Init+0x212>
 8002038:	2305      	movs	r3, #5
 800203a:	e008      	b.n	800204e <HAL_GPIO_Init+0x212>
 800203c:	2304      	movs	r3, #4
 800203e:	e006      	b.n	800204e <HAL_GPIO_Init+0x212>
 8002040:	2303      	movs	r3, #3
 8002042:	e004      	b.n	800204e <HAL_GPIO_Init+0x212>
 8002044:	2302      	movs	r3, #2
 8002046:	e002      	b.n	800204e <HAL_GPIO_Init+0x212>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <HAL_GPIO_Init+0x212>
 800204c:	2300      	movs	r3, #0
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	f002 0203 	and.w	r2, r2, #3
 8002054:	0092      	lsls	r2, r2, #2
 8002056:	4093      	lsls	r3, r2
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800205e:	4937      	ldr	r1, [pc, #220]	; (800213c <HAL_GPIO_Init+0x300>)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	3302      	adds	r3, #2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800206c:	4b3b      	ldr	r3, [pc, #236]	; (800215c <HAL_GPIO_Init+0x320>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	43db      	mvns	r3, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002090:	4a32      	ldr	r2, [pc, #200]	; (800215c <HAL_GPIO_Init+0x320>)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002096:	4b31      	ldr	r3, [pc, #196]	; (800215c <HAL_GPIO_Init+0x320>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	43db      	mvns	r3, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ba:	4a28      	ldr	r2, [pc, #160]	; (800215c <HAL_GPIO_Init+0x320>)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020c0:	4b26      	ldr	r3, [pc, #152]	; (800215c <HAL_GPIO_Init+0x320>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020e4:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_GPIO_Init+0x320>)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <HAL_GPIO_Init+0x320>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800210e:	4a13      	ldr	r2, [pc, #76]	; (800215c <HAL_GPIO_Init+0x320>)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	3301      	adds	r3, #1
 8002118:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	fa22 f303 	lsr.w	r3, r2, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	f47f ae91 	bne.w	8001e4c <HAL_GPIO_Init+0x10>
  }
}
 800212a:	bf00      	nop
 800212c:	bf00      	nop
 800212e:	371c      	adds	r7, #28
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	40021000 	.word	0x40021000
 800213c:	40010000 	.word	0x40010000
 8002140:	48000400 	.word	0x48000400
 8002144:	48000800 	.word	0x48000800
 8002148:	48000c00 	.word	0x48000c00
 800214c:	48001000 	.word	0x48001000
 8002150:	48001400 	.word	0x48001400
 8002154:	48001800 	.word	0x48001800
 8002158:	48001c00 	.word	0x48001c00
 800215c:	40010400 	.word	0x40010400

08002160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	887b      	ldrh	r3, [r7, #2]
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	e001      	b.n	8002182 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800217e:	2300      	movs	r3, #0
 8002180:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002182:	7bfb      	ldrb	r3, [r7, #15]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
 800219c:	4613      	mov	r3, r2
 800219e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a0:	787b      	ldrb	r3, [r7, #1]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021a6:	887a      	ldrh	r2, [r7, #2]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021ac:	e002      	b.n	80021b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ae:	887a      	ldrh	r2, [r7, #2]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021c4:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <HAL_PWREx_GetVoltageRange+0x3c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d0:	d102      	bne.n	80021d8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80021d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d6:	e00b      	b.n	80021f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <HAL_PWREx_GetVoltageRange+0x3c>)
 80021da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021e6:	d102      	bne.n	80021ee <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80021e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ec:	e000      	b.n	80021f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80021ee:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40007000 	.word	0x40007000

08002200 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d141      	bne.n	8002292 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800220e:	4b4b      	ldr	r3, [pc, #300]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221a:	d131      	bne.n	8002280 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800221c:	4b47      	ldr	r3, [pc, #284]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002222:	4a46      	ldr	r2, [pc, #280]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002228:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800222c:	4b43      	ldr	r3, [pc, #268]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002234:	4a41      	ldr	r2, [pc, #260]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800223a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800223c:	4b40      	ldr	r3, [pc, #256]	; (8002340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2232      	movs	r2, #50	; 0x32
 8002242:	fb02 f303 	mul.w	r3, r2, r3
 8002246:	4a3f      	ldr	r2, [pc, #252]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002248:	fba2 2303 	umull	r2, r3, r2, r3
 800224c:	0c9b      	lsrs	r3, r3, #18
 800224e:	3301      	adds	r3, #1
 8002250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002252:	e002      	b.n	800225a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3b01      	subs	r3, #1
 8002258:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800225a:	4b38      	ldr	r3, [pc, #224]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002266:	d102      	bne.n	800226e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f2      	bne.n	8002254 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800226e:	4b33      	ldr	r3, [pc, #204]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800227a:	d158      	bne.n	800232e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e057      	b.n	8002330 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002280:	4b2e      	ldr	r3, [pc, #184]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002286:	4a2d      	ldr	r2, [pc, #180]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800228c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002290:	e04d      	b.n	800232e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002298:	d141      	bne.n	800231e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800229a:	4b28      	ldr	r3, [pc, #160]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a6:	d131      	bne.n	800230c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ae:	4a23      	ldr	r2, [pc, #140]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022b8:	4b20      	ldr	r3, [pc, #128]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022c0:	4a1e      	ldr	r2, [pc, #120]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2232      	movs	r2, #50	; 0x32
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	4a1c      	ldr	r2, [pc, #112]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022d4:	fba2 2303 	umull	r2, r3, r2, r3
 80022d8:	0c9b      	lsrs	r3, r3, #18
 80022da:	3301      	adds	r3, #1
 80022dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022de:	e002      	b.n	80022e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f2:	d102      	bne.n	80022fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f2      	bne.n	80022e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002306:	d112      	bne.n	800232e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e011      	b.n	8002330 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002318:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800231c:	e007      	b.n	800232e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800231e:	4b07      	ldr	r3, [pc, #28]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002326:	4a05      	ldr	r2, [pc, #20]	; (800233c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002328:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800232c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	40007000 	.word	0x40007000
 8002340:	20000008 	.word	0x20000008
 8002344:	431bde83 	.word	0x431bde83

08002348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	f000 bc08 	b.w	8002b6c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235c:	4b96      	ldr	r3, [pc, #600]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002366:	4b94      	ldr	r3, [pc, #592]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80e4 	beq.w	8002546 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d007      	beq.n	8002394 <HAL_RCC_OscConfig+0x4c>
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b0c      	cmp	r3, #12
 8002388:	f040 808b 	bne.w	80024a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	2b01      	cmp	r3, #1
 8002390:	f040 8087 	bne.w	80024a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002394:	4b88      	ldr	r3, [pc, #544]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_OscConfig+0x64>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e3df      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1a      	ldr	r2, [r3, #32]
 80023b0:	4b81      	ldr	r3, [pc, #516]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d004      	beq.n	80023c6 <HAL_RCC_OscConfig+0x7e>
 80023bc:	4b7e      	ldr	r3, [pc, #504]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c4:	e005      	b.n	80023d2 <HAL_RCC_OscConfig+0x8a>
 80023c6:	4b7c      	ldr	r3, [pc, #496]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 80023c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d223      	bcs.n	800241e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 fd94 	bl	8002f08 <RCC_SetFlashLatencyFromMSIRange>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e3c0      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ea:	4b73      	ldr	r3, [pc, #460]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a72      	ldr	r2, [pc, #456]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 80023f0:	f043 0308 	orr.w	r3, r3, #8
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	4b70      	ldr	r3, [pc, #448]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	496d      	ldr	r1, [pc, #436]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 8002404:	4313      	orrs	r3, r2
 8002406:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002408:	4b6b      	ldr	r3, [pc, #428]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	4968      	ldr	r1, [pc, #416]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 8002418:	4313      	orrs	r3, r2
 800241a:	604b      	str	r3, [r1, #4]
 800241c:	e025      	b.n	800246a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800241e:	4b66      	ldr	r3, [pc, #408]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a65      	ldr	r2, [pc, #404]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 8002424:	f043 0308 	orr.w	r3, r3, #8
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b63      	ldr	r3, [pc, #396]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4960      	ldr	r1, [pc, #384]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 8002438:	4313      	orrs	r3, r2
 800243a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800243c:	4b5e      	ldr	r3, [pc, #376]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	495b      	ldr	r1, [pc, #364]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fd54 	bl	8002f08 <RCC_SetFlashLatencyFromMSIRange>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e380      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800246a:	f000 fcc1 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 800246e:	4602      	mov	r2, r0
 8002470:	4b51      	ldr	r3, [pc, #324]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	4950      	ldr	r1, [pc, #320]	; (80025bc <HAL_RCC_OscConfig+0x274>)
 800247c:	5ccb      	ldrb	r3, [r1, r3]
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	4a4e      	ldr	r2, [pc, #312]	; (80025c0 <HAL_RCC_OscConfig+0x278>)
 8002488:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800248a:	4b4e      	ldr	r3, [pc, #312]	; (80025c4 <HAL_RCC_OscConfig+0x27c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe faea 	bl	8000a68 <HAL_InitTick>
 8002494:	4603      	mov	r3, r0
 8002496:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d052      	beq.n	8002544 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	e364      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d032      	beq.n	8002510 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024aa:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a42      	ldr	r2, [pc, #264]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024b6:	f7fe fb27 	bl	8000b08 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024be:	f7fe fb23 	bl	8000b08 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e34d      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024d0:	4b39      	ldr	r3, [pc, #228]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024dc:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a35      	ldr	r2, [pc, #212]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 80024e2:	f043 0308 	orr.w	r3, r3, #8
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	4930      	ldr	r1, [pc, #192]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024fa:	4b2f      	ldr	r3, [pc, #188]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	492b      	ldr	r1, [pc, #172]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 800250a:	4313      	orrs	r3, r2
 800250c:	604b      	str	r3, [r1, #4]
 800250e:	e01a      	b.n	8002546 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002510:	4b29      	ldr	r3, [pc, #164]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a28      	ldr	r2, [pc, #160]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 8002516:	f023 0301 	bic.w	r3, r3, #1
 800251a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800251c:	f7fe faf4 	bl	8000b08 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002524:	f7fe faf0 	bl	8000b08 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e31a      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x1dc>
 8002542:	e000      	b.n	8002546 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002544:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d073      	beq.n	800263a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2b08      	cmp	r3, #8
 8002556:	d005      	beq.n	8002564 <HAL_RCC_OscConfig+0x21c>
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2b0c      	cmp	r3, #12
 800255c:	d10e      	bne.n	800257c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d10b      	bne.n	800257c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002564:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d063      	beq.n	8002638 <HAL_RCC_OscConfig+0x2f0>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d15f      	bne.n	8002638 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e2f7      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002584:	d106      	bne.n	8002594 <HAL_RCC_OscConfig+0x24c>
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e025      	b.n	80025e0 <HAL_RCC_OscConfig+0x298>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800259c:	d114      	bne.n	80025c8 <HAL_RCC_OscConfig+0x280>
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a05      	ldr	r2, [pc, #20]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 80025a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a02      	ldr	r2, [pc, #8]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e013      	b.n	80025e0 <HAL_RCC_OscConfig+0x298>
 80025b8:	40021000 	.word	0x40021000
 80025bc:	08004054 	.word	0x08004054
 80025c0:	20000008 	.word	0x20000008
 80025c4:	20000000 	.word	0x20000000
 80025c8:	4ba0      	ldr	r3, [pc, #640]	; (800284c <HAL_RCC_OscConfig+0x504>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a9f      	ldr	r2, [pc, #636]	; (800284c <HAL_RCC_OscConfig+0x504>)
 80025ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	4b9d      	ldr	r3, [pc, #628]	; (800284c <HAL_RCC_OscConfig+0x504>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a9c      	ldr	r2, [pc, #624]	; (800284c <HAL_RCC_OscConfig+0x504>)
 80025da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d013      	beq.n	8002610 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe fa8e 	bl	8000b08 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f0:	f7fe fa8a 	bl	8000b08 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	; 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e2b4      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002602:	4b92      	ldr	r3, [pc, #584]	; (800284c <HAL_RCC_OscConfig+0x504>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x2a8>
 800260e:	e014      	b.n	800263a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7fe fa7a 	bl	8000b08 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002618:	f7fe fa76 	bl	8000b08 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e2a0      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800262a:	4b88      	ldr	r3, [pc, #544]	; (800284c <HAL_RCC_OscConfig+0x504>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x2d0>
 8002636:	e000      	b.n	800263a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d060      	beq.n	8002708 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	2b04      	cmp	r3, #4
 800264a:	d005      	beq.n	8002658 <HAL_RCC_OscConfig+0x310>
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2b0c      	cmp	r3, #12
 8002650:	d119      	bne.n	8002686 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d116      	bne.n	8002686 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002658:	4b7c      	ldr	r3, [pc, #496]	; (800284c <HAL_RCC_OscConfig+0x504>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_OscConfig+0x328>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e27d      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002670:	4b76      	ldr	r3, [pc, #472]	; (800284c <HAL_RCC_OscConfig+0x504>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	061b      	lsls	r3, r3, #24
 800267e:	4973      	ldr	r1, [pc, #460]	; (800284c <HAL_RCC_OscConfig+0x504>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002684:	e040      	b.n	8002708 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d023      	beq.n	80026d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800268e:	4b6f      	ldr	r3, [pc, #444]	; (800284c <HAL_RCC_OscConfig+0x504>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a6e      	ldr	r2, [pc, #440]	; (800284c <HAL_RCC_OscConfig+0x504>)
 8002694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7fe fa35 	bl	8000b08 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a2:	f7fe fa31 	bl	8000b08 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e25b      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b4:	4b65      	ldr	r3, [pc, #404]	; (800284c <HAL_RCC_OscConfig+0x504>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c0:	4b62      	ldr	r3, [pc, #392]	; (800284c <HAL_RCC_OscConfig+0x504>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	061b      	lsls	r3, r3, #24
 80026ce:	495f      	ldr	r1, [pc, #380]	; (800284c <HAL_RCC_OscConfig+0x504>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
 80026d4:	e018      	b.n	8002708 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d6:	4b5d      	ldr	r3, [pc, #372]	; (800284c <HAL_RCC_OscConfig+0x504>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a5c      	ldr	r2, [pc, #368]	; (800284c <HAL_RCC_OscConfig+0x504>)
 80026dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e2:	f7fe fa11 	bl	8000b08 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ea:	f7fe fa0d 	bl	8000b08 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e237      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026fc:	4b53      	ldr	r3, [pc, #332]	; (800284c <HAL_RCC_OscConfig+0x504>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f0      	bne.n	80026ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d03c      	beq.n	800278e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d01c      	beq.n	8002756 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800271c:	4b4b      	ldr	r3, [pc, #300]	; (800284c <HAL_RCC_OscConfig+0x504>)
 800271e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002722:	4a4a      	ldr	r2, [pc, #296]	; (800284c <HAL_RCC_OscConfig+0x504>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272c:	f7fe f9ec 	bl	8000b08 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002734:	f7fe f9e8 	bl	8000b08 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e212      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002746:	4b41      	ldr	r3, [pc, #260]	; (800284c <HAL_RCC_OscConfig+0x504>)
 8002748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0ef      	beq.n	8002734 <HAL_RCC_OscConfig+0x3ec>
 8002754:	e01b      	b.n	800278e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002756:	4b3d      	ldr	r3, [pc, #244]	; (800284c <HAL_RCC_OscConfig+0x504>)
 8002758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800275c:	4a3b      	ldr	r2, [pc, #236]	; (800284c <HAL_RCC_OscConfig+0x504>)
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002766:	f7fe f9cf 	bl	8000b08 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800276e:	f7fe f9cb 	bl	8000b08 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e1f5      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002780:	4b32      	ldr	r3, [pc, #200]	; (800284c <HAL_RCC_OscConfig+0x504>)
 8002782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1ef      	bne.n	800276e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80a6 	beq.w	80028e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279c:	2300      	movs	r3, #0
 800279e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027a0:	4b2a      	ldr	r3, [pc, #168]	; (800284c <HAL_RCC_OscConfig+0x504>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10d      	bne.n	80027c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ac:	4b27      	ldr	r3, [pc, #156]	; (800284c <HAL_RCC_OscConfig+0x504>)
 80027ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b0:	4a26      	ldr	r2, [pc, #152]	; (800284c <HAL_RCC_OscConfig+0x504>)
 80027b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b6:	6593      	str	r3, [r2, #88]	; 0x58
 80027b8:	4b24      	ldr	r3, [pc, #144]	; (800284c <HAL_RCC_OscConfig+0x504>)
 80027ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c4:	2301      	movs	r3, #1
 80027c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c8:	4b21      	ldr	r3, [pc, #132]	; (8002850 <HAL_RCC_OscConfig+0x508>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d118      	bne.n	8002806 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027d4:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <HAL_RCC_OscConfig+0x508>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a1d      	ldr	r2, [pc, #116]	; (8002850 <HAL_RCC_OscConfig+0x508>)
 80027da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e0:	f7fe f992 	bl	8000b08 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e8:	f7fe f98e 	bl	8000b08 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e1b8      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <HAL_RCC_OscConfig+0x508>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d108      	bne.n	8002820 <HAL_RCC_OscConfig+0x4d8>
 800280e:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_RCC_OscConfig+0x504>)
 8002810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002814:	4a0d      	ldr	r2, [pc, #52]	; (800284c <HAL_RCC_OscConfig+0x504>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800281e:	e029      	b.n	8002874 <HAL_RCC_OscConfig+0x52c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b05      	cmp	r3, #5
 8002826:	d115      	bne.n	8002854 <HAL_RCC_OscConfig+0x50c>
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <HAL_RCC_OscConfig+0x504>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282e:	4a07      	ldr	r2, [pc, #28]	; (800284c <HAL_RCC_OscConfig+0x504>)
 8002830:	f043 0304 	orr.w	r3, r3, #4
 8002834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002838:	4b04      	ldr	r3, [pc, #16]	; (800284c <HAL_RCC_OscConfig+0x504>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	4a03      	ldr	r2, [pc, #12]	; (800284c <HAL_RCC_OscConfig+0x504>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002848:	e014      	b.n	8002874 <HAL_RCC_OscConfig+0x52c>
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000
 8002850:	40007000 	.word	0x40007000
 8002854:	4b9d      	ldr	r3, [pc, #628]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 8002856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285a:	4a9c      	ldr	r2, [pc, #624]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002864:	4b99      	ldr	r3, [pc, #612]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286a:	4a98      	ldr	r2, [pc, #608]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 800286c:	f023 0304 	bic.w	r3, r3, #4
 8002870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d016      	beq.n	80028aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287c:	f7fe f944 	bl	8000b08 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002882:	e00a      	b.n	800289a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002884:	f7fe f940 	bl	8000b08 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e168      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800289a:	4b8c      	ldr	r3, [pc, #560]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 800289c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0ed      	beq.n	8002884 <HAL_RCC_OscConfig+0x53c>
 80028a8:	e015      	b.n	80028d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f7fe f92d 	bl	8000b08 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028b0:	e00a      	b.n	80028c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b2:	f7fe f929 	bl	8000b08 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e151      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028c8:	4b80      	ldr	r3, [pc, #512]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1ed      	bne.n	80028b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028d6:	7ffb      	ldrb	r3, [r7, #31]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d105      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028dc:	4b7b      	ldr	r3, [pc, #492]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 80028de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e0:	4a7a      	ldr	r2, [pc, #488]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 80028e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d03c      	beq.n	800296e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01c      	beq.n	8002936 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028fc:	4b73      	ldr	r3, [pc, #460]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 80028fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002902:	4a72      	ldr	r2, [pc, #456]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7fe f8fc 	bl	8000b08 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002914:	f7fe f8f8 	bl	8000b08 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e122      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002926:	4b69      	ldr	r3, [pc, #420]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 8002928:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0ef      	beq.n	8002914 <HAL_RCC_OscConfig+0x5cc>
 8002934:	e01b      	b.n	800296e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002936:	4b65      	ldr	r3, [pc, #404]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 8002938:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800293c:	4a63      	ldr	r2, [pc, #396]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 800293e:	f023 0301 	bic.w	r3, r3, #1
 8002942:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002946:	f7fe f8df 	bl	8000b08 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800294e:	f7fe f8db 	bl	8000b08 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e105      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002960:	4b5a      	ldr	r3, [pc, #360]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 8002962:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1ef      	bne.n	800294e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 80f9 	beq.w	8002b6a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	2b02      	cmp	r3, #2
 800297e:	f040 80cf 	bne.w	8002b20 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002982:	4b52      	ldr	r3, [pc, #328]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f003 0203 	and.w	r2, r3, #3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	429a      	cmp	r2, r3
 8002994:	d12c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	3b01      	subs	r3, #1
 80029a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d123      	bne.n	80029f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d11b      	bne.n	80029f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d113      	bne.n	80029f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d2:	085b      	lsrs	r3, r3, #1
 80029d4:	3b01      	subs	r3, #1
 80029d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029d8:	429a      	cmp	r2, r3
 80029da:	d109      	bne.n	80029f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	085b      	lsrs	r3, r3, #1
 80029e8:	3b01      	subs	r3, #1
 80029ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d071      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	2b0c      	cmp	r3, #12
 80029f4:	d068      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029f6:	4b35      	ldr	r3, [pc, #212]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d105      	bne.n	8002a0e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a02:	4b32      	ldr	r3, [pc, #200]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e0ac      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a12:	4b2e      	ldr	r3, [pc, #184]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a2d      	ldr	r2, [pc, #180]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 8002a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a1e:	f7fe f873 	bl	8000b08 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a26:	f7fe f86f 	bl	8000b08 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e099      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a38:	4b24      	ldr	r3, [pc, #144]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f0      	bne.n	8002a26 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a44:	4b21      	ldr	r3, [pc, #132]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <HAL_RCC_OscConfig+0x788>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a54:	3a01      	subs	r2, #1
 8002a56:	0112      	lsls	r2, r2, #4
 8002a58:	4311      	orrs	r1, r2
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a5e:	0212      	lsls	r2, r2, #8
 8002a60:	4311      	orrs	r1, r2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a66:	0852      	lsrs	r2, r2, #1
 8002a68:	3a01      	subs	r2, #1
 8002a6a:	0552      	lsls	r2, r2, #21
 8002a6c:	4311      	orrs	r1, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a72:	0852      	lsrs	r2, r2, #1
 8002a74:	3a01      	subs	r2, #1
 8002a76:	0652      	lsls	r2, r2, #25
 8002a78:	4311      	orrs	r1, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a7e:	06d2      	lsls	r2, r2, #27
 8002a80:	430a      	orrs	r2, r1
 8002a82:	4912      	ldr	r1, [pc, #72]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a88:	4b10      	ldr	r3, [pc, #64]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0f      	ldr	r2, [pc, #60]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 8002a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a94:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4a0c      	ldr	r2, [pc, #48]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 8002a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002aa0:	f7fe f832 	bl	8000b08 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa8:	f7fe f82e 	bl	8000b08 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e058      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aba:	4b04      	ldr	r3, [pc, #16]	; (8002acc <HAL_RCC_OscConfig+0x784>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ac6:	e050      	b.n	8002b6a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e04f      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad4:	4b27      	ldr	r3, [pc, #156]	; (8002b74 <HAL_RCC_OscConfig+0x82c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d144      	bne.n	8002b6a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ae0:	4b24      	ldr	r3, [pc, #144]	; (8002b74 <HAL_RCC_OscConfig+0x82c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a23      	ldr	r2, [pc, #140]	; (8002b74 <HAL_RCC_OscConfig+0x82c>)
 8002ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aec:	4b21      	ldr	r3, [pc, #132]	; (8002b74 <HAL_RCC_OscConfig+0x82c>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a20      	ldr	r2, [pc, #128]	; (8002b74 <HAL_RCC_OscConfig+0x82c>)
 8002af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002af6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002af8:	f7fe f806 	bl	8000b08 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe f802 	bl	8000b08 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e02c      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b12:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_RCC_OscConfig+0x82c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x7b8>
 8002b1e:	e024      	b.n	8002b6a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b0c      	cmp	r3, #12
 8002b24:	d01f      	beq.n	8002b66 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b26:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <HAL_RCC_OscConfig+0x82c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <HAL_RCC_OscConfig+0x82c>)
 8002b2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b32:	f7fd ffe9 	bl	8000b08 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3a:	f7fd ffe5 	bl	8000b08 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e00f      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b4c:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <HAL_RCC_OscConfig+0x82c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1f0      	bne.n	8002b3a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_RCC_OscConfig+0x82c>)
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	4905      	ldr	r1, [pc, #20]	; (8002b74 <HAL_RCC_OscConfig+0x82c>)
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_RCC_OscConfig+0x830>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	60cb      	str	r3, [r1, #12]
 8002b64:	e001      	b.n	8002b6a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3720      	adds	r7, #32
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40021000 	.word	0x40021000
 8002b78:	feeefffc 	.word	0xfeeefffc

08002b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e11d      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b94:	4b90      	ldr	r3, [pc, #576]	; (8002dd8 <HAL_RCC_ClockConfig+0x25c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d910      	bls.n	8002bc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba2:	4b8d      	ldr	r3, [pc, #564]	; (8002dd8 <HAL_RCC_ClockConfig+0x25c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 020f 	bic.w	r2, r3, #15
 8002baa:	498b      	ldr	r1, [pc, #556]	; (8002dd8 <HAL_RCC_ClockConfig+0x25c>)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb2:	4b89      	ldr	r3, [pc, #548]	; (8002dd8 <HAL_RCC_ClockConfig+0x25c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e105      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d010      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	4b81      	ldr	r3, [pc, #516]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d908      	bls.n	8002bf2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be0:	4b7e      	ldr	r3, [pc, #504]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	497b      	ldr	r1, [pc, #492]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d079      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d11e      	bne.n	8002c44 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c06:	4b75      	ldr	r3, [pc, #468]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e0dc      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002c16:	f000 f9d1 	bl	8002fbc <RCC_GetSysClockFreqFromPLLSource>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4a70      	ldr	r2, [pc, #448]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d946      	bls.n	8002cb0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c22:	4b6e      	ldr	r3, [pc, #440]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d140      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c2e:	4b6b      	ldr	r3, [pc, #428]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c36:	4a69      	ldr	r2, [pc, #420]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	e035      	b.n	8002cb0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d107      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c4c:	4b63      	ldr	r3, [pc, #396]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d115      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0b9      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d107      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c64:	4b5d      	ldr	r3, [pc, #372]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0ad      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c74:	4b59      	ldr	r3, [pc, #356]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0a5      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002c84:	f000 f8b4 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4a55      	ldr	r2, [pc, #340]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d90f      	bls.n	8002cb0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c90:	4b52      	ldr	r3, [pc, #328]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d109      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c9c:	4b4f      	ldr	r3, [pc, #316]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ca4:	4a4d      	ldr	r2, [pc, #308]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002caa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cb0:	4b4a      	ldr	r3, [pc, #296]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f023 0203 	bic.w	r2, r3, #3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	4947      	ldr	r1, [pc, #284]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc2:	f7fd ff21 	bl	8000b08 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc8:	e00a      	b.n	8002ce0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cca:	f7fd ff1d 	bl	8000b08 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e077      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce0:	4b3e      	ldr	r3, [pc, #248]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 020c 	and.w	r2, r3, #12
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d1eb      	bne.n	8002cca <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b80      	cmp	r3, #128	; 0x80
 8002cf6:	d105      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002cf8:	4b38      	ldr	r3, [pc, #224]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4a37      	ldr	r2, [pc, #220]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d02:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d010      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	4b31      	ldr	r3, [pc, #196]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d208      	bcs.n	8002d32 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d20:	4b2e      	ldr	r3, [pc, #184]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	492b      	ldr	r1, [pc, #172]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d32:	4b29      	ldr	r3, [pc, #164]	; (8002dd8 <HAL_RCC_ClockConfig+0x25c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d210      	bcs.n	8002d62 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d40:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <HAL_RCC_ClockConfig+0x25c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f023 020f 	bic.w	r2, r3, #15
 8002d48:	4923      	ldr	r1, [pc, #140]	; (8002dd8 <HAL_RCC_ClockConfig+0x25c>)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d50:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <HAL_RCC_ClockConfig+0x25c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e036      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d008      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d6e:	4b1b      	ldr	r3, [pc, #108]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	4918      	ldr	r1, [pc, #96]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d009      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d8c:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4910      	ldr	r1, [pc, #64]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002da0:	f000 f826 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	490c      	ldr	r1, [pc, #48]	; (8002de4 <HAL_RCC_ClockConfig+0x268>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbc:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <HAL_RCC_ClockConfig+0x26c>)
 8002dbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_RCC_ClockConfig+0x270>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fd fe4f 	bl	8000a68 <HAL_InitTick>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	73fb      	strb	r3, [r7, #15]

  return status;
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40022000 	.word	0x40022000
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	04c4b400 	.word	0x04c4b400
 8002de4:	08004054 	.word	0x08004054
 8002de8:	20000008 	.word	0x20000008
 8002dec:	20000000 	.word	0x20000000

08002df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	; 0x24
 8002df4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dfe:	4b3e      	ldr	r3, [pc, #248]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e08:	4b3b      	ldr	r3, [pc, #236]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x34>
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	2b0c      	cmp	r3, #12
 8002e1c:	d121      	bne.n	8002e62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d11e      	bne.n	8002e62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e24:	4b34      	ldr	r3, [pc, #208]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d107      	bne.n	8002e40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e30:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e36:	0a1b      	lsrs	r3, r3, #8
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	e005      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e40:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e4c:	4a2b      	ldr	r2, [pc, #172]	; (8002efc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10d      	bne.n	8002e78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e60:	e00a      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d102      	bne.n	8002e6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e68:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e6a:	61bb      	str	r3, [r7, #24]
 8002e6c:	e004      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e74:	4b23      	ldr	r3, [pc, #140]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	2b0c      	cmp	r3, #12
 8002e7c:	d134      	bne.n	8002ee8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d003      	beq.n	8002e96 <HAL_RCC_GetSysClockFreq+0xa6>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d003      	beq.n	8002e9c <HAL_RCC_GetSysClockFreq+0xac>
 8002e94:	e005      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e96:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e98:	617b      	str	r3, [r7, #20]
      break;
 8002e9a:	e005      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e9c:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e9e:	617b      	str	r3, [r7, #20]
      break;
 8002ea0:	e002      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	617b      	str	r3, [r7, #20]
      break;
 8002ea6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ea8:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	0a1b      	lsrs	r3, r3, #8
 8002ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	fb03 f202 	mul.w	r2, r3, r2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ecc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	0e5b      	lsrs	r3, r3, #25
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	3301      	adds	r3, #1
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ee8:	69bb      	ldr	r3, [r7, #24]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3724      	adds	r7, #36	; 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	08004064 	.word	0x08004064
 8002f00:	00f42400 	.word	0x00f42400
 8002f04:	007a1200 	.word	0x007a1200

08002f08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f14:	4b27      	ldr	r3, [pc, #156]	; (8002fb4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f20:	f7ff f94e 	bl	80021c0 <HAL_PWREx_GetVoltageRange>
 8002f24:	6178      	str	r0, [r7, #20]
 8002f26:	e014      	b.n	8002f52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f28:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	4a21      	ldr	r2, [pc, #132]	; (8002fb4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f32:	6593      	str	r3, [r2, #88]	; 0x58
 8002f34:	4b1f      	ldr	r3, [pc, #124]	; (8002fb4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f40:	f7ff f93e 	bl	80021c0 <HAL_PWREx_GetVoltageRange>
 8002f44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f46:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4a:	4a1a      	ldr	r2, [pc, #104]	; (8002fb4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f58:	d10b      	bne.n	8002f72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b80      	cmp	r3, #128	; 0x80
 8002f5e:	d913      	bls.n	8002f88 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2ba0      	cmp	r3, #160	; 0xa0
 8002f64:	d902      	bls.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f66:	2302      	movs	r3, #2
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	e00d      	b.n	8002f88 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	e00a      	b.n	8002f88 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b7f      	cmp	r3, #127	; 0x7f
 8002f76:	d902      	bls.n	8002f7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002f78:	2302      	movs	r3, #2
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	e004      	b.n	8002f88 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b70      	cmp	r3, #112	; 0x70
 8002f82:	d101      	bne.n	8002f88 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f84:	2301      	movs	r3, #1
 8002f86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f88:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f023 020f 	bic.w	r2, r3, #15
 8002f90:	4909      	ldr	r1, [pc, #36]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f98:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 030f 	and.w	r3, r3, #15
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d001      	beq.n	8002faa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40022000 	.word	0x40022000

08002fbc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fc2:	4b2d      	ldr	r3, [pc, #180]	; (8003078 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d00b      	beq.n	8002fea <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d825      	bhi.n	8003024 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d008      	beq.n	8002ff0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d11f      	bne.n	8003024 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002fe4:	4b25      	ldr	r3, [pc, #148]	; (800307c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002fe6:	613b      	str	r3, [r7, #16]
    break;
 8002fe8:	e01f      	b.n	800302a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002fea:	4b25      	ldr	r3, [pc, #148]	; (8003080 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002fec:	613b      	str	r3, [r7, #16]
    break;
 8002fee:	e01c      	b.n	800302a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ff0:	4b21      	ldr	r3, [pc, #132]	; (8003078 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d107      	bne.n	800300c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ffc:	4b1e      	ldr	r3, [pc, #120]	; (8003078 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003002:	0a1b      	lsrs	r3, r3, #8
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	e005      	b.n	8003018 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800300c:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003018:	4a1a      	ldr	r2, [pc, #104]	; (8003084 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003020:	613b      	str	r3, [r7, #16]
    break;
 8003022:	e002      	b.n	800302a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	613b      	str	r3, [r7, #16]
    break;
 8003028:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800302a:	4b13      	ldr	r3, [pc, #76]	; (8003078 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	f003 030f 	and.w	r3, r3, #15
 8003034:	3301      	adds	r3, #1
 8003036:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003038:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	0a1b      	lsrs	r3, r3, #8
 800303e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	fb03 f202 	mul.w	r2, r3, r2
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	fbb2 f3f3 	udiv	r3, r2, r3
 800304e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003050:	4b09      	ldr	r3, [pc, #36]	; (8003078 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	0e5b      	lsrs	r3, r3, #25
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	3301      	adds	r3, #1
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800306a:	683b      	ldr	r3, [r7, #0]
}
 800306c:	4618      	mov	r0, r3
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	40021000 	.word	0x40021000
 800307c:	00f42400 	.word	0x00f42400
 8003080:	007a1200 	.word	0x007a1200
 8003084:	08004064 	.word	0x08004064

08003088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003090:	2300      	movs	r3, #0
 8003092:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003094:	2300      	movs	r3, #0
 8003096:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d040      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030a8:	2b80      	cmp	r3, #128	; 0x80
 80030aa:	d02a      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030ac:	2b80      	cmp	r3, #128	; 0x80
 80030ae:	d825      	bhi.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030b0:	2b60      	cmp	r3, #96	; 0x60
 80030b2:	d026      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030b4:	2b60      	cmp	r3, #96	; 0x60
 80030b6:	d821      	bhi.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d006      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x42>
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d81d      	bhi.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d009      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d010      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x62>
 80030c8:	e018      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030ca:	4b89      	ldr	r3, [pc, #548]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	4a88      	ldr	r2, [pc, #544]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030d6:	e015      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3304      	adds	r3, #4
 80030dc:	2100      	movs	r1, #0
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fb02 	bl	80036e8 <RCCEx_PLLSAI1_Config>
 80030e4:	4603      	mov	r3, r0
 80030e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030e8:	e00c      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3320      	adds	r3, #32
 80030ee:	2100      	movs	r1, #0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fbed 	bl	80038d0 <RCCEx_PLLSAI2_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030fa:	e003      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	74fb      	strb	r3, [r7, #19]
      break;
 8003100:	e000      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003102:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003104:	7cfb      	ldrb	r3, [r7, #19]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10b      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800310a:	4b79      	ldr	r3, [pc, #484]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800310c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003110:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003118:	4975      	ldr	r1, [pc, #468]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003120:	e001      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003122:	7cfb      	ldrb	r3, [r7, #19]
 8003124:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d047      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313a:	d030      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800313c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003140:	d82a      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003146:	d02a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800314c:	d824      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800314e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003152:	d008      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003158:	d81e      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800315e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003162:	d010      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003164:	e018      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003166:	4b62      	ldr	r3, [pc, #392]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	4a61      	ldr	r2, [pc, #388]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800316c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003170:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003172:	e015      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fab4 	bl	80036e8 <RCCEx_PLLSAI1_Config>
 8003180:	4603      	mov	r3, r0
 8003182:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003184:	e00c      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3320      	adds	r3, #32
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fb9f 	bl	80038d0 <RCCEx_PLLSAI2_Config>
 8003192:	4603      	mov	r3, r0
 8003194:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003196:	e003      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	74fb      	strb	r3, [r7, #19]
      break;
 800319c:	e000      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800319e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10b      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031a6:	4b52      	ldr	r3, [pc, #328]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b4:	494e      	ldr	r1, [pc, #312]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80031bc:	e001      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031be:	7cfb      	ldrb	r3, [r7, #19]
 80031c0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 809f 	beq.w	800330e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d0:	2300      	movs	r3, #0
 80031d2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031d4:	4b46      	ldr	r3, [pc, #280]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80031e4:	2300      	movs	r3, #0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00d      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ea:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ee:	4a40      	ldr	r2, [pc, #256]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f4:	6593      	str	r3, [r2, #88]	; 0x58
 80031f6:	4b3e      	ldr	r3, [pc, #248]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003202:	2301      	movs	r3, #1
 8003204:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003206:	4b3b      	ldr	r3, [pc, #236]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a3a      	ldr	r2, [pc, #232]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800320c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003210:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003212:	f7fd fc79 	bl	8000b08 <HAL_GetTick>
 8003216:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003218:	e009      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321a:	f7fd fc75 	bl	8000b08 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d902      	bls.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	74fb      	strb	r3, [r7, #19]
        break;
 800322c:	e005      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800322e:	4b31      	ldr	r3, [pc, #196]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0ef      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800323a:	7cfb      	ldrb	r3, [r7, #19]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d15b      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003240:	4b2b      	ldr	r3, [pc, #172]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01f      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	429a      	cmp	r2, r3
 800325c:	d019      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800325e:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003268:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800326a:	4b21      	ldr	r3, [pc, #132]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003270:	4a1f      	ldr	r2, [pc, #124]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800327a:	4b1d      	ldr	r3, [pc, #116]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003280:	4a1b      	ldr	r2, [pc, #108]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800328a:	4a19      	ldr	r2, [pc, #100]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d016      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fd fc34 	bl	8000b08 <HAL_GetTick>
 80032a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a2:	e00b      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f7fd fc30 	bl	8000b08 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d902      	bls.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	74fb      	strb	r3, [r7, #19]
            break;
 80032ba:	e006      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032bc:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0ec      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80032ca:	7cfb      	ldrb	r3, [r7, #19]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10c      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032d0:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e0:	4903      	ldr	r1, [pc, #12]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032e8:	e008      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032ea:	7cfb      	ldrb	r3, [r7, #19]
 80032ec:	74bb      	strb	r3, [r7, #18]
 80032ee:	e005      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032fc:	7c7b      	ldrb	r3, [r7, #17]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d105      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003302:	4ba0      	ldr	r3, [pc, #640]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003306:	4a9f      	ldr	r2, [pc, #636]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800331a:	4b9a      	ldr	r3, [pc, #616]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003320:	f023 0203 	bic.w	r2, r3, #3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003328:	4996      	ldr	r1, [pc, #600]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800333c:	4b91      	ldr	r3, [pc, #580]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003342:	f023 020c 	bic.w	r2, r3, #12
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	498e      	ldr	r1, [pc, #568]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800335e:	4b89      	ldr	r3, [pc, #548]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003364:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336c:	4985      	ldr	r1, [pc, #532]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003380:	4b80      	ldr	r3, [pc, #512]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003386:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800338e:	497d      	ldr	r1, [pc, #500]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033a2:	4b78      	ldr	r3, [pc, #480]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b0:	4974      	ldr	r1, [pc, #464]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0320 	and.w	r3, r3, #32
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033c4:	4b6f      	ldr	r3, [pc, #444]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d2:	496c      	ldr	r1, [pc, #432]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033e6:	4b67      	ldr	r3, [pc, #412]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033f4:	4963      	ldr	r1, [pc, #396]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003408:	4b5e      	ldr	r3, [pc, #376]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003416:	495b      	ldr	r1, [pc, #364]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800342a:	4b56      	ldr	r3, [pc, #344]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003430:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003438:	4952      	ldr	r1, [pc, #328]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800344c:	4b4d      	ldr	r3, [pc, #308]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003452:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345a:	494a      	ldr	r1, [pc, #296]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800346e:	4b45      	ldr	r3, [pc, #276]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003474:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347c:	4941      	ldr	r1, [pc, #260]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003490:	4b3c      	ldr	r3, [pc, #240]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003496:	f023 0203 	bic.w	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800349e:	4939      	ldr	r1, [pc, #228]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d028      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034b2:	4b34      	ldr	r3, [pc, #208]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c0:	4930      	ldr	r1, [pc, #192]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034d0:	d106      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d2:	4b2c      	ldr	r3, [pc, #176]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	4a2b      	ldr	r2, [pc, #172]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034dc:	60d3      	str	r3, [r2, #12]
 80034de:	e011      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034e8:	d10c      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3304      	adds	r3, #4
 80034ee:	2101      	movs	r1, #1
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 f8f9 	bl	80036e8 <RCCEx_PLLSAI1_Config>
 80034f6:	4603      	mov	r3, r0
 80034f8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034fa:	7cfb      	ldrb	r3, [r7, #19]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003500:	7cfb      	ldrb	r3, [r7, #19]
 8003502:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d04d      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003514:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003518:	d108      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800351a:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800351c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003520:	4a18      	ldr	r2, [pc, #96]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003526:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800352a:	e012      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800352c:	4b15      	ldr	r3, [pc, #84]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800352e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003532:	4a14      	ldr	r2, [pc, #80]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003534:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003538:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003542:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800354a:	490e      	ldr	r1, [pc, #56]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003556:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800355a:	d106      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800355c:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4a08      	ldr	r2, [pc, #32]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003566:	60d3      	str	r3, [r2, #12]
 8003568:	e020      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800356e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003572:	d109      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003574:	4b03      	ldr	r3, [pc, #12]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4a02      	ldr	r2, [pc, #8]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357e:	60d3      	str	r3, [r2, #12]
 8003580:	e014      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800358c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003590:	d10c      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3304      	adds	r3, #4
 8003596:	2101      	movs	r1, #1
 8003598:	4618      	mov	r0, r3
 800359a:	f000 f8a5 	bl	80036e8 <RCCEx_PLLSAI1_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035a2:	7cfb      	ldrb	r3, [r7, #19]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80035a8:	7cfb      	ldrb	r3, [r7, #19]
 80035aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d028      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035b8:	4b4a      	ldr	r3, [pc, #296]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035c6:	4947      	ldr	r1, [pc, #284]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035d6:	d106      	bne.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d8:	4b42      	ldr	r3, [pc, #264]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4a41      	ldr	r2, [pc, #260]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035e2:	60d3      	str	r3, [r2, #12]
 80035e4:	e011      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035ee:	d10c      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3304      	adds	r3, #4
 80035f4:	2101      	movs	r1, #1
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 f876 	bl	80036e8 <RCCEx_PLLSAI1_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003606:	7cfb      	ldrb	r3, [r7, #19]
 8003608:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d01e      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003616:	4b33      	ldr	r3, [pc, #204]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003626:	492f      	ldr	r1, [pc, #188]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003634:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003638:	d10c      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3304      	adds	r3, #4
 800363e:	2102      	movs	r1, #2
 8003640:	4618      	mov	r0, r3
 8003642:	f000 f851 	bl	80036e8 <RCCEx_PLLSAI1_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800364a:	7cfb      	ldrb	r3, [r7, #19]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003650:	7cfb      	ldrb	r3, [r7, #19]
 8003652:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00b      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003660:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003662:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003666:	f023 0204 	bic.w	r2, r3, #4
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003670:	491c      	ldr	r1, [pc, #112]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00b      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003684:	4b17      	ldr	r3, [pc, #92]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003686:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800368a:	f023 0218 	bic.w	r2, r3, #24
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003694:	4913      	ldr	r1, [pc, #76]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d017      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80036a8:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b8:	490a      	ldr	r1, [pc, #40]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036ca:	d105      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4a04      	ldr	r2, [pc, #16]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000

080036e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036f6:	4b72      	ldr	r3, [pc, #456]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00e      	beq.n	8003720 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003702:	4b6f      	ldr	r3, [pc, #444]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f003 0203 	and.w	r2, r3, #3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d103      	bne.n	800371a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
       ||
 8003716:	2b00      	cmp	r3, #0
 8003718:	d142      	bne.n	80037a0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
 800371e:	e03f      	b.n	80037a0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b03      	cmp	r3, #3
 8003726:	d018      	beq.n	800375a <RCCEx_PLLSAI1_Config+0x72>
 8003728:	2b03      	cmp	r3, #3
 800372a:	d825      	bhi.n	8003778 <RCCEx_PLLSAI1_Config+0x90>
 800372c:	2b01      	cmp	r3, #1
 800372e:	d002      	beq.n	8003736 <RCCEx_PLLSAI1_Config+0x4e>
 8003730:	2b02      	cmp	r3, #2
 8003732:	d009      	beq.n	8003748 <RCCEx_PLLSAI1_Config+0x60>
 8003734:	e020      	b.n	8003778 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003736:	4b62      	ldr	r3, [pc, #392]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d11d      	bne.n	800377e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003746:	e01a      	b.n	800377e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003748:	4b5d      	ldr	r3, [pc, #372]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003750:	2b00      	cmp	r3, #0
 8003752:	d116      	bne.n	8003782 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003758:	e013      	b.n	8003782 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800375a:	4b59      	ldr	r3, [pc, #356]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10f      	bne.n	8003786 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003766:	4b56      	ldr	r3, [pc, #344]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003776:	e006      	b.n	8003786 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
      break;
 800377c:	e004      	b.n	8003788 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800377e:	bf00      	nop
 8003780:	e002      	b.n	8003788 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003782:	bf00      	nop
 8003784:	e000      	b.n	8003788 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003786:	bf00      	nop
    }

    if(status == HAL_OK)
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d108      	bne.n	80037a0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800378e:	4b4c      	ldr	r3, [pc, #304]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f023 0203 	bic.w	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4949      	ldr	r1, [pc, #292]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800379c:	4313      	orrs	r3, r2
 800379e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 8086 	bne.w	80038b4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037a8:	4b45      	ldr	r3, [pc, #276]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a44      	ldr	r2, [pc, #272]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b4:	f7fd f9a8 	bl	8000b08 <HAL_GetTick>
 80037b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037ba:	e009      	b.n	80037d0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037bc:	f7fd f9a4 	bl	8000b08 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d902      	bls.n	80037d0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	73fb      	strb	r3, [r7, #15]
        break;
 80037ce:	e005      	b.n	80037dc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037d0:	4b3b      	ldr	r3, [pc, #236]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1ef      	bne.n	80037bc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d168      	bne.n	80038b4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d113      	bne.n	8003810 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037e8:	4b35      	ldr	r3, [pc, #212]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	4b35      	ldr	r3, [pc, #212]	; (80038c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6892      	ldr	r2, [r2, #8]
 80037f4:	0211      	lsls	r1, r2, #8
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68d2      	ldr	r2, [r2, #12]
 80037fa:	06d2      	lsls	r2, r2, #27
 80037fc:	4311      	orrs	r1, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6852      	ldr	r2, [r2, #4]
 8003802:	3a01      	subs	r2, #1
 8003804:	0112      	lsls	r2, r2, #4
 8003806:	430a      	orrs	r2, r1
 8003808:	492d      	ldr	r1, [pc, #180]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800380a:	4313      	orrs	r3, r2
 800380c:	610b      	str	r3, [r1, #16]
 800380e:	e02d      	b.n	800386c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d115      	bne.n	8003842 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003816:	4b2a      	ldr	r3, [pc, #168]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	4b2b      	ldr	r3, [pc, #172]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800381c:	4013      	ands	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6892      	ldr	r2, [r2, #8]
 8003822:	0211      	lsls	r1, r2, #8
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6912      	ldr	r2, [r2, #16]
 8003828:	0852      	lsrs	r2, r2, #1
 800382a:	3a01      	subs	r2, #1
 800382c:	0552      	lsls	r2, r2, #21
 800382e:	4311      	orrs	r1, r2
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6852      	ldr	r2, [r2, #4]
 8003834:	3a01      	subs	r2, #1
 8003836:	0112      	lsls	r2, r2, #4
 8003838:	430a      	orrs	r2, r1
 800383a:	4921      	ldr	r1, [pc, #132]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800383c:	4313      	orrs	r3, r2
 800383e:	610b      	str	r3, [r1, #16]
 8003840:	e014      	b.n	800386c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003842:	4b1f      	ldr	r3, [pc, #124]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	4b21      	ldr	r3, [pc, #132]	; (80038cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003848:	4013      	ands	r3, r2
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6892      	ldr	r2, [r2, #8]
 800384e:	0211      	lsls	r1, r2, #8
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6952      	ldr	r2, [r2, #20]
 8003854:	0852      	lsrs	r2, r2, #1
 8003856:	3a01      	subs	r2, #1
 8003858:	0652      	lsls	r2, r2, #25
 800385a:	4311      	orrs	r1, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6852      	ldr	r2, [r2, #4]
 8003860:	3a01      	subs	r2, #1
 8003862:	0112      	lsls	r2, r2, #4
 8003864:	430a      	orrs	r2, r1
 8003866:	4916      	ldr	r1, [pc, #88]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003868:	4313      	orrs	r3, r2
 800386a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800386c:	4b14      	ldr	r3, [pc, #80]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a13      	ldr	r2, [pc, #76]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003872:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003876:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003878:	f7fd f946 	bl	8000b08 <HAL_GetTick>
 800387c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800387e:	e009      	b.n	8003894 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003880:	f7fd f942 	bl	8000b08 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d902      	bls.n	8003894 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	73fb      	strb	r3, [r7, #15]
          break;
 8003892:	e005      	b.n	80038a0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003894:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0ef      	beq.n	8003880 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038a6:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	4904      	ldr	r1, [pc, #16]	; (80038c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40021000 	.word	0x40021000
 80038c4:	07ff800f 	.word	0x07ff800f
 80038c8:	ff9f800f 	.word	0xff9f800f
 80038cc:	f9ff800f 	.word	0xf9ff800f

080038d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038de:	4b72      	ldr	r3, [pc, #456]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00e      	beq.n	8003908 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038ea:	4b6f      	ldr	r3, [pc, #444]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 0203 	and.w	r2, r3, #3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d103      	bne.n	8003902 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
       ||
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d142      	bne.n	8003988 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	73fb      	strb	r3, [r7, #15]
 8003906:	e03f      	b.n	8003988 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b03      	cmp	r3, #3
 800390e:	d018      	beq.n	8003942 <RCCEx_PLLSAI2_Config+0x72>
 8003910:	2b03      	cmp	r3, #3
 8003912:	d825      	bhi.n	8003960 <RCCEx_PLLSAI2_Config+0x90>
 8003914:	2b01      	cmp	r3, #1
 8003916:	d002      	beq.n	800391e <RCCEx_PLLSAI2_Config+0x4e>
 8003918:	2b02      	cmp	r3, #2
 800391a:	d009      	beq.n	8003930 <RCCEx_PLLSAI2_Config+0x60>
 800391c:	e020      	b.n	8003960 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800391e:	4b62      	ldr	r3, [pc, #392]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d11d      	bne.n	8003966 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800392e:	e01a      	b.n	8003966 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003930:	4b5d      	ldr	r3, [pc, #372]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003938:	2b00      	cmp	r3, #0
 800393a:	d116      	bne.n	800396a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003940:	e013      	b.n	800396a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003942:	4b59      	ldr	r3, [pc, #356]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10f      	bne.n	800396e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800394e:	4b56      	ldr	r3, [pc, #344]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800395e:	e006      	b.n	800396e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
      break;
 8003964:	e004      	b.n	8003970 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003966:	bf00      	nop
 8003968:	e002      	b.n	8003970 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800396a:	bf00      	nop
 800396c:	e000      	b.n	8003970 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800396e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d108      	bne.n	8003988 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003976:	4b4c      	ldr	r3, [pc, #304]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f023 0203 	bic.w	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4949      	ldr	r1, [pc, #292]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003984:	4313      	orrs	r3, r2
 8003986:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	2b00      	cmp	r3, #0
 800398c:	f040 8086 	bne.w	8003a9c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003990:	4b45      	ldr	r3, [pc, #276]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a44      	ldr	r2, [pc, #272]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800399a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800399c:	f7fd f8b4 	bl	8000b08 <HAL_GetTick>
 80039a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039a2:	e009      	b.n	80039b8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039a4:	f7fd f8b0 	bl	8000b08 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d902      	bls.n	80039b8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	73fb      	strb	r3, [r7, #15]
        break;
 80039b6:	e005      	b.n	80039c4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039b8:	4b3b      	ldr	r3, [pc, #236]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1ef      	bne.n	80039a4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d168      	bne.n	8003a9c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d113      	bne.n	80039f8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039d0:	4b35      	ldr	r3, [pc, #212]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039d2:	695a      	ldr	r2, [r3, #20]
 80039d4:	4b35      	ldr	r3, [pc, #212]	; (8003aac <RCCEx_PLLSAI2_Config+0x1dc>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6892      	ldr	r2, [r2, #8]
 80039dc:	0211      	lsls	r1, r2, #8
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	68d2      	ldr	r2, [r2, #12]
 80039e2:	06d2      	lsls	r2, r2, #27
 80039e4:	4311      	orrs	r1, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6852      	ldr	r2, [r2, #4]
 80039ea:	3a01      	subs	r2, #1
 80039ec:	0112      	lsls	r2, r2, #4
 80039ee:	430a      	orrs	r2, r1
 80039f0:	492d      	ldr	r1, [pc, #180]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	614b      	str	r3, [r1, #20]
 80039f6:	e02d      	b.n	8003a54 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d115      	bne.n	8003a2a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039fe:	4b2a      	ldr	r3, [pc, #168]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	4b2b      	ldr	r3, [pc, #172]	; (8003ab0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6892      	ldr	r2, [r2, #8]
 8003a0a:	0211      	lsls	r1, r2, #8
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6912      	ldr	r2, [r2, #16]
 8003a10:	0852      	lsrs	r2, r2, #1
 8003a12:	3a01      	subs	r2, #1
 8003a14:	0552      	lsls	r2, r2, #21
 8003a16:	4311      	orrs	r1, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6852      	ldr	r2, [r2, #4]
 8003a1c:	3a01      	subs	r2, #1
 8003a1e:	0112      	lsls	r2, r2, #4
 8003a20:	430a      	orrs	r2, r1
 8003a22:	4921      	ldr	r1, [pc, #132]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	614b      	str	r3, [r1, #20]
 8003a28:	e014      	b.n	8003a54 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a2a:	4b1f      	ldr	r3, [pc, #124]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	4b21      	ldr	r3, [pc, #132]	; (8003ab4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6892      	ldr	r2, [r2, #8]
 8003a36:	0211      	lsls	r1, r2, #8
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6952      	ldr	r2, [r2, #20]
 8003a3c:	0852      	lsrs	r2, r2, #1
 8003a3e:	3a01      	subs	r2, #1
 8003a40:	0652      	lsls	r2, r2, #25
 8003a42:	4311      	orrs	r1, r2
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6852      	ldr	r2, [r2, #4]
 8003a48:	3a01      	subs	r2, #1
 8003a4a:	0112      	lsls	r2, r2, #4
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	4916      	ldr	r1, [pc, #88]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a54:	4b14      	ldr	r3, [pc, #80]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a13      	ldr	r2, [pc, #76]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7fd f852 	bl	8000b08 <HAL_GetTick>
 8003a64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a66:	e009      	b.n	8003a7c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a68:	f7fd f84e 	bl	8000b08 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d902      	bls.n	8003a7c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	73fb      	strb	r3, [r7, #15]
          break;
 8003a7a:	e005      	b.n	8003a88 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0ef      	beq.n	8003a68 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a8e:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	4904      	ldr	r1, [pc, #16]	; (8003aa8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	07ff800f 	.word	0x07ff800f
 8003ab0:	ff9f800f 	.word	0xff9f800f
 8003ab4:	f9ff800f 	.word	0xf9ff800f

08003ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ab8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003abc:	b086      	sub	sp, #24
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ac0:	f7fc ffba 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ac4:	f000 f8b2 	bl	8003c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ac8:	f000 f968 	bl	8003d9c <MX_GPIO_Init>
  MX_ADC1_Init();
 8003acc:	f000 f900 	bl	8003cd0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  char status = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	75fb      	strb	r3, [r7, #23]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_Start(&hadc1);
 8003ad4:	484c      	ldr	r0, [pc, #304]	; (8003c08 <main+0x150>)
 8003ad6:	f7fd fb49 	bl	800116c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 8003ada:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ade:	484a      	ldr	r0, [pc, #296]	; (8003c08 <main+0x150>)
 8003ae0:	f7fd fba7 	bl	8001232 <HAL_ADC_PollForConversion>
	  float raw_temp = HAL_ADC_GetValue(&hadc1);
 8003ae4:	4848      	ldr	r0, [pc, #288]	; (8003c08 <main+0x150>)
 8003ae6:	f7fd fc33 	bl	8001350 <HAL_ADC_GetValue>
 8003aea:	ee07 0a90 	vmov	s15, r0
 8003aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af2:	edc7 7a04 	vstr	s15, [r7, #16]



	  status = HAL_GPIO_ReadPin(myButton_GPIO_Port, myButton_Pin); //check button status
 8003af6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003afa:	4844      	ldr	r0, [pc, #272]	; (8003c0c <main+0x154>)
 8003afc:	f7fe fb30 	bl	8002160 <HAL_GPIO_ReadPin>
 8003b00:	4603      	mov	r3, r0
 8003b02:	75fb      	strb	r3, [r7, #23]
	  if (status == 0){ //if button is on, toggle mode
 8003b04:	7dfb      	ldrb	r3, [r7, #23]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d11f      	bne.n	8003b4a <main+0x92>
		  float current = HAL_GPIO_ReadPin(myLed_GPIO_Port, myLed_Pin); //get current LED value
 8003b0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b0e:	4840      	ldr	r0, [pc, #256]	; (8003c10 <main+0x158>)
 8003b10:	f7fe fb26 	bl	8002160 <HAL_GPIO_ReadPin>
 8003b14:	4603      	mov	r3, r0
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1e:	edc7 7a03 	vstr	s15, [r7, #12]
		  if (current == 0){  //if LED is currently off, toggle on
 8003b22:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b2e:	d106      	bne.n	8003b3e <main+0x86>
			  HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_SET);
 8003b30:	2201      	movs	r2, #1
 8003b32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b36:	4836      	ldr	r0, [pc, #216]	; (8003c10 <main+0x158>)
 8003b38:	f7fe fb2a 	bl	8002190 <HAL_GPIO_WritePin>
 8003b3c:	e005      	b.n	8003b4a <main+0x92>
		  }else{ //if LED is currently on, toggle off
			  HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_RESET);
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b44:	4832      	ldr	r0, [pc, #200]	; (8003c10 <main+0x158>)
 8003b46:	f7fe fb23 	bl	8002190 <HAL_GPIO_WritePin>
//		  HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_RESET); //turn off LED
//	  }
//


	  float vref = 3.0f * (*VREFINT)/raw_temp;
 8003b4a:	4b32      	ldr	r3, [pc, #200]	; (8003c14 <main+0x15c>)
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	ee07 3a90 	vmov	s15, r3
 8003b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b56:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003b5a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003b5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b66:	edc7 7a02 	vstr	s15, [r7, #8]
	  float temp = ((100.0f)/(*TS_CAL2 - *TS_CAL1))*((raw_temp * (vref/3.0)) - *TS_CAL1) + 30.0f;
 8003b6a:	4b2b      	ldr	r3, [pc, #172]	; (8003c18 <main+0x160>)
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <main+0x164>)
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b7e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003c20 <main+0x168>
 8003b82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003b86:	ee16 0a90 	vmov	r0, s13
 8003b8a:	f7fc fc9b 	bl	80004c4 <__aeabi_f2d>
 8003b8e:	4604      	mov	r4, r0
 8003b90:	460d      	mov	r5, r1
 8003b92:	6938      	ldr	r0, [r7, #16]
 8003b94:	f7fc fc96 	bl	80004c4 <__aeabi_f2d>
 8003b98:	4680      	mov	r8, r0
 8003b9a:	4689      	mov	r9, r1
 8003b9c:	68b8      	ldr	r0, [r7, #8]
 8003b9e:	f7fc fc91 	bl	80004c4 <__aeabi_f2d>
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	4b1f      	ldr	r3, [pc, #124]	; (8003c24 <main+0x16c>)
 8003ba8:	f7fc fe0e 	bl	80007c8 <__aeabi_ddiv>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4640      	mov	r0, r8
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	f7fc fcde 	bl	8000574 <__aeabi_dmul>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4690      	mov	r8, r2
 8003bbe:	4699      	mov	r9, r3
 8003bc0:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <main+0x164>)
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fc fc6b 	bl	80004a0 <__aeabi_i2d>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4640      	mov	r0, r8
 8003bd0:	4649      	mov	r1, r9
 8003bd2:	f7fc fb17 	bl	8000204 <__aeabi_dsub>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4620      	mov	r0, r4
 8003bdc:	4629      	mov	r1, r5
 8003bde:	f7fc fcc9 	bl	8000574 <__aeabi_dmul>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4610      	mov	r0, r2
 8003be8:	4619      	mov	r1, r3
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <main+0x170>)
 8003bf0:	f7fc fb0a 	bl	8000208 <__adddf3>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	f7fc fecc 	bl	8000998 <__aeabi_d2f>
 8003c00:	4603      	mov	r3, r0
 8003c02:	607b      	str	r3, [r7, #4]
  {
 8003c04:	e766      	b.n	8003ad4 <main+0x1c>
 8003c06:	bf00      	nop
 8003c08:	2000002c 	.word	0x2000002c
 8003c0c:	48000800 	.word	0x48000800
 8003c10:	48000400 	.word	0x48000400
 8003c14:	1fff75aa 	.word	0x1fff75aa
 8003c18:	1fff75ca 	.word	0x1fff75ca
 8003c1c:	1fff75a8 	.word	0x1fff75a8
 8003c20:	42c80000 	.word	0x42c80000
 8003c24:	40080000 	.word	0x40080000
 8003c28:	403e0000 	.word	0x403e0000

08003c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b096      	sub	sp, #88	; 0x58
 8003c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c32:	f107 0314 	add.w	r3, r7, #20
 8003c36:	2244      	movs	r2, #68	; 0x44
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 f9f6 	bl	800402c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c40:	463b      	mov	r3, r7
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	609a      	str	r2, [r3, #8]
 8003c4a:	60da      	str	r2, [r3, #12]
 8003c4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8003c4e:	2000      	movs	r0, #0
 8003c50:	f7fe fad6 	bl	8002200 <HAL_PWREx_ControlVoltageScaling>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <SystemClock_Config+0x32>
  {
    Error_Handler();
 8003c5a:	f000 f8ef 	bl	8003e3c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003c5e:	2310      	movs	r3, #16
 8003c60:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003c62:	2301      	movs	r3, #1
 8003c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003c66:	2300      	movs	r3, #0
 8003c68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003c6a:	2360      	movs	r3, #96	; 0x60
 8003c6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003c72:	2301      	movs	r3, #1
 8003c74:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003c76:	2301      	movs	r3, #1
 8003c78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8003c7a:	233c      	movs	r3, #60	; 0x3c
 8003c7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003c82:	2302      	movs	r3, #2
 8003c84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003c86:	2302      	movs	r3, #2
 8003c88:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c8a:	f107 0314 	add.w	r3, r7, #20
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe fb5a 	bl	8002348 <HAL_RCC_OscConfig>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003c9a:	f000 f8cf 	bl	8003e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c9e:	230f      	movs	r3, #15
 8003ca0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003cb2:	463b      	mov	r3, r7
 8003cb4:	2105      	movs	r1, #5
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fe ff60 	bl	8002b7c <HAL_RCC_ClockConfig>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003cc2:	f000 f8bb 	bl	8003e3c <Error_Handler>
  }
}
 8003cc6:	bf00      	nop
 8003cc8:	3758      	adds	r7, #88	; 0x58
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003cd6:	463b      	mov	r3, r7
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	611a      	str	r2, [r3, #16]
 8003ce4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003ce6:	4b2a      	ldr	r3, [pc, #168]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003ce8:	4a2a      	ldr	r2, [pc, #168]	; (8003d94 <MX_ADC1_Init+0xc4>)
 8003cea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003cec:	4b28      	ldr	r3, [pc, #160]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003cf2:	4b27      	ldr	r3, [pc, #156]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003cf8:	4b25      	ldr	r3, [pc, #148]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003cfe:	4b24      	ldr	r3, [pc, #144]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d04:	4b22      	ldr	r3, [pc, #136]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d06:	2204      	movs	r2, #4
 8003d08:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003d0a:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003d10:	4b1f      	ldr	r3, [pc, #124]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003d16:	4b1e      	ldr	r3, [pc, #120]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003d1c:	4b1c      	ldr	r3, [pc, #112]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d24:	4b1a      	ldr	r3, [pc, #104]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003d2a:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003d30:	4b17      	ldr	r3, [pc, #92]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003d38:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003d3e:	4b14      	ldr	r3, [pc, #80]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8003d46:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d48:	2204      	movs	r2, #4
 8003d4a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d4c:	4810      	ldr	r0, [pc, #64]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d4e:	f7fd f8c1 	bl	8000ed4 <HAL_ADC_Init>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8003d58:	f000 f870 	bl	8003e3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003d5c:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <MX_ADC1_Init+0xc8>)
 8003d5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003d60:	2306      	movs	r3, #6
 8003d62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003d68:	237f      	movs	r3, #127	; 0x7f
 8003d6a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d74:	463b      	mov	r3, r7
 8003d76:	4619      	mov	r1, r3
 8003d78:	4805      	ldr	r0, [pc, #20]	; (8003d90 <MX_ADC1_Init+0xc0>)
 8003d7a:	f7fd faf7 	bl	800136c <HAL_ADC_ConfigChannel>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8003d84:	f000 f85a 	bl	8003e3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003d88:	bf00      	nop
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	2000002c 	.word	0x2000002c
 8003d94:	50040000 	.word	0x50040000
 8003d98:	c7520000 	.word	0xc7520000

08003d9c <MX_GPIO_Init>:
  * @param None
  * @retval None
  */

static void MX_GPIO_Init(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da2:	f107 030c 	add.w	r3, r7, #12
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	605a      	str	r2, [r3, #4]
 8003dac:	609a      	str	r2, [r3, #8]
 8003dae:	60da      	str	r2, [r3, #12]
 8003db0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003db2:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <MX_GPIO_Init+0x94>)
 8003db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db6:	4a1e      	ldr	r2, [pc, #120]	; (8003e30 <MX_GPIO_Init+0x94>)
 8003db8:	f043 0304 	orr.w	r3, r3, #4
 8003dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dbe:	4b1c      	ldr	r3, [pc, #112]	; (8003e30 <MX_GPIO_Init+0x94>)
 8003dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dca:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <MX_GPIO_Init+0x94>)
 8003dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dce:	4a18      	ldr	r2, [pc, #96]	; (8003e30 <MX_GPIO_Init+0x94>)
 8003dd0:	f043 0302 	orr.w	r3, r3, #2
 8003dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dd6:	4b16      	ldr	r3, [pc, #88]	; (8003e30 <MX_GPIO_Init+0x94>)
 8003dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	607b      	str	r3, [r7, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_RESET);
 8003de2:	2200      	movs	r2, #0
 8003de4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003de8:	4812      	ldr	r0, [pc, #72]	; (8003e34 <MX_GPIO_Init+0x98>)
 8003dea:	f7fe f9d1 	bl	8002190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : myButton_Pin */
  GPIO_InitStruct.Pin = myButton_Pin;
 8003dee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 8003dfc:	f107 030c 	add.w	r3, r7, #12
 8003e00:	4619      	mov	r1, r3
 8003e02:	480d      	ldr	r0, [pc, #52]	; (8003e38 <MX_GPIO_Init+0x9c>)
 8003e04:	f7fe f81a 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : myLed_Pin */
  GPIO_InitStruct.Pin = myLed_Pin;
 8003e08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(myLed_GPIO_Port, &GPIO_InitStruct);
 8003e1a:	f107 030c 	add.w	r3, r7, #12
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4804      	ldr	r0, [pc, #16]	; (8003e34 <MX_GPIO_Init+0x98>)
 8003e22:	f7fe f80b 	bl	8001e3c <HAL_GPIO_Init>

}
 8003e26:	bf00      	nop
 8003e28:	3720      	adds	r7, #32
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40021000 	.word	0x40021000
 8003e34:	48000400 	.word	0x48000400
 8003e38:	48000800 	.word	0x48000800

08003e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003e40:	b672      	cpsid	i
}
 8003e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e44:	e7fe      	b.n	8003e44 <Error_Handler+0x8>
	...

08003e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e4e:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <HAL_MspInit+0x44>)
 8003e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e52:	4a0e      	ldr	r2, [pc, #56]	; (8003e8c <HAL_MspInit+0x44>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	6613      	str	r3, [r2, #96]	; 0x60
 8003e5a:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <HAL_MspInit+0x44>)
 8003e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	607b      	str	r3, [r7, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e66:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <HAL_MspInit+0x44>)
 8003e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6a:	4a08      	ldr	r2, [pc, #32]	; (8003e8c <HAL_MspInit+0x44>)
 8003e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e70:	6593      	str	r3, [r2, #88]	; 0x58
 8003e72:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <HAL_MspInit+0x44>)
 8003e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40021000 	.word	0x40021000

08003e90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b0a8      	sub	sp, #160	; 0xa0
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e98:	f107 030c 	add.w	r3, r7, #12
 8003e9c:	2294      	movs	r2, #148	; 0x94
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 f8c3 	bl	800402c <memset>
  if(hadc->Instance==ADC1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a19      	ldr	r2, [pc, #100]	; (8003f10 <HAL_ADC_MspInit+0x80>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d12b      	bne.n	8003f08 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003eb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003eb4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003eb6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003eba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8003ec6:	2318      	movs	r3, #24
 8003ec8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003ed6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003edc:	f107 030c 	add.w	r3, r7, #12
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff f8d1 	bl	8003088 <HAL_RCCEx_PeriphCLKConfig>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8003eec:	f7ff ffa6 	bl	8003e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003ef0:	4b08      	ldr	r3, [pc, #32]	; (8003f14 <HAL_ADC_MspInit+0x84>)
 8003ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef4:	4a07      	ldr	r2, [pc, #28]	; (8003f14 <HAL_ADC_MspInit+0x84>)
 8003ef6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003efa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <HAL_ADC_MspInit+0x84>)
 8003efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f08:	bf00      	nop
 8003f0a:	37a0      	adds	r7, #160	; 0xa0
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	50040000 	.word	0x50040000
 8003f14:	40021000 	.word	0x40021000

08003f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f1c:	e7fe      	b.n	8003f1c <NMI_Handler+0x4>

08003f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f22:	e7fe      	b.n	8003f22 <HardFault_Handler+0x4>

08003f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f28:	e7fe      	b.n	8003f28 <MemManage_Handler+0x4>

08003f2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f2e:	e7fe      	b.n	8003f2e <BusFault_Handler+0x4>

08003f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f34:	e7fe      	b.n	8003f34 <UsageFault_Handler+0x4>

08003f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f36:	b480      	push	{r7}
 8003f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f48:	bf00      	nop
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f52:	b480      	push	{r7}
 8003f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f56:	bf00      	nop
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f64:	f7fc fdbc 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f68:	bf00      	nop
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003f70:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <SystemInit+0x20>)
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f76:	4a05      	ldr	r2, [pc, #20]	; (8003f8c <SystemInit+0x20>)
 8003f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003f80:	bf00      	nop
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	e000ed00 	.word	0xe000ed00

08003f90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f94:	f7ff ffea 	bl	8003f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f98:	480c      	ldr	r0, [pc, #48]	; (8003fcc <LoopForever+0x6>)
  ldr r1, =_edata
 8003f9a:	490d      	ldr	r1, [pc, #52]	; (8003fd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f9c:	4a0d      	ldr	r2, [pc, #52]	; (8003fd4 <LoopForever+0xe>)
  movs r3, #0
 8003f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fa0:	e002      	b.n	8003fa8 <LoopCopyDataInit>

08003fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fa6:	3304      	adds	r3, #4

08003fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fac:	d3f9      	bcc.n	8003fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fae:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003fb0:	4c0a      	ldr	r4, [pc, #40]	; (8003fdc <LoopForever+0x16>)
  movs r3, #0
 8003fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fb4:	e001      	b.n	8003fba <LoopFillZerobss>

08003fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fb8:	3204      	adds	r2, #4

08003fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fbc:	d3fb      	bcc.n	8003fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fbe:	f000 f811 	bl	8003fe4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003fc2:	f7ff fd79 	bl	8003ab8 <main>

08003fc6 <LoopForever>:

LoopForever:
    b LoopForever
 8003fc6:	e7fe      	b.n	8003fc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003fc8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fd0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003fd4:	0800409c 	.word	0x0800409c
  ldr r2, =_sbss
 8003fd8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003fdc:	20000094 	.word	0x20000094

08003fe0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003fe0:	e7fe      	b.n	8003fe0 <ADC1_IRQHandler>
	...

08003fe4 <__libc_init_array>:
 8003fe4:	b570      	push	{r4, r5, r6, lr}
 8003fe6:	4d0d      	ldr	r5, [pc, #52]	; (800401c <__libc_init_array+0x38>)
 8003fe8:	4c0d      	ldr	r4, [pc, #52]	; (8004020 <__libc_init_array+0x3c>)
 8003fea:	1b64      	subs	r4, r4, r5
 8003fec:	10a4      	asrs	r4, r4, #2
 8003fee:	2600      	movs	r6, #0
 8003ff0:	42a6      	cmp	r6, r4
 8003ff2:	d109      	bne.n	8004008 <__libc_init_array+0x24>
 8003ff4:	4d0b      	ldr	r5, [pc, #44]	; (8004024 <__libc_init_array+0x40>)
 8003ff6:	4c0c      	ldr	r4, [pc, #48]	; (8004028 <__libc_init_array+0x44>)
 8003ff8:	f000 f820 	bl	800403c <_init>
 8003ffc:	1b64      	subs	r4, r4, r5
 8003ffe:	10a4      	asrs	r4, r4, #2
 8004000:	2600      	movs	r6, #0
 8004002:	42a6      	cmp	r6, r4
 8004004:	d105      	bne.n	8004012 <__libc_init_array+0x2e>
 8004006:	bd70      	pop	{r4, r5, r6, pc}
 8004008:	f855 3b04 	ldr.w	r3, [r5], #4
 800400c:	4798      	blx	r3
 800400e:	3601      	adds	r6, #1
 8004010:	e7ee      	b.n	8003ff0 <__libc_init_array+0xc>
 8004012:	f855 3b04 	ldr.w	r3, [r5], #4
 8004016:	4798      	blx	r3
 8004018:	3601      	adds	r6, #1
 800401a:	e7f2      	b.n	8004002 <__libc_init_array+0x1e>
 800401c:	08004094 	.word	0x08004094
 8004020:	08004094 	.word	0x08004094
 8004024:	08004094 	.word	0x08004094
 8004028:	08004098 	.word	0x08004098

0800402c <memset>:
 800402c:	4402      	add	r2, r0
 800402e:	4603      	mov	r3, r0
 8004030:	4293      	cmp	r3, r2
 8004032:	d100      	bne.n	8004036 <memset+0xa>
 8004034:	4770      	bx	lr
 8004036:	f803 1b01 	strb.w	r1, [r3], #1
 800403a:	e7f9      	b.n	8004030 <memset+0x4>

0800403c <_init>:
 800403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403e:	bf00      	nop
 8004040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004042:	bc08      	pop	{r3}
 8004044:	469e      	mov	lr, r3
 8004046:	4770      	bx	lr

08004048 <_fini>:
 8004048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404a:	bf00      	nop
 800404c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404e:	bc08      	pop	{r3}
 8004050:	469e      	mov	lr, r3
 8004052:	4770      	bx	lr
